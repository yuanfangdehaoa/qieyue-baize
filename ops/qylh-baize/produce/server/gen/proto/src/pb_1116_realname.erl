%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1116_realname).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1116_realname.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_realname_info_tos() :: #m_realname_info_tos{}.

-type m_realname_info_toc() :: #m_realname_info_toc{}.

-type m_realname_register_tos() :: #m_realname_register_tos{}.

-type m_realname_register_toc() :: #m_realname_register_toc{}.

-type m_realname_cancel_tos() :: #m_realname_cancel_tos{}.

-type m_realname_cancel_toc() :: #m_realname_cancel_toc{}.

-export_type(['m_realname_info_tos'/0, 'm_realname_info_toc'/0, 'm_realname_register_tos'/0, 'm_realname_register_toc'/0, 'm_realname_cancel_tos'/0, 'm_realname_cancel_toc'/0]).

-spec encode_msg(#m_realname_info_tos{} | #m_realname_info_toc{} | #m_realname_register_tos{} | #m_realname_register_toc{} | #m_realname_cancel_tos{} | #m_realname_cancel_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_realname_info_tos{} | #m_realname_info_toc{} | #m_realname_register_tos{} | #m_realname_register_toc{} | #m_realname_cancel_tos{} | #m_realname_cancel_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_realname_info_tos{} | #m_realname_info_toc{} | #m_realname_register_tos{} | #m_realname_register_toc{} | #m_realname_cancel_tos{} | #m_realname_cancel_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_realname_info_tos ->
	  encode_msg_m_realname_info_tos(id(Msg, TrUserData),
					 TrUserData);
      m_realname_info_toc ->
	  encode_msg_m_realname_info_toc(id(Msg, TrUserData),
					 TrUserData);
      m_realname_register_tos ->
	  encode_msg_m_realname_register_tos(id(Msg, TrUserData),
					     TrUserData);
      m_realname_register_toc ->
	  encode_msg_m_realname_register_toc(id(Msg, TrUserData),
					     TrUserData);
      m_realname_cancel_tos ->
	  encode_msg_m_realname_cancel_tos(id(Msg, TrUserData),
					   TrUserData);
      m_realname_cancel_toc ->
	  encode_msg_m_realname_cancel_toc(id(Msg, TrUserData),
					   TrUserData)
    end.


encode_msg_m_realname_info_tos(Msg, TrUserData) ->
    encode_msg_m_realname_info_tos(Msg, <<>>, TrUserData).


encode_msg_m_realname_info_tos(#m_realname_info_tos{status
							= F1,
						    is_registerd = F2, age = F3,
						    is_adult = F4, id_card = F5,
						    real_name = F6},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
		end
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
	   end
    end.

encode_msg_m_realname_info_toc(Msg, TrUserData) ->
    encode_msg_m_realname_info_toc(Msg, <<>>, TrUserData).


encode_msg_m_realname_info_toc(#m_realname_info_toc{online_notice
							= F1,
						    limit_charge = F2,
						    reduce_gain = F3,
						    is_registerd = F4, age = F5,
						    is_adult = F6,
						    online_time = F7,
						    charge = F8,
						    online_time2 = F9},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
	 end,
    begin
      TrF9 = id(F9, TrUserData),
      e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
    end.

encode_msg_m_realname_register_tos(Msg, TrUserData) ->
    encode_msg_m_realname_register_tos(Msg, <<>>,
				       TrUserData).


encode_msg_m_realname_register_tos(#m_realname_register_tos{game_id
								= F1,
							    channel_id = F2,
							    game_channel_id =
								F3,
							    user_id = F4,
							    area_code = F5,
							    id_card = F6,
							    real_name = F7},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
    end.

encode_msg_m_realname_register_toc(Msg, TrUserData) ->
    encode_msg_m_realname_register_toc(Msg, <<>>,
				       TrUserData).


encode_msg_m_realname_register_toc(#m_realname_register_toc{succ
								= F1,
							    msg = F2, age = F3,
							    is_adult = F4},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_m_realname_cancel_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_realname_cancel_toc(_Msg, _TrUserData) ->
    <<>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_realname_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_realname_info_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_realname_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_realname_info_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_realname_register_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_realname_register_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_realname_register_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_realname_register_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_realname_cancel_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_realname_cancel_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_realname_cancel_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_realname_cancel_toc(Bin, TrUserData),
       TrUserData).



decode_msg_m_realname_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_realname_info_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_realname_info_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_m_realname_info_tos_status(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_m_realname_info_tos(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_m_realname_info_tos_is_registerd(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
dfp_read_field_def_m_realname_info_tos(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_m_realname_info_tos_age(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_m_realname_info_tos(<<32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_m_realname_info_tos_is_adult(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData);
dfp_read_field_def_m_realname_info_tos(<<42,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_m_realname_info_tos_id_card(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData);
dfp_read_field_def_m_realname_info_tos(<<50,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    d_field_m_realname_info_tos_real_name(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
dfp_read_field_def_m_realname_info_tos(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #m_realname_info_tos{status = F@_1, is_registerd = F@_2,
			 age = F@_3, is_adult = F@_4, id_card = F@_5,
			 real_name = F@_6};
dfp_read_field_def_m_realname_info_tos(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData) ->
    dg_read_field_def_m_realname_info_tos(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

dg_read_field_def_m_realname_info_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_realname_info_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
dg_read_field_def_m_realname_info_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_realname_info_tos_status(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      16 ->
	  d_field_m_realname_info_tos_is_registerd(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, TrUserData);
      24 ->
	  d_field_m_realname_info_tos_age(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_m_realname_info_tos_is_adult(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
      42 ->
	  d_field_m_realname_info_tos_id_card(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
      50 ->
	  d_field_m_realname_info_tos_real_name(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_realname_info_tos(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6,
						TrUserData);
	    1 ->
		skip_64_m_realname_info_tos(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_m_realname_info_tos(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  TrUserData);
	    3 ->
		skip_group_m_realname_info_tos(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
	    5 ->
		skip_32_m_realname_info_tos(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_m_realname_info_tos(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #m_realname_info_tos{status = F@_1, is_registerd = F@_2,
			 age = F@_3, is_adult = F@_4, id_card = F@_5,
			 real_name = F@_6}.

d_field_m_realname_info_tos_status(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_m_realname_info_tos_status(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_m_realname_info_tos_status(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_info_tos(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData).

d_field_m_realname_info_tos_is_registerd(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_tos_is_registerd(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, TrUserData);
d_field_m_realname_info_tos_is_registerd(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_tos(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, F@_4, F@_5,
					   F@_6, TrUserData).

d_field_m_realname_info_tos_age(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_m_realname_info_tos_age(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_m_realname_info_tos_age(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_info_tos(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, F@_4, F@_5,
					   F@_6, TrUserData).

d_field_m_realname_info_tos_is_adult(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 57 ->
    d_field_m_realname_info_tos_is_adult(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
d_field_m_realname_info_tos_is_adult(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_tos(RestF, 0, 0,
					   F@_1, F@_2, F@_3, NewFValue, F@_5,
					   F@_6, TrUserData).

d_field_m_realname_info_tos_id_card(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData)
    when N < 57 ->
    d_field_m_realname_info_tos_id_card(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, TrUserData);
d_field_m_realname_info_tos_id_card(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_info_tos(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, NewFValue,
					   F@_6, TrUserData).

d_field_m_realname_info_tos_real_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_tos_real_name(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
d_field_m_realname_info_tos_real_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_info_tos(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   NewFValue, TrUserData).

skip_varint_m_realname_info_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    skip_varint_m_realname_info_tos(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_m_realname_info_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    dfp_read_field_def_m_realname_info_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_length_delimited_m_realname_info_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_realname_info_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_m_realname_info_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_realname_info_tos(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_group_m_realname_info_tos(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_realname_info_tos(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_32_m_realname_info_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    dfp_read_field_def_m_realname_info_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

skip_64_m_realname_info_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			    TrUserData) ->
    dfp_read_field_def_m_realname_info_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData).

decode_msg_m_realname_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_realname_info_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_realname_info_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_online_notice(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9,
					      TrUserData);
dfp_read_field_def_m_realname_info_toc(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_limit_charge(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_reduce_gain(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_is_registerd(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<40,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_age(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<48,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_is_adult(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<56,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_online_time(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_charge(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<72,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    d_field_m_realname_info_toc_online_time2(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_m_realname_info_toc(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, _) ->
    #m_realname_info_toc{online_notice = F@_1,
			 limit_charge = F@_2, reduce_gain = F@_3,
			 is_registerd = F@_4, age = F@_5, is_adult = F@_6,
			 online_time = F@_7, charge = F@_8,
			 online_time2 = F@_9};
dfp_read_field_def_m_realname_info_toc(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       F@_8, F@_9, TrUserData) ->
    dg_read_field_def_m_realname_info_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, F@_9, TrUserData).

dg_read_field_def_m_realname_info_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_realname_info_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, F@_9,
					  TrUserData);
dg_read_field_def_m_realname_info_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_realname_info_toc_online_notice(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, TrUserData);
      16 ->
	  d_field_m_realname_info_toc_limit_charge(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   TrUserData);
      24 ->
	  d_field_m_realname_info_toc_reduce_gain(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9,
						  TrUserData);
      32 ->
	  d_field_m_realname_info_toc_is_registerd(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   TrUserData);
      40 ->
	  d_field_m_realname_info_toc_age(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, TrUserData);
      48 ->
	  d_field_m_realname_info_toc_is_adult(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, TrUserData);
      56 ->
	  d_field_m_realname_info_toc_online_time(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9,
						  TrUserData);
      64 ->
	  d_field_m_realname_info_toc_charge(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, TrUserData);
      72 ->
	  d_field_m_realname_info_toc_online_time2(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_realname_info_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						F@_8, F@_9, TrUserData);
	    1 ->
		skip_64_m_realname_info_toc(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					    F@_9, TrUserData);
	    2 ->
		skip_length_delimited_m_realname_info_toc(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, F@_8, F@_9,
							  TrUserData);
	    3 ->
		skip_group_m_realname_info_toc(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, F@_9, TrUserData);
	    5 ->
		skip_32_m_realname_info_toc(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					    F@_9, TrUserData)
	  end
    end;
dg_read_field_def_m_realname_info_toc(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, _) ->
    #m_realname_info_toc{online_notice = F@_1,
			 limit_charge = F@_2, reduce_gain = F@_3,
			 is_registerd = F@_4, age = F@_5, is_adult = F@_6,
			 online_time = F@_7, charge = F@_8,
			 online_time2 = F@_9}.

d_field_m_realname_info_toc_online_notice(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_online_notice(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, TrUserData);
d_field_m_realname_info_toc_online_notice(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_m_realname_info_toc_limit_charge(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_limit_charge(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     TrUserData);
d_field_m_realname_info_toc_limit_charge(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_m_realname_info_toc_reduce_gain(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_reduce_gain(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    TrUserData);
d_field_m_realname_info_toc_reduce_gain(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
					F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_m_realname_info_toc_is_registerd(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_is_registerd(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     TrUserData);
d_field_m_realname_info_toc_is_registerd(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, F@_3, NewFValue, F@_5,
					   F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_m_realname_info_toc_age(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_age(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_m_realname_info_toc_age(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, NewFValue,
					   F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_m_realname_info_toc_is_adult(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_is_adult(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, F@_9,
					 TrUserData);
d_field_m_realname_info_toc_is_adult(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				     F@_7, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   NewFValue, F@_7, F@_8, F@_9,
					   TrUserData).

d_field_m_realname_info_toc_online_time(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_online_time(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    TrUserData);
d_field_m_realname_info_toc_online_time(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, _, F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   NewFValue, F@_8, F@_9, TrUserData).

d_field_m_realname_info_toc_charge(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_charge(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
d_field_m_realname_info_toc_charge(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, _, F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, NewFValue, F@_9, TrUserData).

d_field_m_realname_info_toc_online_time2(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_m_realname_info_toc_online_time2(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     TrUserData);
d_field_m_realname_info_toc_online_time2(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_info_toc(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, NewFValue, TrUserData).

skip_varint_m_realname_info_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData) ->
    skip_varint_m_realname_info_toc(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, TrUserData);
skip_varint_m_realname_info_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_m_realname_info_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, TrUserData).

skip_length_delimited_m_realname_info_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_realname_info_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, TrUserData);
skip_length_delimited_m_realname_info_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_realname_info_toc(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, TrUserData).

skip_group_m_realname_info_toc(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_realname_info_toc(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, TrUserData).

skip_32_m_realname_info_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData) ->
    dfp_read_field_def_m_realname_info_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, TrUserData).

skip_64_m_realname_info_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData) ->
    dfp_read_field_def_m_realname_info_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, TrUserData).

decode_msg_m_realname_register_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_realname_register_tos(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_realname_register_tos(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_game_id(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData);
dfp_read_field_def_m_realname_register_tos(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_channel_id(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData);
dfp_read_field_def_m_realname_register_tos(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_game_channel_id(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, F@_6, F@_7,
						    TrUserData);
dfp_read_field_def_m_realname_register_tos(<<34,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_user_id(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData);
dfp_read_field_def_m_realname_register_tos(<<42,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_area_code(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData);
dfp_read_field_def_m_realname_register_tos(<<50,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_id_card(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, TrUserData);
dfp_read_field_def_m_realname_register_tos(<<58,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    d_field_m_realname_register_tos_real_name(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData);
dfp_read_field_def_m_realname_register_tos(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, _) ->
    #m_realname_register_tos{game_id = F@_1,
			     channel_id = F@_2, game_channel_id = F@_3,
			     user_id = F@_4, area_code = F@_5, id_card = F@_6,
			     real_name = F@_7};
dfp_read_field_def_m_realname_register_tos(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    dg_read_field_def_m_realname_register_tos(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, TrUserData).

dg_read_field_def_m_realname_register_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_realname_register_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
dg_read_field_def_m_realname_register_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_realname_register_tos_game_id(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, TrUserData);
      18 ->
	  d_field_m_realname_register_tos_channel_id(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7,
						     TrUserData);
      26 ->
	  d_field_m_realname_register_tos_game_channel_id(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5, F@_6,
							  F@_7, TrUserData);
      34 ->
	  d_field_m_realname_register_tos_user_id(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, TrUserData);
      42 ->
	  d_field_m_realname_register_tos_area_code(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7,
						    TrUserData);
      50 ->
	  d_field_m_realname_register_tos_id_card(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, TrUserData);
      58 ->
	  d_field_m_realname_register_tos_real_name(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7,
						    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_realname_register_tos(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_m_realname_register_tos(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						TrUserData);
	    2 ->
		skip_length_delimited_m_realname_register_tos(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      F@_6, F@_7,
							      TrUserData);
	    3 ->
		skip_group_m_realname_register_tos(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_m_realname_register_tos(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						TrUserData)
	  end
    end;
dg_read_field_def_m_realname_register_tos(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, _) ->
    #m_realname_register_tos{game_id = F@_1,
			     channel_id = F@_2, game_channel_id = F@_3,
			     user_id = F@_4, area_code = F@_5, id_card = F@_6,
			     real_name = F@_7}.

d_field_m_realname_register_tos_game_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_game_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_m_realname_register_tos_game_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, F@_6, F@_7, TrUserData).

d_field_m_realname_register_tos_channel_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_channel_id(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7,
					       TrUserData);
d_field_m_realname_register_tos_channel_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       F@_5, F@_6, F@_7, TrUserData).

d_field_m_realname_register_tos_game_channel_id(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_game_channel_id(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, TrUserData);
d_field_m_realname_register_tos_game_channel_id(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, _, F@_4,
						F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       F@_5, F@_6, F@_7, TrUserData).

d_field_m_realname_register_tos_user_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_user_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_m_realname_register_tos_user_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
					F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, F@_6, F@_7, TrUserData).

d_field_m_realname_register_tos_area_code(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_area_code(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
d_field_m_realname_register_tos_area_code(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					  F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       NewFValue, F@_6, F@_7,
					       TrUserData).

d_field_m_realname_register_tos_id_card(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_id_card(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_m_realname_register_tos_id_card(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
					F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       NewFValue, F@_7, TrUserData).

d_field_m_realname_register_tos_real_name(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_tos_real_name(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7,
					      TrUserData);
d_field_m_realname_register_tos_real_name(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_tos(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, NewFValue, TrUserData).

skip_varint_m_realname_register_tos(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, TrUserData) ->
    skip_varint_m_realname_register_tos(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
skip_varint_m_realname_register_tos(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, TrUserData) ->
    dfp_read_field_def_m_realname_register_tos(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData).

skip_length_delimited_m_realname_register_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_realname_register_tos(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
skip_length_delimited_m_realname_register_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_realname_register_tos(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData).

skip_group_m_realname_register_tos(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_realname_register_tos(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData).

skip_32_m_realname_register_tos(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData) ->
    dfp_read_field_def_m_realname_register_tos(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData).

skip_64_m_realname_register_tos(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData) ->
    dfp_read_field_def_m_realname_register_tos(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData).

decode_msg_m_realname_register_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_realname_register_toc(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_realname_register_toc(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_m_realname_register_toc_succ(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_realname_register_toc(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_m_realname_register_toc_msg(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_realname_register_toc(<<24,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_m_realname_register_toc_age(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_realname_register_toc(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    d_field_m_realname_register_toc_is_adult(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
dfp_read_field_def_m_realname_register_toc(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, _) ->
    #m_realname_register_toc{succ = F@_1, msg = F@_2,
			     age = F@_3, is_adult = F@_4};
dfp_read_field_def_m_realname_register_toc(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    dg_read_field_def_m_realname_register_toc(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

dg_read_field_def_m_realname_register_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_realname_register_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, TrUserData);
dg_read_field_def_m_realname_register_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_realname_register_toc_succ(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      18 ->
	  d_field_m_realname_register_toc_msg(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_m_realname_register_toc_age(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_m_realname_register_toc_is_adult(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_realname_register_toc(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    1 ->
		skip_64_m_realname_register_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_m_realname_register_toc(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4,
							      TrUserData);
	    3 ->
		skip_group_m_realname_register_toc(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
	    5 ->
		skip_32_m_realname_register_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_m_realname_register_toc(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, F@_4, _) ->
    #m_realname_register_toc{succ = F@_1, msg = F@_2,
			     age = F@_3, is_adult = F@_4}.

d_field_m_realname_register_toc_succ(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_toc_succ(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_m_realname_register_toc_succ(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_register_toc(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       TrUserData).

d_field_m_realname_register_toc_msg(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_toc_msg(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_m_realname_register_toc_msg(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_realname_register_toc(RestF, 0, 0,
					       F@_1, NewFValue, F@_3, F@_4,
					       TrUserData).

d_field_m_realname_register_toc_age(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_realname_register_toc_age(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_m_realname_register_toc_age(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_realname_register_toc(RestF, 0, 0,
					       F@_1, F@_2, NewFValue, F@_4,
					       TrUserData).

d_field_m_realname_register_toc_is_adult(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    d_field_m_realname_register_toc_is_adult(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
d_field_m_realname_register_toc_is_adult(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _,
					 TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_realname_register_toc(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       TrUserData).

skip_varint_m_realname_register_toc(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    skip_varint_m_realname_register_toc(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
skip_varint_m_realname_register_toc(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    dfp_read_field_def_m_realname_register_toc(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_length_delimited_m_realname_register_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData)
    when N < 57 ->
    skip_length_delimited_m_realname_register_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_m_realname_register_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_realname_register_toc(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_group_m_realname_register_toc(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_realname_register_toc(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_32_m_realname_register_toc(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_realname_register_toc(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

skip_64_m_realname_register_toc(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_realname_register_toc(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4,
					       TrUserData).

decode_msg_m_realname_cancel_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_tos(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_m_realname_cancel_tos(<<>>, 0, 0,
					 _) ->
    #m_realname_cancel_tos{};
dfp_read_field_def_m_realname_cancel_tos(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_m_realname_cancel_tos(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_m_realname_cancel_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_realname_cancel_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_m_realname_cancel_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_realname_cancel_tos(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_m_realname_cancel_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_realname_cancel_tos(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_m_realname_cancel_tos(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_m_realname_cancel_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_realname_cancel_tos(<<>>, 0, 0,
					_) ->
    #m_realname_cancel_tos{}.

skip_varint_m_realname_cancel_tos(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_m_realname_cancel_tos(Rest, Z1, Z2,
				      TrUserData);
skip_varint_m_realname_cancel_tos(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_tos(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_m_realname_cancel_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_realname_cancel_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_m_realname_cancel_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_realname_cancel_tos(Rest2, 0, 0,
					     TrUserData).

skip_group_m_realname_cancel_tos(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_realname_cancel_tos(Rest, 0, Z2,
					     TrUserData).

skip_32_m_realname_cancel_tos(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_tos(Rest, Z1, Z2,
					     TrUserData).

skip_64_m_realname_cancel_tos(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_tos(Rest, Z1, Z2,
					     TrUserData).

decode_msg_m_realname_cancel_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_toc(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_m_realname_cancel_toc(<<>>, 0, 0,
					 _) ->
    #m_realname_cancel_toc{};
dfp_read_field_def_m_realname_cancel_toc(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_m_realname_cancel_toc(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_m_realname_cancel_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_realname_cancel_toc(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_m_realname_cancel_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_realname_cancel_toc(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_m_realname_cancel_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_realname_cancel_toc(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_m_realname_cancel_toc(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_m_realname_cancel_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_realname_cancel_toc(<<>>, 0, 0,
					_) ->
    #m_realname_cancel_toc{}.

skip_varint_m_realname_cancel_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_m_realname_cancel_toc(Rest, Z1, Z2,
				      TrUserData);
skip_varint_m_realname_cancel_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_toc(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_m_realname_cancel_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_realname_cancel_toc(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_m_realname_cancel_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_realname_cancel_toc(Rest2, 0, 0,
					     TrUserData).

skip_group_m_realname_cancel_toc(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_realname_cancel_toc(Rest, 0, Z2,
					     TrUserData).

skip_32_m_realname_cancel_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_toc(Rest, Z1, Z2,
					     TrUserData).

skip_64_m_realname_cancel_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_realname_cancel_toc(Rest, Z1, Z2,
					     TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_realname_info_tos ->
	  merge_msg_m_realname_info_tos(Prev, New, TrUserData);
      m_realname_info_toc ->
	  merge_msg_m_realname_info_toc(Prev, New, TrUserData);
      m_realname_register_tos ->
	  merge_msg_m_realname_register_tos(Prev, New,
					    TrUserData);
      m_realname_register_toc ->
	  merge_msg_m_realname_register_toc(Prev, New,
					    TrUserData);
      m_realname_cancel_tos ->
	  merge_msg_m_realname_cancel_tos(Prev, New, TrUserData);
      m_realname_cancel_toc ->
	  merge_msg_m_realname_cancel_toc(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_realname_info_tos/3}).
merge_msg_m_realname_info_tos(#m_realname_info_tos{is_registerd
						       = PFis_registerd,
						   age = PFage,
						   is_adult = PFis_adult,
						   id_card = PFid_card,
						   real_name = PFreal_name},
			      #m_realname_info_tos{status = NFstatus,
						   is_registerd =
						       NFis_registerd,
						   age = NFage,
						   is_adult = NFis_adult,
						   id_card = NFid_card,
						   real_name = NFreal_name},
			      _) ->
    #m_realname_info_tos{status = NFstatus,
			 is_registerd =
			     if NFis_registerd =:= undefined -> PFis_registerd;
				true -> NFis_registerd
			     end,
			 age =
			     if NFage =:= undefined -> PFage;
				true -> NFage
			     end,
			 is_adult =
			     if NFis_adult =:= undefined -> PFis_adult;
				true -> NFis_adult
			     end,
			 id_card =
			     if NFid_card =:= undefined -> PFid_card;
				true -> NFid_card
			     end,
			 real_name =
			     if NFreal_name =:= undefined -> PFreal_name;
				true -> NFreal_name
			     end}.

-compile({nowarn_unused_function,merge_msg_m_realname_info_toc/3}).
merge_msg_m_realname_info_toc(#m_realname_info_toc{},
			      #m_realname_info_toc{online_notice =
						       NFonline_notice,
						   limit_charge =
						       NFlimit_charge,
						   reduce_gain = NFreduce_gain,
						   is_registerd =
						       NFis_registerd,
						   age = NFage,
						   is_adult = NFis_adult,
						   online_time = NFonline_time,
						   charge = NFcharge,
						   online_time2 =
						       NFonline_time2},
			      _) ->
    #m_realname_info_toc{online_notice = NFonline_notice,
			 limit_charge = NFlimit_charge,
			 reduce_gain = NFreduce_gain,
			 is_registerd = NFis_registerd, age = NFage,
			 is_adult = NFis_adult, online_time = NFonline_time,
			 charge = NFcharge, online_time2 = NFonline_time2}.

-compile({nowarn_unused_function,merge_msg_m_realname_register_tos/3}).
merge_msg_m_realname_register_tos(#m_realname_register_tos{},
				  #m_realname_register_tos{game_id = NFgame_id,
							   channel_id =
							       NFchannel_id,
							   game_channel_id =
							       NFgame_channel_id,
							   user_id = NFuser_id,
							   area_code =
							       NFarea_code,
							   id_card = NFid_card,
							   real_name =
							       NFreal_name},
				  _) ->
    #m_realname_register_tos{game_id = NFgame_id,
			     channel_id = NFchannel_id,
			     game_channel_id = NFgame_channel_id,
			     user_id = NFuser_id, area_code = NFarea_code,
			     id_card = NFid_card, real_name = NFreal_name}.

-compile({nowarn_unused_function,merge_msg_m_realname_register_toc/3}).
merge_msg_m_realname_register_toc(#m_realname_register_toc{msg
							       = PFmsg},
				  #m_realname_register_toc{succ = NFsucc,
							   msg = NFmsg,
							   age = NFage,
							   is_adult =
							       NFis_adult},
				  _) ->
    #m_realname_register_toc{succ = NFsucc,
			     msg =
				 if NFmsg =:= undefined -> PFmsg;
				    true -> NFmsg
				 end,
			     age = NFage, is_adult = NFis_adult}.

-compile({nowarn_unused_function,merge_msg_m_realname_cancel_tos/3}).
merge_msg_m_realname_cancel_tos(_Prev, New,
				_TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_realname_cancel_toc/3}).
merge_msg_m_realname_cancel_toc(_Prev, New,
				_TrUserData) ->
    New.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_realname_info_tos ->
	  v_msg_m_realname_info_tos(Msg, [MsgName], TrUserData);
      m_realname_info_toc ->
	  v_msg_m_realname_info_toc(Msg, [MsgName], TrUserData);
      m_realname_register_tos ->
	  v_msg_m_realname_register_tos(Msg, [MsgName],
					TrUserData);
      m_realname_register_toc ->
	  v_msg_m_realname_register_toc(Msg, [MsgName],
					TrUserData);
      m_realname_cancel_tos ->
	  v_msg_m_realname_cancel_tos(Msg, [MsgName], TrUserData);
      m_realname_cancel_toc ->
	  v_msg_m_realname_cancel_toc(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_realname_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_realname_info_tos/3}).
v_msg_m_realname_info_tos(#m_realname_info_tos{status =
						   F1,
					       is_registerd = F2, age = F3,
					       is_adult = F4, id_card = F5,
					       real_name = F6},
			  Path, TrUserData) ->
    v_type_int32(F1, [status | Path], TrUserData),
    if F2 == undefined -> ok;
       true ->
	   v_type_bool(F2, [is_registerd | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [age | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [is_adult | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [id_card | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_type_string(F6, [real_name | Path], TrUserData)
    end,
    ok;
v_msg_m_realname_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_realname_info_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_realname_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_realname_info_toc/3}).
v_msg_m_realname_info_toc(#m_realname_info_toc{online_notice
						   = F1,
					       limit_charge = F2,
					       reduce_gain = F3,
					       is_registerd = F4, age = F5,
					       is_adult = F6, online_time = F7,
					       charge = F8, online_time2 = F9},
			  Path, TrUserData) ->
    v_type_bool(F1, [online_notice | Path], TrUserData),
    v_type_bool(F2, [limit_charge | Path], TrUserData),
    v_type_bool(F3, [reduce_gain | Path], TrUserData),
    v_type_bool(F4, [is_registerd | Path], TrUserData),
    v_type_int32(F5, [age | Path], TrUserData),
    v_type_bool(F6, [is_adult | Path], TrUserData),
    v_type_int32(F7, [online_time | Path], TrUserData),
    v_type_int32(F8, [charge | Path], TrUserData),
    v_type_int32(F9, [online_time2 | Path], TrUserData),
    ok;
v_msg_m_realname_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_realname_info_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_realname_register_tos/3}).
-dialyzer({nowarn_function,v_msg_m_realname_register_tos/3}).
v_msg_m_realname_register_tos(#m_realname_register_tos{game_id
							   = F1,
						       channel_id = F2,
						       game_channel_id = F3,
						       user_id = F4,
						       area_code = F5,
						       id_card = F6,
						       real_name = F7},
			      Path, TrUserData) ->
    v_type_string(F1, [game_id | Path], TrUserData),
    v_type_string(F2, [channel_id | Path], TrUserData),
    v_type_string(F3, [game_channel_id | Path], TrUserData),
    v_type_string(F4, [user_id | Path], TrUserData),
    v_type_string(F5, [area_code | Path], TrUserData),
    v_type_string(F6, [id_card | Path], TrUserData),
    v_type_string(F7, [real_name | Path], TrUserData),
    ok;
v_msg_m_realname_register_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_realname_register_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_realname_register_toc/3}).
-dialyzer({nowarn_function,v_msg_m_realname_register_toc/3}).
v_msg_m_realname_register_toc(#m_realname_register_toc{succ
							   = F1,
						       msg = F2, age = F3,
						       is_adult = F4},
			      Path, TrUserData) ->
    v_type_bool(F1, [succ | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [msg | Path], TrUserData)
    end,
    v_type_int32(F3, [age | Path], TrUserData),
    v_type_bool(F4, [is_adult | Path], TrUserData),
    ok;
v_msg_m_realname_register_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_realname_register_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_realname_cancel_tos/3}).
-dialyzer({nowarn_function,v_msg_m_realname_cancel_tos/3}).
v_msg_m_realname_cancel_tos(#m_realname_cancel_tos{},
			    _Path, _) ->
    ok;
v_msg_m_realname_cancel_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_realname_cancel_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_realname_cancel_toc/3}).
-dialyzer({nowarn_function,v_msg_m_realname_cancel_toc/3}).
v_msg_m_realname_cancel_toc(#m_realname_cancel_toc{},
			    _Path, _) ->
    ok;
v_msg_m_realname_cancel_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_realname_cancel_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, m_realname_info_tos},
      [#field{name = status, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = is_registerd, fnum = 2, rnum = 3,
	      type = bool, occurrence = optional, opts = []},
       #field{name = age, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = is_adult, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []},
       #field{name = id_card, fnum = 5, rnum = 6,
	      type = string, occurrence = optional, opts = []},
       #field{name = real_name, fnum = 6, rnum = 7,
	      type = string, occurrence = optional, opts = []}]},
     {{msg, m_realname_info_toc},
      [#field{name = online_notice, fnum = 1, rnum = 2,
	      type = bool, occurrence = required, opts = []},
       #field{name = limit_charge, fnum = 2, rnum = 3,
	      type = bool, occurrence = required, opts = []},
       #field{name = reduce_gain, fnum = 3, rnum = 4,
	      type = bool, occurrence = required, opts = []},
       #field{name = is_registerd, fnum = 4, rnum = 5,
	      type = bool, occurrence = required, opts = []},
       #field{name = age, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = is_adult, fnum = 6, rnum = 7, type = bool,
	      occurrence = required, opts = []},
       #field{name = online_time, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []},
       #field{name = charge, fnum = 8, rnum = 9, type = int32,
	      occurrence = required, opts = []},
       #field{name = online_time2, fnum = 9, rnum = 10,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_realname_register_tos},
      [#field{name = game_id, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = channel_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = game_channel_id, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = user_id, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = area_code, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []},
       #field{name = id_card, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []},
       #field{name = real_name, fnum = 7, rnum = 8,
	      type = string, occurrence = required, opts = []}]},
     {{msg, m_realname_register_toc},
      [#field{name = succ, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = msg, fnum = 2, rnum = 3, type = string,
	      occurrence = optional, opts = []},
       #field{name = age, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = is_adult, fnum = 4, rnum = 5, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, m_realname_cancel_tos}, []},
     {{msg, m_realname_cancel_toc}, []}].


get_msg_names() ->
    [m_realname_info_tos, m_realname_info_toc,
     m_realname_register_tos, m_realname_register_toc,
     m_realname_cancel_tos, m_realname_cancel_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_realname_info_tos, m_realname_info_toc,
     m_realname_register_tos, m_realname_register_toc,
     m_realname_cancel_tos, m_realname_cancel_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_realname_info_tos) ->
    [#field{name = status, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = is_registerd, fnum = 2, rnum = 3,
	    type = bool, occurrence = optional, opts = []},
     #field{name = age, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = is_adult, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []},
     #field{name = id_card, fnum = 5, rnum = 6,
	    type = string, occurrence = optional, opts = []},
     #field{name = real_name, fnum = 6, rnum = 7,
	    type = string, occurrence = optional, opts = []}];
find_msg_def(m_realname_info_toc) ->
    [#field{name = online_notice, fnum = 1, rnum = 2,
	    type = bool, occurrence = required, opts = []},
     #field{name = limit_charge, fnum = 2, rnum = 3,
	    type = bool, occurrence = required, opts = []},
     #field{name = reduce_gain, fnum = 3, rnum = 4,
	    type = bool, occurrence = required, opts = []},
     #field{name = is_registerd, fnum = 4, rnum = 5,
	    type = bool, occurrence = required, opts = []},
     #field{name = age, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = is_adult, fnum = 6, rnum = 7, type = bool,
	    occurrence = required, opts = []},
     #field{name = online_time, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []},
     #field{name = charge, fnum = 8, rnum = 9, type = int32,
	    occurrence = required, opts = []},
     #field{name = online_time2, fnum = 9, rnum = 10,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_realname_register_tos) ->
    [#field{name = game_id, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = channel_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = game_channel_id, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = user_id, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = area_code, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []},
     #field{name = id_card, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []},
     #field{name = real_name, fnum = 7, rnum = 8,
	    type = string, occurrence = required, opts = []}];
find_msg_def(m_realname_register_toc) ->
    [#field{name = succ, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = msg, fnum = 2, rnum = 3, type = string,
	    occurrence = optional, opts = []},
     #field{name = age, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = is_adult, fnum = 4, rnum = 5, type = bool,
	    occurrence = required, opts = []}];
find_msg_def(m_realname_cancel_tos) -> [];
find_msg_def(m_realname_cancel_toc) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
