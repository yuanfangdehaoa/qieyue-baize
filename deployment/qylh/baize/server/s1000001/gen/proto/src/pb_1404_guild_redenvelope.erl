%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1404_guild_redenvelope).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1404_guild_redenvelope.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_guild_redenvelope_list_tos() :: #m_guild_redenvelope_list_tos{}.

-type m_guild_redenvelope_list_toc() :: #m_guild_redenvelope_list_toc{}.

-type m_guild_redenvelope_send_tos() :: #m_guild_redenvelope_send_tos{}.

-type m_guild_redenvelope_send_toc() :: #m_guild_redenvelope_send_toc{}.

-type m_guild_redenvelope_snatch_tos() :: #m_guild_redenvelope_snatch_tos{}.

-type m_guild_redenvelope_snatch_toc() :: #m_guild_redenvelope_snatch_toc{}.

-type m_guild_redenvelope_record_tos() :: #m_guild_redenvelope_record_tos{}.

-type m_guild_redenvelope_record_toc() :: #m_guild_redenvelope_record_toc{}.

-type m_guild_redenvelope_update_toc() :: #m_guild_redenvelope_update_toc{}.

-type p_redenvelope() :: #p_redenvelope{}.

-type p_redenvelope_got() :: #p_redenvelope_got{}.

-type p_redenvelope_record() :: #p_redenvelope_record{}.

-type p_rn_role() :: #p_rn_role{}.

-export_type(['m_guild_redenvelope_list_tos'/0, 'm_guild_redenvelope_list_toc'/0, 'm_guild_redenvelope_send_tos'/0, 'm_guild_redenvelope_send_toc'/0, 'm_guild_redenvelope_snatch_tos'/0, 'm_guild_redenvelope_snatch_toc'/0, 'm_guild_redenvelope_record_tos'/0, 'm_guild_redenvelope_record_toc'/0, 'm_guild_redenvelope_update_toc'/0, 'p_redenvelope'/0, 'p_redenvelope_got'/0, 'p_redenvelope_record'/0, 'p_rn_role'/0]).

-spec encode_msg(#m_guild_redenvelope_list_tos{} | #m_guild_redenvelope_list_toc{} | #m_guild_redenvelope_send_tos{} | #m_guild_redenvelope_send_toc{} | #m_guild_redenvelope_snatch_tos{} | #m_guild_redenvelope_snatch_toc{} | #m_guild_redenvelope_record_tos{} | #m_guild_redenvelope_record_toc{} | #m_guild_redenvelope_update_toc{} | #p_redenvelope{} | #p_redenvelope_got{} | #p_redenvelope_record{} | #p_rn_role{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_guild_redenvelope_list_tos{} | #m_guild_redenvelope_list_toc{} | #m_guild_redenvelope_send_tos{} | #m_guild_redenvelope_send_toc{} | #m_guild_redenvelope_snatch_tos{} | #m_guild_redenvelope_snatch_toc{} | #m_guild_redenvelope_record_tos{} | #m_guild_redenvelope_record_toc{} | #m_guild_redenvelope_update_toc{} | #p_redenvelope{} | #p_redenvelope_got{} | #p_redenvelope_record{} | #p_rn_role{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_guild_redenvelope_list_tos{} | #m_guild_redenvelope_list_toc{} | #m_guild_redenvelope_send_tos{} | #m_guild_redenvelope_send_toc{} | #m_guild_redenvelope_snatch_tos{} | #m_guild_redenvelope_snatch_toc{} | #m_guild_redenvelope_record_tos{} | #m_guild_redenvelope_record_toc{} | #m_guild_redenvelope_update_toc{} | #p_redenvelope{} | #p_redenvelope_got{} | #p_redenvelope_record{} | #p_rn_role{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_guild_redenvelope_list_tos ->
	  encode_msg_m_guild_redenvelope_list_tos(id(Msg,
						     TrUserData),
						  TrUserData);
      m_guild_redenvelope_list_toc ->
	  encode_msg_m_guild_redenvelope_list_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_guild_redenvelope_send_tos ->
	  encode_msg_m_guild_redenvelope_send_tos(id(Msg,
						     TrUserData),
						  TrUserData);
      m_guild_redenvelope_send_toc ->
	  encode_msg_m_guild_redenvelope_send_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_guild_redenvelope_snatch_tos ->
	  encode_msg_m_guild_redenvelope_snatch_tos(id(Msg,
						       TrUserData),
						    TrUserData);
      m_guild_redenvelope_snatch_toc ->
	  encode_msg_m_guild_redenvelope_snatch_toc(id(Msg,
						       TrUserData),
						    TrUserData);
      m_guild_redenvelope_record_tos ->
	  encode_msg_m_guild_redenvelope_record_tos(id(Msg,
						       TrUserData),
						    TrUserData);
      m_guild_redenvelope_record_toc ->
	  encode_msg_m_guild_redenvelope_record_toc(id(Msg,
						       TrUserData),
						    TrUserData);
      m_guild_redenvelope_update_toc ->
	  encode_msg_m_guild_redenvelope_update_toc(id(Msg,
						       TrUserData),
						    TrUserData);
      p_redenvelope ->
	  encode_msg_p_redenvelope(id(Msg, TrUserData),
				   TrUserData);
      p_redenvelope_got ->
	  encode_msg_p_redenvelope_got(id(Msg, TrUserData),
				       TrUserData);
      p_redenvelope_record ->
	  encode_msg_p_redenvelope_record(id(Msg, TrUserData),
					  TrUserData);
      p_rn_role ->
	  encode_msg_p_rn_role(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_guild_redenvelope_list_tos(_Msg,
					_TrUserData) ->
    <<>>.

encode_msg_m_guild_redenvelope_list_toc(Msg,
					TrUserData) ->
    encode_msg_m_guild_redenvelope_list_toc(Msg, <<>>,
					    TrUserData).


encode_msg_m_guild_redenvelope_list_toc(#m_guild_redenvelope_list_toc{redenvelopes
									  = F1,
								      guild_redenvelopes
									  = F2},
					Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_guild_redenvelope_list_toc_redenvelopes(TrF1,
								    Bin,
								    TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_guild_redenvelope_list_toc_guild_redenvelopes(TrF2,
								     B1,
								     TrUserData)
      end
    end.

encode_msg_m_guild_redenvelope_send_tos(Msg,
					TrUserData) ->
    encode_msg_m_guild_redenvelope_send_tos(Msg, <<>>,
					    TrUserData).


encode_msg_m_guild_redenvelope_send_tos(#m_guild_redenvelope_send_tos{num
									  = F1,
								      uid = F2,
								      id = F3,
								      money =
									  F4,
								      desc =
									  F5},
					Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_fixed64(TrF2, <<B1/binary, 17>>, TrUserData)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	   end
    end.

encode_msg_m_guild_redenvelope_send_toc(Msg,
					TrUserData) ->
    encode_msg_m_guild_redenvelope_send_toc(Msg, <<>>,
					    TrUserData).


encode_msg_m_guild_redenvelope_send_toc(#m_guild_redenvelope_send_toc{uid
									  = F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
    end.

encode_msg_m_guild_redenvelope_snatch_tos(Msg,
					  TrUserData) ->
    encode_msg_m_guild_redenvelope_snatch_tos(Msg, <<>>,
					      TrUserData).


encode_msg_m_guild_redenvelope_snatch_tos(#m_guild_redenvelope_snatch_tos{uid
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
    end.

encode_msg_m_guild_redenvelope_snatch_toc(Msg,
					  TrUserData) ->
    encode_msg_m_guild_redenvelope_snatch_toc(Msg, <<>>,
					      TrUserData).


encode_msg_m_guild_redenvelope_snatch_toc(#m_guild_redenvelope_snatch_toc{uid
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
    end.

encode_msg_m_guild_redenvelope_record_tos(_Msg,
					  _TrUserData) ->
    <<>>.

encode_msg_m_guild_redenvelope_record_toc(Msg,
					  TrUserData) ->
    encode_msg_m_guild_redenvelope_record_toc(Msg, <<>>,
					      TrUserData).


encode_msg_m_guild_redenvelope_record_toc(#m_guild_redenvelope_record_toc{records
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_guild_redenvelope_record_toc_records(TrF1,
							    Bin, TrUserData)
      end
    end.

encode_msg_m_guild_redenvelope_update_toc(Msg,
					  TrUserData) ->
    encode_msg_m_guild_redenvelope_update_toc(Msg, <<>>,
					      TrUserData).


encode_msg_m_guild_redenvelope_update_toc(#m_guild_redenvelope_update_toc{redenvelope
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_m_guild_redenvelope_update_toc_redenvelope(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
    end.

encode_msg_p_redenvelope(Msg, TrUserData) ->
    encode_msg_p_redenvelope(Msg, <<>>, TrUserData).


encode_msg_p_redenvelope(#p_redenvelope{uid = F1,
					id = F2, role = F3, num = F4,
					money = F5, gots = F6, time = F7,
					state = F8, desc = F9},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_mfield_p_redenvelope_role(TrF3, <<B2/binary, 26>>,
				       TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = 'tr_encode_p_redenvelope.money'(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true ->
		  e_field_p_redenvelope_money(TrF5, B4, TrUserData)
	   end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_p_redenvelope_gots(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
	   end
    end.

encode_msg_p_redenvelope_got(Msg, TrUserData) ->
    encode_msg_p_redenvelope_got(Msg, <<>>, TrUserData).


encode_msg_p_redenvelope_got(#p_redenvelope_got{role =
						    F1,
						money = F2, time = F3},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_p_redenvelope_got_role(TrF1,
					   <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_p_redenvelope_record(Msg, TrUserData) ->
    encode_msg_p_redenvelope_record(Msg, <<>>, TrUserData).


encode_msg_p_redenvelope_record(#p_redenvelope_record{role_name
							  = F1,
						      id = F2, money = F3,
						      time = F4},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = 'tr_encode_p_redenvelope_record.money'(F3,
							 TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_p_redenvelope_record_money(TrF3, B2, TrUserData)
	   end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_p_rn_role(Msg, TrUserData) ->
    encode_msg_p_rn_role(Msg, <<>>, TrUserData).


encode_msg_p_rn_role(#p_rn_role{id = F1, name = F2,
				gender = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

e_mfield_m_guild_redenvelope_list_toc_redenvelopes(Msg,
						   Bin, TrUserData) ->
    SubBin = encode_msg_p_redenvelope(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_guild_redenvelope_list_toc_redenvelopes([Elem
						   | Rest],
						  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_guild_redenvelope_list_toc_redenvelopes(id(Elem,
							      TrUserData),
							   Bin2, TrUserData),
    e_field_m_guild_redenvelope_list_toc_redenvelopes(Rest,
						      Bin3, TrUserData);
e_field_m_guild_redenvelope_list_toc_redenvelopes([],
						  Bin, _TrUserData) ->
    Bin.

e_mfield_m_guild_redenvelope_list_toc_guild_redenvelopes(Msg,
							 Bin, TrUserData) ->
    SubBin = encode_msg_p_redenvelope(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_guild_redenvelope_list_toc_guild_redenvelopes([Elem
							 | Rest],
							Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_guild_redenvelope_list_toc_guild_redenvelopes(id(Elem,
								    TrUserData),
								 Bin2,
								 TrUserData),
    e_field_m_guild_redenvelope_list_toc_guild_redenvelopes(Rest,
							    Bin3, TrUserData);
e_field_m_guild_redenvelope_list_toc_guild_redenvelopes([],
							Bin, _TrUserData) ->
    Bin.

e_mfield_m_guild_redenvelope_record_toc_records(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_p_redenvelope_record(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_guild_redenvelope_record_toc_records([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_guild_redenvelope_record_toc_records(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    e_field_m_guild_redenvelope_record_toc_records(Rest,
						   Bin3, TrUserData);
e_field_m_guild_redenvelope_record_toc_records([], Bin,
					       _TrUserData) ->
    Bin.

e_mfield_m_guild_redenvelope_update_toc_redenvelope(Msg,
						    Bin, TrUserData) ->
    SubBin = encode_msg_p_redenvelope(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_redenvelope_role(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_rn_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_redenvelope_money(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_redenvelope_money([Elem | Rest], Bin,
			    TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	e_mfield_p_redenvelope_money('tr_encode_p_redenvelope.money[x]'(Elem,
									TrUserData),
				     Bin2, TrUserData),
    e_field_p_redenvelope_money(Rest, Bin3, TrUserData);
e_field_p_redenvelope_money([], Bin, _TrUserData) ->
    Bin.

e_mfield_p_redenvelope_gots(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_redenvelope_got(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_redenvelope_gots([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_p_redenvelope_gots(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_p_redenvelope_gots(Rest, Bin3, TrUserData);
e_field_p_redenvelope_gots([], Bin, _TrUserData) -> Bin.

e_mfield_p_redenvelope_got_role(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_rn_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_redenvelope_record_money(Msg, Bin,
				    TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_redenvelope_record_money([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_p_redenvelope_record_money('tr_encode_p_redenvelope_record.money[x]'(Elem,
										      TrUserData),
					    Bin2, TrUserData),
    e_field_p_redenvelope_record_money(Rest, Bin3,
				       TrUserData);
e_field_p_redenvelope_record_money([], Bin,
				   _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_guild_redenvelope_list_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_list_tos(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_list_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_list_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_send_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_send_tos(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_send_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_send_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_snatch_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_snatch_tos(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_snatch_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_snatch_toc(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_record_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_record_tos(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_record_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_record_toc(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_redenvelope_update_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_redenvelope_update_toc(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(p_redenvelope, Bin, TrUserData) ->
    id(decode_msg_p_redenvelope(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_redenvelope_got, Bin, TrUserData) ->
    id(decode_msg_p_redenvelope_got(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_redenvelope_record, Bin,
		  TrUserData) ->
    id(decode_msg_p_redenvelope_record(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_rn_role, Bin, TrUserData) ->
    id(decode_msg_p_rn_role(Bin, TrUserData), TrUserData).



decode_msg_m_guild_redenvelope_list_tos(Bin,
					TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_tos(Bin, 0,
						    0, TrUserData).

dfp_read_field_def_m_guild_redenvelope_list_tos(<<>>, 0,
						0, _) ->
    #m_guild_redenvelope_list_tos{};
dfp_read_field_def_m_guild_redenvelope_list_tos(Other,
						Z1, Z2, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_list_tos(Other,
						   Z1, Z2, TrUserData).

dg_read_field_def_m_guild_redenvelope_list_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_list_tos(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
dg_read_field_def_m_guild_redenvelope_list_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_redenvelope_list_tos(Rest, 0, 0,
						   TrUserData);
      1 ->
	  skip_64_m_guild_redenvelope_list_tos(Rest, 0, 0,
					       TrUserData);
      2 ->
	  skip_length_delimited_m_guild_redenvelope_list_tos(Rest,
							     0, 0, TrUserData);
      3 ->
	  skip_group_m_guild_redenvelope_list_tos(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  skip_32_m_guild_redenvelope_list_tos(Rest, 0, 0,
					       TrUserData)
    end;
dg_read_field_def_m_guild_redenvelope_list_tos(<<>>, 0,
					       0, _) ->
    #m_guild_redenvelope_list_tos{}.

skip_varint_m_guild_redenvelope_list_tos(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    skip_varint_m_guild_redenvelope_list_tos(Rest, Z1, Z2,
					     TrUserData);
skip_varint_m_guild_redenvelope_list_tos(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_tos(Rest,
						    Z1, Z2, TrUserData).

skip_length_delimited_m_guild_redenvelope_list_tos(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_list_tos(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
skip_length_delimited_m_guild_redenvelope_list_tos(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_list_tos(Rest2,
						    0, 0, TrUserData).

skip_group_m_guild_redenvelope_list_tos(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_list_tos(Rest, 0,
						    Z2, TrUserData).

skip_32_m_guild_redenvelope_list_tos(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_tos(Rest,
						    Z1, Z2, TrUserData).

skip_64_m_guild_redenvelope_list_tos(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_tos(Rest,
						    Z1, Z2, TrUserData).

decode_msg_m_guild_redenvelope_list_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_toc(Bin, 0,
						    0, id([], TrUserData),
						    id([], TrUserData),
						    TrUserData).

dfp_read_field_def_m_guild_redenvelope_list_toc(<<10,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    d_field_m_guild_redenvelope_list_toc_redenvelopes(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData);
dfp_read_field_def_m_guild_redenvelope_list_toc(<<18,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    d_field_m_guild_redenvelope_list_toc_guild_redenvelopes(Rest,
							    Z1, Z2, F@_1, F@_2,
							    TrUserData);
dfp_read_field_def_m_guild_redenvelope_list_toc(<<>>, 0,
						0, R1, R2, TrUserData) ->
    #m_guild_redenvelope_list_toc{redenvelopes =
				      lists_reverse(R1, TrUserData),
				  guild_redenvelopes =
				      lists_reverse(R2, TrUserData)};
dfp_read_field_def_m_guild_redenvelope_list_toc(Other,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_list_toc(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData).

dg_read_field_def_m_guild_redenvelope_list_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_list_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
dg_read_field_def_m_guild_redenvelope_list_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_guild_redenvelope_list_toc_redenvelopes(Rest,
							    0, 0, F@_1, F@_2,
							    TrUserData);
      18 ->
	  d_field_m_guild_redenvelope_list_toc_guild_redenvelopes(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_list_toc(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_list_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_list_toc(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_list_toc(Rest, Key bsr 3,
							0, F@_1, F@_2,
							TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_list_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_list_toc(<<>>, 0,
					       0, R1, R2, TrUserData) ->
    #m_guild_redenvelope_list_toc{redenvelopes =
				      lists_reverse(R1, TrUserData),
				  guild_redenvelopes =
				      lists_reverse(R2, TrUserData)}.

d_field_m_guild_redenvelope_list_toc_redenvelopes(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_list_toc_redenvelopes(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
d_field_m_guild_redenvelope_list_toc_redenvelopes(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, Prev, F@_2,
						  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_redenvelope(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_redenvelope_list_toc(RestF,
						    0, 0,
						    cons(NewFValue, Prev,
							 TrUserData),
						    F@_2, TrUserData).

d_field_m_guild_redenvelope_list_toc_guild_redenvelopes(<<1:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, F@_2,
							TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_list_toc_guild_redenvelopes(Rest,
							    N + 7,
							    X bsl N + Acc, F@_1,
							    F@_2, TrUserData);
d_field_m_guild_redenvelope_list_toc_guild_redenvelopes(<<0:1,
							  X:7, Rest/binary>>,
							N, Acc, F@_1, Prev,
							TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_redenvelope(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_redenvelope_list_toc(RestF,
						    0, 0, F@_1,
						    cons(NewFValue, Prev,
							 TrUserData),
						    TrUserData).

skip_varint_m_guild_redenvelope_list_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_guild_redenvelope_list_toc(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
skip_varint_m_guild_redenvelope_list_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_toc(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

skip_length_delimited_m_guild_redenvelope_list_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_list_toc(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
skip_length_delimited_m_guild_redenvelope_list_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_list_toc(Rest2,
						    0, 0, F@_1, F@_2,
						    TrUserData).

skip_group_m_guild_redenvelope_list_toc(Bin, FNum, Z2,
					F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_list_toc(Rest, 0,
						    Z2, F@_1, F@_2, TrUserData).

skip_32_m_guild_redenvelope_list_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_toc(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

skip_64_m_guild_redenvelope_list_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_list_toc(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

decode_msg_m_guild_redenvelope_send_tos(Bin,
					TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_tos(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_guild_redenvelope_send_tos(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    d_field_m_guild_redenvelope_send_tos_num(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_m_guild_redenvelope_send_tos(<<17,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    d_field_m_guild_redenvelope_send_tos_uid(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_m_guild_redenvelope_send_tos(<<24,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    d_field_m_guild_redenvelope_send_tos_id(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
dfp_read_field_def_m_guild_redenvelope_send_tos(<<32,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    d_field_m_guild_redenvelope_send_tos_money(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
dfp_read_field_def_m_guild_redenvelope_send_tos(<<42,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    d_field_m_guild_redenvelope_send_tos_desc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_m_guild_redenvelope_send_tos(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, F@_5,
						_) ->
    #m_guild_redenvelope_send_tos{num = F@_1, uid = F@_2,
				  id = F@_3, money = F@_4, desc = F@_5};
dfp_read_field_def_m_guild_redenvelope_send_tos(Other,
						Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_send_tos(Other,
						   Z1, Z2, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData).

dg_read_field_def_m_guild_redenvelope_send_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_send_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
dg_read_field_def_m_guild_redenvelope_send_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_redenvelope_send_tos_num(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      17 ->
	  d_field_m_guild_redenvelope_send_tos_uid(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      24 ->
	  d_field_m_guild_redenvelope_send_tos_id(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
      32 ->
	  d_field_m_guild_redenvelope_send_tos_money(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, TrUserData);
      42 ->
	  d_field_m_guild_redenvelope_send_tos_desc(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_send_tos(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_send_tos(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_send_tos(Rest,
								   0, 0, F@_1,
								   F@_2, F@_3,
								   F@_4, F@_5,
								   TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_send_tos(Rest, Key bsr 3,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_send_tos(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_send_tos(<<>>, 0,
					       0, F@_1, F@_2, F@_3, F@_4, F@_5,
					       _) ->
    #m_guild_redenvelope_send_tos{num = F@_1, uid = F@_2,
				  id = F@_3, money = F@_4, desc = F@_5}.

d_field_m_guild_redenvelope_send_tos_num(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_send_tos_num(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_m_guild_redenvelope_send_tos_num(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_redenvelope_send_tos(RestF,
						    0, 0, NewFValue, F@_2, F@_3,
						    F@_4, F@_5, TrUserData).

d_field_m_guild_redenvelope_send_tos_uid(<<Value:64/little,
					   Rest/binary>>,
					 Z1, Z2, F@_1, _, F@_3, F@_4, F@_5,
					 TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_tos(Rest,
						    Z1, Z2, F@_1,
						    id(Value, TrUserData), F@_3,
						    F@_4, F@_5, TrUserData).

d_field_m_guild_redenvelope_send_tos_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_send_tos_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
d_field_m_guild_redenvelope_send_tos_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_redenvelope_send_tos(RestF,
						    0, 0, F@_1, F@_2, NewFValue,
						    F@_4, F@_5, TrUserData).

d_field_m_guild_redenvelope_send_tos_money(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_send_tos_money(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
d_field_m_guild_redenvelope_send_tos_money(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_redenvelope_send_tos(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    NewFValue, F@_5,
						    TrUserData).

d_field_m_guild_redenvelope_send_tos_desc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_send_tos_desc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_m_guild_redenvelope_send_tos_desc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_redenvelope_send_tos(RestF,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, NewFValue,
						    TrUserData).

skip_varint_m_guild_redenvelope_send_tos(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    skip_varint_m_guild_redenvelope_send_tos(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
skip_varint_m_guild_redenvelope_send_tos(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_tos(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData).

skip_length_delimited_m_guild_redenvelope_send_tos(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_send_tos(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, TrUserData);
skip_length_delimited_m_guild_redenvelope_send_tos(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_send_tos(Rest2,
						    0, 0, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData).

skip_group_m_guild_redenvelope_send_tos(Bin, FNum, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_send_tos(Rest, 0,
						    Z2, F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData).

skip_32_m_guild_redenvelope_send_tos(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_tos(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData).

skip_64_m_guild_redenvelope_send_tos(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_tos(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData).

decode_msg_m_guild_redenvelope_send_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_toc(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_guild_redenvelope_send_toc(<<9,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_redenvelope_send_toc_uid(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_m_guild_redenvelope_send_toc(<<>>, 0,
						0, F@_1, _) ->
    #m_guild_redenvelope_send_toc{uid = F@_1};
dfp_read_field_def_m_guild_redenvelope_send_toc(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_send_toc(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_redenvelope_send_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_send_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_m_guild_redenvelope_send_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_guild_redenvelope_send_toc_uid(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_send_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_send_toc(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_send_toc(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_send_toc(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_send_toc(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_send_toc(<<>>, 0,
					       0, F@_1, _) ->
    #m_guild_redenvelope_send_toc{uid = F@_1}.

d_field_m_guild_redenvelope_send_toc_uid(<<Value:64/little,
					   Rest/binary>>,
					 Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_toc(Rest,
						    Z1, Z2,
						    id(Value, TrUserData),
						    TrUserData).

skip_varint_m_guild_redenvelope_send_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_redenvelope_send_toc(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_m_guild_redenvelope_send_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_redenvelope_send_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_send_toc(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_m_guild_redenvelope_send_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_send_toc(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_m_guild_redenvelope_send_toc(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_send_toc(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_m_guild_redenvelope_send_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_m_guild_redenvelope_send_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_send_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_m_guild_redenvelope_snatch_tos(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_m_guild_redenvelope_snatch_tos(<<9,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_redenvelope_snatch_tos_uid(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_m_guild_redenvelope_snatch_tos(<<>>,
						  0, 0, F@_1, _) ->
    #m_guild_redenvelope_snatch_tos{uid = F@_1};
dfp_read_field_def_m_guild_redenvelope_snatch_tos(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_snatch_tos(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_redenvelope_snatch_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_snatch_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_m_guild_redenvelope_snatch_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_guild_redenvelope_snatch_tos_uid(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_snatch_tos(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_snatch_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_snatch_tos(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_snatch_tos(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_snatch_tos(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_snatch_tos(<<>>,
						 0, 0, F@_1, _) ->
    #m_guild_redenvelope_snatch_tos{uid = F@_1}.

d_field_m_guild_redenvelope_snatch_tos_uid(<<Value:64/little,
					     Rest/binary>>,
					   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Rest,
						      Z1, Z2,
						      id(Value, TrUserData),
						      TrUserData).

skip_varint_m_guild_redenvelope_snatch_tos(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_redenvelope_snatch_tos(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_m_guild_redenvelope_snatch_tos(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_redenvelope_snatch_tos(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_snatch_tos(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_m_guild_redenvelope_snatch_tos(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_m_guild_redenvelope_snatch_tos(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_m_guild_redenvelope_snatch_tos(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_m_guild_redenvelope_snatch_tos(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_tos(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_m_guild_redenvelope_snatch_toc(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_m_guild_redenvelope_snatch_toc(<<9,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_redenvelope_snatch_toc_uid(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_m_guild_redenvelope_snatch_toc(<<>>,
						  0, 0, F@_1, _) ->
    #m_guild_redenvelope_snatch_toc{uid = F@_1};
dfp_read_field_def_m_guild_redenvelope_snatch_toc(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_snatch_toc(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_redenvelope_snatch_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_snatch_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_m_guild_redenvelope_snatch_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_guild_redenvelope_snatch_toc_uid(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_snatch_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_snatch_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_snatch_toc(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_snatch_toc(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_snatch_toc(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_snatch_toc(<<>>,
						 0, 0, F@_1, _) ->
    #m_guild_redenvelope_snatch_toc{uid = F@_1}.

d_field_m_guild_redenvelope_snatch_toc_uid(<<Value:64/little,
					     Rest/binary>>,
					   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Rest,
						      Z1, Z2,
						      id(Value, TrUserData),
						      TrUserData).

skip_varint_m_guild_redenvelope_snatch_toc(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_redenvelope_snatch_toc(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_m_guild_redenvelope_snatch_toc(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_redenvelope_snatch_toc(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_snatch_toc(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_m_guild_redenvelope_snatch_toc(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_m_guild_redenvelope_snatch_toc(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_m_guild_redenvelope_snatch_toc(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_m_guild_redenvelope_snatch_toc(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_snatch_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_m_guild_redenvelope_record_tos(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_tos(Bin,
						      0, 0, TrUserData).

dfp_read_field_def_m_guild_redenvelope_record_tos(<<>>,
						  0, 0, _) ->
    #m_guild_redenvelope_record_tos{};
dfp_read_field_def_m_guild_redenvelope_record_tos(Other,
						  Z1, Z2, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_record_tos(Other,
						     Z1, Z2, TrUserData).

dg_read_field_def_m_guild_redenvelope_record_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_record_tos(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
dg_read_field_def_m_guild_redenvelope_record_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_redenvelope_record_tos(Rest, 0, 0,
						     TrUserData);
      1 ->
	  skip_64_m_guild_redenvelope_record_tos(Rest, 0, 0,
						 TrUserData);
      2 ->
	  skip_length_delimited_m_guild_redenvelope_record_tos(Rest,
							       0, 0,
							       TrUserData);
      3 ->
	  skip_group_m_guild_redenvelope_record_tos(Rest,
						    Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_m_guild_redenvelope_record_tos(Rest, 0, 0,
						 TrUserData)
    end;
dg_read_field_def_m_guild_redenvelope_record_tos(<<>>,
						 0, 0, _) ->
    #m_guild_redenvelope_record_tos{}.

skip_varint_m_guild_redenvelope_record_tos(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    skip_varint_m_guild_redenvelope_record_tos(Rest, Z1, Z2,
					       TrUserData);
skip_varint_m_guild_redenvelope_record_tos(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_tos(Rest,
						      Z1, Z2, TrUserData).

skip_length_delimited_m_guild_redenvelope_record_tos(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_record_tos(Rest,
							 N + 7, X bsl N + Acc,
							 TrUserData);
skip_length_delimited_m_guild_redenvelope_record_tos(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_record_tos(Rest2,
						      0, 0, TrUserData).

skip_group_m_guild_redenvelope_record_tos(Bin, FNum, Z2,
					  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_record_tos(Rest,
						      0, Z2, TrUserData).

skip_32_m_guild_redenvelope_record_tos(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_tos(Rest,
						      Z1, Z2, TrUserData).

skip_64_m_guild_redenvelope_record_tos(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_tos(Rest,
						      Z1, Z2, TrUserData).

decode_msg_m_guild_redenvelope_record_toc(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_toc(Bin,
						      0, 0, id([], TrUserData),
						      TrUserData).

dfp_read_field_def_m_guild_redenvelope_record_toc(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_redenvelope_record_toc_records(Rest, Z1,
						   Z2, F@_1, TrUserData);
dfp_read_field_def_m_guild_redenvelope_record_toc(<<>>,
						  0, 0, R1, TrUserData) ->
    #m_guild_redenvelope_record_toc{records =
					lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_guild_redenvelope_record_toc(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_record_toc(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_redenvelope_record_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_record_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_m_guild_redenvelope_record_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_guild_redenvelope_record_toc_records(Rest, 0,
							 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_record_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_record_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_record_toc(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_record_toc(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_record_toc(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_record_toc(<<>>,
						 0, 0, R1, TrUserData) ->
    #m_guild_redenvelope_record_toc{records =
					lists_reverse(R1, TrUserData)}.

d_field_m_guild_redenvelope_record_toc_records(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_record_toc_records(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
d_field_m_guild_redenvelope_record_toc_records(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_redenvelope_record(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_redenvelope_record_toc(RestF,
						      0, 0,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

skip_varint_m_guild_redenvelope_record_toc(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_redenvelope_record_toc(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_m_guild_redenvelope_record_toc(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_redenvelope_record_toc(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_record_toc(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_m_guild_redenvelope_record_toc(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_record_toc(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_m_guild_redenvelope_record_toc(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_record_toc(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_m_guild_redenvelope_record_toc(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_m_guild_redenvelope_record_toc(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_record_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_m_guild_redenvelope_update_toc(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_update_toc(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_m_guild_redenvelope_update_toc(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_redenvelope_update_toc_redenvelope(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
dfp_read_field_def_m_guild_redenvelope_update_toc(<<>>,
						  0, 0, F@_1, _) ->
    #m_guild_redenvelope_update_toc{redenvelope = F@_1};
dfp_read_field_def_m_guild_redenvelope_update_toc(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_redenvelope_update_toc(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_redenvelope_update_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_redenvelope_update_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_m_guild_redenvelope_update_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_guild_redenvelope_update_toc_redenvelope(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_redenvelope_update_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_m_guild_redenvelope_update_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_m_guild_redenvelope_update_toc(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_m_guild_redenvelope_update_toc(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_m_guild_redenvelope_update_toc(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_m_guild_redenvelope_update_toc(<<>>,
						 0, 0, F@_1, _) ->
    #m_guild_redenvelope_update_toc{redenvelope = F@_1}.

d_field_m_guild_redenvelope_update_toc_redenvelope(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_redenvelope_update_toc_redenvelope(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
d_field_m_guild_redenvelope_update_toc_redenvelope(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_redenvelope(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_redenvelope_update_toc(RestF,
						      0, 0,
						      if Prev == undefined ->
							     NewFValue;
							 true ->
							     merge_msg_p_redenvelope(Prev,
										     NewFValue,
										     TrUserData)
						      end,
						      TrUserData).

skip_varint_m_guild_redenvelope_update_toc(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_redenvelope_update_toc(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_m_guild_redenvelope_update_toc(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_update_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_redenvelope_update_toc(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_redenvelope_update_toc(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_m_guild_redenvelope_update_toc(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_redenvelope_update_toc(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_m_guild_redenvelope_update_toc(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_redenvelope_update_toc(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_m_guild_redenvelope_update_toc(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_update_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_m_guild_redenvelope_update_toc(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_redenvelope_update_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_p_redenvelope(Bin, TrUserData) ->
    dfp_read_field_def_p_redenvelope(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     'tr_decode_init_default_p_redenvelope.money'([],
										  TrUserData),
				     id([], TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_redenvelope(<<9, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_uid(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_p_redenvelope(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_redenvelope(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_role(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_p_redenvelope(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_num(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_p_redenvelope(<<42, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_money(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				TrUserData);
dfp_read_field_def_p_redenvelope(<<50, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_gots(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_p_redenvelope(<<56, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_time(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_p_redenvelope(<<64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_state(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				TrUserData);
dfp_read_field_def_p_redenvelope(<<74, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, TrUserData) ->
    d_field_p_redenvelope_desc(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_p_redenvelope(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, R1, R2, F@_7, F@_8, F@_9,
				 TrUserData) ->
    #p_redenvelope{uid = F@_1, id = F@_2, role = F@_3,
		   num = F@_4,
		   money =
		       'tr_decode_repeated_finalize_p_redenvelope.money'(R1,
									 TrUserData),
		   gots = lists_reverse(R2, TrUserData), time = F@_7,
		   state = F@_8, desc = F@_9};
dfp_read_field_def_p_redenvelope(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData) ->
    dg_read_field_def_p_redenvelope(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, TrUserData).

dg_read_field_def_p_redenvelope(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_redenvelope(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_p_redenvelope(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_redenvelope_uid(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      16 ->
	  d_field_p_redenvelope_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      26 ->
	  d_field_p_redenvelope_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      32 ->
	  d_field_p_redenvelope_num(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      42 ->
	  d_field_p_redenvelope_money(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      TrUserData);
      50 ->
	  d_field_p_redenvelope_gots(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      56 ->
	  d_field_p_redenvelope_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      64 ->
	  d_field_p_redenvelope_state(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      TrUserData);
      74 ->
	  d_field_p_redenvelope_desc(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_redenvelope(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					  TrUserData);
	    1 ->
		skip_64_p_redenvelope(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      TrUserData);
	    2 ->
		skip_length_delimited_p_redenvelope(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    F@_6, F@_7, F@_8, F@_9,
						    TrUserData);
	    3 ->
		skip_group_p_redenvelope(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, TrUserData);
	    5 ->
		skip_32_p_redenvelope(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      TrUserData)
	  end
    end;
dg_read_field_def_p_redenvelope(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, R1, R2, F@_7, F@_8, F@_9,
				TrUserData) ->
    #p_redenvelope{uid = F@_1, id = F@_2, role = F@_3,
		   num = F@_4,
		   money =
		       'tr_decode_repeated_finalize_p_redenvelope.money'(R1,
									 TrUserData),
		   gots = lists_reverse(R2, TrUserData), time = F@_7,
		   state = F@_8, desc = F@_9}.

d_field_p_redenvelope_uid(<<Value:64/little,
			    Rest/binary>>,
			  Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    dfp_read_field_def_p_redenvelope(Rest, Z1, Z2,
				     id(Value, TrUserData), F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_p_redenvelope_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_p_redenvelope_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				     F@_8, F@_9, TrUserData).

d_field_p_redenvelope_role(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_role(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_p_redenvelope_role(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_rn_role(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2,
				     if Prev == undefined -> NewFValue;
					true ->
					    merge_msg_p_rn_role(Prev, NewFValue,
								TrUserData)
				     end,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData).

d_field_p_redenvelope_num(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_num(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_p_redenvelope_num(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, F@_6, F@_7,
				     F@_8, F@_9, TrUserData).

d_field_p_redenvelope_money(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_money(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, TrUserData);
d_field_p_redenvelope_money(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7,
			    F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4,
				     'tr_decode_repeated_add_elem_p_redenvelope.money'(NewFValue,
										       Prev,
										       TrUserData),
				     F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_p_redenvelope_gots(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_gots(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_p_redenvelope_gots(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8,
			   F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_redenvelope_got(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5,
				     cons(NewFValue, Prev, TrUserData), F@_7,
				     F@_8, F@_9, TrUserData).

d_field_p_redenvelope_time(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_time(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_p_redenvelope_time(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			   F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, NewFValue,
				     F@_8, F@_9, TrUserData).

d_field_p_redenvelope_state(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_state(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, TrUserData);
d_field_p_redenvelope_state(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			    F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     NewFValue, F@_9, TrUserData).

d_field_p_redenvelope_desc(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_desc(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_p_redenvelope_desc(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     NewFValue, TrUserData).

skip_varint_p_redenvelope(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    skip_varint_p_redenvelope(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
skip_varint_p_redenvelope(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    dfp_read_field_def_p_redenvelope(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData).

skip_length_delimited_p_redenvelope(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_redenvelope(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9,
					TrUserData);
skip_length_delimited_p_redenvelope(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_redenvelope(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData).

skip_group_p_redenvelope(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_redenvelope(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData).

skip_32_p_redenvelope(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      TrUserData) ->
    dfp_read_field_def_p_redenvelope(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData).

skip_64_p_redenvelope(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      TrUserData) ->
    dfp_read_field_def_p_redenvelope(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, TrUserData).

decode_msg_p_redenvelope_got(Bin, TrUserData) ->
    dfp_read_field_def_p_redenvelope_got(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_redenvelope_got(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_redenvelope_got_role(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_p_redenvelope_got(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_redenvelope_got_money(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_p_redenvelope_got(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_redenvelope_got_time(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_p_redenvelope_got(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #p_redenvelope_got{role = F@_1, money = F@_2,
		       time = F@_3};
dfp_read_field_def_p_redenvelope_got(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_p_redenvelope_got(Other, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData).

dg_read_field_def_p_redenvelope_got(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_redenvelope_got(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
dg_read_field_def_p_redenvelope_got(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_redenvelope_got_role(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      16 ->
	  d_field_p_redenvelope_got_money(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      24 ->
	  d_field_p_redenvelope_got_time(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_redenvelope_got(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    1 ->
		skip_64_p_redenvelope_got(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    2 ->
		skip_length_delimited_p_redenvelope_got(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    3 ->
		skip_group_p_redenvelope_got(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_p_redenvelope_got(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData)
	  end
    end;
dg_read_field_def_p_redenvelope_got(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, _) ->
    #p_redenvelope_got{role = F@_1, money = F@_2,
		       time = F@_3}.

d_field_p_redenvelope_got_role(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_got_role(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_p_redenvelope_got_role(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_rn_role(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope_got(RestF, 0, 0,
					 if Prev == undefined -> NewFValue;
					    true ->
						merge_msg_p_rn_role(Prev,
								    NewFValue,
								    TrUserData)
					 end,
					 F@_2, F@_3, TrUserData).

d_field_p_redenvelope_got_money(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_got_money(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_p_redenvelope_got_money(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope_got(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, TrUserData).

d_field_p_redenvelope_got_time(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_got_time(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_p_redenvelope_got_time(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope_got(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, TrUserData).

skip_varint_p_redenvelope_got(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_redenvelope_got(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
skip_varint_p_redenvelope_got(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_redenvelope_got(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_length_delimited_p_redenvelope_got(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_redenvelope_got(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
skip_length_delimited_p_redenvelope_got(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_redenvelope_got(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, TrUserData).

skip_group_p_redenvelope_got(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_redenvelope_got(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_32_p_redenvelope_got(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_redenvelope_got(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

skip_64_p_redenvelope_got(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_redenvelope_got(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData).

decode_msg_p_redenvelope_record(Bin, TrUserData) ->
    dfp_read_field_def_p_redenvelope_record(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    'tr_decode_init_default_p_redenvelope_record.money'([],
												TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_p_redenvelope_record(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_p_redenvelope_record_role_name(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_redenvelope_record(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_p_redenvelope_record_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_redenvelope_record(<<26,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_p_redenvelope_record_money(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_redenvelope_record(<<32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_p_redenvelope_record_time(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_redenvelope_record(<<>>, 0, 0,
					F@_1, F@_2, R1, F@_4, TrUserData) ->
    #p_redenvelope_record{role_name = F@_1, id = F@_2,
			  money =
			      'tr_decode_repeated_finalize_p_redenvelope_record.money'(R1,
										       TrUserData),
			  time = F@_4};
dfp_read_field_def_p_redenvelope_record(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_redenvelope_record(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_p_redenvelope_record(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_redenvelope_record(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
dg_read_field_def_p_redenvelope_record(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_redenvelope_record_role_name(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
      16 ->
	  d_field_p_redenvelope_record_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      26 ->
	  d_field_p_redenvelope_record_money(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_p_redenvelope_record_time(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_redenvelope_record(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_p_redenvelope_record(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_p_redenvelope_record(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
	    3 ->
		skip_group_p_redenvelope_record(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4,
						TrUserData);
	    5 ->
		skip_32_p_redenvelope_record(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_p_redenvelope_record(<<>>, 0, 0, F@_1,
				       F@_2, R1, F@_4, TrUserData) ->
    #p_redenvelope_record{role_name = F@_1, id = F@_2,
			  money =
			      'tr_decode_repeated_finalize_p_redenvelope_record.money'(R1,
										       TrUserData),
			  time = F@_4}.

d_field_p_redenvelope_record_role_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_record_role_name(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
d_field_p_redenvelope_record_role_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, F@_4,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope_record(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, F@_4,
					    TrUserData).

d_field_p_redenvelope_record_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_record_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_p_redenvelope_record_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope_record(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, F@_4,
					    TrUserData).

d_field_p_redenvelope_record_money(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_record_money(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_p_redenvelope_record_money(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, Prev, F@_4,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_redenvelope_record(RestF, 0, 0,
					    F@_1, F@_2,
					    'tr_decode_repeated_add_elem_p_redenvelope_record.money'(NewFValue,
												     Prev,
												     TrUserData),
					    F@_4, TrUserData).

d_field_p_redenvelope_record_time(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_redenvelope_record_time(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_p_redenvelope_record_time(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_redenvelope_record(RestF, 0, 0,
					    F@_1, F@_2, F@_3, NewFValue,
					    TrUserData).

skip_varint_p_redenvelope_record(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_redenvelope_record(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
skip_varint_p_redenvelope_record(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_redenvelope_record(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_p_redenvelope_record(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 57 ->
    skip_length_delimited_p_redenvelope_record(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
skip_length_delimited_p_redenvelope_record(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_redenvelope_record(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_p_redenvelope_record(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_redenvelope_record(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_p_redenvelope_record(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_redenvelope_record(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_p_redenvelope_record(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_redenvelope_record(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_p_rn_role(Bin, TrUserData) ->
    dfp_read_field_def_p_rn_role(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_rn_role(<<9, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_rn_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_p_rn_role(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_rn_role_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_p_rn_role(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_rn_role_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_p_rn_role(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #p_rn_role{id = F@_1, name = F@_2, gender = F@_3};
dfp_read_field_def_p_rn_role(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_p_rn_role(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_p_rn_role(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_rn_role(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_p_rn_role(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_rn_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      18 ->
	  d_field_p_rn_role_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      24 ->
	  d_field_p_rn_role_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_rn_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_p_rn_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_p_rn_role(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_p_rn_role(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_p_rn_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_p_rn_role(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #p_rn_role{id = F@_1, name = F@_2, gender = F@_3}.

d_field_p_rn_role_id(<<Value:64/little, Rest/binary>>,
		     Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_rn_role(Rest, Z1, Z2,
				 id(Value, TrUserData), F@_2, F@_3, TrUserData).

d_field_p_rn_role_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_rn_role_name(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_p_rn_role_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_rn_role(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_p_rn_role_gender(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_rn_role_gender(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_p_rn_role_gender(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_rn_role(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_p_rn_role(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_rn_role(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_p_rn_role(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_rn_role(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_p_rn_role(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_rn_role(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_p_rn_role(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_rn_role(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_p_rn_role(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_rn_role(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_p_rn_role(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_rn_role(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_p_rn_role(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_rn_role(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_guild_redenvelope_list_tos ->
	  merge_msg_m_guild_redenvelope_list_tos(Prev, New,
						 TrUserData);
      m_guild_redenvelope_list_toc ->
	  merge_msg_m_guild_redenvelope_list_toc(Prev, New,
						 TrUserData);
      m_guild_redenvelope_send_tos ->
	  merge_msg_m_guild_redenvelope_send_tos(Prev, New,
						 TrUserData);
      m_guild_redenvelope_send_toc ->
	  merge_msg_m_guild_redenvelope_send_toc(Prev, New,
						 TrUserData);
      m_guild_redenvelope_snatch_tos ->
	  merge_msg_m_guild_redenvelope_snatch_tos(Prev, New,
						   TrUserData);
      m_guild_redenvelope_snatch_toc ->
	  merge_msg_m_guild_redenvelope_snatch_toc(Prev, New,
						   TrUserData);
      m_guild_redenvelope_record_tos ->
	  merge_msg_m_guild_redenvelope_record_tos(Prev, New,
						   TrUserData);
      m_guild_redenvelope_record_toc ->
	  merge_msg_m_guild_redenvelope_record_toc(Prev, New,
						   TrUserData);
      m_guild_redenvelope_update_toc ->
	  merge_msg_m_guild_redenvelope_update_toc(Prev, New,
						   TrUserData);
      p_redenvelope ->
	  merge_msg_p_redenvelope(Prev, New, TrUserData);
      p_redenvelope_got ->
	  merge_msg_p_redenvelope_got(Prev, New, TrUserData);
      p_redenvelope_record ->
	  merge_msg_p_redenvelope_record(Prev, New, TrUserData);
      p_rn_role -> merge_msg_p_rn_role(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_list_tos/3}).
merge_msg_m_guild_redenvelope_list_tos(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_list_toc/3}).
merge_msg_m_guild_redenvelope_list_toc(#m_guild_redenvelope_list_toc{redenvelopes
									 =
									 PFredenvelopes,
								     guild_redenvelopes
									 =
									 PFguild_redenvelopes},
				       #m_guild_redenvelope_list_toc{redenvelopes
									 =
									 NFredenvelopes,
								     guild_redenvelopes
									 =
									 NFguild_redenvelopes},
				       TrUserData) ->
    #m_guild_redenvelope_list_toc{redenvelopes =
				      if PFredenvelopes /= undefined,
					 NFredenvelopes /= undefined ->
					     'erlang_++'(PFredenvelopes,
							 NFredenvelopes,
							 TrUserData);
					 PFredenvelopes == undefined ->
					     NFredenvelopes;
					 NFredenvelopes == undefined ->
					     PFredenvelopes
				      end,
				  guild_redenvelopes =
				      if PFguild_redenvelopes /= undefined,
					 NFguild_redenvelopes /= undefined ->
					     'erlang_++'(PFguild_redenvelopes,
							 NFguild_redenvelopes,
							 TrUserData);
					 PFguild_redenvelopes == undefined ->
					     NFguild_redenvelopes;
					 NFguild_redenvelopes == undefined ->
					     PFguild_redenvelopes
				      end}.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_send_tos/3}).
merge_msg_m_guild_redenvelope_send_tos(#m_guild_redenvelope_send_tos{uid
									 =
									 PFuid,
								     money =
									 PFmoney,
								     desc =
									 PFdesc},
				       #m_guild_redenvelope_send_tos{num =
									 NFnum,
								     uid =
									 NFuid,
								     id = NFid,
								     money =
									 NFmoney,
								     desc =
									 NFdesc},
				       _) ->
    #m_guild_redenvelope_send_tos{num = NFnum,
				  uid =
				      if NFuid =:= undefined -> PFuid;
					 true -> NFuid
				      end,
				  id = NFid,
				  money =
				      if NFmoney =:= undefined -> PFmoney;
					 true -> NFmoney
				      end,
				  desc =
				      if NFdesc =:= undefined -> PFdesc;
					 true -> NFdesc
				      end}.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_send_toc/3}).
merge_msg_m_guild_redenvelope_send_toc(#m_guild_redenvelope_send_toc{},
				       #m_guild_redenvelope_send_toc{uid =
									 NFuid},
				       _) ->
    #m_guild_redenvelope_send_toc{uid = NFuid}.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_snatch_tos/3}).
merge_msg_m_guild_redenvelope_snatch_tos(#m_guild_redenvelope_snatch_tos{},
					 #m_guild_redenvelope_snatch_tos{uid =
									     NFuid},
					 _) ->
    #m_guild_redenvelope_snatch_tos{uid = NFuid}.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_snatch_toc/3}).
merge_msg_m_guild_redenvelope_snatch_toc(#m_guild_redenvelope_snatch_toc{},
					 #m_guild_redenvelope_snatch_toc{uid =
									     NFuid},
					 _) ->
    #m_guild_redenvelope_snatch_toc{uid = NFuid}.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_record_tos/3}).
merge_msg_m_guild_redenvelope_record_tos(_Prev, New,
					 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_record_toc/3}).
merge_msg_m_guild_redenvelope_record_toc(#m_guild_redenvelope_record_toc{records
									     =
									     PFrecords},
					 #m_guild_redenvelope_record_toc{records
									     =
									     NFrecords},
					 TrUserData) ->
    #m_guild_redenvelope_record_toc{records =
					if PFrecords /= undefined,
					   NFrecords /= undefined ->
					       'erlang_++'(PFrecords, NFrecords,
							   TrUserData);
					   PFrecords == undefined -> NFrecords;
					   NFrecords == undefined -> PFrecords
					end}.

-compile({nowarn_unused_function,merge_msg_m_guild_redenvelope_update_toc/3}).
merge_msg_m_guild_redenvelope_update_toc(#m_guild_redenvelope_update_toc{redenvelope
									     =
									     PFredenvelope},
					 #m_guild_redenvelope_update_toc{redenvelope
									     =
									     NFredenvelope},
					 TrUserData) ->
    #m_guild_redenvelope_update_toc{redenvelope =
					merge_msg_p_redenvelope(PFredenvelope,
								NFredenvelope,
								TrUserData)}.

-compile({nowarn_unused_function,merge_msg_p_redenvelope/3}).
merge_msg_p_redenvelope(#p_redenvelope{role = PFrole,
				       money = PFmoney, gots = PFgots,
				       desc = PFdesc},
			#p_redenvelope{uid = NFuid, id = NFid, role = NFrole,
				       num = NFnum, money = NFmoney,
				       gots = NFgots, time = NFtime,
				       state = NFstate, desc = NFdesc},
			TrUserData) ->
    #p_redenvelope{uid = NFuid, id = NFid,
		   role = merge_msg_p_rn_role(PFrole, NFrole, TrUserData),
		   num = NFnum,
		   money =
		       if PFmoney /= undefined, NFmoney /= undefined ->
			      'tr_merge_p_redenvelope.money'(PFmoney, NFmoney,
							     TrUserData);
			  PFmoney == undefined -> NFmoney;
			  NFmoney == undefined -> PFmoney
		       end,
		   gots =
		       if PFgots /= undefined, NFgots /= undefined ->
			      'erlang_++'(PFgots, NFgots, TrUserData);
			  PFgots == undefined -> NFgots;
			  NFgots == undefined -> PFgots
		       end,
		   time = NFtime, state = NFstate,
		   desc =
		       if NFdesc =:= undefined -> PFdesc;
			  true -> NFdesc
		       end}.

-compile({nowarn_unused_function,merge_msg_p_redenvelope_got/3}).
merge_msg_p_redenvelope_got(#p_redenvelope_got{role =
						   PFrole},
			    #p_redenvelope_got{role = NFrole, money = NFmoney,
					       time = NFtime},
			    TrUserData) ->
    #p_redenvelope_got{role =
			   merge_msg_p_rn_role(PFrole, NFrole, TrUserData),
		       money = NFmoney, time = NFtime}.

-compile({nowarn_unused_function,merge_msg_p_redenvelope_record/3}).
merge_msg_p_redenvelope_record(#p_redenvelope_record{money
							 = PFmoney},
			       #p_redenvelope_record{role_name = NFrole_name,
						     id = NFid, money = NFmoney,
						     time = NFtime},
			       TrUserData) ->
    #p_redenvelope_record{role_name = NFrole_name,
			  id = NFid,
			  money =
			      if PFmoney /= undefined, NFmoney /= undefined ->
				     'tr_merge_p_redenvelope_record.money'(PFmoney,
									   NFmoney,
									   TrUserData);
				 PFmoney == undefined -> NFmoney;
				 NFmoney == undefined -> PFmoney
			      end,
			  time = NFtime}.

-compile({nowarn_unused_function,merge_msg_p_rn_role/3}).
merge_msg_p_rn_role(#p_rn_role{},
		    #p_rn_role{id = NFid, name = NFname, gender = NFgender},
		    _) ->
    #p_rn_role{id = NFid, name = NFname, gender = NFgender}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_guild_redenvelope_list_tos ->
	  v_msg_m_guild_redenvelope_list_tos(Msg, [MsgName],
					     TrUserData);
      m_guild_redenvelope_list_toc ->
	  v_msg_m_guild_redenvelope_list_toc(Msg, [MsgName],
					     TrUserData);
      m_guild_redenvelope_send_tos ->
	  v_msg_m_guild_redenvelope_send_tos(Msg, [MsgName],
					     TrUserData);
      m_guild_redenvelope_send_toc ->
	  v_msg_m_guild_redenvelope_send_toc(Msg, [MsgName],
					     TrUserData);
      m_guild_redenvelope_snatch_tos ->
	  v_msg_m_guild_redenvelope_snatch_tos(Msg, [MsgName],
					       TrUserData);
      m_guild_redenvelope_snatch_toc ->
	  v_msg_m_guild_redenvelope_snatch_toc(Msg, [MsgName],
					       TrUserData);
      m_guild_redenvelope_record_tos ->
	  v_msg_m_guild_redenvelope_record_tos(Msg, [MsgName],
					       TrUserData);
      m_guild_redenvelope_record_toc ->
	  v_msg_m_guild_redenvelope_record_toc(Msg, [MsgName],
					       TrUserData);
      m_guild_redenvelope_update_toc ->
	  v_msg_m_guild_redenvelope_update_toc(Msg, [MsgName],
					       TrUserData);
      p_redenvelope ->
	  v_msg_p_redenvelope(Msg, [MsgName], TrUserData);
      p_redenvelope_got ->
	  v_msg_p_redenvelope_got(Msg, [MsgName], TrUserData);
      p_redenvelope_record ->
	  v_msg_p_redenvelope_record(Msg, [MsgName], TrUserData);
      p_rn_role ->
	  v_msg_p_rn_role(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_list_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_list_tos/3}).
v_msg_m_guild_redenvelope_list_tos(#m_guild_redenvelope_list_tos{},
				   _Path, _) ->
    ok;
v_msg_m_guild_redenvelope_list_tos(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_list_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_list_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_list_toc/3}).
v_msg_m_guild_redenvelope_list_toc(#m_guild_redenvelope_list_toc{redenvelopes
								     = F1,
								 guild_redenvelopes
								     = F2},
				   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_redenvelope(Elem, [redenvelopes | Path],
				    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_redenvelope}},
			 F1, [redenvelopes | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_p_redenvelope(Elem,
				    [guild_redenvelopes | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_redenvelope}},
			 F2, [guild_redenvelopes | Path])
    end,
    ok;
v_msg_m_guild_redenvelope_list_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_list_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_send_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_send_tos/3}).
v_msg_m_guild_redenvelope_send_tos(#m_guild_redenvelope_send_tos{num
								     = F1,
								 uid = F2,
								 id = F3,
								 money = F4,
								 desc = F5},
				   Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_fixed64(F2, [uid | Path], TrUserData)
    end,
    v_type_int32(F3, [id | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [money | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_string(F5, [desc | Path], TrUserData)
    end,
    ok;
v_msg_m_guild_redenvelope_send_tos(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_send_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_send_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_send_toc/3}).
v_msg_m_guild_redenvelope_send_toc(#m_guild_redenvelope_send_toc{uid
								     = F1},
				   Path, TrUserData) ->
    v_type_fixed64(F1, [uid | Path], TrUserData), ok;
v_msg_m_guild_redenvelope_send_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_send_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_snatch_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_snatch_tos/3}).
v_msg_m_guild_redenvelope_snatch_tos(#m_guild_redenvelope_snatch_tos{uid
									 = F1},
				     Path, TrUserData) ->
    v_type_fixed64(F1, [uid | Path], TrUserData), ok;
v_msg_m_guild_redenvelope_snatch_tos(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_snatch_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_snatch_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_snatch_toc/3}).
v_msg_m_guild_redenvelope_snatch_toc(#m_guild_redenvelope_snatch_toc{uid
									 = F1},
				     Path, TrUserData) ->
    v_type_fixed64(F1, [uid | Path], TrUserData), ok;
v_msg_m_guild_redenvelope_snatch_toc(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_snatch_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_record_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_record_tos/3}).
v_msg_m_guild_redenvelope_record_tos(#m_guild_redenvelope_record_tos{},
				     _Path, _) ->
    ok;
v_msg_m_guild_redenvelope_record_tos(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_record_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_record_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_record_toc/3}).
v_msg_m_guild_redenvelope_record_toc(#m_guild_redenvelope_record_toc{records
									 = F1},
				     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_redenvelope_record(Elem, [records | Path],
					   TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_redenvelope_record}},
			 F1, [records | Path])
    end,
    ok;
v_msg_m_guild_redenvelope_record_toc(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_record_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_redenvelope_update_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_redenvelope_update_toc/3}).
v_msg_m_guild_redenvelope_update_toc(#m_guild_redenvelope_update_toc{redenvelope
									 = F1},
				     Path, TrUserData) ->
    v_msg_p_redenvelope(F1, [redenvelope | Path],
			TrUserData),
    ok;
v_msg_m_guild_redenvelope_update_toc(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_redenvelope_update_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_p_redenvelope/3}).
-dialyzer({nowarn_function,v_msg_p_redenvelope/3}).
v_msg_p_redenvelope(#p_redenvelope{uid = F1, id = F2,
				   role = F3, num = F4, money = F5, gots = F6,
				   time = F7, state = F8, desc = F9},
		    Path, TrUserData) ->
    v_type_fixed64(F1, [uid | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    v_msg_p_rn_role(F3, [role | Path], TrUserData),
    v_type_int32(F4, [num | Path], TrUserData),
    'v_map<int32,int32>'(F5, [money | Path], TrUserData),
    if is_list(F6) ->
	   _ = [v_msg_p_redenvelope_got(Elem, [gots | Path],
					TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_redenvelope_got}},
			 F6, [gots | Path])
    end,
    v_type_int32(F7, [time | Path], TrUserData),
    v_type_int32(F8, [state | Path], TrUserData),
    if F9 == undefined -> ok;
       true -> v_type_string(F9, [desc | Path], TrUserData)
    end,
    ok;
v_msg_p_redenvelope(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_redenvelope}, X, Path).

-compile({nowarn_unused_function,v_msg_p_redenvelope_got/3}).
-dialyzer({nowarn_function,v_msg_p_redenvelope_got/3}).
v_msg_p_redenvelope_got(#p_redenvelope_got{role = F1,
					   money = F2, time = F3},
			Path, TrUserData) ->
    v_msg_p_rn_role(F1, [role | Path], TrUserData),
    v_type_int32(F2, [money | Path], TrUserData),
    v_type_int32(F3, [time | Path], TrUserData),
    ok;
v_msg_p_redenvelope_got(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_redenvelope_got}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_redenvelope_record/3}).
-dialyzer({nowarn_function,v_msg_p_redenvelope_record/3}).
v_msg_p_redenvelope_record(#p_redenvelope_record{role_name
						     = F1,
						 id = F2, money = F3,
						 time = F4},
			   Path, TrUserData) ->
    v_type_string(F1, [role_name | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    'v_map<int32,int32>'(F3, [money | Path], TrUserData),
    v_type_int32(F4, [time | Path], TrUserData),
    ok;
v_msg_p_redenvelope_record(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_redenvelope_record}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_rn_role/3}).
-dialyzer({nowarn_function,v_msg_p_rn_role/3}).
v_msg_p_rn_role(#p_rn_role{id = F1, name = F2,
			   gender = F3},
		Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_int32(F3, [gender | Path], TrUserData),
    ok;
v_msg_p_rn_role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_rn_role}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_p_redenvelope_record.money'/2}).
'tr_decode_init_default_p_redenvelope_record.money'(_,
						    _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_redenvelope_record.money'/3}).
'tr_merge_p_redenvelope_record.money'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_redenvelope_record.money'/2}).
'tr_decode_repeated_finalize_p_redenvelope_record.money'(L,
							 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_redenvelope_record.money'/2}).
'tr_encode_p_redenvelope_record.money'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_redenvelope_record.money'/3}).
'tr_decode_repeated_add_elem_p_redenvelope_record.money'(Elem,
							 L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_p_redenvelope.money[x]'/2}).
'tr_encode_p_redenvelope.money[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_redenvelope_record.money[x]'/2}).
'tr_encode_p_redenvelope_record.money[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_p_redenvelope.money'/2}).
'tr_decode_init_default_p_redenvelope.money'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_redenvelope.money'/3}).
'tr_merge_p_redenvelope.money'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_redenvelope.money'/2}).
'tr_decode_repeated_finalize_p_redenvelope.money'(L,
						  TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_redenvelope.money'/2}).
'tr_encode_p_redenvelope.money'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_redenvelope.money'/3}).
'tr_decode_repeated_add_elem_p_redenvelope.money'(Elem,
						  L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_guild_redenvelope_list_tos}, []},
     {{msg, m_guild_redenvelope_list_toc},
      [#field{name = redenvelopes, fnum = 1, rnum = 2,
	      type = {msg, p_redenvelope}, occurrence = repeated,
	      opts = []},
       #field{name = guild_redenvelopes, fnum = 2, rnum = 3,
	      type = {msg, p_redenvelope}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_guild_redenvelope_send_tos},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = fixed64,
	      occurrence = optional, opts = []},
       #field{name = id, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = money, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []},
       #field{name = desc, fnum = 5, rnum = 6, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, m_guild_redenvelope_send_toc},
      [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_redenvelope_snatch_tos},
      [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_redenvelope_snatch_toc},
      [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_redenvelope_record_tos}, []},
     {{msg, m_guild_redenvelope_record_toc},
      [#field{name = records, fnum = 1, rnum = 2,
	      type = {msg, p_redenvelope_record},
	      occurrence = repeated, opts = []}]},
     {{msg, m_guild_redenvelope_update_toc},
      [#field{name = redenvelope, fnum = 1, rnum = 2,
	      type = {msg, p_redenvelope}, occurrence = required,
	      opts = []}]},
     {{msg, p_redenvelope},
      [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = role, fnum = 3, rnum = 4,
	      type = {msg, p_rn_role}, occurrence = required,
	      opts = []},
       #field{name = num, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = money, fnum = 5, rnum = 6,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = gots, fnum = 6, rnum = 7,
	      type = {msg, p_redenvelope_got}, occurrence = repeated,
	      opts = []},
       #field{name = time, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = state, fnum = 8, rnum = 9, type = int32,
	      occurrence = required, opts = []},
       #field{name = desc, fnum = 9, rnum = 10, type = string,
	      occurrence = optional, opts = []}]},
     {{msg, p_redenvelope_got},
      [#field{name = role, fnum = 1, rnum = 2,
	      type = {msg, p_rn_role}, occurrence = required,
	      opts = []},
       #field{name = money, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = time, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_redenvelope_record},
      [#field{name = role_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = money, fnum = 3, rnum = 4,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = time, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_rn_role},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_guild_redenvelope_list_tos,
     m_guild_redenvelope_list_toc,
     m_guild_redenvelope_send_tos,
     m_guild_redenvelope_send_toc,
     m_guild_redenvelope_snatch_tos,
     m_guild_redenvelope_snatch_toc,
     m_guild_redenvelope_record_tos,
     m_guild_redenvelope_record_toc,
     m_guild_redenvelope_update_toc, p_redenvelope,
     p_redenvelope_got, p_redenvelope_record, p_rn_role].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_guild_redenvelope_list_tos,
     m_guild_redenvelope_list_toc,
     m_guild_redenvelope_send_tos,
     m_guild_redenvelope_send_toc,
     m_guild_redenvelope_snatch_tos,
     m_guild_redenvelope_snatch_toc,
     m_guild_redenvelope_record_tos,
     m_guild_redenvelope_record_toc,
     m_guild_redenvelope_update_toc, p_redenvelope,
     p_redenvelope_got, p_redenvelope_record, p_rn_role].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_guild_redenvelope_list_tos) -> [];
find_msg_def(m_guild_redenvelope_list_toc) ->
    [#field{name = redenvelopes, fnum = 1, rnum = 2,
	    type = {msg, p_redenvelope}, occurrence = repeated,
	    opts = []},
     #field{name = guild_redenvelopes, fnum = 2, rnum = 3,
	    type = {msg, p_redenvelope}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_guild_redenvelope_send_tos) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = fixed64,
	    occurrence = optional, opts = []},
     #field{name = id, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = money, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []},
     #field{name = desc, fnum = 5, rnum = 6, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(m_guild_redenvelope_send_toc) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_redenvelope_snatch_tos) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_redenvelope_snatch_toc) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_redenvelope_record_tos) -> [];
find_msg_def(m_guild_redenvelope_record_toc) ->
    [#field{name = records, fnum = 1, rnum = 2,
	    type = {msg, p_redenvelope_record},
	    occurrence = repeated, opts = []}];
find_msg_def(m_guild_redenvelope_update_toc) ->
    [#field{name = redenvelope, fnum = 1, rnum = 2,
	    type = {msg, p_redenvelope}, occurrence = required,
	    opts = []}];
find_msg_def(p_redenvelope) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = role, fnum = 3, rnum = 4,
	    type = {msg, p_rn_role}, occurrence = required,
	    opts = []},
     #field{name = num, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = money, fnum = 5, rnum = 6,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = gots, fnum = 6, rnum = 7,
	    type = {msg, p_redenvelope_got}, occurrence = repeated,
	    opts = []},
     #field{name = time, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = state, fnum = 8, rnum = 9, type = int32,
	    occurrence = required, opts = []},
     #field{name = desc, fnum = 9, rnum = 10, type = string,
	    occurrence = optional, opts = []}];
find_msg_def(p_redenvelope_got) ->
    [#field{name = role, fnum = 1, rnum = 2,
	    type = {msg, p_rn_role}, occurrence = required,
	    opts = []},
     #field{name = money, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = time, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_redenvelope_record) ->
    [#field{name = role_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = money, fnum = 3, rnum = 4,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = time, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_rn_role) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
