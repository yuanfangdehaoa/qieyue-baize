package main

import (
	"encoding/xml"
	"fmt"
	"os"
	xml2 "parser/xml"
	"path"
	"strings"
	"text/template"
)

type tabs struct {
	XMLName xml.Name `xml:"tabs"`
	Grps    []grp    `xml:"grp"`
}

type grp struct {
	XMLName xml.Name `xml:"grp"`
	Type    string   `xml:"type,attr"`
	Init    string   `xml:"type,init"`
	Tabs    []tab    `xml:"tab"`
}

type tab struct {
	XMLName xml.Name `xml:"tab"`
	Name    string   `xml:"name,attr"`
	Type    string   `xml:"type,attr"`
	Init    string   `xml:"init,attr"`
	Index   string   `xml:"index,attr"`
	Cache   string   `xml:"cache,attr"`
	Persist string   `xml:"persist,attr"`
	Fields  []field  `xml:"field"`
}

type field struct {
	XMLName xml.Name `xml:"field"`
	Name    string   `xml:"name,attr"`
	Type    string   `xml:"type,attr"`
	Init    string   `xml:"init,attr"`
	Desc    string   `xml:"desc,attr"`
	Cache   string   `xml:"cache,attr"`
}

var tplHrl string = `%% Automatically generated, do not edit
%% Generated by parse_table.go
-ifndef(TABLE_HRL).
-define(TABLE_HRL, ok).

{{ range .Grps }}
{{ range .Tabs }}
-define(DB_{{ upper .Name }}, {{ .Name }}).
-record({{ .Name }}, { {{ range $k, $v := .Fields }}
	{{ if ne $k 0 }}, {{ end }}{{ $v.Name }}{{ if ne $v.Init "" }} = {{ $v.Init }}{{ end }} % {{ $v.Desc }}{{ end }}
}).
{{ end }}
{{ end }}

-endif.
`

var tplErl string = `%% Automatically generated, do not edit
%% Generated by parse_table.go

-module(table).

-compile([export_all]).
-compile(nowarn_export_all).

-include("game.hrl").
-include("role.hrl").
-include("table.hrl").

tabs() ->
	game_tabs() ++ guild_tabs() ++ role_tabs().

{{ range .Grps }}
{{ .Type }}_tabs() -> [{{ range $k, $v := .Tabs }}
	{{ if ne $k 0 }}, {{ end }}#r_tab{
		name = {{ $v.Name }},
		rec  = {{ $v.Name }},
		opts = [
			{record_name, {{ $v.Name }}},
			{type, {{ if eq .Type "" }}set{{ else }}{{ .Type }}{{ end }}},
			{attributes, record_info(fields, {{ .Name }})},
			{{ if ne $v.Index "" }}{index, [{{ $v.Index }}]},{{ end }}
			{disc_only_copies, [node()]}
		],
		init = {{ if ne .Init "" }}{{ .Init }}{{ else }}undefined{{ end }}
	}
{{ end }}
].
{{ end }}

{{ range .Grps }}
{{ $type := .Type }}
{{- range .Tabs }}

{{- if eq $type "role" }}
init({{ .Name }}, RoleID) -> #{{ .Name }}{id=RoleID};
{{- else if eq $type "guild" }}
init({{ .Name }}, GuildID) -> #{{ .Name }}{id=GuildID};
{{- else }}
init({{ .Name }}, _) -> #{{ .Name }}{};
{{- end }}

{{- end }}
{{- end }}
init(_, _) -> undefined.

{{ range .Grps }}
{{- if eq .Type "role" }}
{{- range .Tabs }}

{{- if eq .Cache "true" }}
cache({{ .Name }}) -> [
	{{ join .Name .Fields }}
];
{{- end }}

{{- end }}
{{- end }}
{{- end }}
cache(_) -> [].

{{ range .Grps }}
{{- if eq .Type "role" }}
{{- range .Tabs }}

{{- if ne .Persist "" }}
persist({{ .Name }}) -> {{ .Persist }};
{{- end }}

{{- end }}
{{- end }}
{{- end }}
persist(_) -> default.
`

func main() {
	x := xml2.ParseXML(os.Args[1], &tabs{})

	funcs := []template.FuncMap{
		{
			"upper": func(s string) string {
				return strings.ToUpper(s)
			},
		},
		{
			"join": func(recName string, fields []field) string {
				caches := make([]string, 0)
				for _, v := range fields {
					if v.Cache != "" {
						s := fmt.Sprintf("{#%s.%s, #role_cache.%s}", recName, v.Name, v.Cache)
						caches = append(caches, s)
					}
				}
				return strings.Join(caches, ",")
			},
		},
	}
	x.Exec(tplHrl, funcs)
	x.Write(path.Join(os.Args[2], "include", "table.hrl"))

	x.Clear()
	x.Exec(tplErl, funcs)
	x.Write(path.Join(os.Args[2], "src", "table.erl"))
}
