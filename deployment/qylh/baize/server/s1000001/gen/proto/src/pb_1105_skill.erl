%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1105_skill).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1105_skill.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_skill_list_tos() :: #m_skill_list_tos{}.

-type m_skill_list_toc() :: #m_skill_list_toc{}.

-type m_skill_auto_use_tos() :: #m_skill_auto_use_tos{}.

-type m_skill_auto_use_toc() :: #m_skill_auto_use_toc{}.

-type m_skill_puton_tos() :: #m_skill_puton_tos{}.

-type m_skill_puton_toc() :: #m_skill_puton_toc{}.

-type m_skill_set_auto_use_tos() :: #m_skill_set_auto_use_tos{}.

-type m_skill_set_auto_use_toc() :: #m_skill_set_auto_use_toc{}.

-type m_skill_set_recommend_tos() :: #m_skill_set_recommend_tos{}.

-type m_skill_set_recommend_toc() :: #m_skill_set_recommend_toc{}.

-type m_skill_get_skill_toc() :: #m_skill_get_skill_toc{}.

-type m_skill_remove_skills_toc() :: #m_skill_remove_skills_toc{}.

-type m_skill_update_cds_toc() :: #m_skill_update_cds_toc{}.

-type p_skill() :: #p_skill{}.

-export_type(['m_skill_list_tos'/0, 'm_skill_list_toc'/0, 'm_skill_auto_use_tos'/0, 'm_skill_auto_use_toc'/0, 'm_skill_puton_tos'/0, 'm_skill_puton_toc'/0, 'm_skill_set_auto_use_tos'/0, 'm_skill_set_auto_use_toc'/0, 'm_skill_set_recommend_tos'/0, 'm_skill_set_recommend_toc'/0, 'm_skill_get_skill_toc'/0, 'm_skill_remove_skills_toc'/0, 'm_skill_update_cds_toc'/0, 'p_skill'/0]).

-spec encode_msg(#m_skill_list_tos{} | #m_skill_list_toc{} | #m_skill_auto_use_tos{} | #m_skill_auto_use_toc{} | #m_skill_puton_tos{} | #m_skill_puton_toc{} | #m_skill_set_auto_use_tos{} | #m_skill_set_auto_use_toc{} | #m_skill_set_recommend_tos{} | #m_skill_set_recommend_toc{} | #m_skill_get_skill_toc{} | #m_skill_remove_skills_toc{} | #m_skill_update_cds_toc{} | #p_skill{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_skill_list_tos{} | #m_skill_list_toc{} | #m_skill_auto_use_tos{} | #m_skill_auto_use_toc{} | #m_skill_puton_tos{} | #m_skill_puton_toc{} | #m_skill_set_auto_use_tos{} | #m_skill_set_auto_use_toc{} | #m_skill_set_recommend_tos{} | #m_skill_set_recommend_toc{} | #m_skill_get_skill_toc{} | #m_skill_remove_skills_toc{} | #m_skill_update_cds_toc{} | #p_skill{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_skill_list_tos{} | #m_skill_list_toc{} | #m_skill_auto_use_tos{} | #m_skill_auto_use_toc{} | #m_skill_puton_tos{} | #m_skill_puton_toc{} | #m_skill_set_auto_use_tos{} | #m_skill_set_auto_use_toc{} | #m_skill_set_recommend_tos{} | #m_skill_set_recommend_toc{} | #m_skill_get_skill_toc{} | #m_skill_remove_skills_toc{} | #m_skill_update_cds_toc{} | #p_skill{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_skill_list_tos ->
	  encode_msg_m_skill_list_tos(id(Msg, TrUserData),
				      TrUserData);
      m_skill_list_toc ->
	  encode_msg_m_skill_list_toc(id(Msg, TrUserData),
				      TrUserData);
      m_skill_auto_use_tos ->
	  encode_msg_m_skill_auto_use_tos(id(Msg, TrUserData),
					  TrUserData);
      m_skill_auto_use_toc ->
	  encode_msg_m_skill_auto_use_toc(id(Msg, TrUserData),
					  TrUserData);
      m_skill_puton_tos ->
	  encode_msg_m_skill_puton_tos(id(Msg, TrUserData),
				       TrUserData);
      m_skill_puton_toc ->
	  encode_msg_m_skill_puton_toc(id(Msg, TrUserData),
				       TrUserData);
      m_skill_set_auto_use_tos ->
	  encode_msg_m_skill_set_auto_use_tos(id(Msg, TrUserData),
					      TrUserData);
      m_skill_set_auto_use_toc ->
	  encode_msg_m_skill_set_auto_use_toc(id(Msg, TrUserData),
					      TrUserData);
      m_skill_set_recommend_tos ->
	  encode_msg_m_skill_set_recommend_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_skill_set_recommend_toc ->
	  encode_msg_m_skill_set_recommend_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_skill_get_skill_toc ->
	  encode_msg_m_skill_get_skill_toc(id(Msg, TrUserData),
					   TrUserData);
      m_skill_remove_skills_toc ->
	  encode_msg_m_skill_remove_skills_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_skill_update_cds_toc ->
	  encode_msg_m_skill_update_cds_toc(id(Msg, TrUserData),
					    TrUserData);
      p_skill ->
	  encode_msg_p_skill(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_skill_list_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_skill_list_toc(Msg, TrUserData) ->
    encode_msg_m_skill_list_toc(Msg, <<>>, TrUserData).


encode_msg_m_skill_list_toc(#m_skill_list_toc{skills =
						  F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_skill_list_toc_skills(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_m_skill_auto_use_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_skill_auto_use_toc(Msg, TrUserData) ->
    encode_msg_m_skill_auto_use_toc(Msg, <<>>, TrUserData).


encode_msg_m_skill_auto_use_toc(#m_skill_auto_use_toc{auto_use
							  = F1},
				Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_skill_auto_use_toc.auto_use'(F1,
						       TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_skill_auto_use_toc_auto_use(TrF1, Bin,
						   TrUserData)
      end
    end.

encode_msg_m_skill_puton_tos(Msg, TrUserData) ->
    encode_msg_m_skill_puton_tos(Msg, <<>>, TrUserData).


encode_msg_m_skill_puton_tos(#m_skill_puton_tos{id = F1,
						pos = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_skill_puton_toc(_Msg, _TrUserData) -> <<>>.

encode_msg_m_skill_set_auto_use_tos(Msg, TrUserData) ->
    encode_msg_m_skill_set_auto_use_tos(Msg, <<>>,
					TrUserData).


encode_msg_m_skill_set_auto_use_tos(#m_skill_set_auto_use_tos{id
								  = F1,
							      auto_use = F2},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_skill_set_auto_use_toc(Msg, TrUserData) ->
    encode_msg_m_skill_set_auto_use_toc(Msg, <<>>,
					TrUserData).


encode_msg_m_skill_set_auto_use_toc(#m_skill_set_auto_use_toc{id
								  = F1,
							      auto_use = F2},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 24>>, TrUserData)
    end.

encode_msg_m_skill_set_recommend_tos(Msg, TrUserData) ->
    encode_msg_m_skill_set_recommend_tos(Msg, <<>>,
					 TrUserData).


encode_msg_m_skill_set_recommend_tos(#m_skill_set_recommend_tos{id
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_skill_set_recommend_toc(Msg, TrUserData) ->
    encode_msg_m_skill_set_recommend_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_skill_set_recommend_toc(#m_skill_set_recommend_toc{id
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_skill_get_skill_toc(Msg, TrUserData) ->
    encode_msg_m_skill_get_skill_toc(Msg, <<>>, TrUserData).


encode_msg_m_skill_get_skill_toc(#m_skill_get_skill_toc{skill
							    = F1},
				 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_m_skill_get_skill_toc_skill(TrF1,
					   <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_skill_remove_skills_toc(Msg, TrUserData) ->
    encode_msg_m_skill_remove_skills_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_skill_remove_skills_toc(#m_skill_remove_skills_toc{skill_ids
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_skill_remove_skills_toc_skill_ids(TrF1, Bin,
							 TrUserData)
      end
    end.

encode_msg_m_skill_update_cds_toc(Msg, TrUserData) ->
    encode_msg_m_skill_update_cds_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_skill_update_cds_toc(#m_skill_update_cds_toc{cds
							      = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_skill_update_cds_toc.cds'(F1,
						    TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_skill_update_cds_toc_cds(TrF1, Bin,
						TrUserData)
      end
    end.

encode_msg_p_skill(Msg, TrUserData) ->
    encode_msg_p_skill(Msg, <<>>, TrUserData).


encode_msg_p_skill(#p_skill{id = F1, lv = F2, cd = F3,
			    pos = F4, auto_use = F5},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	   end
    end.

e_mfield_m_skill_list_toc_skills(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_p_skill(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_skill_list_toc_skills([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_skill_list_toc_skills(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_m_skill_list_toc_skills(Rest, Bin3, TrUserData);
e_field_m_skill_list_toc_skills([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_skill_auto_use_toc_auto_use(Msg, Bin,
				       TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_skill_auto_use_toc_auto_use([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_skill_auto_use_toc_auto_use('tr_encode_m_skill_auto_use_toc.auto_use[x]'(Elem,
											    TrUserData),
					       Bin2, TrUserData),
    e_field_m_skill_auto_use_toc_auto_use(Rest, Bin3,
					  TrUserData);
e_field_m_skill_auto_use_toc_auto_use([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_m_skill_get_skill_toc_skill(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_p_skill(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_skill_remove_skills_toc_skill_ids([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_skill_remove_skills_toc_skill_ids(Rest, Bin3,
						TrUserData);
e_field_m_skill_remove_skills_toc_skill_ids([], Bin,
					    _TrUserData) ->
    Bin.

e_mfield_m_skill_update_cds_toc_cds(Msg, Bin,
				    TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_skill_update_cds_toc_cds([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_skill_update_cds_toc_cds('tr_encode_m_skill_update_cds_toc.cds[x]'(Elem,
										      TrUserData),
					    Bin2, TrUserData),
    e_field_m_skill_update_cds_toc_cds(Rest, Bin3,
				       TrUserData);
e_field_m_skill_update_cds_toc_cds([], Bin,
				   _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_skill_list_tos, Bin, TrUserData) ->
    id(decode_msg_m_skill_list_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_list_toc, Bin, TrUserData) ->
    id(decode_msg_m_skill_list_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_auto_use_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_auto_use_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_auto_use_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_auto_use_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_puton_tos, Bin, TrUserData) ->
    id(decode_msg_m_skill_puton_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_puton_toc, Bin, TrUserData) ->
    id(decode_msg_m_skill_puton_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_set_auto_use_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_set_auto_use_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_set_auto_use_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_set_auto_use_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_set_recommend_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_set_recommend_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_set_recommend_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_set_recommend_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_get_skill_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_get_skill_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_remove_skills_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_remove_skills_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_skill_update_cds_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_skill_update_cds_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_skill, Bin, TrUserData) ->
    id(decode_msg_p_skill(Bin, TrUserData), TrUserData).



decode_msg_m_skill_list_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_list_tos(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_m_skill_list_tos(<<>>, 0, 0, _) ->
    #m_skill_list_tos{};
dfp_read_field_def_m_skill_list_tos(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_m_skill_list_tos(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_m_skill_list_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_list_tos(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_m_skill_list_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_skill_list_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_skill_list_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_skill_list_tos(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_m_skill_list_tos(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_m_skill_list_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_skill_list_tos(<<>>, 0, 0, _) ->
    #m_skill_list_tos{}.

skip_varint_m_skill_list_tos(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_m_skill_list_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_skill_list_tos(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_skill_list_tos(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_m_skill_list_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_list_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_m_skill_list_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_list_tos(Rest2, 0, 0,
					TrUserData).

skip_group_m_skill_list_tos(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_list_tos(Rest, 0, Z2,
					TrUserData).

skip_32_m_skill_list_tos(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_skill_list_tos(Rest, Z1, Z2,
					TrUserData).

skip_64_m_skill_list_tos(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_skill_list_tos(Rest, Z1, Z2,
					TrUserData).

decode_msg_m_skill_list_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_list_toc(Bin, 0, 0,
					id([], TrUserData), TrUserData).

dfp_read_field_def_m_skill_list_toc(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_list_toc_skills(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_skill_list_toc(<<>>, 0, 0, R1,
				    TrUserData) ->
    #m_skill_list_toc{skills =
			  lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_skill_list_toc(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_m_skill_list_toc(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_m_skill_list_toc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_list_toc(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_skill_list_toc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_skill_list_toc_skills(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_list_toc(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_m_skill_list_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_skill_list_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_m_skill_list_toc(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_m_skill_list_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_skill_list_toc(<<>>, 0, 0, R1,
				   TrUserData) ->
    #m_skill_list_toc{skills =
			  lists_reverse(R1, TrUserData)}.

d_field_m_skill_list_toc_skills(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_list_toc_skills(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_skill_list_toc_skills(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_skill(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_skill_list_toc(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_m_skill_list_toc(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_list_toc(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_m_skill_list_toc(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_list_toc(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_m_skill_list_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_list_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_skill_list_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_list_toc(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_m_skill_list_toc(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_list_toc(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_m_skill_list_toc(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_list_toc(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_m_skill_list_toc(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_list_toc(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_m_skill_auto_use_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_tos(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_m_skill_auto_use_tos(<<>>, 0, 0,
					_) ->
    #m_skill_auto_use_tos{};
dfp_read_field_def_m_skill_auto_use_tos(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_m_skill_auto_use_tos(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_m_skill_auto_use_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_auto_use_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_m_skill_auto_use_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_skill_auto_use_tos(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_m_skill_auto_use_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_skill_auto_use_tos(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_m_skill_auto_use_tos(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_m_skill_auto_use_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_skill_auto_use_tos(<<>>, 0, 0, _) ->
    #m_skill_auto_use_tos{}.

skip_varint_m_skill_auto_use_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_m_skill_auto_use_tos(Rest, Z1, Z2,
				     TrUserData);
skip_varint_m_skill_auto_use_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_tos(Rest, Z1, Z2,
					    TrUserData).

skip_length_delimited_m_skill_auto_use_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_auto_use_tos(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_m_skill_auto_use_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_auto_use_tos(Rest2, 0, 0,
					    TrUserData).

skip_group_m_skill_auto_use_tos(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_auto_use_tos(Rest, 0, Z2,
					    TrUserData).

skip_32_m_skill_auto_use_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_tos(Rest, Z1, Z2,
					    TrUserData).

skip_64_m_skill_auto_use_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_tos(Rest, Z1, Z2,
					    TrUserData).

decode_msg_m_skill_auto_use_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_toc(Bin, 0, 0,
					    'tr_decode_init_default_m_skill_auto_use_toc.auto_use'([],
												   TrUserData),
					    TrUserData).

dfp_read_field_def_m_skill_auto_use_toc(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_auto_use_toc_auto_use(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_skill_auto_use_toc(<<>>, 0, 0, R1,
					TrUserData) ->
    #m_skill_auto_use_toc{auto_use =
			      'tr_decode_repeated_finalize_m_skill_auto_use_toc.auto_use'(R1,
											  TrUserData)};
dfp_read_field_def_m_skill_auto_use_toc(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_m_skill_auto_use_toc(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_m_skill_auto_use_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_auto_use_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_skill_auto_use_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_skill_auto_use_toc_auto_use(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_auto_use_toc(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_m_skill_auto_use_toc(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_skill_auto_use_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_m_skill_auto_use_toc(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_m_skill_auto_use_toc(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_skill_auto_use_toc(<<>>, 0, 0, R1,
				       TrUserData) ->
    #m_skill_auto_use_toc{auto_use =
			      'tr_decode_repeated_finalize_m_skill_auto_use_toc.auto_use'(R1,
											  TrUserData)}.

d_field_m_skill_auto_use_toc_auto_use(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_auto_use_toc_auto_use(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_skill_auto_use_toc_auto_use(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_skill_auto_use_toc(RestF, 0, 0,
					    'tr_decode_repeated_add_elem_m_skill_auto_use_toc.auto_use'(NewFValue,
													Prev,
													TrUserData),
					    TrUserData).

skip_varint_m_skill_auto_use_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_auto_use_toc(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_m_skill_auto_use_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_m_skill_auto_use_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_auto_use_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_skill_auto_use_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_auto_use_toc(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_m_skill_auto_use_toc(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_auto_use_toc(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_m_skill_auto_use_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_m_skill_auto_use_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_auto_use_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_m_skill_puton_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_puton_tos(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_skill_puton_tos(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_skill_puton_tos_id(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_m_skill_puton_tos(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_skill_puton_tos_pos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_m_skill_puton_tos(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #m_skill_puton_tos{id = F@_1, pos = F@_2};
dfp_read_field_def_m_skill_puton_tos(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_skill_puton_tos(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_m_skill_puton_tos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_puton_tos(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_skill_puton_tos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_skill_puton_tos_id(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_m_skill_puton_tos_pos(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_puton_tos(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_m_skill_puton_tos(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_m_skill_puton_tos(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_m_skill_puton_tos(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_m_skill_puton_tos(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_m_skill_puton_tos(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #m_skill_puton_tos{id = F@_1, pos = F@_2}.

d_field_m_skill_puton_tos_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_skill_puton_tos_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_m_skill_puton_tos_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_puton_tos(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_m_skill_puton_tos_pos(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_skill_puton_tos_pos(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_skill_puton_tos_pos(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_puton_tos(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_m_skill_puton_tos(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_skill_puton_tos(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_m_skill_puton_tos(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_puton_tos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_m_skill_puton_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_puton_tos(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_m_skill_puton_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_puton_tos(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_m_skill_puton_tos(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_puton_tos(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_m_skill_puton_tos(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_puton_tos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_m_skill_puton_tos(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_puton_tos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_m_skill_puton_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_puton_toc(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_m_skill_puton_toc(<<>>, 0, 0, _) ->
    #m_skill_puton_toc{};
dfp_read_field_def_m_skill_puton_toc(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_m_skill_puton_toc(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_m_skill_puton_toc(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_puton_toc(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_m_skill_puton_toc(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_skill_puton_toc(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_skill_puton_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_skill_puton_toc(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_m_skill_puton_toc(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_m_skill_puton_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_skill_puton_toc(<<>>, 0, 0, _) ->
    #m_skill_puton_toc{}.

skip_varint_m_skill_puton_toc(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_m_skill_puton_toc(Rest, Z1, Z2, TrUserData);
skip_varint_m_skill_puton_toc(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_skill_puton_toc(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_m_skill_puton_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_puton_toc(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_m_skill_puton_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_puton_toc(Rest2, 0, 0,
					 TrUserData).

skip_group_m_skill_puton_toc(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_puton_toc(Rest, 0, Z2,
					 TrUserData).

skip_32_m_skill_puton_toc(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_skill_puton_toc(Rest, Z1, Z2,
					 TrUserData).

skip_64_m_skill_puton_toc(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_skill_puton_toc(Rest, Z1, Z2,
					 TrUserData).

decode_msg_m_skill_set_auto_use_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_tos(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_skill_set_auto_use_tos(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_skill_set_auto_use_tos_id(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_m_skill_set_auto_use_tos(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_skill_set_auto_use_tos_auto_use(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_m_skill_set_auto_use_tos(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_skill_set_auto_use_tos{id = F@_1, auto_use = F@_2};
dfp_read_field_def_m_skill_set_auto_use_tos(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_skill_set_auto_use_tos(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_skill_set_auto_use_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_set_auto_use_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_m_skill_set_auto_use_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_skill_set_auto_use_tos_id(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      16 ->
	  d_field_m_skill_set_auto_use_tos_auto_use(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_set_auto_use_tos(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_m_skill_set_auto_use_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_skill_set_auto_use_tos(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_m_skill_set_auto_use_tos(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_skill_set_auto_use_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_skill_set_auto_use_tos(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #m_skill_set_auto_use_tos{id = F@_1, auto_use = F@_2}.

d_field_m_skill_set_auto_use_tos_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_skill_set_auto_use_tos_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_skill_set_auto_use_tos_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_set_auto_use_tos(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_m_skill_set_auto_use_tos_auto_use(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_skill_set_auto_use_tos_auto_use(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_m_skill_set_auto_use_tos_auto_use(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_set_auto_use_tos(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_m_skill_set_auto_use_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_skill_set_auto_use_tos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_m_skill_set_auto_use_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_skill_set_auto_use_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_set_auto_use_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_m_skill_set_auto_use_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_set_auto_use_tos(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_m_skill_set_auto_use_tos(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_set_auto_use_tos(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_m_skill_set_auto_use_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_m_skill_set_auto_use_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_m_skill_set_auto_use_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_toc(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_skill_set_auto_use_toc(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_skill_set_auto_use_toc_id(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_m_skill_set_auto_use_toc(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_skill_set_auto_use_toc_auto_use(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_m_skill_set_auto_use_toc(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_skill_set_auto_use_toc{id = F@_1, auto_use = F@_2};
dfp_read_field_def_m_skill_set_auto_use_toc(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_skill_set_auto_use_toc(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_skill_set_auto_use_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_set_auto_use_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_m_skill_set_auto_use_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_skill_set_auto_use_toc_id(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      24 ->
	  d_field_m_skill_set_auto_use_toc_auto_use(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_set_auto_use_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_m_skill_set_auto_use_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_skill_set_auto_use_toc(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_m_skill_set_auto_use_toc(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_skill_set_auto_use_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_skill_set_auto_use_toc(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #m_skill_set_auto_use_toc{id = F@_1, auto_use = F@_2}.

d_field_m_skill_set_auto_use_toc_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_skill_set_auto_use_toc_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_skill_set_auto_use_toc_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_set_auto_use_toc(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_m_skill_set_auto_use_toc_auto_use(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_skill_set_auto_use_toc_auto_use(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_m_skill_set_auto_use_toc_auto_use(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_set_auto_use_toc(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_m_skill_set_auto_use_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_skill_set_auto_use_toc(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_m_skill_set_auto_use_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_skill_set_auto_use_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_set_auto_use_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_m_skill_set_auto_use_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_set_auto_use_toc(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_m_skill_set_auto_use_toc(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_set_auto_use_toc(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_m_skill_set_auto_use_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_m_skill_set_auto_use_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_skill_set_auto_use_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_m_skill_set_recommend_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_tos(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_skill_set_recommend_tos(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_set_recommend_tos_id(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_m_skill_set_recommend_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_skill_set_recommend_tos{id = F@_1};
dfp_read_field_def_m_skill_set_recommend_tos(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_skill_set_recommend_tos(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_skill_set_recommend_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_set_recommend_tos(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_skill_set_recommend_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_skill_set_recommend_tos_id(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_set_recommend_tos(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_skill_set_recommend_tos(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_skill_set_recommend_tos(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_skill_set_recommend_tos(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_skill_set_recommend_tos(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_skill_set_recommend_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_skill_set_recommend_tos{id = F@_1}.

d_field_m_skill_set_recommend_tos_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_set_recommend_tos_id(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_m_skill_set_recommend_tos_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_set_recommend_tos(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_skill_set_recommend_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_set_recommend_tos(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_skill_set_recommend_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_skill_set_recommend_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_set_recommend_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_skill_set_recommend_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_set_recommend_tos(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_skill_set_recommend_tos(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_set_recommend_tos(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_skill_set_recommend_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_skill_set_recommend_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_skill_set_recommend_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_skill_set_recommend_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_set_recommend_toc_id(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_m_skill_set_recommend_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_skill_set_recommend_toc{id = F@_1};
dfp_read_field_def_m_skill_set_recommend_toc(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_skill_set_recommend_toc(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_skill_set_recommend_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_set_recommend_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_skill_set_recommend_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_skill_set_recommend_toc_id(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_set_recommend_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_skill_set_recommend_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_skill_set_recommend_toc(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_skill_set_recommend_toc(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_skill_set_recommend_toc(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_skill_set_recommend_toc(<<>>, 0, 0,
					    F@_1, _) ->
    #m_skill_set_recommend_toc{id = F@_1}.

d_field_m_skill_set_recommend_toc_id(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_set_recommend_toc_id(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_m_skill_set_recommend_toc_id(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_set_recommend_toc(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_skill_set_recommend_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_set_recommend_toc(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_skill_set_recommend_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_skill_set_recommend_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_set_recommend_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_skill_set_recommend_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_set_recommend_toc(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_skill_set_recommend_toc(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_set_recommend_toc(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_skill_set_recommend_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_skill_set_recommend_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_set_recommend_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_skill_get_skill_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_get_skill_toc(Bin, 0, 0,
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_m_skill_get_skill_toc(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_get_skill_toc_skill(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_skill_get_skill_toc(<<>>, 0, 0,
					 F@_1, _) ->
    #m_skill_get_skill_toc{skill = F@_1};
dfp_read_field_def_m_skill_get_skill_toc(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_m_skill_get_skill_toc(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_m_skill_get_skill_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_get_skill_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_skill_get_skill_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_skill_get_skill_toc_skill(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_get_skill_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_m_skill_get_skill_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_m_skill_get_skill_toc(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_m_skill_get_skill_toc(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_m_skill_get_skill_toc(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_m_skill_get_skill_toc(<<>>, 0, 0,
					F@_1, _) ->
    #m_skill_get_skill_toc{skill = F@_1}.

d_field_m_skill_get_skill_toc_skill(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_get_skill_toc_skill(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_skill_get_skill_toc_skill(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_skill(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_skill_get_skill_toc(RestF, 0, 0,
					     if Prev == undefined -> NewFValue;
						true ->
						    merge_msg_p_skill(Prev,
								      NewFValue,
								      TrUserData)
					     end,
					     TrUserData).

skip_varint_m_skill_get_skill_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_get_skill_toc(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_m_skill_get_skill_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_get_skill_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_m_skill_get_skill_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_get_skill_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_m_skill_get_skill_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_get_skill_toc(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_m_skill_get_skill_toc(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_get_skill_toc(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_m_skill_get_skill_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_get_skill_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_m_skill_get_skill_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_get_skill_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_m_skill_remove_skills_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_remove_skills_toc(Bin, 0, 0,
						 id([], TrUserData),
						 TrUserData).

dfp_read_field_def_m_skill_remove_skills_toc(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_pfield_m_skill_remove_skills_toc_skill_ids(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_m_skill_remove_skills_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_remove_skills_toc_skill_ids(Rest, Z1,
						Z2, F@_1, TrUserData);
dfp_read_field_def_m_skill_remove_skills_toc(<<>>, 0, 0,
					     R1, TrUserData) ->
    #m_skill_remove_skills_toc{skill_ids =
				   lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_skill_remove_skills_toc(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_skill_remove_skills_toc(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_skill_remove_skills_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_remove_skills_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_skill_remove_skills_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_skill_remove_skills_toc_skill_ids(Rest, 0, 0,
						       F@_1, TrUserData);
      8 ->
	  d_field_m_skill_remove_skills_toc_skill_ids(Rest, 0, 0,
						      F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_remove_skills_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_skill_remove_skills_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_skill_remove_skills_toc(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_skill_remove_skills_toc(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_skill_remove_skills_toc(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_skill_remove_skills_toc(<<>>, 0, 0,
					    R1, TrUserData) ->
    #m_skill_remove_skills_toc{skill_ids =
				   lists_reverse(R1, TrUserData)}.

d_field_m_skill_remove_skills_toc_skill_ids(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_remove_skills_toc_skill_ids(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
d_field_m_skill_remove_skills_toc_skill_ids(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_skill_remove_skills_toc(RestF, 0,
						 0,
						 cons(NewFValue, Prev,
						      TrUserData),
						 TrUserData).

d_pfield_m_skill_remove_skills_toc_skill_ids(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_m_skill_remove_skills_toc_skill_ids(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_pfield_m_skill_remove_skills_toc_skill_ids(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_skill_remove_skills_toc_skill_ids(PackedBytes,
							   0, 0, E, TrUserData),
    dfp_read_field_def_m_skill_remove_skills_toc(Rest2, 0,
						 0, NewSeq, TrUserData).

d_packed_field_m_skill_remove_skills_toc_skill_ids(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_skill_remove_skills_toc_skill_ids(Rest,
						       N + 7, X bsl N + Acc,
						       AccSeq, TrUserData);
d_packed_field_m_skill_remove_skills_toc_skill_ids(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, AccSeq,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_skill_remove_skills_toc_skill_ids(RestF,
						       0, 0,
						       [NewFValue | AccSeq],
						       TrUserData);
d_packed_field_m_skill_remove_skills_toc_skill_ids(<<>>,
						   0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_m_skill_remove_skills_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_remove_skills_toc(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_skill_remove_skills_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_remove_skills_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_skill_remove_skills_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_remove_skills_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_skill_remove_skills_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_remove_skills_toc(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_skill_remove_skills_toc(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_remove_skills_toc(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_skill_remove_skills_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_remove_skills_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_skill_remove_skills_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_remove_skills_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_skill_update_cds_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_skill_update_cds_toc(Bin, 0, 0,
					      'tr_decode_init_default_m_skill_update_cds_toc.cds'([],
												  TrUserData),
					      TrUserData).

dfp_read_field_def_m_skill_update_cds_toc(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_skill_update_cds_toc_cds(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_skill_update_cds_toc(<<>>, 0, 0,
					  R1, TrUserData) ->
    #m_skill_update_cds_toc{cds =
				'tr_decode_repeated_finalize_m_skill_update_cds_toc.cds'(R1,
											 TrUserData)};
dfp_read_field_def_m_skill_update_cds_toc(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_m_skill_update_cds_toc(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_m_skill_update_cds_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_skill_update_cds_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_skill_update_cds_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_skill_update_cds_toc_cds(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_skill_update_cds_toc(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_m_skill_update_cds_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_skill_update_cds_toc(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_m_skill_update_cds_toc(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_m_skill_update_cds_toc(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_skill_update_cds_toc(<<>>, 0, 0, R1,
					 TrUserData) ->
    #m_skill_update_cds_toc{cds =
				'tr_decode_repeated_finalize_m_skill_update_cds_toc.cds'(R1,
											 TrUserData)}.

d_field_m_skill_update_cds_toc_cds(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_skill_update_cds_toc_cds(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_skill_update_cds_toc_cds(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_skill_update_cds_toc(RestF, 0, 0,
					      'tr_decode_repeated_add_elem_m_skill_update_cds_toc.cds'(NewFValue,
												       Prev,
												       TrUserData),
					      TrUserData).

skip_varint_m_skill_update_cds_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_skill_update_cds_toc(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_m_skill_update_cds_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_update_cds_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_m_skill_update_cds_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_skill_update_cds_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_m_skill_update_cds_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_skill_update_cds_toc(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_m_skill_update_cds_toc(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_skill_update_cds_toc(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_m_skill_update_cds_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_update_cds_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_m_skill_update_cds_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_skill_update_cds_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_p_skill(Bin, TrUserData) ->
    dfp_read_field_def_p_skill(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_skill(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_skill_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
dfp_read_field_def_p_skill(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_skill_lv(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
dfp_read_field_def_p_skill(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_skill_cd(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, TrUserData);
dfp_read_field_def_p_skill(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_skill_pos(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
dfp_read_field_def_p_skill(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_skill_auto_use(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_p_skill(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #p_skill{id = F@_1, lv = F@_2, cd = F@_3, pos = F@_4,
	     auto_use = F@_5};
dfp_read_field_def_p_skill(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_skill(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_skill(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_skill(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_skill(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_skill_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, TrUserData);
      16 ->
	  d_field_p_skill_lv(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, TrUserData);
      24 ->
	  d_field_p_skill_cd(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, TrUserData);
      32 ->
	  d_field_p_skill_pos(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, TrUserData);
      40 ->
	  d_field_p_skill_auto_use(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_skill(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    1 ->
		skip_64_p_skill(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_skill(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_skill(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_skill(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_skill(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, _) ->
    #p_skill{id = F@_1, lv = F@_2, cd = F@_3, pos = F@_4,
	     auto_use = F@_5}.

d_field_p_skill_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_skill_id(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_skill_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_skill(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_p_skill_lv(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_skill_lv(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_skill_lv(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_skill(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, TrUserData).

d_field_p_skill_cd(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_skill_cd(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_skill_cd(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_skill(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, TrUserData).

d_field_p_skill_pos(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_skill_pos(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_skill_pos(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_skill(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, TrUserData).

d_field_p_skill_auto_use(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_skill_auto_use(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_skill_auto_use(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_skill(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_skill(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_skill(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData);
skip_varint_p_skill(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_skill(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_skill(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_skill(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
skip_length_delimited_p_skill(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_skill(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_group_p_skill(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_skill(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_32_p_skill(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_skill(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

skip_64_p_skill(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_skill(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_skill_list_tos ->
	  merge_msg_m_skill_list_tos(Prev, New, TrUserData);
      m_skill_list_toc ->
	  merge_msg_m_skill_list_toc(Prev, New, TrUserData);
      m_skill_auto_use_tos ->
	  merge_msg_m_skill_auto_use_tos(Prev, New, TrUserData);
      m_skill_auto_use_toc ->
	  merge_msg_m_skill_auto_use_toc(Prev, New, TrUserData);
      m_skill_puton_tos ->
	  merge_msg_m_skill_puton_tos(Prev, New, TrUserData);
      m_skill_puton_toc ->
	  merge_msg_m_skill_puton_toc(Prev, New, TrUserData);
      m_skill_set_auto_use_tos ->
	  merge_msg_m_skill_set_auto_use_tos(Prev, New,
					     TrUserData);
      m_skill_set_auto_use_toc ->
	  merge_msg_m_skill_set_auto_use_toc(Prev, New,
					     TrUserData);
      m_skill_set_recommend_tos ->
	  merge_msg_m_skill_set_recommend_tos(Prev, New,
					      TrUserData);
      m_skill_set_recommend_toc ->
	  merge_msg_m_skill_set_recommend_toc(Prev, New,
					      TrUserData);
      m_skill_get_skill_toc ->
	  merge_msg_m_skill_get_skill_toc(Prev, New, TrUserData);
      m_skill_remove_skills_toc ->
	  merge_msg_m_skill_remove_skills_toc(Prev, New,
					      TrUserData);
      m_skill_update_cds_toc ->
	  merge_msg_m_skill_update_cds_toc(Prev, New, TrUserData);
      p_skill -> merge_msg_p_skill(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_skill_list_tos/3}).
merge_msg_m_skill_list_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_skill_list_toc/3}).
merge_msg_m_skill_list_toc(#m_skill_list_toc{skills =
						 PFskills},
			   #m_skill_list_toc{skills = NFskills}, TrUserData) ->
    #m_skill_list_toc{skills =
			  if PFskills /= undefined, NFskills /= undefined ->
				 'erlang_++'(PFskills, NFskills, TrUserData);
			     PFskills == undefined -> NFskills;
			     NFskills == undefined -> PFskills
			  end}.

-compile({nowarn_unused_function,merge_msg_m_skill_auto_use_tos/3}).
merge_msg_m_skill_auto_use_tos(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_skill_auto_use_toc/3}).
merge_msg_m_skill_auto_use_toc(#m_skill_auto_use_toc{auto_use
							 = PFauto_use},
			       #m_skill_auto_use_toc{auto_use = NFauto_use},
			       TrUserData) ->
    #m_skill_auto_use_toc{auto_use =
			      if PFauto_use /= undefined,
				 NFauto_use /= undefined ->
				     'tr_merge_m_skill_auto_use_toc.auto_use'(PFauto_use,
									      NFauto_use,
									      TrUserData);
				 PFauto_use == undefined -> NFauto_use;
				 NFauto_use == undefined -> PFauto_use
			      end}.

-compile({nowarn_unused_function,merge_msg_m_skill_puton_tos/3}).
merge_msg_m_skill_puton_tos(#m_skill_puton_tos{},
			    #m_skill_puton_tos{id = NFid, pos = NFpos}, _) ->
    #m_skill_puton_tos{id = NFid, pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_skill_puton_toc/3}).
merge_msg_m_skill_puton_toc(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_skill_set_auto_use_tos/3}).
merge_msg_m_skill_set_auto_use_tos(#m_skill_set_auto_use_tos{},
				   #m_skill_set_auto_use_tos{id = NFid,
							     auto_use =
								 NFauto_use},
				   _) ->
    #m_skill_set_auto_use_tos{id = NFid,
			      auto_use = NFauto_use}.

-compile({nowarn_unused_function,merge_msg_m_skill_set_auto_use_toc/3}).
merge_msg_m_skill_set_auto_use_toc(#m_skill_set_auto_use_toc{},
				   #m_skill_set_auto_use_toc{id = NFid,
							     auto_use =
								 NFauto_use},
				   _) ->
    #m_skill_set_auto_use_toc{id = NFid,
			      auto_use = NFauto_use}.

-compile({nowarn_unused_function,merge_msg_m_skill_set_recommend_tos/3}).
merge_msg_m_skill_set_recommend_tos(#m_skill_set_recommend_tos{},
				    #m_skill_set_recommend_tos{id = NFid}, _) ->
    #m_skill_set_recommend_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_skill_set_recommend_toc/3}).
merge_msg_m_skill_set_recommend_toc(#m_skill_set_recommend_toc{},
				    #m_skill_set_recommend_toc{id = NFid}, _) ->
    #m_skill_set_recommend_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_skill_get_skill_toc/3}).
merge_msg_m_skill_get_skill_toc(#m_skill_get_skill_toc{skill
							   = PFskill},
				#m_skill_get_skill_toc{skill = NFskill},
				TrUserData) ->
    #m_skill_get_skill_toc{skill =
			       merge_msg_p_skill(PFskill, NFskill, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_m_skill_remove_skills_toc/3}).
merge_msg_m_skill_remove_skills_toc(#m_skill_remove_skills_toc{skill_ids
								   =
								   PFskill_ids},
				    #m_skill_remove_skills_toc{skill_ids =
								   NFskill_ids},
				    TrUserData) ->
    #m_skill_remove_skills_toc{skill_ids =
				   if PFskill_ids /= undefined,
				      NFskill_ids /= undefined ->
					  'erlang_++'(PFskill_ids, NFskill_ids,
						      TrUserData);
				      PFskill_ids == undefined -> NFskill_ids;
				      NFskill_ids == undefined -> PFskill_ids
				   end}.

-compile({nowarn_unused_function,merge_msg_m_skill_update_cds_toc/3}).
merge_msg_m_skill_update_cds_toc(#m_skill_update_cds_toc{cds
							     = PFcds},
				 #m_skill_update_cds_toc{cds = NFcds},
				 TrUserData) ->
    #m_skill_update_cds_toc{cds =
				if PFcds /= undefined, NFcds /= undefined ->
				       'tr_merge_m_skill_update_cds_toc.cds'(PFcds,
									     NFcds,
									     TrUserData);
				   PFcds == undefined -> NFcds;
				   NFcds == undefined -> PFcds
				end}.

-compile({nowarn_unused_function,merge_msg_p_skill/3}).
merge_msg_p_skill(#p_skill{auto_use = PFauto_use},
		  #p_skill{id = NFid, lv = NFlv, cd = NFcd, pos = NFpos,
			   auto_use = NFauto_use},
		  _) ->
    #p_skill{id = NFid, lv = NFlv, cd = NFcd, pos = NFpos,
	     auto_use =
		 if NFauto_use =:= undefined -> PFauto_use;
		    true -> NFauto_use
		 end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_skill_list_tos ->
	  v_msg_m_skill_list_tos(Msg, [MsgName], TrUserData);
      m_skill_list_toc ->
	  v_msg_m_skill_list_toc(Msg, [MsgName], TrUserData);
      m_skill_auto_use_tos ->
	  v_msg_m_skill_auto_use_tos(Msg, [MsgName], TrUserData);
      m_skill_auto_use_toc ->
	  v_msg_m_skill_auto_use_toc(Msg, [MsgName], TrUserData);
      m_skill_puton_tos ->
	  v_msg_m_skill_puton_tos(Msg, [MsgName], TrUserData);
      m_skill_puton_toc ->
	  v_msg_m_skill_puton_toc(Msg, [MsgName], TrUserData);
      m_skill_set_auto_use_tos ->
	  v_msg_m_skill_set_auto_use_tos(Msg, [MsgName],
					 TrUserData);
      m_skill_set_auto_use_toc ->
	  v_msg_m_skill_set_auto_use_toc(Msg, [MsgName],
					 TrUserData);
      m_skill_set_recommend_tos ->
	  v_msg_m_skill_set_recommend_tos(Msg, [MsgName],
					  TrUserData);
      m_skill_set_recommend_toc ->
	  v_msg_m_skill_set_recommend_toc(Msg, [MsgName],
					  TrUserData);
      m_skill_get_skill_toc ->
	  v_msg_m_skill_get_skill_toc(Msg, [MsgName], TrUserData);
      m_skill_remove_skills_toc ->
	  v_msg_m_skill_remove_skills_toc(Msg, [MsgName],
					  TrUserData);
      m_skill_update_cds_toc ->
	  v_msg_m_skill_update_cds_toc(Msg, [MsgName],
				       TrUserData);
      p_skill -> v_msg_p_skill(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_skill_list_tos/3}).
-dialyzer({nowarn_function,v_msg_m_skill_list_tos/3}).
v_msg_m_skill_list_tos(#m_skill_list_tos{}, _Path, _) ->
    ok;
v_msg_m_skill_list_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_list_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_list_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_list_toc/3}).
v_msg_m_skill_list_toc(#m_skill_list_toc{skills = F1},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_skill(Elem, [skills | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_skill}}, F1,
			 [skills | Path])
    end,
    ok;
v_msg_m_skill_list_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_list_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_auto_use_tos/3}).
-dialyzer({nowarn_function,v_msg_m_skill_auto_use_tos/3}).
v_msg_m_skill_auto_use_tos(#m_skill_auto_use_tos{},
			   _Path, _) ->
    ok;
v_msg_m_skill_auto_use_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_auto_use_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_auto_use_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_auto_use_toc/3}).
v_msg_m_skill_auto_use_toc(#m_skill_auto_use_toc{auto_use
						     = F1},
			   Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [auto_use | Path], TrUserData),
    ok;
v_msg_m_skill_auto_use_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_auto_use_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_puton_tos/3}).
-dialyzer({nowarn_function,v_msg_m_skill_puton_tos/3}).
v_msg_m_skill_puton_tos(#m_skill_puton_tos{id = F1,
					   pos = F2},
			Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [pos | Path], TrUserData),
    ok;
v_msg_m_skill_puton_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_puton_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_puton_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_puton_toc/3}).
v_msg_m_skill_puton_toc(#m_skill_puton_toc{}, _Path,
			_) ->
    ok;
v_msg_m_skill_puton_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_puton_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_set_auto_use_tos/3}).
-dialyzer({nowarn_function,v_msg_m_skill_set_auto_use_tos/3}).
v_msg_m_skill_set_auto_use_tos(#m_skill_set_auto_use_tos{id
							     = F1,
							 auto_use = F2},
			       Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [auto_use | Path], TrUserData),
    ok;
v_msg_m_skill_set_auto_use_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_set_auto_use_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_skill_set_auto_use_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_set_auto_use_toc/3}).
v_msg_m_skill_set_auto_use_toc(#m_skill_set_auto_use_toc{id
							     = F1,
							 auto_use = F2},
			       Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [auto_use | Path], TrUserData),
    ok;
v_msg_m_skill_set_auto_use_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_set_auto_use_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_skill_set_recommend_tos/3}).
-dialyzer({nowarn_function,v_msg_m_skill_set_recommend_tos/3}).
v_msg_m_skill_set_recommend_tos(#m_skill_set_recommend_tos{id
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_skill_set_recommend_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_set_recommend_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_skill_set_recommend_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_set_recommend_toc/3}).
v_msg_m_skill_set_recommend_toc(#m_skill_set_recommend_toc{id
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_skill_set_recommend_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_set_recommend_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_skill_get_skill_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_get_skill_toc/3}).
v_msg_m_skill_get_skill_toc(#m_skill_get_skill_toc{skill
						       = F1},
			    Path, TrUserData) ->
    v_msg_p_skill(F1, [skill | Path], TrUserData), ok;
v_msg_m_skill_get_skill_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_get_skill_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_skill_remove_skills_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_remove_skills_toc/3}).
v_msg_m_skill_remove_skills_toc(#m_skill_remove_skills_toc{skill_ids
							       = F1},
				Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [skill_ids | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [skill_ids | Path])
    end,
    ok;
v_msg_m_skill_remove_skills_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_remove_skills_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_skill_update_cds_toc/3}).
-dialyzer({nowarn_function,v_msg_m_skill_update_cds_toc/3}).
v_msg_m_skill_update_cds_toc(#m_skill_update_cds_toc{cds
							 = F1},
			     Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [cds | Path], TrUserData), ok;
v_msg_m_skill_update_cds_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_skill_update_cds_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_skill/3}).
-dialyzer({nowarn_function,v_msg_p_skill/3}).
v_msg_p_skill(#p_skill{id = F1, lv = F2, cd = F3,
		       pos = F4, auto_use = F5},
	      Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [lv | Path], TrUserData),
    v_type_uint64(F3, [cd | Path], TrUserData),
    v_type_int32(F4, [pos | Path], TrUserData),
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [auto_use | Path], TrUserData)
    end,
    ok;
v_msg_p_skill(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_skill}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_skill_update_cds_toc.cds[x]'/2}).
'tr_encode_m_skill_update_cds_toc.cds[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_skill_update_cds_toc.cds'/2}).
'tr_decode_init_default_m_skill_update_cds_toc.cds'(_,
						    _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_skill_update_cds_toc.cds'/3}).
'tr_merge_m_skill_update_cds_toc.cds'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_skill_update_cds_toc.cds'/2}).
'tr_decode_repeated_finalize_m_skill_update_cds_toc.cds'(L,
							 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_skill_update_cds_toc.cds'/2}).
'tr_encode_m_skill_update_cds_toc.cds'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_skill_update_cds_toc.cds'/3}).
'tr_decode_repeated_add_elem_m_skill_update_cds_toc.cds'(Elem,
							 L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_skill_auto_use_toc.auto_use'/2}).
'tr_decode_init_default_m_skill_auto_use_toc.auto_use'(_,
						       _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_skill_auto_use_toc.auto_use'/3}).
'tr_merge_m_skill_auto_use_toc.auto_use'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_skill_auto_use_toc.auto_use'/2}).
'tr_decode_repeated_finalize_m_skill_auto_use_toc.auto_use'(L,
							    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_skill_auto_use_toc.auto_use'/2}).
'tr_encode_m_skill_auto_use_toc.auto_use'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_skill_auto_use_toc.auto_use'/3}).
'tr_decode_repeated_add_elem_m_skill_auto_use_toc.auto_use'(Elem,
							    L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_skill_auto_use_toc.auto_use[x]'/2}).
'tr_encode_m_skill_auto_use_toc.auto_use[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_skill_list_tos}, []},
     {{msg, m_skill_list_toc},
      [#field{name = skills, fnum = 1, rnum = 2,
	      type = {msg, p_skill}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_skill_auto_use_tos}, []},
     {{msg, m_skill_auto_use_toc},
      [#field{name = auto_use, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_skill_puton_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_skill_puton_toc}, []},
     {{msg, m_skill_set_auto_use_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = auto_use, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_skill_set_auto_use_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = auto_use, fnum = 3, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_skill_set_recommend_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_skill_set_recommend_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_skill_get_skill_toc},
      [#field{name = skill, fnum = 1, rnum = 2,
	      type = {msg, p_skill}, occurrence = required,
	      opts = []}]},
     {{msg, m_skill_remove_skills_toc},
      [#field{name = skill_ids, fnum = 1, rnum = 2,
	      type = int32, occurrence = repeated, opts = []}]},
     {{msg, m_skill_update_cds_toc},
      [#field{name = cds, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_skill},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = lv, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = cd, fnum = 3, rnum = 4, type = uint64,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = auto_use, fnum = 5, rnum = 6,
	      type = int32, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [m_skill_list_tos, m_skill_list_toc,
     m_skill_auto_use_tos, m_skill_auto_use_toc,
     m_skill_puton_tos, m_skill_puton_toc,
     m_skill_set_auto_use_tos, m_skill_set_auto_use_toc,
     m_skill_set_recommend_tos, m_skill_set_recommend_toc,
     m_skill_get_skill_toc, m_skill_remove_skills_toc,
     m_skill_update_cds_toc, p_skill].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_skill_list_tos, m_skill_list_toc,
     m_skill_auto_use_tos, m_skill_auto_use_toc,
     m_skill_puton_tos, m_skill_puton_toc,
     m_skill_set_auto_use_tos, m_skill_set_auto_use_toc,
     m_skill_set_recommend_tos, m_skill_set_recommend_toc,
     m_skill_get_skill_toc, m_skill_remove_skills_toc,
     m_skill_update_cds_toc, p_skill].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_skill_list_tos) -> [];
find_msg_def(m_skill_list_toc) ->
    [#field{name = skills, fnum = 1, rnum = 2,
	    type = {msg, p_skill}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_skill_auto_use_tos) -> [];
find_msg_def(m_skill_auto_use_toc) ->
    [#field{name = auto_use, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_skill_puton_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_skill_puton_toc) -> [];
find_msg_def(m_skill_set_auto_use_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = auto_use, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_skill_set_auto_use_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = auto_use, fnum = 3, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_skill_set_recommend_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_skill_set_recommend_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_skill_get_skill_toc) ->
    [#field{name = skill, fnum = 1, rnum = 2,
	    type = {msg, p_skill}, occurrence = required,
	    opts = []}];
find_msg_def(m_skill_remove_skills_toc) ->
    [#field{name = skill_ids, fnum = 1, rnum = 2,
	    type = int32, occurrence = repeated, opts = []}];
find_msg_def(m_skill_update_cds_toc) ->
    [#field{name = cds, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_skill) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = lv, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = cd, fnum = 3, rnum = 4, type = uint64,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = auto_use, fnum = 5, rnum = 6,
	    type = int32, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
