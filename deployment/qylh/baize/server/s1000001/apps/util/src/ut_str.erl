%%%=============================================================================
%%% @author z.hua
%%% @doc
%%%
%%% @end
%%%=============================================================================

-module(ut_str).

%% API
-export([len/1]).
-export([md5/1]).
-export([sha/1]).

%%%-----------------------------------------------------------------------------
%%% API Functions
%%%-----------------------------------------------------------------------------

%%-----------------------------------------------
%% @doc 计算字符串长度
%% 中文两个字符，英文一个字符
-spec len(string()) ->
	integer().
%%-----------------------------------------------
len(Str) ->
    len(unicode:characters_to_list(Str, utf8), 0).


%%-----------------------------------------------
%% @doc 计算md5码
-spec md5(string()) ->
	string().
%%-----------------------------------------------
md5(Str) ->
	Bin = ut_conv:to_binary(Str),
    lists:flatten([io_lib:format("~2.16.0b", [N]) || N <- binary_to_list(erlang:md5(Bin))]).


%%-----------------------------------------------
%% @doc 计算sha1码
-spec sha(string()) ->
	string().
%%-----------------------------------------------
sha(Str) ->
	lists:flatten([io_lib:format("~2.16.0b", [N]) || N <- binary_to_list(crypto:hash(sha, Str))]).

%%%-----------------------------------------------------------------------------
%%% Internal Functions
%%%-----------------------------------------------------------------------------
len([], Len) ->
	Len;
len([H | T], Len) when H >= 16#4e00, H =< 16#9FFF ->
	len(T, Len + 2);
len([H | T], Len) when H >= 16#3400, H =< 16#4DFF ->
	len(T, Len + 2);
len([H | T], Len) when H >= 16#20000, H =< 16#2A6DF ->
	len(T, Len + 2);
len([_H | T], Len) ->
	len(T, Len + 1).