%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1611_cross_guildwar).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1611_cross_guildwar.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_cgw_panel_tos() :: #m_cgw_panel_tos{}.

-type m_cgw_panel_toc() :: #m_cgw_panel_toc{}.

-type m_cgw_guilds_tos() :: #m_cgw_guilds_tos{}.

-type m_cgw_guilds_toc() :: #m_cgw_guilds_toc{}.

-type m_cgw_book_tos() :: #m_cgw_book_tos{}.

-type m_cgw_book_toc() :: #m_cgw_book_toc{}.

-type m_cgw_ranking_tos() :: #m_cgw_ranking_tos{}.

-type m_cgw_ranking_toc() :: #m_cgw_ranking_toc{}.

-type m_cgw_match_tos() :: #m_cgw_match_tos{}.

-type m_cgw_match_toc() :: #m_cgw_match_toc{}.

-type m_cgw_result_toc() :: #m_cgw_result_toc{}.

-type p_cgw_guild() :: #p_cgw_guild{}.

-type p_cgw_rank() :: #p_cgw_rank{}.

-type p_cgw_match() :: #p_cgw_match{}.

-type p_cgw_result() :: #p_cgw_result{}.

-export_type(['m_cgw_panel_tos'/0, 'm_cgw_panel_toc'/0, 'm_cgw_guilds_tos'/0, 'm_cgw_guilds_toc'/0, 'm_cgw_book_tos'/0, 'm_cgw_book_toc'/0, 'm_cgw_ranking_tos'/0, 'm_cgw_ranking_toc'/0, 'm_cgw_match_tos'/0, 'm_cgw_match_toc'/0, 'm_cgw_result_toc'/0, 'p_cgw_guild'/0, 'p_cgw_rank'/0, 'p_cgw_match'/0, 'p_cgw_result'/0]).

-spec encode_msg(#m_cgw_panel_tos{} | #m_cgw_panel_toc{} | #m_cgw_guilds_tos{} | #m_cgw_guilds_toc{} | #m_cgw_book_tos{} | #m_cgw_book_toc{} | #m_cgw_ranking_tos{} | #m_cgw_ranking_toc{} | #m_cgw_match_tos{} | #m_cgw_match_toc{} | #m_cgw_result_toc{} | #p_cgw_guild{} | #p_cgw_rank{} | #p_cgw_match{} | #p_cgw_result{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_cgw_panel_tos{} | #m_cgw_panel_toc{} | #m_cgw_guilds_tos{} | #m_cgw_guilds_toc{} | #m_cgw_book_tos{} | #m_cgw_book_toc{} | #m_cgw_ranking_tos{} | #m_cgw_ranking_toc{} | #m_cgw_match_tos{} | #m_cgw_match_toc{} | #m_cgw_result_toc{} | #p_cgw_guild{} | #p_cgw_rank{} | #p_cgw_match{} | #p_cgw_result{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_cgw_panel_tos{} | #m_cgw_panel_toc{} | #m_cgw_guilds_tos{} | #m_cgw_guilds_toc{} | #m_cgw_book_tos{} | #m_cgw_book_toc{} | #m_cgw_ranking_tos{} | #m_cgw_ranking_toc{} | #m_cgw_match_tos{} | #m_cgw_match_toc{} | #m_cgw_result_toc{} | #p_cgw_guild{} | #p_cgw_rank{} | #p_cgw_match{} | #p_cgw_result{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_cgw_panel_tos ->
	  encode_msg_m_cgw_panel_tos(id(Msg, TrUserData),
				     TrUserData);
      m_cgw_panel_toc ->
	  encode_msg_m_cgw_panel_toc(id(Msg, TrUserData),
				     TrUserData);
      m_cgw_guilds_tos ->
	  encode_msg_m_cgw_guilds_tos(id(Msg, TrUserData),
				      TrUserData);
      m_cgw_guilds_toc ->
	  encode_msg_m_cgw_guilds_toc(id(Msg, TrUserData),
				      TrUserData);
      m_cgw_book_tos ->
	  encode_msg_m_cgw_book_tos(id(Msg, TrUserData),
				    TrUserData);
      m_cgw_book_toc ->
	  encode_msg_m_cgw_book_toc(id(Msg, TrUserData),
				    TrUserData);
      m_cgw_ranking_tos ->
	  encode_msg_m_cgw_ranking_tos(id(Msg, TrUserData),
				       TrUserData);
      m_cgw_ranking_toc ->
	  encode_msg_m_cgw_ranking_toc(id(Msg, TrUserData),
				       TrUserData);
      m_cgw_match_tos ->
	  encode_msg_m_cgw_match_tos(id(Msg, TrUserData),
				     TrUserData);
      m_cgw_match_toc ->
	  encode_msg_m_cgw_match_toc(id(Msg, TrUserData),
				     TrUserData);
      m_cgw_result_toc ->
	  encode_msg_m_cgw_result_toc(id(Msg, TrUserData),
				      TrUserData);
      p_cgw_guild ->
	  encode_msg_p_cgw_guild(id(Msg, TrUserData), TrUserData);
      p_cgw_rank ->
	  encode_msg_p_cgw_rank(id(Msg, TrUserData), TrUserData);
      p_cgw_match ->
	  encode_msg_p_cgw_match(id(Msg, TrUserData), TrUserData);
      p_cgw_result ->
	  encode_msg_p_cgw_result(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_cgw_panel_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_cgw_panel_toc(Msg, TrUserData) ->
    encode_msg_m_cgw_panel_toc(Msg, <<>>, TrUserData).


encode_msg_m_cgw_panel_toc(#m_cgw_panel_toc{period = F1,
					    next = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_cgw_guilds_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_cgw_guilds_toc(Msg, TrUserData) ->
    encode_msg_m_cgw_guilds_toc(Msg, <<>>, TrUserData).


encode_msg_m_cgw_guilds_toc(#m_cgw_guilds_toc{guilds =
						  F1,
					      my_rank = F2, my_score = F3,
					      booktimes = F4, my_book = F5},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_cgw_guilds_toc_guilds(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_m_cgw_book_tos(Msg, TrUserData) ->
    encode_msg_m_cgw_book_tos(Msg, <<>>, TrUserData).


encode_msg_m_cgw_book_tos(#m_cgw_book_tos{guild_id =
					      F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
    end.

encode_msg_m_cgw_book_toc(Msg, TrUserData) ->
    encode_msg_m_cgw_book_toc(Msg, <<>>, TrUserData).


encode_msg_m_cgw_book_toc(#m_cgw_book_toc{guild_id =
					      F1},
			  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
    end.

encode_msg_m_cgw_ranking_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_cgw_ranking_toc(Msg, TrUserData) ->
    encode_msg_m_cgw_ranking_toc(Msg, <<>>, TrUserData).


encode_msg_m_cgw_ranking_toc(#m_cgw_ranking_toc{ranking
						    = F1},
			     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_cgw_ranking_toc_ranking(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_m_cgw_match_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_cgw_match_toc(Msg, TrUserData) ->
    encode_msg_m_cgw_match_toc(Msg, <<>>, TrUserData).


encode_msg_m_cgw_match_toc(#m_cgw_match_toc{round1 = F1,
					    round2 = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_cgw_match_toc_round1(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_cgw_match_toc_round2(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_cgw_result_toc(Msg, TrUserData) ->
    encode_msg_m_cgw_result_toc(Msg, <<>>, TrUserData).


encode_msg_m_cgw_result_toc(#m_cgw_result_toc{result =
						  F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_p_cgw_guild(Msg, TrUserData) ->
    encode_msg_p_cgw_guild(Msg, <<>>, TrUserData).


encode_msg_p_cgw_guild(#p_cgw_guild{id = F1, name = F2,
				    chief = F3, score = F4, book = F5,
				    book_times = F6, book_time = F7,
				    book_guild = F8, book_score = F9},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_fixed64(TrF5, <<B4/binary, 49>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 56>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 64>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_string(TrF8, <<B7/binary, 74>>, TrUserData)
	 end,
    begin
      TrF9 = id(F9, TrUserData),
      e_type_int32(TrF9, <<B8/binary, 80>>, TrUserData)
    end.

encode_msg_p_cgw_rank(Msg, TrUserData) ->
    encode_msg_p_cgw_rank(Msg, <<>>, TrUserData).


encode_msg_p_cgw_rank(#p_cgw_rank{id = F1, name = F2,
				  chief = F3, score = F4, rank = F5},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_p_cgw_match(Msg, TrUserData) ->
    encode_msg_p_cgw_match(Msg, <<>>, TrUserData).


encode_msg_p_cgw_match(#p_cgw_match{atk_id = F1,
				    atk_name = F2, def_id = F3, def_name = F4,
				    winner = F5},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_fixed64(TrF3, <<B2/binary, 25>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_fixed64(TrF5, <<B4/binary, 41>>, TrUserData)
    end.

encode_msg_p_cgw_result(Msg, TrUserData) ->
    encode_msg_p_cgw_result(Msg, <<>>, TrUserData).


encode_msg_p_cgw_result(#p_cgw_result{id = F1,
				      name = F2, rank = F3, kill = F4,
				      score = F5},
			Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

e_mfield_m_cgw_guilds_toc_guilds(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_p_cgw_guild(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_cgw_guilds_toc_guilds([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_cgw_guilds_toc_guilds(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_m_cgw_guilds_toc_guilds(Rest, Bin3, TrUserData);
e_field_m_cgw_guilds_toc_guilds([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_cgw_ranking_toc_ranking(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_p_cgw_rank(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_cgw_ranking_toc_ranking([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_cgw_ranking_toc_ranking(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_m_cgw_ranking_toc_ranking(Rest, Bin3,
				      TrUserData);
e_field_m_cgw_ranking_toc_ranking([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_m_cgw_match_toc_round1(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_cgw_match(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_cgw_match_toc_round1([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_cgw_match_toc_round1(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_m_cgw_match_toc_round1(Rest, Bin3, TrUserData);
e_field_m_cgw_match_toc_round1([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_cgw_match_toc_round2(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_cgw_match(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_cgw_match_toc_round2([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_cgw_match_toc_round2(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_m_cgw_match_toc_round2(Rest, Bin3, TrUserData);
e_field_m_cgw_match_toc_round2([], Bin, _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_cgw_panel_tos, Bin, TrUserData) ->
    id(decode_msg_m_cgw_panel_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_panel_toc, Bin, TrUserData) ->
    id(decode_msg_m_cgw_panel_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_guilds_tos, Bin, TrUserData) ->
    id(decode_msg_m_cgw_guilds_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_guilds_toc, Bin, TrUserData) ->
    id(decode_msg_m_cgw_guilds_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_book_tos, Bin, TrUserData) ->
    id(decode_msg_m_cgw_book_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_book_toc, Bin, TrUserData) ->
    id(decode_msg_m_cgw_book_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_ranking_tos, Bin, TrUserData) ->
    id(decode_msg_m_cgw_ranking_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_ranking_toc, Bin, TrUserData) ->
    id(decode_msg_m_cgw_ranking_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_match_tos, Bin, TrUserData) ->
    id(decode_msg_m_cgw_match_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_match_toc, Bin, TrUserData) ->
    id(decode_msg_m_cgw_match_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_cgw_result_toc, Bin, TrUserData) ->
    id(decode_msg_m_cgw_result_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_cgw_guild, Bin, TrUserData) ->
    id(decode_msg_p_cgw_guild(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_cgw_rank, Bin, TrUserData) ->
    id(decode_msg_p_cgw_rank(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_cgw_match, Bin, TrUserData) ->
    id(decode_msg_p_cgw_match(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_cgw_result, Bin, TrUserData) ->
    id(decode_msg_p_cgw_result(Bin, TrUserData),
       TrUserData).



decode_msg_m_cgw_panel_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_panel_tos(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_m_cgw_panel_tos(<<>>, 0, 0, _) ->
    #m_cgw_panel_tos{};
dfp_read_field_def_m_cgw_panel_tos(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_m_cgw_panel_tos(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_m_cgw_panel_tos(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_panel_tos(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_m_cgw_panel_tos(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_cgw_panel_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_cgw_panel_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_cgw_panel_tos(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_m_cgw_panel_tos(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_m_cgw_panel_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_cgw_panel_tos(<<>>, 0, 0, _) ->
    #m_cgw_panel_tos{}.

skip_varint_m_cgw_panel_tos(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_m_cgw_panel_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_cgw_panel_tos(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_cgw_panel_tos(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_m_cgw_panel_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_panel_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_m_cgw_panel_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_panel_tos(Rest2, 0, 0,
				       TrUserData).

skip_group_m_cgw_panel_tos(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_panel_tos(Rest, 0, Z2,
				       TrUserData).

skip_32_m_cgw_panel_tos(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_m_cgw_panel_tos(Rest, Z1, Z2,
				       TrUserData).

skip_64_m_cgw_panel_tos(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_m_cgw_panel_tos(Rest, Z1, Z2,
				       TrUserData).

decode_msg_m_cgw_panel_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_panel_toc(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_cgw_panel_toc(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_cgw_panel_toc_period(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_m_cgw_panel_toc(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_cgw_panel_toc_next(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_m_cgw_panel_toc(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #m_cgw_panel_toc{period = F@_1, next = F@_2};
dfp_read_field_def_m_cgw_panel_toc(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_m_cgw_panel_toc(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_m_cgw_panel_toc(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_panel_toc(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_cgw_panel_toc(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_cgw_panel_toc_period(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  d_field_m_cgw_panel_toc_next(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_panel_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_m_cgw_panel_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_panel_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_m_cgw_panel_toc(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_m_cgw_panel_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_panel_toc(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #m_cgw_panel_toc{period = F@_1, next = F@_2}.

d_field_m_cgw_panel_toc_period(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_cgw_panel_toc_period(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_cgw_panel_toc_period(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_cgw_panel_toc(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_m_cgw_panel_toc_next(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_cgw_panel_toc_next(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_m_cgw_panel_toc_next(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_cgw_panel_toc(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_m_cgw_panel_toc(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_cgw_panel_toc(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_m_cgw_panel_toc(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_cgw_panel_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_m_cgw_panel_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_panel_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_m_cgw_panel_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_panel_toc(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_m_cgw_panel_toc(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_panel_toc(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_m_cgw_panel_toc(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_cgw_panel_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_m_cgw_panel_toc(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_cgw_panel_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_m_cgw_guilds_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_tos(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_m_cgw_guilds_tos(<<>>, 0, 0, _) ->
    #m_cgw_guilds_tos{};
dfp_read_field_def_m_cgw_guilds_tos(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_m_cgw_guilds_tos(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_m_cgw_guilds_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_guilds_tos(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_m_cgw_guilds_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_cgw_guilds_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_cgw_guilds_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_cgw_guilds_tos(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_m_cgw_guilds_tos(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_m_cgw_guilds_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_cgw_guilds_tos(<<>>, 0, 0, _) ->
    #m_cgw_guilds_tos{}.

skip_varint_m_cgw_guilds_tos(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_m_cgw_guilds_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_cgw_guilds_tos(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_tos(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_m_cgw_guilds_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_guilds_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_m_cgw_guilds_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_guilds_tos(Rest2, 0, 0,
					TrUserData).

skip_group_m_cgw_guilds_tos(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_guilds_tos(Rest, 0, Z2,
					TrUserData).

skip_32_m_cgw_guilds_tos(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_tos(Rest, Z1, Z2,
					TrUserData).

skip_64_m_cgw_guilds_tos(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_tos(Rest, Z1, Z2,
					TrUserData).

decode_msg_m_cgw_guilds_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_toc(Bin, 0, 0,
					id([], TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_cgw_guilds_toc(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_m_cgw_guilds_toc_guilds(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_cgw_guilds_toc(<<16, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_m_cgw_guilds_toc_my_rank(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_cgw_guilds_toc(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_m_cgw_guilds_toc_my_score(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_cgw_guilds_toc(<<32, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_m_cgw_guilds_toc_booktimes(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_cgw_guilds_toc(<<40, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    d_field_m_cgw_guilds_toc_my_book(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_cgw_guilds_toc(<<>>, 0, 0, R1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    #m_cgw_guilds_toc{guilds =
			  lists_reverse(R1, TrUserData),
		      my_rank = F@_2, my_score = F@_3, booktimes = F@_4,
		      my_book = F@_5};
dfp_read_field_def_m_cgw_guilds_toc(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_m_cgw_guilds_toc(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_m_cgw_guilds_toc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_guilds_toc(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
dg_read_field_def_m_cgw_guilds_toc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_cgw_guilds_toc_guilds(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      16 ->
	  d_field_m_cgw_guilds_toc_my_rank(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_m_cgw_guilds_toc_my_score(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_m_cgw_guilds_toc_booktimes(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      40 ->
	  d_field_m_cgw_guilds_toc_my_book(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_guilds_toc(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_m_cgw_guilds_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_guilds_toc(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       TrUserData);
	    3 ->
		skip_group_m_cgw_guilds_toc(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_m_cgw_guilds_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_guilds_toc(<<>>, 0, 0, R1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData) ->
    #m_cgw_guilds_toc{guilds =
			  lists_reverse(R1, TrUserData),
		      my_rank = F@_2, my_score = F@_3, booktimes = F@_4,
		      my_book = F@_5}.

d_field_m_cgw_guilds_toc_guilds(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_m_cgw_guilds_toc_guilds(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_m_cgw_guilds_toc_guilds(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_cgw_guild(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_cgw_guilds_toc(RestF, 0, 0,
					cons(NewFValue, Prev, TrUserData), F@_2,
					F@_3, F@_4, F@_5, TrUserData).

d_field_m_cgw_guilds_toc_my_rank(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_m_cgw_guilds_toc_my_rank(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_m_cgw_guilds_toc_my_rank(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_cgw_guilds_toc(RestF, 0, 0, F@_1,
					NewFValue, F@_3, F@_4, F@_5,
					TrUserData).

d_field_m_cgw_guilds_toc_my_score(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_m_cgw_guilds_toc_my_score(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_m_cgw_guilds_toc_my_score(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_cgw_guilds_toc(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, F@_5,
					TrUserData).

d_field_m_cgw_guilds_toc_booktimes(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_m_cgw_guilds_toc_booktimes(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_m_cgw_guilds_toc_booktimes(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_cgw_guilds_toc(RestF, 0, 0, F@_1,
					F@_2, F@_3, NewFValue, F@_5,
					TrUserData).

d_field_m_cgw_guilds_toc_my_book(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_m_cgw_guilds_toc_my_book(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_m_cgw_guilds_toc_my_book(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_cgw_guilds_toc(RestF, 0, 0, F@_1,
					F@_2, F@_3, F@_4, NewFValue,
					TrUserData).

skip_varint_m_cgw_guilds_toc(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    skip_varint_m_cgw_guilds_toc(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
skip_varint_m_cgw_guilds_toc(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_toc(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_m_cgw_guilds_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_guilds_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
skip_length_delimited_m_cgw_guilds_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_guilds_toc(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_m_cgw_guilds_toc(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_guilds_toc(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_m_cgw_guilds_toc(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_toc(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_m_cgw_guilds_toc(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_m_cgw_guilds_toc(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_m_cgw_book_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_book_tos(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_cgw_book_tos(<<9, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_cgw_book_tos_guild_id(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_cgw_book_tos(<<>>, 0, 0, F@_1,
				  _) ->
    #m_cgw_book_tos{guild_id = F@_1};
dfp_read_field_def_m_cgw_book_tos(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_m_cgw_book_tos(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_m_cgw_book_tos(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_book_tos(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_cgw_book_tos(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_cgw_book_tos_guild_id(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_book_tos(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_m_cgw_book_tos(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_book_tos(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_m_cgw_book_tos(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_m_cgw_book_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_book_tos(<<>>, 0, 0, F@_1, _) ->
    #m_cgw_book_tos{guild_id = F@_1}.

d_field_m_cgw_book_tos_guild_id(<<Value:64/little,
				  Rest/binary>>,
				Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_m_cgw_book_tos(Rest, Z1, Z2,
				      id(Value, TrUserData), TrUserData).

skip_varint_m_cgw_book_tos(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_cgw_book_tos(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_m_cgw_book_tos(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_book_tos(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_m_cgw_book_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_book_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_cgw_book_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_book_tos(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_m_cgw_book_tos(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_book_tos(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_m_cgw_book_tos(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_book_tos(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_m_cgw_book_tos(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_book_tos(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_m_cgw_book_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_book_toc(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_cgw_book_toc(<<9, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_cgw_book_toc_guild_id(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_cgw_book_toc(<<>>, 0, 0, F@_1,
				  _) ->
    #m_cgw_book_toc{guild_id = F@_1};
dfp_read_field_def_m_cgw_book_toc(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_m_cgw_book_toc(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_m_cgw_book_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_book_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_cgw_book_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_cgw_book_toc_guild_id(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_book_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_m_cgw_book_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_book_toc(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_m_cgw_book_toc(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_m_cgw_book_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_book_toc(<<>>, 0, 0, F@_1, _) ->
    #m_cgw_book_toc{guild_id = F@_1}.

d_field_m_cgw_book_toc_guild_id(<<Value:64/little,
				  Rest/binary>>,
				Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_m_cgw_book_toc(Rest, Z1, Z2,
				      id(Value, TrUserData), TrUserData).

skip_varint_m_cgw_book_toc(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_cgw_book_toc(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_m_cgw_book_toc(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_book_toc(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_m_cgw_book_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_book_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_cgw_book_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_book_toc(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_m_cgw_book_toc(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_book_toc(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_m_cgw_book_toc(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_book_toc(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_m_cgw_book_toc(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_book_toc(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_m_cgw_ranking_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_tos(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_m_cgw_ranking_tos(<<>>, 0, 0, _) ->
    #m_cgw_ranking_tos{};
dfp_read_field_def_m_cgw_ranking_tos(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_m_cgw_ranking_tos(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_m_cgw_ranking_tos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_ranking_tos(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_m_cgw_ranking_tos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_cgw_ranking_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_cgw_ranking_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_cgw_ranking_tos(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_m_cgw_ranking_tos(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_m_cgw_ranking_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_cgw_ranking_tos(<<>>, 0, 0, _) ->
    #m_cgw_ranking_tos{}.

skip_varint_m_cgw_ranking_tos(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_m_cgw_ranking_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_cgw_ranking_tos(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_tos(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_m_cgw_ranking_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_ranking_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_m_cgw_ranking_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_ranking_tos(Rest2, 0, 0,
					 TrUserData).

skip_group_m_cgw_ranking_tos(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_ranking_tos(Rest, 0, Z2,
					 TrUserData).

skip_32_m_cgw_ranking_tos(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_tos(Rest, Z1, Z2,
					 TrUserData).

skip_64_m_cgw_ranking_tos(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_tos(Rest, Z1, Z2,
					 TrUserData).

decode_msg_m_cgw_ranking_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_toc(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_m_cgw_ranking_toc(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_cgw_ranking_toc_ranking(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_cgw_ranking_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_cgw_ranking_toc{ranking =
			   lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_cgw_ranking_toc(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_m_cgw_ranking_toc(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_m_cgw_ranking_toc(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_ranking_toc(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_cgw_ranking_toc(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_cgw_ranking_toc_ranking(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_ranking_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_m_cgw_ranking_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_ranking_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_m_cgw_ranking_toc(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_m_cgw_ranking_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_ranking_toc(<<>>, 0, 0, R1,
				    TrUserData) ->
    #m_cgw_ranking_toc{ranking =
			   lists_reverse(R1, TrUserData)}.

d_field_m_cgw_ranking_toc_ranking(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_cgw_ranking_toc_ranking(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_cgw_ranking_toc_ranking(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_cgw_rank(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_cgw_ranking_toc(RestF, 0, 0,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_m_cgw_ranking_toc(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_cgw_ranking_toc(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_m_cgw_ranking_toc(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_m_cgw_ranking_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_ranking_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_cgw_ranking_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_ranking_toc(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_m_cgw_ranking_toc(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_ranking_toc(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_m_cgw_ranking_toc(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_m_cgw_ranking_toc(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_ranking_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_m_cgw_match_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_match_tos(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_m_cgw_match_tos(<<>>, 0, 0, _) ->
    #m_cgw_match_tos{};
dfp_read_field_def_m_cgw_match_tos(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_m_cgw_match_tos(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_m_cgw_match_tos(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_match_tos(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_m_cgw_match_tos(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_cgw_match_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_cgw_match_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_cgw_match_tos(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_m_cgw_match_tos(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_m_cgw_match_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_cgw_match_tos(<<>>, 0, 0, _) ->
    #m_cgw_match_tos{}.

skip_varint_m_cgw_match_tos(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_m_cgw_match_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_cgw_match_tos(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_cgw_match_tos(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_m_cgw_match_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_match_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_m_cgw_match_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_match_tos(Rest2, 0, 0,
				       TrUserData).

skip_group_m_cgw_match_tos(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_match_tos(Rest, 0, Z2,
				       TrUserData).

skip_32_m_cgw_match_tos(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_m_cgw_match_tos(Rest, Z1, Z2,
				       TrUserData).

skip_64_m_cgw_match_tos(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_m_cgw_match_tos(Rest, Z1, Z2,
				       TrUserData).

decode_msg_m_cgw_match_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_match_toc(Bin, 0, 0,
				       id([], TrUserData), id([], TrUserData),
				       TrUserData).

dfp_read_field_def_m_cgw_match_toc(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_cgw_match_toc_round1(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_m_cgw_match_toc(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_cgw_match_toc_round2(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_m_cgw_match_toc(<<>>, 0, 0, R1, R2,
				   TrUserData) ->
    #m_cgw_match_toc{round1 = lists_reverse(R1, TrUserData),
		     round2 = lists_reverse(R2, TrUserData)};
dfp_read_field_def_m_cgw_match_toc(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_m_cgw_match_toc(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_m_cgw_match_toc(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_match_toc(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_cgw_match_toc(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_cgw_match_toc_round1(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_m_cgw_match_toc_round2(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_match_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_m_cgw_match_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_match_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_m_cgw_match_toc(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_m_cgw_match_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_match_toc(<<>>, 0, 0, R1, R2,
				  TrUserData) ->
    #m_cgw_match_toc{round1 = lists_reverse(R1, TrUserData),
		     round2 = lists_reverse(R2, TrUserData)}.

d_field_m_cgw_match_toc_round1(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_cgw_match_toc_round1(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_cgw_match_toc_round1(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_cgw_match(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_cgw_match_toc(RestF, 0, 0,
				       cons(NewFValue, Prev, TrUserData), F@_2,
				       TrUserData).

d_field_m_cgw_match_toc_round2(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_cgw_match_toc_round2(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_cgw_match_toc_round2(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_cgw_match(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_cgw_match_toc(RestF, 0, 0, F@_1,
				       cons(NewFValue, Prev, TrUserData),
				       TrUserData).

skip_varint_m_cgw_match_toc(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_cgw_match_toc(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_m_cgw_match_toc(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_cgw_match_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_m_cgw_match_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_match_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_m_cgw_match_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_match_toc(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_m_cgw_match_toc(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_match_toc(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_m_cgw_match_toc(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_cgw_match_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_m_cgw_match_toc(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_cgw_match_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_m_cgw_result_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_cgw_result_toc(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_cgw_result_toc(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_cgw_result_toc_result(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_cgw_result_toc(<<>>, 0, 0, F@_1,
				    _) ->
    #m_cgw_result_toc{result = F@_1};
dfp_read_field_def_m_cgw_result_toc(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_m_cgw_result_toc(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_m_cgw_result_toc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_cgw_result_toc(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_cgw_result_toc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_cgw_result_toc_result(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_cgw_result_toc(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_m_cgw_result_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_cgw_result_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_m_cgw_result_toc(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_m_cgw_result_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_cgw_result_toc(<<>>, 0, 0, F@_1,
				   _) ->
    #m_cgw_result_toc{result = F@_1}.

d_field_m_cgw_result_toc_result(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_cgw_result_toc_result(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_cgw_result_toc_result(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_cgw_result_toc(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_m_cgw_result_toc(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_cgw_result_toc(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_m_cgw_result_toc(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_result_toc(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_m_cgw_result_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_cgw_result_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_cgw_result_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_cgw_result_toc(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_m_cgw_result_toc(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_cgw_result_toc(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_m_cgw_result_toc(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_result_toc(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_m_cgw_result_toc(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_cgw_result_toc(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_p_cgw_guild(Bin, TrUserData) ->
    dfp_read_field_def_p_cgw_guild(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_cgw_guild(<<9, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_cgw_guild(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_cgw_guild(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_chief(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_p_cgw_guild(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_score(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_p_cgw_guild(<<49, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_book(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_cgw_guild(<<56, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_book_times(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
dfp_read_field_def_p_cgw_guild(<<64, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_book_time(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
dfp_read_field_def_p_cgw_guild(<<74, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_book_guild(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
dfp_read_field_def_p_cgw_guild(<<80, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_cgw_guild_book_score(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
dfp_read_field_def_p_cgw_guild(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #p_cgw_guild{id = F@_1, name = F@_2, chief = F@_3,
		 score = F@_4, book = F@_5, book_times = F@_6,
		 book_time = F@_7, book_guild = F@_8, book_score = F@_9};
dfp_read_field_def_p_cgw_guild(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData) ->
    dg_read_field_def_p_cgw_guild(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

dg_read_field_def_p_cgw_guild(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_cgw_guild(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_p_cgw_guild(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_cgw_guild_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
      18 ->
	  d_field_p_cgw_guild_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      26 ->
	  d_field_p_cgw_guild_chief(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      32 ->
	  d_field_p_cgw_guild_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      49 ->
	  d_field_p_cgw_guild_book(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      56 ->
	  d_field_p_cgw_guild_book_times(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, TrUserData);
      64 ->
	  d_field_p_cgw_guild_book_time(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, TrUserData);
      74 ->
	  d_field_p_cgw_guild_book_guild(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, TrUserData);
      80 ->
	  d_field_p_cgw_guild_book_score(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_cgw_guild(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					TrUserData);
	    1 ->
		skip_64_p_cgw_guild(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
	    2 ->
		skip_length_delimited_p_cgw_guild(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, TrUserData);
	    3 ->
		skip_group_p_cgw_guild(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
	    5 ->
		skip_32_p_cgw_guild(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
	  end
    end;
dg_read_field_def_p_cgw_guild(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #p_cgw_guild{id = F@_1, name = F@_2, chief = F@_3,
		 score = F@_4, book = F@_5, book_times = F@_6,
		 book_time = F@_7, book_guild = F@_8, book_score = F@_9}.

d_field_p_cgw_guild_id(<<Value:64/little, Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData) ->
    dfp_read_field_def_p_cgw_guild(Rest, Z1, Z2,
				   id(Value, TrUserData), F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_p_cgw_guild_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_p_cgw_guild_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				   F@_8, F@_9, TrUserData).

d_field_p_cgw_guild_chief(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_chief(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_p_cgw_guild_chief(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_cgw_guild_score(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_score(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_p_cgw_guild_score(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_cgw_guild_book(<<Value:64/little,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
			 F@_9, TrUserData) ->
    dfp_read_field_def_p_cgw_guild(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, id(Value, TrUserData), F@_6,
				   F@_7, F@_8, F@_9, TrUserData).

d_field_p_cgw_guild_book_times(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_book_times(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_p_cgw_guild_book_times(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			       F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_cgw_guild_book_time(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_book_time(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_p_cgw_guild_book_time(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			      F@_8, F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				   F@_9, TrUserData).

d_field_p_cgw_guild_book_guild(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_book_guild(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_p_cgw_guild_book_guild(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       _, F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				   F@_9, TrUserData).

d_field_p_cgw_guild_book_score(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData)
    when N < 57 ->
    d_field_p_cgw_guild_book_score(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, TrUserData);
d_field_p_cgw_guild_book_score(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_guild(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   NewFValue, TrUserData).

skip_varint_p_cgw_guild(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData) ->
    skip_varint_p_cgw_guild(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_p_cgw_guild(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData) ->
    dfp_read_field_def_p_cgw_guild(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_length_delimited_p_cgw_guild(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_cgw_guild(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_length_delimited_p_cgw_guild(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_cgw_guild(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_group_p_cgw_guild(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_cgw_guild(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_32_p_cgw_guild(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    dfp_read_field_def_p_cgw_guild(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_64_p_cgw_guild(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    dfp_read_field_def_p_cgw_guild(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

decode_msg_p_cgw_rank(Bin, TrUserData) ->
    dfp_read_field_def_p_cgw_rank(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_cgw_rank(<<9, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_rank_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_rank(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_rank_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_rank(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_rank_chief(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_rank(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_rank_score(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_rank(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_rank_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_rank(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #p_cgw_rank{id = F@_1, name = F@_2, chief = F@_3,
		score = F@_4, rank = F@_5};
dfp_read_field_def_p_cgw_rank(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_cgw_rank(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_cgw_rank(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_cgw_rank(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_cgw_rank(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_cgw_rank_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      18 ->
	  d_field_p_cgw_rank_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      26 ->
	  d_field_p_cgw_rank_chief(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      32 ->
	  d_field_p_cgw_rank_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_cgw_rank_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_cgw_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_cgw_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_cgw_rank(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_cgw_rank(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_cgw_rank(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_cgw_rank(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #p_cgw_rank{id = F@_1, name = F@_2, chief = F@_3,
		score = F@_4, rank = F@_5}.

d_field_p_cgw_rank_id(<<Value:64/little, Rest/binary>>,
		      Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_rank(Rest, Z1, Z2,
				  id(Value, TrUserData), F@_2, F@_3, F@_4, F@_5,
				  TrUserData).

d_field_p_cgw_rank_name(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_rank_name(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_rank_name(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_rank(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_cgw_rank_chief(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_rank_chief(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_rank_chief(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_rank(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, TrUserData).

d_field_p_cgw_rank_score(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_rank_score(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_rank_score(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_rank(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_p_cgw_rank_rank(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_rank_rank(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_rank_rank(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_rank(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_cgw_rank(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_cgw_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_p_cgw_rank(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_rank(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_cgw_rank(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_p_cgw_rank(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_p_cgw_rank(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_cgw_rank(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_p_cgw_rank(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_cgw_rank(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_p_cgw_rank(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_rank(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_p_cgw_rank(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_rank(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_cgw_match(Bin, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_cgw_match(<<9, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_match_atk_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_match(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_match_atk_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_match(<<25, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_match_def_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_match(<<34, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_match_def_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_match(<<41, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_match_winner(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_match(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, _) ->
    #p_cgw_match{atk_id = F@_1, atk_name = F@_2,
		 def_id = F@_3, def_name = F@_4, winner = F@_5};
dfp_read_field_def_p_cgw_match(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_cgw_match(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_cgw_match(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_cgw_match(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
dg_read_field_def_p_cgw_match(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_cgw_match_atk_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      18 ->
	  d_field_p_cgw_match_atk_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      25 ->
	  d_field_p_cgw_match_def_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      34 ->
	  d_field_p_cgw_match_def_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
      41 ->
	  d_field_p_cgw_match_winner(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_cgw_match(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_cgw_match(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_cgw_match(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    3 ->
		skip_group_p_cgw_match(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_cgw_match(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_cgw_match(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #p_cgw_match{atk_id = F@_1, atk_name = F@_2,
		 def_id = F@_3, def_name = F@_4, winner = F@_5}.

d_field_p_cgw_match_atk_id(<<Value:64/little,
			     Rest/binary>>,
			   Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Rest, Z1, Z2,
				   id(Value, TrUserData), F@_2, F@_3, F@_4,
				   F@_5, TrUserData).

d_field_p_cgw_match_atk_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_match_atk_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_match_atk_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_match(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_cgw_match_def_id(<<Value:64/little,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Rest, Z1, Z2, F@_1, F@_2,
				   id(Value, TrUserData), F@_4, F@_5,
				   TrUserData).

d_field_p_cgw_match_def_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_match_def_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_match_def_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_match(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, TrUserData).

d_field_p_cgw_match_winner(<<Value:64/little,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, id(Value, TrUserData),
				   TrUserData).

skip_varint_p_cgw_match(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_cgw_match(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
skip_varint_p_cgw_match(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_cgw_match(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    skip_length_delimited_p_cgw_match(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
skip_length_delimited_p_cgw_match(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_cgw_match(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_group_p_cgw_match(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_cgw_match(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_32_p_cgw_match(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

skip_64_p_cgw_match(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_match(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_cgw_result(Bin, TrUserData) ->
    dfp_read_field_def_p_cgw_result(Bin, 0, 0,
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData),
				    id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_cgw_result(<<9, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_result_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_result(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_result_name(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_result(<<24, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_result_rank(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_result(<<32, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_result_kill(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_result(<<40, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_cgw_result_score(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_cgw_result(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, _) ->
    #p_cgw_result{id = F@_1, name = F@_2, rank = F@_3,
		  kill = F@_4, score = F@_5};
dfp_read_field_def_p_cgw_result(Other, Z1, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_cgw_result(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_cgw_result(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_cgw_result(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
dg_read_field_def_p_cgw_result(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_cgw_result_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      18 ->
	  d_field_p_cgw_result_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      24 ->
	  d_field_p_cgw_result_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      32 ->
	  d_field_p_cgw_result_kill(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_cgw_result_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_cgw_result(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_cgw_result(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_cgw_result(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
	    3 ->
		skip_group_p_cgw_result(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_cgw_result(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_cgw_result(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, _) ->
    #p_cgw_result{id = F@_1, name = F@_2, rank = F@_3,
		  kill = F@_4, score = F@_5}.

d_field_p_cgw_result_id(<<Value:64/little,
			  Rest/binary>>,
			Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_result(Rest, Z1, Z2,
				    id(Value, TrUserData), F@_2, F@_3, F@_4,
				    F@_5, TrUserData).

d_field_p_cgw_result_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_result_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_result_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_cgw_result(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_cgw_result_rank(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_result_rank(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_result_rank(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_result(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, F@_4, F@_5, TrUserData).

d_field_p_cgw_result_kill(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_result_kill(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_result_kill(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_result(RestF, 0, 0, F@_1, F@_2,
				    F@_3, NewFValue, F@_5, TrUserData).

d_field_p_cgw_result_score(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_cgw_result_score(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_cgw_result_score(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_cgw_result(RestF, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_cgw_result(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_cgw_result(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
skip_varint_p_cgw_result(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_result(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_cgw_result(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    skip_length_delimited_p_cgw_result(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
skip_length_delimited_p_cgw_result(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_cgw_result(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData).

skip_group_p_cgw_result(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_cgw_result(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData).

skip_32_p_cgw_result(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_result(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_p_cgw_result(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_cgw_result(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_cgw_panel_tos ->
	  merge_msg_m_cgw_panel_tos(Prev, New, TrUserData);
      m_cgw_panel_toc ->
	  merge_msg_m_cgw_panel_toc(Prev, New, TrUserData);
      m_cgw_guilds_tos ->
	  merge_msg_m_cgw_guilds_tos(Prev, New, TrUserData);
      m_cgw_guilds_toc ->
	  merge_msg_m_cgw_guilds_toc(Prev, New, TrUserData);
      m_cgw_book_tos ->
	  merge_msg_m_cgw_book_tos(Prev, New, TrUserData);
      m_cgw_book_toc ->
	  merge_msg_m_cgw_book_toc(Prev, New, TrUserData);
      m_cgw_ranking_tos ->
	  merge_msg_m_cgw_ranking_tos(Prev, New, TrUserData);
      m_cgw_ranking_toc ->
	  merge_msg_m_cgw_ranking_toc(Prev, New, TrUserData);
      m_cgw_match_tos ->
	  merge_msg_m_cgw_match_tos(Prev, New, TrUserData);
      m_cgw_match_toc ->
	  merge_msg_m_cgw_match_toc(Prev, New, TrUserData);
      m_cgw_result_toc ->
	  merge_msg_m_cgw_result_toc(Prev, New, TrUserData);
      p_cgw_guild ->
	  merge_msg_p_cgw_guild(Prev, New, TrUserData);
      p_cgw_rank ->
	  merge_msg_p_cgw_rank(Prev, New, TrUserData);
      p_cgw_match ->
	  merge_msg_p_cgw_match(Prev, New, TrUserData);
      p_cgw_result ->
	  merge_msg_p_cgw_result(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_cgw_panel_tos/3}).
merge_msg_m_cgw_panel_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_cgw_panel_toc/3}).
merge_msg_m_cgw_panel_toc(#m_cgw_panel_toc{},
			  #m_cgw_panel_toc{period = NFperiod, next = NFnext},
			  _) ->
    #m_cgw_panel_toc{period = NFperiod, next = NFnext}.

-compile({nowarn_unused_function,merge_msg_m_cgw_guilds_tos/3}).
merge_msg_m_cgw_guilds_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_cgw_guilds_toc/3}).
merge_msg_m_cgw_guilds_toc(#m_cgw_guilds_toc{guilds =
						 PFguilds},
			   #m_cgw_guilds_toc{guilds = NFguilds,
					     my_rank = NFmy_rank,
					     my_score = NFmy_score,
					     booktimes = NFbooktimes,
					     my_book = NFmy_book},
			   TrUserData) ->
    #m_cgw_guilds_toc{guilds =
			  if PFguilds /= undefined, NFguilds /= undefined ->
				 'erlang_++'(PFguilds, NFguilds, TrUserData);
			     PFguilds == undefined -> NFguilds;
			     NFguilds == undefined -> PFguilds
			  end,
		      my_rank = NFmy_rank, my_score = NFmy_score,
		      booktimes = NFbooktimes, my_book = NFmy_book}.

-compile({nowarn_unused_function,merge_msg_m_cgw_book_tos/3}).
merge_msg_m_cgw_book_tos(#m_cgw_book_tos{},
			 #m_cgw_book_tos{guild_id = NFguild_id}, _) ->
    #m_cgw_book_tos{guild_id = NFguild_id}.

-compile({nowarn_unused_function,merge_msg_m_cgw_book_toc/3}).
merge_msg_m_cgw_book_toc(#m_cgw_book_toc{},
			 #m_cgw_book_toc{guild_id = NFguild_id}, _) ->
    #m_cgw_book_toc{guild_id = NFguild_id}.

-compile({nowarn_unused_function,merge_msg_m_cgw_ranking_tos/3}).
merge_msg_m_cgw_ranking_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_cgw_ranking_toc/3}).
merge_msg_m_cgw_ranking_toc(#m_cgw_ranking_toc{ranking =
						   PFranking},
			    #m_cgw_ranking_toc{ranking = NFranking},
			    TrUserData) ->
    #m_cgw_ranking_toc{ranking =
			   if PFranking /= undefined, NFranking /= undefined ->
				  'erlang_++'(PFranking, NFranking, TrUserData);
			      PFranking == undefined -> NFranking;
			      NFranking == undefined -> PFranking
			   end}.

-compile({nowarn_unused_function,merge_msg_m_cgw_match_tos/3}).
merge_msg_m_cgw_match_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_cgw_match_toc/3}).
merge_msg_m_cgw_match_toc(#m_cgw_match_toc{round1 =
					       PFround1,
					   round2 = PFround2},
			  #m_cgw_match_toc{round1 = NFround1,
					   round2 = NFround2},
			  TrUserData) ->
    #m_cgw_match_toc{round1 =
			 if PFround1 /= undefined, NFround1 /= undefined ->
				'erlang_++'(PFround1, NFround1, TrUserData);
			    PFround1 == undefined -> NFround1;
			    NFround1 == undefined -> PFround1
			 end,
		     round2 =
			 if PFround2 /= undefined, NFround2 /= undefined ->
				'erlang_++'(PFround2, NFround2, TrUserData);
			    PFround2 == undefined -> NFround2;
			    NFround2 == undefined -> PFround2
			 end}.

-compile({nowarn_unused_function,merge_msg_m_cgw_result_toc/3}).
merge_msg_m_cgw_result_toc(#m_cgw_result_toc{},
			   #m_cgw_result_toc{result = NFresult}, _) ->
    #m_cgw_result_toc{result = NFresult}.

-compile({nowarn_unused_function,merge_msg_p_cgw_guild/3}).
merge_msg_p_cgw_guild(#p_cgw_guild{},
		      #p_cgw_guild{id = NFid, name = NFname, chief = NFchief,
				   score = NFscore, book = NFbook,
				   book_times = NFbook_times,
				   book_time = NFbook_time,
				   book_guild = NFbook_guild,
				   book_score = NFbook_score},
		      _) ->
    #p_cgw_guild{id = NFid, name = NFname, chief = NFchief,
		 score = NFscore, book = NFbook,
		 book_times = NFbook_times, book_time = NFbook_time,
		 book_guild = NFbook_guild, book_score = NFbook_score}.

-compile({nowarn_unused_function,merge_msg_p_cgw_rank/3}).
merge_msg_p_cgw_rank(#p_cgw_rank{},
		     #p_cgw_rank{id = NFid, name = NFname, chief = NFchief,
				 score = NFscore, rank = NFrank},
		     _) ->
    #p_cgw_rank{id = NFid, name = NFname, chief = NFchief,
		score = NFscore, rank = NFrank}.

-compile({nowarn_unused_function,merge_msg_p_cgw_match/3}).
merge_msg_p_cgw_match(#p_cgw_match{},
		      #p_cgw_match{atk_id = NFatk_id, atk_name = NFatk_name,
				   def_id = NFdef_id, def_name = NFdef_name,
				   winner = NFwinner},
		      _) ->
    #p_cgw_match{atk_id = NFatk_id, atk_name = NFatk_name,
		 def_id = NFdef_id, def_name = NFdef_name,
		 winner = NFwinner}.

-compile({nowarn_unused_function,merge_msg_p_cgw_result/3}).
merge_msg_p_cgw_result(#p_cgw_result{},
		       #p_cgw_result{id = NFid, name = NFname, rank = NFrank,
				     kill = NFkill, score = NFscore},
		       _) ->
    #p_cgw_result{id = NFid, name = NFname, rank = NFrank,
		  kill = NFkill, score = NFscore}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_cgw_panel_tos ->
	  v_msg_m_cgw_panel_tos(Msg, [MsgName], TrUserData);
      m_cgw_panel_toc ->
	  v_msg_m_cgw_panel_toc(Msg, [MsgName], TrUserData);
      m_cgw_guilds_tos ->
	  v_msg_m_cgw_guilds_tos(Msg, [MsgName], TrUserData);
      m_cgw_guilds_toc ->
	  v_msg_m_cgw_guilds_toc(Msg, [MsgName], TrUserData);
      m_cgw_book_tos ->
	  v_msg_m_cgw_book_tos(Msg, [MsgName], TrUserData);
      m_cgw_book_toc ->
	  v_msg_m_cgw_book_toc(Msg, [MsgName], TrUserData);
      m_cgw_ranking_tos ->
	  v_msg_m_cgw_ranking_tos(Msg, [MsgName], TrUserData);
      m_cgw_ranking_toc ->
	  v_msg_m_cgw_ranking_toc(Msg, [MsgName], TrUserData);
      m_cgw_match_tos ->
	  v_msg_m_cgw_match_tos(Msg, [MsgName], TrUserData);
      m_cgw_match_toc ->
	  v_msg_m_cgw_match_toc(Msg, [MsgName], TrUserData);
      m_cgw_result_toc ->
	  v_msg_m_cgw_result_toc(Msg, [MsgName], TrUserData);
      p_cgw_guild ->
	  v_msg_p_cgw_guild(Msg, [MsgName], TrUserData);
      p_cgw_rank ->
	  v_msg_p_cgw_rank(Msg, [MsgName], TrUserData);
      p_cgw_match ->
	  v_msg_p_cgw_match(Msg, [MsgName], TrUserData);
      p_cgw_result ->
	  v_msg_p_cgw_result(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_cgw_panel_tos/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_panel_tos/3}).
v_msg_m_cgw_panel_tos(#m_cgw_panel_tos{}, _Path, _) ->
    ok;
v_msg_m_cgw_panel_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_panel_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_cgw_panel_toc/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_panel_toc/3}).
v_msg_m_cgw_panel_toc(#m_cgw_panel_toc{period = F1,
				       next = F2},
		      Path, TrUserData) ->
    v_type_int32(F1, [period | Path], TrUserData),
    v_type_int32(F2, [next | Path], TrUserData),
    ok;
v_msg_m_cgw_panel_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_panel_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_cgw_guilds_tos/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_guilds_tos/3}).
v_msg_m_cgw_guilds_tos(#m_cgw_guilds_tos{}, _Path, _) ->
    ok;
v_msg_m_cgw_guilds_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_guilds_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_cgw_guilds_toc/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_guilds_toc/3}).
v_msg_m_cgw_guilds_toc(#m_cgw_guilds_toc{guilds = F1,
					 my_rank = F2, my_score = F3,
					 booktimes = F4, my_book = F5},
		       Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_cgw_guild(Elem, [guilds | Path],
				  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_cgw_guild}}, F1,
			 [guilds | Path])
    end,
    v_type_int32(F2, [my_rank | Path], TrUserData),
    v_type_int32(F3, [my_score | Path], TrUserData),
    v_type_int32(F4, [booktimes | Path], TrUserData),
    v_type_int32(F5, [my_book | Path], TrUserData),
    ok;
v_msg_m_cgw_guilds_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_guilds_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_cgw_book_tos/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_book_tos/3}).
v_msg_m_cgw_book_tos(#m_cgw_book_tos{guild_id = F1},
		     Path, TrUserData) ->
    v_type_fixed64(F1, [guild_id | Path], TrUserData), ok;
v_msg_m_cgw_book_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_book_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_cgw_book_toc/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_book_toc/3}).
v_msg_m_cgw_book_toc(#m_cgw_book_toc{guild_id = F1},
		     Path, TrUserData) ->
    v_type_fixed64(F1, [guild_id | Path], TrUserData), ok;
v_msg_m_cgw_book_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_book_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_cgw_ranking_tos/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_ranking_tos/3}).
v_msg_m_cgw_ranking_tos(#m_cgw_ranking_tos{}, _Path,
			_) ->
    ok;
v_msg_m_cgw_ranking_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_ranking_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_cgw_ranking_toc/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_ranking_toc/3}).
v_msg_m_cgw_ranking_toc(#m_cgw_ranking_toc{ranking =
					       F1},
			Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_cgw_rank(Elem, [ranking | Path],
				 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_cgw_rank}}, F1,
			 [ranking | Path])
    end,
    ok;
v_msg_m_cgw_ranking_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_ranking_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_cgw_match_tos/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_match_tos/3}).
v_msg_m_cgw_match_tos(#m_cgw_match_tos{}, _Path, _) ->
    ok;
v_msg_m_cgw_match_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_match_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_cgw_match_toc/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_match_toc/3}).
v_msg_m_cgw_match_toc(#m_cgw_match_toc{round1 = F1,
				       round2 = F2},
		      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_cgw_match(Elem, [round1 | Path],
				  TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_cgw_match}}, F1,
			 [round1 | Path])
    end,
    if is_list(F2) ->
	   _ = [v_msg_p_cgw_match(Elem, [round2 | Path],
				  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_cgw_match}}, F2,
			 [round2 | Path])
    end,
    ok;
v_msg_m_cgw_match_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_match_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_cgw_result_toc/3}).
-dialyzer({nowarn_function,v_msg_m_cgw_result_toc/3}).
v_msg_m_cgw_result_toc(#m_cgw_result_toc{result = F1},
		       Path, TrUserData) ->
    v_type_bool(F1, [result | Path], TrUserData), ok;
v_msg_m_cgw_result_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_cgw_result_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_cgw_guild/3}).
-dialyzer({nowarn_function,v_msg_p_cgw_guild/3}).
v_msg_p_cgw_guild(#p_cgw_guild{id = F1, name = F2,
			       chief = F3, score = F4, book = F5,
			       book_times = F6, book_time = F7, book_guild = F8,
			       book_score = F9},
		  Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_string(F3, [chief | Path], TrUserData),
    v_type_int32(F4, [score | Path], TrUserData),
    v_type_fixed64(F5, [book | Path], TrUserData),
    v_type_int32(F6, [book_times | Path], TrUserData),
    v_type_int32(F7, [book_time | Path], TrUserData),
    v_type_string(F8, [book_guild | Path], TrUserData),
    v_type_int32(F9, [book_score | Path], TrUserData),
    ok;
v_msg_p_cgw_guild(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_cgw_guild}, X, Path).

-compile({nowarn_unused_function,v_msg_p_cgw_rank/3}).
-dialyzer({nowarn_function,v_msg_p_cgw_rank/3}).
v_msg_p_cgw_rank(#p_cgw_rank{id = F1, name = F2,
			     chief = F3, score = F4, rank = F5},
		 Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_string(F3, [chief | Path], TrUserData),
    v_type_int32(F4, [score | Path], TrUserData),
    v_type_int32(F5, [rank | Path], TrUserData),
    ok;
v_msg_p_cgw_rank(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_cgw_rank}, X, Path).

-compile({nowarn_unused_function,v_msg_p_cgw_match/3}).
-dialyzer({nowarn_function,v_msg_p_cgw_match/3}).
v_msg_p_cgw_match(#p_cgw_match{atk_id = F1,
			       atk_name = F2, def_id = F3, def_name = F4,
			       winner = F5},
		  Path, TrUserData) ->
    v_type_fixed64(F1, [atk_id | Path], TrUserData),
    v_type_string(F2, [atk_name | Path], TrUserData),
    v_type_fixed64(F3, [def_id | Path], TrUserData),
    v_type_string(F4, [def_name | Path], TrUserData),
    v_type_fixed64(F5, [winner | Path], TrUserData),
    ok;
v_msg_p_cgw_match(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_cgw_match}, X, Path).

-compile({nowarn_unused_function,v_msg_p_cgw_result/3}).
-dialyzer({nowarn_function,v_msg_p_cgw_result/3}).
v_msg_p_cgw_result(#p_cgw_result{id = F1, name = F2,
				 rank = F3, kill = F4, score = F5},
		   Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_int32(F3, [rank | Path], TrUserData),
    v_type_int32(F4, [kill | Path], TrUserData),
    v_type_int32(F5, [score | Path], TrUserData),
    ok;
v_msg_p_cgw_result(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_cgw_result}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, m_cgw_panel_tos}, []},
     {{msg, m_cgw_panel_toc},
      [#field{name = period, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = next, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_cgw_guilds_tos}, []},
     {{msg, m_cgw_guilds_toc},
      [#field{name = guilds, fnum = 1, rnum = 2,
	      type = {msg, p_cgw_guild}, occurrence = repeated,
	      opts = []},
       #field{name = my_rank, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = my_score, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = booktimes, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = my_book, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_cgw_book_tos},
      [#field{name = guild_id, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []}]},
     {{msg, m_cgw_book_toc},
      [#field{name = guild_id, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []}]},
     {{msg, m_cgw_ranking_tos}, []},
     {{msg, m_cgw_ranking_toc},
      [#field{name = ranking, fnum = 1, rnum = 2,
	      type = {msg, p_cgw_rank}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_cgw_match_tos}, []},
     {{msg, m_cgw_match_toc},
      [#field{name = round1, fnum = 1, rnum = 2,
	      type = {msg, p_cgw_match}, occurrence = repeated,
	      opts = []},
       #field{name = round2, fnum = 2, rnum = 3,
	      type = {msg, p_cgw_match}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_cgw_result_toc},
      [#field{name = result, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, p_cgw_guild},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = chief, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = book, fnum = 6, rnum = 6, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = book_times, fnum = 7, rnum = 7,
	      type = int32, occurrence = required, opts = []},
       #field{name = book_time, fnum = 8, rnum = 8,
	      type = int32, occurrence = required, opts = []},
       #field{name = book_guild, fnum = 9, rnum = 9,
	      type = string, occurrence = required, opts = []},
       #field{name = book_score, fnum = 10, rnum = 10,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, p_cgw_rank},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = chief, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = rank, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_cgw_match},
      [#field{name = atk_id, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = atk_name, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = def_id, fnum = 3, rnum = 4,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = def_name, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = winner, fnum = 5, rnum = 6,
	      type = fixed64, occurrence = required, opts = []}]},
     {{msg, p_cgw_result},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = rank, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = kill, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_cgw_panel_tos, m_cgw_panel_toc, m_cgw_guilds_tos,
     m_cgw_guilds_toc, m_cgw_book_tos, m_cgw_book_toc,
     m_cgw_ranking_tos, m_cgw_ranking_toc, m_cgw_match_tos,
     m_cgw_match_toc, m_cgw_result_toc, p_cgw_guild,
     p_cgw_rank, p_cgw_match, p_cgw_result].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_cgw_panel_tos, m_cgw_panel_toc, m_cgw_guilds_tos,
     m_cgw_guilds_toc, m_cgw_book_tos, m_cgw_book_toc,
     m_cgw_ranking_tos, m_cgw_ranking_toc, m_cgw_match_tos,
     m_cgw_match_toc, m_cgw_result_toc, p_cgw_guild,
     p_cgw_rank, p_cgw_match, p_cgw_result].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_cgw_panel_tos) -> [];
find_msg_def(m_cgw_panel_toc) ->
    [#field{name = period, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = next, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_cgw_guilds_tos) -> [];
find_msg_def(m_cgw_guilds_toc) ->
    [#field{name = guilds, fnum = 1, rnum = 2,
	    type = {msg, p_cgw_guild}, occurrence = repeated,
	    opts = []},
     #field{name = my_rank, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = my_score, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = booktimes, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = my_book, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_cgw_book_tos) ->
    [#field{name = guild_id, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []}];
find_msg_def(m_cgw_book_toc) ->
    [#field{name = guild_id, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []}];
find_msg_def(m_cgw_ranking_tos) -> [];
find_msg_def(m_cgw_ranking_toc) ->
    [#field{name = ranking, fnum = 1, rnum = 2,
	    type = {msg, p_cgw_rank}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_cgw_match_tos) -> [];
find_msg_def(m_cgw_match_toc) ->
    [#field{name = round1, fnum = 1, rnum = 2,
	    type = {msg, p_cgw_match}, occurrence = repeated,
	    opts = []},
     #field{name = round2, fnum = 2, rnum = 3,
	    type = {msg, p_cgw_match}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_cgw_result_toc) ->
    [#field{name = result, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []}];
find_msg_def(p_cgw_guild) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = chief, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = book, fnum = 6, rnum = 6, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = book_times, fnum = 7, rnum = 7,
	    type = int32, occurrence = required, opts = []},
     #field{name = book_time, fnum = 8, rnum = 8,
	    type = int32, occurrence = required, opts = []},
     #field{name = book_guild, fnum = 9, rnum = 9,
	    type = string, occurrence = required, opts = []},
     #field{name = book_score, fnum = 10, rnum = 10,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(p_cgw_rank) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = chief, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = rank, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_cgw_match) ->
    [#field{name = atk_id, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = atk_name, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = def_id, fnum = 3, rnum = 4,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = def_name, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = winner, fnum = 5, rnum = 6,
	    type = fixed64, occurrence = required, opts = []}];
find_msg_def(p_cgw_result) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = rank, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = kill, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
