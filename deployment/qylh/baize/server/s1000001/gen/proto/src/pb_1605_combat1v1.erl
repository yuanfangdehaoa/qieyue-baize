%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1605_combat1v1).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1605_combat1v1.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_combat1v1_info_tos() :: #m_combat1v1_info_tos{}.

-type m_combat1v1_info_toc() :: #m_combat1v1_info_toc{}.

-type m_combat1v1_match_start_tos() :: #m_combat1v1_match_start_tos{}.

-type m_combat1v1_match_start_toc() :: #m_combat1v1_match_start_toc{}.

-type m_combat1v1_match_cancel_tos() :: #m_combat1v1_match_cancel_tos{}.

-type m_combat1v1_match_cancel_toc() :: #m_combat1v1_match_cancel_toc{}.

-type m_combat1v1_match_succ_toc() :: #m_combat1v1_match_succ_toc{}.

-type m_combat1v1_battle_prepare_tos() :: #m_combat1v1_battle_prepare_tos{}.

-type m_combat1v1_battle_prepare_toc() :: #m_combat1v1_battle_prepare_toc{}.

-type m_combat1v1_battle_start_toc() :: #m_combat1v1_battle_start_toc{}.

-type m_combat1v1_battle_result_toc() :: #m_combat1v1_battle_result_toc{}.

-type m_combat1v1_join_reward_tos() :: #m_combat1v1_join_reward_tos{}.

-type m_combat1v1_join_reward_toc() :: #m_combat1v1_join_reward_toc{}.

-type m_combat1v1_daily_reward_tos() :: #m_combat1v1_daily_reward_tos{}.

-type m_combat1v1_daily_reward_toc() :: #m_combat1v1_daily_reward_toc{}.

-type m_combat1v1_merit_reward_tos() :: #m_combat1v1_merit_reward_tos{}.

-type m_combat1v1_merit_reward_toc() :: #m_combat1v1_merit_reward_toc{}.

-type m_combat1v1_buy_times_tos() :: #m_combat1v1_buy_times_tos{}.

-type m_combat1v1_buy_times_toc() :: #m_combat1v1_buy_times_toc{}.

-export_type(['m_combat1v1_info_tos'/0, 'm_combat1v1_info_toc'/0, 'm_combat1v1_match_start_tos'/0, 'm_combat1v1_match_start_toc'/0, 'm_combat1v1_match_cancel_tos'/0, 'm_combat1v1_match_cancel_toc'/0, 'm_combat1v1_match_succ_toc'/0, 'm_combat1v1_battle_prepare_tos'/0, 'm_combat1v1_battle_prepare_toc'/0, 'm_combat1v1_battle_start_toc'/0, 'm_combat1v1_battle_result_toc'/0, 'm_combat1v1_join_reward_tos'/0, 'm_combat1v1_join_reward_toc'/0, 'm_combat1v1_daily_reward_tos'/0, 'm_combat1v1_daily_reward_toc'/0, 'm_combat1v1_merit_reward_tos'/0, 'm_combat1v1_merit_reward_toc'/0, 'm_combat1v1_buy_times_tos'/0, 'm_combat1v1_buy_times_toc'/0]).

-spec encode_msg(#m_combat1v1_info_tos{} | #m_combat1v1_info_toc{} | #m_combat1v1_match_start_tos{} | #m_combat1v1_match_start_toc{} | #m_combat1v1_match_cancel_tos{} | #m_combat1v1_match_cancel_toc{} | #m_combat1v1_match_succ_toc{} | #m_combat1v1_battle_prepare_tos{} | #m_combat1v1_battle_prepare_toc{} | #m_combat1v1_battle_start_toc{} | #m_combat1v1_battle_result_toc{} | #m_combat1v1_join_reward_tos{} | #m_combat1v1_join_reward_toc{} | #m_combat1v1_daily_reward_tos{} | #m_combat1v1_daily_reward_toc{} | #m_combat1v1_merit_reward_tos{} | #m_combat1v1_merit_reward_toc{} | #m_combat1v1_buy_times_tos{} | #m_combat1v1_buy_times_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_combat1v1_info_tos{} | #m_combat1v1_info_toc{} | #m_combat1v1_match_start_tos{} | #m_combat1v1_match_start_toc{} | #m_combat1v1_match_cancel_tos{} | #m_combat1v1_match_cancel_toc{} | #m_combat1v1_match_succ_toc{} | #m_combat1v1_battle_prepare_tos{} | #m_combat1v1_battle_prepare_toc{} | #m_combat1v1_battle_start_toc{} | #m_combat1v1_battle_result_toc{} | #m_combat1v1_join_reward_tos{} | #m_combat1v1_join_reward_toc{} | #m_combat1v1_daily_reward_tos{} | #m_combat1v1_daily_reward_toc{} | #m_combat1v1_merit_reward_tos{} | #m_combat1v1_merit_reward_toc{} | #m_combat1v1_buy_times_tos{} | #m_combat1v1_buy_times_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_combat1v1_info_tos{} | #m_combat1v1_info_toc{} | #m_combat1v1_match_start_tos{} | #m_combat1v1_match_start_toc{} | #m_combat1v1_match_cancel_tos{} | #m_combat1v1_match_cancel_toc{} | #m_combat1v1_match_succ_toc{} | #m_combat1v1_battle_prepare_tos{} | #m_combat1v1_battle_prepare_toc{} | #m_combat1v1_battle_start_toc{} | #m_combat1v1_battle_result_toc{} | #m_combat1v1_join_reward_tos{} | #m_combat1v1_join_reward_toc{} | #m_combat1v1_daily_reward_tos{} | #m_combat1v1_daily_reward_toc{} | #m_combat1v1_merit_reward_tos{} | #m_combat1v1_merit_reward_toc{} | #m_combat1v1_buy_times_tos{} | #m_combat1v1_buy_times_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_combat1v1_info_tos ->
	  encode_msg_m_combat1v1_info_tos(id(Msg, TrUserData),
					  TrUserData);
      m_combat1v1_info_toc ->
	  encode_msg_m_combat1v1_info_toc(id(Msg, TrUserData),
					  TrUserData);
      m_combat1v1_match_start_tos ->
	  encode_msg_m_combat1v1_match_start_tos(id(Msg,
						    TrUserData),
						 TrUserData);
      m_combat1v1_match_start_toc ->
	  encode_msg_m_combat1v1_match_start_toc(id(Msg,
						    TrUserData),
						 TrUserData);
      m_combat1v1_match_cancel_tos ->
	  encode_msg_m_combat1v1_match_cancel_tos(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_match_cancel_toc ->
	  encode_msg_m_combat1v1_match_cancel_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_match_succ_toc ->
	  encode_msg_m_combat1v1_match_succ_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_combat1v1_battle_prepare_tos ->
	  encode_msg_m_combat1v1_battle_prepare_tos(id(Msg,
						       TrUserData),
						    TrUserData);
      m_combat1v1_battle_prepare_toc ->
	  encode_msg_m_combat1v1_battle_prepare_toc(id(Msg,
						       TrUserData),
						    TrUserData);
      m_combat1v1_battle_start_toc ->
	  encode_msg_m_combat1v1_battle_start_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_battle_result_toc ->
	  encode_msg_m_combat1v1_battle_result_toc(id(Msg,
						      TrUserData),
						   TrUserData);
      m_combat1v1_join_reward_tos ->
	  encode_msg_m_combat1v1_join_reward_tos(id(Msg,
						    TrUserData),
						 TrUserData);
      m_combat1v1_join_reward_toc ->
	  encode_msg_m_combat1v1_join_reward_toc(id(Msg,
						    TrUserData),
						 TrUserData);
      m_combat1v1_daily_reward_tos ->
	  encode_msg_m_combat1v1_daily_reward_tos(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_daily_reward_toc ->
	  encode_msg_m_combat1v1_daily_reward_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_merit_reward_tos ->
	  encode_msg_m_combat1v1_merit_reward_tos(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_merit_reward_toc ->
	  encode_msg_m_combat1v1_merit_reward_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_combat1v1_buy_times_tos ->
	  encode_msg_m_combat1v1_buy_times_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_combat1v1_buy_times_toc ->
	  encode_msg_m_combat1v1_buy_times_toc(id(Msg,
						  TrUserData),
					       TrUserData)
    end.


encode_msg_m_combat1v1_info_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_info_toc(Msg, TrUserData) ->
    encode_msg_m_combat1v1_info_toc(Msg, <<>>, TrUserData).


encode_msg_m_combat1v1_info_toc(#m_combat1v1_info_toc{grade
							  = F1,
						      score = F2,
						      today_join = F3,
						      today_merit = F4,
						      merit = F5,
						      join_reward = F6,
						      last_grade = F7,
						      daily_reward = F8,
						      merit_reward = F9,
						      mode = F10,
						      remain_join = F11,
						      remain_buy = F12,
						      season_end = F13},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = 'tr_encode_m_combat1v1_info_toc.join_reward'(F6,
							       TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_m_combat1v1_info_toc_join_reward(TrF6, B5,
							   TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   if TrF9 == [] -> B8;
	      true ->
		  e_field_m_combat1v1_info_toc_merit_reward(TrF9, B8,
							    TrUserData)
	   end
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    e_type_string(TrF10, <<B9/binary, 82>>, TrUserData)
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
	  end,
    B12 = begin
	    TrF12 = id(F12, TrUserData),
	    e_type_int32(TrF12, <<B11/binary, 96>>, TrUserData)
	  end,
    begin
      TrF13 = id(F13, TrUserData),
      e_type_int32(TrF13, <<B12/binary, 104>>, TrUserData)
    end.

encode_msg_m_combat1v1_match_start_tos(_Msg,
				       _TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_match_start_toc(_Msg,
				       _TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_match_cancel_tos(_Msg,
					_TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_match_cancel_toc(_Msg,
					_TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_match_succ_toc(_Msg,
				      _TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_battle_prepare_tos(_Msg,
					  _TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_battle_prepare_toc(Msg,
					  TrUserData) ->
    encode_msg_m_combat1v1_battle_prepare_toc(Msg, <<>>,
					      TrUserData).


encode_msg_m_combat1v1_battle_prepare_toc(#m_combat1v1_battle_prepare_toc{opponent
									      =
									      F1,
									  pos =
									      F2},
					  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_combat1v1_battle_start_toc(Msg,
					TrUserData) ->
    encode_msg_m_combat1v1_battle_start_toc(Msg, <<>>,
					    TrUserData).


encode_msg_m_combat1v1_battle_start_toc(#m_combat1v1_battle_start_toc{ptime
									  = F1,
								      etime =
									  F2},
					Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	   end
    end.

encode_msg_m_combat1v1_battle_result_toc(Msg,
					 TrUserData) ->
    encode_msg_m_combat1v1_battle_result_toc(Msg, <<>>,
					     TrUserData).


encode_msg_m_combat1v1_battle_result_toc(#m_combat1v1_battle_result_toc{is_win
									    =
									    F1,
									grade =
									    F2,
									score =
									    F3,
									chg =
									    F4,
									rewards
									    =
									    F5},
					 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 =
	  'tr_encode_m_combat1v1_battle_result_toc.rewards'(F5,
							    TrUserData),
      if TrF5 == [] -> B4;
	 true ->
	     e_field_m_combat1v1_battle_result_toc_rewards(TrF5, B4,
							   TrUserData)
      end
    end.

encode_msg_m_combat1v1_join_reward_tos(Msg,
				       TrUserData) ->
    encode_msg_m_combat1v1_join_reward_tos(Msg, <<>>,
					   TrUserData).


encode_msg_m_combat1v1_join_reward_tos(#m_combat1v1_join_reward_tos{num
									= F1},
				       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_combat1v1_join_reward_toc(Msg,
				       TrUserData) ->
    encode_msg_m_combat1v1_join_reward_toc(Msg, <<>>,
					   TrUserData).


encode_msg_m_combat1v1_join_reward_toc(#m_combat1v1_join_reward_toc{num
									= F1},
				       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_combat1v1_daily_reward_tos(_Msg,
					_TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_daily_reward_toc(_Msg,
					_TrUserData) ->
    <<>>.

encode_msg_m_combat1v1_merit_reward_tos(Msg,
					TrUserData) ->
    encode_msg_m_combat1v1_merit_reward_tos(Msg, <<>>,
					    TrUserData).


encode_msg_m_combat1v1_merit_reward_tos(#m_combat1v1_merit_reward_tos{merit
									  = F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_combat1v1_merit_reward_toc(Msg,
					TrUserData) ->
    encode_msg_m_combat1v1_merit_reward_toc(Msg, <<>>,
					    TrUserData).


encode_msg_m_combat1v1_merit_reward_toc(#m_combat1v1_merit_reward_toc{merit
									  = F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_combat1v1_buy_times_tos(Msg, TrUserData) ->
    encode_msg_m_combat1v1_buy_times_tos(Msg, <<>>,
					 TrUserData).


encode_msg_m_combat1v1_buy_times_tos(#m_combat1v1_buy_times_tos{num
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_combat1v1_buy_times_toc(Msg, TrUserData) ->
    encode_msg_m_combat1v1_buy_times_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_combat1v1_buy_times_toc(#m_combat1v1_buy_times_toc{remain_join
								    = F1,
								remain_buy =
								    F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

e_mfield_m_combat1v1_info_toc_join_reward(Msg, Bin,
					  TrUserData) ->
    SubBin = 'encode_msg_map<int32,bool>'(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_combat1v1_info_toc_join_reward([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 =
	e_mfield_m_combat1v1_info_toc_join_reward('tr_encode_m_combat1v1_info_toc.join_reward[x]'(Elem,
												  TrUserData),
						  Bin2, TrUserData),
    e_field_m_combat1v1_info_toc_join_reward(Rest, Bin3,
					     TrUserData);
e_field_m_combat1v1_info_toc_join_reward([], Bin,
					 _TrUserData) ->
    Bin.

e_field_m_combat1v1_info_toc_merit_reward([Elem | Rest],
					  Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 72>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_combat1v1_info_toc_merit_reward(Rest, Bin3,
					      TrUserData);
e_field_m_combat1v1_info_toc_merit_reward([], Bin,
					  _TrUserData) ->
    Bin.

e_mfield_m_combat1v1_battle_result_toc_rewards(Msg, Bin,
					       TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_combat1v1_battle_result_toc_rewards([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	e_mfield_m_combat1v1_battle_result_toc_rewards('tr_encode_m_combat1v1_battle_result_toc.rewards[x]'(Elem,
													    TrUserData),
						       Bin2, TrUserData),
    e_field_m_combat1v1_battle_result_toc_rewards(Rest,
						  Bin3, TrUserData);
e_field_m_combat1v1_battle_result_toc_rewards([], Bin,
					      _TrUserData) ->
    Bin.

'encode_msg_map<int32,bool>'(#{key := F1, value := F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_combat1v1_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_info_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_info_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_match_start_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_match_start_tos(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_match_start_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_match_start_toc(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_match_cancel_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_match_cancel_tos(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_match_cancel_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_match_cancel_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_match_succ_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_match_succ_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_battle_prepare_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_battle_prepare_tos(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_battle_prepare_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_battle_prepare_toc(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_battle_start_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_battle_start_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_battle_result_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_battle_result_toc(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_join_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_join_reward_tos(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_join_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_join_reward_toc(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_daily_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_daily_reward_tos(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_daily_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_daily_reward_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_merit_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_merit_reward_tos(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_merit_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_merit_reward_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_buy_times_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_buy_times_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_combat1v1_buy_times_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_combat1v1_buy_times_toc(Bin,
					    TrUserData),
       TrUserData).



decode_msg_m_combat1v1_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_tos(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_m_combat1v1_info_tos(<<>>, 0, 0,
					_) ->
    #m_combat1v1_info_tos{};
dfp_read_field_def_m_combat1v1_info_tos(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_m_combat1v1_info_tos(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_m_combat1v1_info_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_info_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_m_combat1v1_info_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_info_tos(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_m_combat1v1_info_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_info_tos(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_m_combat1v1_info_tos(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_m_combat1v1_info_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_combat1v1_info_tos(<<>>, 0, 0, _) ->
    #m_combat1v1_info_tos{}.

skip_varint_m_combat1v1_info_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_info_tos(Rest, Z1, Z2,
				     TrUserData);
skip_varint_m_combat1v1_info_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_tos(Rest, Z1, Z2,
					    TrUserData).

skip_length_delimited_m_combat1v1_info_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_info_tos(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_m_combat1v1_info_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_info_tos(Rest2, 0, 0,
					    TrUserData).

skip_group_m_combat1v1_info_tos(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_info_tos(Rest, 0, Z2,
					    TrUserData).

skip_32_m_combat1v1_info_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_tos(Rest, Z1, Z2,
					    TrUserData).

skip_64_m_combat1v1_info_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_tos(Rest, Z1, Z2,
					    TrUserData).

decode_msg_m_combat1v1_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    'tr_decode_init_default_m_combat1v1_info_toc.join_reward'([],
												      TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id([], TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_combat1v1_info_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_grade(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13,
				       TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_score(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13,
				       TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<24,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_today_join(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_today_merit(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<40,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_merit(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, F@_12, F@_13,
				       TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<50,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_join_reward(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<56,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_last_grade(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<64,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_daily_reward(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<74,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_pfield_m_combat1v1_info_toc_merit_reward(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, F@_8, F@_9, F@_10,
					       F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<72,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_merit_reward(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<82,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_mode(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13,
				      TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<88,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_remain_join(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<96,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_remain_buy(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<104,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    d_field_m_combat1v1_info_toc_season_end(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData);
dfp_read_field_def_m_combat1v1_info_toc(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, R1, F@_7,
					F@_8, R2, F@_10, F@_11, F@_12, F@_13,
					TrUserData) ->
    #m_combat1v1_info_toc{grade = F@_1, score = F@_2,
			  today_join = F@_3, today_merit = F@_4, merit = F@_5,
			  join_reward =
			      'tr_decode_repeated_finalize_m_combat1v1_info_toc.join_reward'(R1,
											     TrUserData),
			  last_grade = F@_7, daily_reward = F@_8,
			  merit_reward = lists_reverse(R2, TrUserData),
			  mode = F@_10, remain_join = F@_11, remain_buy = F@_12,
			  season_end = F@_13};
dfp_read_field_def_m_combat1v1_info_toc(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					F@_13, TrUserData) ->
    dg_read_field_def_m_combat1v1_info_toc(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, TrUserData).

dg_read_field_def_m_combat1v1_info_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				       F@_12, F@_13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_info_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, F@_12, F@_13,
					   TrUserData);
dg_read_field_def_m_combat1v1_info_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				       F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_info_toc_grade(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     F@_13, TrUserData);
      16 ->
	  d_field_m_combat1v1_info_toc_score(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     F@_13, TrUserData);
      24 ->
	  d_field_m_combat1v1_info_toc_today_join(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
      32 ->
	  d_field_m_combat1v1_info_toc_today_merit(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   TrUserData);
      40 ->
	  d_field_m_combat1v1_info_toc_merit(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11, F@_12,
					     F@_13, TrUserData);
      50 ->
	  d_field_m_combat1v1_info_toc_join_reward(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   TrUserData);
      56 ->
	  d_field_m_combat1v1_info_toc_last_grade(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
      64 ->
	  d_field_m_combat1v1_info_toc_daily_reward(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11, F@_12,
						    F@_13, TrUserData);
      74 ->
	  d_pfield_m_combat1v1_info_toc_merit_reward(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7, F@_8,
						     F@_9, F@_10, F@_11, F@_12,
						     F@_13, TrUserData);
      72 ->
	  d_field_m_combat1v1_info_toc_merit_reward(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, F@_11, F@_12,
						    F@_13, TrUserData);
      82 ->
	  d_field_m_combat1v1_info_toc_mode(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, TrUserData);
      88 ->
	  d_field_m_combat1v1_info_toc_remain_join(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   TrUserData);
      96 ->
	  d_field_m_combat1v1_info_toc_remain_buy(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
      104 ->
	  d_field_m_combat1v1_info_toc_season_end(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13,
						  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_info_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 F@_8, F@_9, F@_10, F@_11,
						 F@_12, F@_13, TrUserData);
	    1 ->
		skip_64_m_combat1v1_info_toc(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, F@_12, F@_13,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_info_toc(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5, F@_6,
							   F@_7, F@_8, F@_9,
							   F@_10, F@_11, F@_12,
							   F@_13, TrUserData);
	    3 ->
		skip_group_m_combat1v1_info_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						F@_6, F@_7, F@_8, F@_9, F@_10,
						F@_11, F@_12, F@_13,
						TrUserData);
	    5 ->
		skip_32_m_combat1v1_info_toc(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, F@_12, F@_13,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_info_toc(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, R1, F@_7, F@_8,
				       R2, F@_10, F@_11, F@_12, F@_13,
				       TrUserData) ->
    #m_combat1v1_info_toc{grade = F@_1, score = F@_2,
			  today_join = F@_3, today_merit = F@_4, merit = F@_5,
			  join_reward =
			      'tr_decode_repeated_finalize_m_combat1v1_info_toc.join_reward'(R1,
											     TrUserData),
			  last_grade = F@_7, daily_reward = F@_8,
			  merit_reward = lists_reverse(R2, TrUserData),
			  mode = F@_10, remain_join = F@_11, remain_buy = F@_12,
			  season_end = F@_13}.

d_field_m_combat1v1_info_toc_grade(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_grade(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, TrUserData);
d_field_m_combat1v1_info_toc_grade(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_score(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_score(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, TrUserData);
d_field_m_combat1v1_info_toc_score(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_today_join(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_today_join(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13,
					    TrUserData);
d_field_m_combat1v1_info_toc_today_join(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
					F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
					F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, NewFValue, F@_4, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_today_merit(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_today_merit(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13,
					     TrUserData);
d_field_m_combat1v1_info_toc_today_merit(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, NewFValue, F@_5,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_merit(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_merit(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, F@_12, F@_13, TrUserData);
d_field_m_combat1v1_info_toc_merit(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, NewFValue,
					    F@_6, F@_7, F@_8, F@_9, F@_10,
					    F@_11, F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_join_reward(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_join_reward(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13,
					     TrUserData);
d_field_m_combat1v1_info_toc_join_reward(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 Prev, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,bool>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    'tr_decode_repeated_add_elem_m_combat1v1_info_toc.join_reward'(NewFValue,
													   Prev,
													   TrUserData),
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_last_grade(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_last_grade(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13,
					    TrUserData);
d_field_m_combat1v1_info_toc_last_grade(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, _, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    NewFValue, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_daily_reward(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_daily_reward(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, F@_12, F@_13,
					      TrUserData);
d_field_m_combat1v1_info_toc_daily_reward(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, _, F@_9, F@_10, F@_11,
					  F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, NewFValue, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_merit_reward(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					  F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_merit_reward(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, F@_11, F@_12, F@_13,
					      TrUserData);
d_field_m_combat1v1_info_toc_merit_reward(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, Prev, F@_10, F@_11,
					  F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8,
					    cons(NewFValue, Prev, TrUserData),
					    F@_10, F@_11, F@_12, F@_13,
					    TrUserData).

d_pfield_m_combat1v1_info_toc_merit_reward(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_pfield_m_combat1v1_info_toc_merit_reward(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       TrUserData);
d_pfield_m_combat1v1_info_toc_merit_reward(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, E, F@_10, F@_11,
					   F@_12, F@_13, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_combat1v1_info_toc_merit_reward(PackedBytes,
							 0, 0, E, TrUserData),
    dfp_read_field_def_m_combat1v1_info_toc(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, NewSeq, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

d_packed_field_m_combat1v1_info_toc_merit_reward(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_combat1v1_info_toc_merit_reward(Rest,
						     N + 7, X bsl N + Acc,
						     AccSeq, TrUserData);
d_packed_field_m_combat1v1_info_toc_merit_reward(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_combat1v1_info_toc_merit_reward(RestF,
						     0, 0, [NewFValue | AccSeq],
						     TrUserData);
d_packed_field_m_combat1v1_info_toc_merit_reward(<<>>,
						 0, 0, AccSeq, _) ->
    AccSeq.

d_field_m_combat1v1_info_toc_mode(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_mode(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, TrUserData);
d_field_m_combat1v1_info_toc_mode(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, NewFValue, F@_11,
					    F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_remain_join(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_remain_join(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13,
					     TrUserData);
d_field_m_combat1v1_info_toc_remain_join(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, _,
					 F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, NewFValue,
					    F@_12, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_remain_buy(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_remain_buy(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13,
					    TrUserData);
d_field_m_combat1v1_info_toc_remain_buy(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _,
					F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    NewFValue, F@_13, TrUserData).

d_field_m_combat1v1_info_toc_season_end(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_info_toc_season_end(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, F@_12, F@_13,
					    TrUserData);
d_field_m_combat1v1_info_toc_season_end(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					F@_12, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, NewFValue, TrUserData).

skip_varint_m_combat1v1_info_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 TrUserData) ->
    skip_varint_m_combat1v1_info_toc(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, F@_12, F@_13,
				     TrUserData);
skip_varint_m_combat1v1_info_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

skip_length_delimited_m_combat1v1_info_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_info_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7, F@_8,
					       F@_9, F@_10, F@_11, F@_12, F@_13,
					       TrUserData);
skip_length_delimited_m_combat1v1_info_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					   F@_12, F@_13, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_info_toc(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

skip_group_m_combat1v1_info_toc(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_info_toc(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

skip_32_m_combat1v1_info_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

skip_64_m_combat1v1_info_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_m_combat1v1_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, F@_9, F@_10, F@_11,
					    F@_12, F@_13, TrUserData).

decode_msg_m_combat1v1_match_start_tos(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_tos(Bin, 0,
						   0, TrUserData).

dfp_read_field_def_m_combat1v1_match_start_tos(<<>>, 0,
					       0, _) ->
    #m_combat1v1_match_start_tos{};
dfp_read_field_def_m_combat1v1_match_start_tos(Other,
					       Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_match_start_tos(Other, Z1,
						  Z2, TrUserData).

dg_read_field_def_m_combat1v1_match_start_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_match_start_tos(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
dg_read_field_def_m_combat1v1_match_start_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_match_start_tos(Rest, 0, 0,
						  TrUserData);
      1 ->
	  skip_64_m_combat1v1_match_start_tos(Rest, 0, 0,
					      TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_match_start_tos(Rest,
							    0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_match_start_tos(Rest, Key bsr 3,
						 0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_match_start_tos(Rest, 0, 0,
					      TrUserData)
    end;
dg_read_field_def_m_combat1v1_match_start_tos(<<>>, 0,
					      0, _) ->
    #m_combat1v1_match_start_tos{}.

skip_varint_m_combat1v1_match_start_tos(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_match_start_tos(Rest, Z1, Z2,
					    TrUserData);
skip_varint_m_combat1v1_match_start_tos(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_tos(Rest, Z1,
						   Z2, TrUserData).

skip_length_delimited_m_combat1v1_match_start_tos(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_match_start_tos(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
skip_length_delimited_m_combat1v1_match_start_tos(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_match_start_tos(Rest2, 0,
						   0, TrUserData).

skip_group_m_combat1v1_match_start_tos(Bin, FNum, Z2,
				       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_match_start_tos(Rest, 0,
						   Z2, TrUserData).

skip_32_m_combat1v1_match_start_tos(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_tos(Rest, Z1,
						   Z2, TrUserData).

skip_64_m_combat1v1_match_start_tos(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_tos(Rest, Z1,
						   Z2, TrUserData).

decode_msg_m_combat1v1_match_start_toc(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_toc(Bin, 0,
						   0, TrUserData).

dfp_read_field_def_m_combat1v1_match_start_toc(<<>>, 0,
					       0, _) ->
    #m_combat1v1_match_start_toc{};
dfp_read_field_def_m_combat1v1_match_start_toc(Other,
					       Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_match_start_toc(Other, Z1,
						  Z2, TrUserData).

dg_read_field_def_m_combat1v1_match_start_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_match_start_toc(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
dg_read_field_def_m_combat1v1_match_start_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_match_start_toc(Rest, 0, 0,
						  TrUserData);
      1 ->
	  skip_64_m_combat1v1_match_start_toc(Rest, 0, 0,
					      TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_match_start_toc(Rest,
							    0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_match_start_toc(Rest, Key bsr 3,
						 0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_match_start_toc(Rest, 0, 0,
					      TrUserData)
    end;
dg_read_field_def_m_combat1v1_match_start_toc(<<>>, 0,
					      0, _) ->
    #m_combat1v1_match_start_toc{}.

skip_varint_m_combat1v1_match_start_toc(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_match_start_toc(Rest, Z1, Z2,
					    TrUserData);
skip_varint_m_combat1v1_match_start_toc(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_toc(Rest, Z1,
						   Z2, TrUserData).

skip_length_delimited_m_combat1v1_match_start_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_match_start_toc(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
skip_length_delimited_m_combat1v1_match_start_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_match_start_toc(Rest2, 0,
						   0, TrUserData).

skip_group_m_combat1v1_match_start_toc(Bin, FNum, Z2,
				       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_match_start_toc(Rest, 0,
						   Z2, TrUserData).

skip_32_m_combat1v1_match_start_toc(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_toc(Rest, Z1,
						   Z2, TrUserData).

skip_64_m_combat1v1_match_start_toc(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_start_toc(Rest, Z1,
						   Z2, TrUserData).

decode_msg_m_combat1v1_match_cancel_tos(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_tos(Bin, 0,
						    0, TrUserData).

dfp_read_field_def_m_combat1v1_match_cancel_tos(<<>>, 0,
						0, _) ->
    #m_combat1v1_match_cancel_tos{};
dfp_read_field_def_m_combat1v1_match_cancel_tos(Other,
						Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_match_cancel_tos(Other,
						   Z1, Z2, TrUserData).

dg_read_field_def_m_combat1v1_match_cancel_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_match_cancel_tos(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
dg_read_field_def_m_combat1v1_match_cancel_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_match_cancel_tos(Rest, 0, 0,
						   TrUserData);
      1 ->
	  skip_64_m_combat1v1_match_cancel_tos(Rest, 0, 0,
					       TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_match_cancel_tos(Rest,
							     0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_match_cancel_tos(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_match_cancel_tos(Rest, 0, 0,
					       TrUserData)
    end;
dg_read_field_def_m_combat1v1_match_cancel_tos(<<>>, 0,
					       0, _) ->
    #m_combat1v1_match_cancel_tos{}.

skip_varint_m_combat1v1_match_cancel_tos(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_match_cancel_tos(Rest, Z1, Z2,
					     TrUserData);
skip_varint_m_combat1v1_match_cancel_tos(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_tos(Rest,
						    Z1, Z2, TrUserData).

skip_length_delimited_m_combat1v1_match_cancel_tos(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_match_cancel_tos(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
skip_length_delimited_m_combat1v1_match_cancel_tos(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_match_cancel_tos(Rest2,
						    0, 0, TrUserData).

skip_group_m_combat1v1_match_cancel_tos(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_match_cancel_tos(Rest, 0,
						    Z2, TrUserData).

skip_32_m_combat1v1_match_cancel_tos(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_tos(Rest,
						    Z1, Z2, TrUserData).

skip_64_m_combat1v1_match_cancel_tos(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_tos(Rest,
						    Z1, Z2, TrUserData).

decode_msg_m_combat1v1_match_cancel_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_toc(Bin, 0,
						    0, TrUserData).

dfp_read_field_def_m_combat1v1_match_cancel_toc(<<>>, 0,
						0, _) ->
    #m_combat1v1_match_cancel_toc{};
dfp_read_field_def_m_combat1v1_match_cancel_toc(Other,
						Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_match_cancel_toc(Other,
						   Z1, Z2, TrUserData).

dg_read_field_def_m_combat1v1_match_cancel_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_match_cancel_toc(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
dg_read_field_def_m_combat1v1_match_cancel_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_match_cancel_toc(Rest, 0, 0,
						   TrUserData);
      1 ->
	  skip_64_m_combat1v1_match_cancel_toc(Rest, 0, 0,
					       TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_match_cancel_toc(Rest,
							     0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_match_cancel_toc(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_match_cancel_toc(Rest, 0, 0,
					       TrUserData)
    end;
dg_read_field_def_m_combat1v1_match_cancel_toc(<<>>, 0,
					       0, _) ->
    #m_combat1v1_match_cancel_toc{}.

skip_varint_m_combat1v1_match_cancel_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_match_cancel_toc(Rest, Z1, Z2,
					     TrUserData);
skip_varint_m_combat1v1_match_cancel_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_toc(Rest,
						    Z1, Z2, TrUserData).

skip_length_delimited_m_combat1v1_match_cancel_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_match_cancel_toc(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
skip_length_delimited_m_combat1v1_match_cancel_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_match_cancel_toc(Rest2,
						    0, 0, TrUserData).

skip_group_m_combat1v1_match_cancel_toc(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_match_cancel_toc(Rest, 0,
						    Z2, TrUserData).

skip_32_m_combat1v1_match_cancel_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_toc(Rest,
						    Z1, Z2, TrUserData).

skip_64_m_combat1v1_match_cancel_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_cancel_toc(Rest,
						    Z1, Z2, TrUserData).

decode_msg_m_combat1v1_match_succ_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_succ_toc(Bin, 0, 0,
						  TrUserData).

dfp_read_field_def_m_combat1v1_match_succ_toc(<<>>, 0,
					      0, _) ->
    #m_combat1v1_match_succ_toc{};
dfp_read_field_def_m_combat1v1_match_succ_toc(Other, Z1,
					      Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_match_succ_toc(Other, Z1,
						 Z2, TrUserData).

dg_read_field_def_m_combat1v1_match_succ_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_match_succ_toc(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
dg_read_field_def_m_combat1v1_match_succ_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_match_succ_toc(Rest, 0, 0,
						 TrUserData);
      1 ->
	  skip_64_m_combat1v1_match_succ_toc(Rest, 0, 0,
					     TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_match_succ_toc(Rest,
							   0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_match_succ_toc(Rest, Key bsr 3,
						0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_match_succ_toc(Rest, 0, 0,
					     TrUserData)
    end;
dg_read_field_def_m_combat1v1_match_succ_toc(<<>>, 0, 0,
					     _) ->
    #m_combat1v1_match_succ_toc{}.

skip_varint_m_combat1v1_match_succ_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_match_succ_toc(Rest, Z1, Z2,
					   TrUserData);
skip_varint_m_combat1v1_match_succ_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_succ_toc(Rest, Z1,
						  Z2, TrUserData).

skip_length_delimited_m_combat1v1_match_succ_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_match_succ_toc(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
skip_length_delimited_m_combat1v1_match_succ_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_match_succ_toc(Rest2, 0,
						  0, TrUserData).

skip_group_m_combat1v1_match_succ_toc(Bin, FNum, Z2,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_match_succ_toc(Rest, 0,
						  Z2, TrUserData).

skip_32_m_combat1v1_match_succ_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_succ_toc(Rest, Z1,
						  Z2, TrUserData).

skip_64_m_combat1v1_match_succ_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_match_succ_toc(Rest, Z1,
						  Z2, TrUserData).

decode_msg_m_combat1v1_battle_prepare_tos(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_tos(Bin,
						      0, 0, TrUserData).

dfp_read_field_def_m_combat1v1_battle_prepare_tos(<<>>,
						  0, 0, _) ->
    #m_combat1v1_battle_prepare_tos{};
dfp_read_field_def_m_combat1v1_battle_prepare_tos(Other,
						  Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_battle_prepare_tos(Other,
						     Z1, Z2, TrUserData).

dg_read_field_def_m_combat1v1_battle_prepare_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_battle_prepare_tos(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
dg_read_field_def_m_combat1v1_battle_prepare_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_battle_prepare_tos(Rest, 0, 0,
						     TrUserData);
      1 ->
	  skip_64_m_combat1v1_battle_prepare_tos(Rest, 0, 0,
						 TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_battle_prepare_tos(Rest,
							       0, 0,
							       TrUserData);
      3 ->
	  skip_group_m_combat1v1_battle_prepare_tos(Rest,
						    Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_battle_prepare_tos(Rest, 0, 0,
						 TrUserData)
    end;
dg_read_field_def_m_combat1v1_battle_prepare_tos(<<>>,
						 0, 0, _) ->
    #m_combat1v1_battle_prepare_tos{}.

skip_varint_m_combat1v1_battle_prepare_tos(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_battle_prepare_tos(Rest, Z1, Z2,
					       TrUserData);
skip_varint_m_combat1v1_battle_prepare_tos(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_tos(Rest,
						      Z1, Z2, TrUserData).

skip_length_delimited_m_combat1v1_battle_prepare_tos(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_battle_prepare_tos(Rest,
							 N + 7, X bsl N + Acc,
							 TrUserData);
skip_length_delimited_m_combat1v1_battle_prepare_tos(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_battle_prepare_tos(Rest2,
						      0, 0, TrUserData).

skip_group_m_combat1v1_battle_prepare_tos(Bin, FNum, Z2,
					  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_battle_prepare_tos(Rest,
						      0, Z2, TrUserData).

skip_32_m_combat1v1_battle_prepare_tos(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_tos(Rest,
						      Z1, Z2, TrUserData).

skip_64_m_combat1v1_battle_prepare_tos(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_tos(Rest,
						      Z1, Z2, TrUserData).

decode_msg_m_combat1v1_battle_prepare_toc(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_m_combat1v1_battle_prepare_toc(<<9,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_m_combat1v1_battle_prepare_toc_opponent(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
dfp_read_field_def_m_combat1v1_battle_prepare_toc(<<16,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_m_combat1v1_battle_prepare_toc_pos(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_m_combat1v1_battle_prepare_toc(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    #m_combat1v1_battle_prepare_toc{opponent = F@_1,
				    pos = F@_2};
dfp_read_field_def_m_combat1v1_battle_prepare_toc(Other,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    dg_read_field_def_m_combat1v1_battle_prepare_toc(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

dg_read_field_def_m_combat1v1_battle_prepare_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_battle_prepare_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
dg_read_field_def_m_combat1v1_battle_prepare_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_combat1v1_battle_prepare_toc_opponent(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      16 ->
	  d_field_m_combat1v1_battle_prepare_toc_pos(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_battle_prepare_toc(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    1 ->
		skip_64_m_combat1v1_battle_prepare_toc(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_battle_prepare_toc(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    3 ->
		skip_group_m_combat1v1_battle_prepare_toc(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, TrUserData);
	    5 ->
		skip_32_m_combat1v1_battle_prepare_toc(Rest, 0, 0, F@_1,
						       F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_battle_prepare_toc(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    #m_combat1v1_battle_prepare_toc{opponent = F@_1,
				    pos = F@_2}.

d_field_m_combat1v1_battle_prepare_toc_opponent(<<Value:64/little,
						  Rest/binary>>,
						Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Rest,
						      Z1, Z2,
						      id(Value, TrUserData),
						      F@_2, TrUserData).

d_field_m_combat1v1_battle_prepare_toc_pos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_prepare_toc_pos(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_m_combat1v1_battle_prepare_toc_pos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(RestF,
						      0, 0, F@_1, NewFValue,
						      TrUserData).

skip_varint_m_combat1v1_battle_prepare_toc(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_combat1v1_battle_prepare_toc(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
skip_varint_m_combat1v1_battle_prepare_toc(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_length_delimited_m_combat1v1_battle_prepare_toc(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_battle_prepare_toc(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
skip_length_delimited_m_combat1v1_battle_prepare_toc(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Rest2,
						      0, 0, F@_1, F@_2,
						      TrUserData).

skip_group_m_combat1v1_battle_prepare_toc(Bin, FNum, Z2,
					  F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Rest,
						      0, Z2, F@_1, F@_2,
						      TrUserData).

skip_32_m_combat1v1_battle_prepare_toc(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_64_m_combat1v1_battle_prepare_toc(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_prepare_toc(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

decode_msg_m_combat1v1_battle_start_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_start_toc(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_combat1v1_battle_start_toc(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    d_field_m_combat1v1_battle_start_toc_ptime(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_m_combat1v1_battle_start_toc(<<16,
						  Rest/binary>>,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    d_field_m_combat1v1_battle_start_toc_etime(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_m_combat1v1_battle_start_toc(<<>>, 0,
						0, F@_1, F@_2, _) ->
    #m_combat1v1_battle_start_toc{ptime = F@_1,
				  etime = F@_2};
dfp_read_field_def_m_combat1v1_battle_start_toc(Other,
						Z1, Z2, F@_1, F@_2,
						TrUserData) ->
    dg_read_field_def_m_combat1v1_battle_start_toc(Other,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData).

dg_read_field_def_m_combat1v1_battle_start_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_battle_start_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
dg_read_field_def_m_combat1v1_battle_start_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_battle_start_toc_ptime(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      16 ->
	  d_field_m_combat1v1_battle_start_toc_etime(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_battle_start_toc(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    1 ->
		skip_64_m_combat1v1_battle_start_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_battle_start_toc(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    3 ->
		skip_group_m_combat1v1_battle_start_toc(Rest, Key bsr 3,
							0, F@_1, F@_2,
							TrUserData);
	    5 ->
		skip_32_m_combat1v1_battle_start_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_battle_start_toc(<<>>, 0,
					       0, F@_1, F@_2, _) ->
    #m_combat1v1_battle_start_toc{ptime = F@_1,
				  etime = F@_2}.

d_field_m_combat1v1_battle_start_toc_ptime(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_start_toc_ptime(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_m_combat1v1_battle_start_toc_ptime(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_start_toc(RestF,
						    0, 0, NewFValue, F@_2,
						    TrUserData).

d_field_m_combat1v1_battle_start_toc_etime(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_start_toc_etime(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_m_combat1v1_battle_start_toc_etime(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_start_toc(RestF,
						    0, 0, F@_1, NewFValue,
						    TrUserData).

skip_varint_m_combat1v1_battle_start_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_combat1v1_battle_start_toc(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
skip_varint_m_combat1v1_battle_start_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_start_toc(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

skip_length_delimited_m_combat1v1_battle_start_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_battle_start_toc(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, TrUserData);
skip_length_delimited_m_combat1v1_battle_start_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2,
						   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_battle_start_toc(Rest2,
						    0, 0, F@_1, F@_2,
						    TrUserData).

skip_group_m_combat1v1_battle_start_toc(Bin, FNum, Z2,
					F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_battle_start_toc(Rest, 0,
						    Z2, F@_1, F@_2, TrUserData).

skip_32_m_combat1v1_battle_start_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_start_toc(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

skip_64_m_combat1v1_battle_start_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_start_toc(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

decode_msg_m_combat1v1_battle_result_toc(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_result_toc(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     id(undefined, TrUserData),
						     id(undefined, TrUserData),
						     id(undefined, TrUserData),
						     'tr_decode_init_default_m_combat1v1_battle_result_toc.rewards'([],
														    TrUserData),
						     TrUserData).

dfp_read_field_def_m_combat1v1_battle_result_toc(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    d_field_m_combat1v1_battle_result_toc_is_win(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData);
dfp_read_field_def_m_combat1v1_battle_result_toc(<<16,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    d_field_m_combat1v1_battle_result_toc_grade(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_m_combat1v1_battle_result_toc(<<24,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    d_field_m_combat1v1_battle_result_toc_score(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_m_combat1v1_battle_result_toc(<<32,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    d_field_m_combat1v1_battle_result_toc_chg(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_m_combat1v1_battle_result_toc(<<42,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    d_field_m_combat1v1_battle_result_toc_rewards(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
dfp_read_field_def_m_combat1v1_battle_result_toc(<<>>,
						 0, 0, F@_1, F@_2, F@_3, F@_4,
						 R1, TrUserData) ->
    #m_combat1v1_battle_result_toc{is_win = F@_1,
				   grade = F@_2, score = F@_3, chg = F@_4,
				   rewards =
				       'tr_decode_repeated_finalize_m_combat1v1_battle_result_toc.rewards'(R1,
													   TrUserData)};
dfp_read_field_def_m_combat1v1_battle_result_toc(Other,
						 Z1, Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    dg_read_field_def_m_combat1v1_battle_result_toc(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData).

dg_read_field_def_m_combat1v1_battle_result_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_battle_result_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
dg_read_field_def_m_combat1v1_battle_result_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_battle_result_toc_is_win(Rest, 0, 0,
						       F@_1, F@_2, F@_3, F@_4,
						       F@_5, TrUserData);
      16 ->
	  d_field_m_combat1v1_battle_result_toc_grade(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      24 ->
	  d_field_m_combat1v1_battle_result_toc_score(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      32 ->
	  d_field_m_combat1v1_battle_result_toc_chg(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      42 ->
	  d_field_m_combat1v1_battle_result_toc_rewards(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_battle_result_toc(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
	    1 ->
		skip_64_m_combat1v1_battle_result_toc(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_battle_result_toc(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    F@_4, F@_5,
								    TrUserData);
	    3 ->
		skip_group_m_combat1v1_battle_result_toc(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3, F@_4, F@_5,
							 TrUserData);
	    5 ->
		skip_32_m_combat1v1_battle_result_toc(Rest, 0, 0, F@_1,
						      F@_2, F@_3, F@_4, F@_5,
						      TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_battle_result_toc(<<>>, 0,
						0, F@_1, F@_2, F@_3, F@_4, R1,
						TrUserData) ->
    #m_combat1v1_battle_result_toc{is_win = F@_1,
				   grade = F@_2, score = F@_3, chg = F@_4,
				   rewards =
				       'tr_decode_repeated_finalize_m_combat1v1_battle_result_toc.rewards'(R1,
													   TrUserData)}.

d_field_m_combat1v1_battle_result_toc_is_win(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_result_toc_is_win(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
d_field_m_combat1v1_battle_result_toc_is_win(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_result_toc(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, F@_4, F@_5,
						     TrUserData).

d_field_m_combat1v1_battle_result_toc_grade(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_result_toc_grade(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_m_combat1v1_battle_result_toc_grade(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_result_toc(RestF,
						     0, 0, F@_1, NewFValue,
						     F@_3, F@_4, F@_5,
						     TrUserData).

d_field_m_combat1v1_battle_result_toc_score(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_result_toc_score(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_m_combat1v1_battle_result_toc_score(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_result_toc(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, F@_4, F@_5,
						     TrUserData).

d_field_m_combat1v1_battle_result_toc_chg(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_result_toc_chg(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_m_combat1v1_battle_result_toc_chg(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_battle_result_toc(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     NewFValue, F@_5,
						     TrUserData).

d_field_m_combat1v1_battle_result_toc_rewards(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_battle_result_toc_rewards(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
d_field_m_combat1v1_battle_result_toc_rewards(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_combat1v1_battle_result_toc(RestF,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4,
						     'tr_decode_repeated_add_elem_m_combat1v1_battle_result_toc.rewards'(NewFValue,
															 Prev,
															 TrUserData),
						     TrUserData).

skip_varint_m_combat1v1_battle_result_toc(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    skip_varint_m_combat1v1_battle_result_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
skip_varint_m_combat1v1_battle_result_toc(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_result_toc(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData).

skip_length_delimited_m_combat1v1_battle_result_toc(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_battle_result_toc(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
skip_length_delimited_m_combat1v1_battle_result_toc(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_battle_result_toc(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData).

skip_group_m_combat1v1_battle_result_toc(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_battle_result_toc(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData).

skip_32_m_combat1v1_battle_result_toc(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_result_toc(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData).

skip_64_m_combat1v1_battle_result_toc(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dfp_read_field_def_m_combat1v1_battle_result_toc(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     F@_4, F@_5, TrUserData).

decode_msg_m_combat1v1_join_reward_tos(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_tos(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_combat1v1_join_reward_tos(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_combat1v1_join_reward_tos_num(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_combat1v1_join_reward_tos(<<>>, 0,
					       0, F@_1, _) ->
    #m_combat1v1_join_reward_tos{num = F@_1};
dfp_read_field_def_m_combat1v1_join_reward_tos(Other,
					       Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_combat1v1_join_reward_tos(Other, Z1,
						  Z2, F@_1, TrUserData).

dg_read_field_def_m_combat1v1_join_reward_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_join_reward_tos(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
dg_read_field_def_m_combat1v1_join_reward_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_join_reward_tos_num(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_join_reward_tos(Rest, 0, 0,
							F@_1, TrUserData);
	    1 ->
		skip_64_m_combat1v1_join_reward_tos(Rest, 0, 0, F@_1,
						    TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_join_reward_tos(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    3 ->
		skip_group_m_combat1v1_join_reward_tos(Rest, Key bsr 3,
						       0, F@_1, TrUserData);
	    5 ->
		skip_32_m_combat1v1_join_reward_tos(Rest, 0, 0, F@_1,
						    TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_join_reward_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_combat1v1_join_reward_tos{num = F@_1}.

d_field_m_combat1v1_join_reward_tos_num(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_join_reward_tos_num(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_combat1v1_join_reward_tos_num(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_join_reward_tos(RestF, 0,
						   0, NewFValue, TrUserData).

skip_varint_m_combat1v1_join_reward_tos(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_combat1v1_join_reward_tos(Rest, Z1, Z2,
					    F@_1, TrUserData);
skip_varint_m_combat1v1_join_reward_tos(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_length_delimited_m_combat1v1_join_reward_tos(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_join_reward_tos(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
skip_length_delimited_m_combat1v1_join_reward_tos(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_join_reward_tos(Rest2, 0,
						   0, F@_1, TrUserData).

skip_group_m_combat1v1_join_reward_tos(Bin, FNum, Z2,
				       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_join_reward_tos(Rest, 0,
						   Z2, F@_1, TrUserData).

skip_32_m_combat1v1_join_reward_tos(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_64_m_combat1v1_join_reward_tos(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

decode_msg_m_combat1v1_join_reward_toc(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_toc(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_combat1v1_join_reward_toc(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_combat1v1_join_reward_toc_num(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_combat1v1_join_reward_toc(<<>>, 0,
					       0, F@_1, _) ->
    #m_combat1v1_join_reward_toc{num = F@_1};
dfp_read_field_def_m_combat1v1_join_reward_toc(Other,
					       Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_combat1v1_join_reward_toc(Other, Z1,
						  Z2, F@_1, TrUserData).

dg_read_field_def_m_combat1v1_join_reward_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_join_reward_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
dg_read_field_def_m_combat1v1_join_reward_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_join_reward_toc_num(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_join_reward_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    1 ->
		skip_64_m_combat1v1_join_reward_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_join_reward_toc(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    3 ->
		skip_group_m_combat1v1_join_reward_toc(Rest, Key bsr 3,
						       0, F@_1, TrUserData);
	    5 ->
		skip_32_m_combat1v1_join_reward_toc(Rest, 0, 0, F@_1,
						    TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_join_reward_toc(<<>>, 0,
					      0, F@_1, _) ->
    #m_combat1v1_join_reward_toc{num = F@_1}.

d_field_m_combat1v1_join_reward_toc_num(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_join_reward_toc_num(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_combat1v1_join_reward_toc_num(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_join_reward_toc(RestF, 0,
						   0, NewFValue, TrUserData).

skip_varint_m_combat1v1_join_reward_toc(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_combat1v1_join_reward_toc(Rest, Z1, Z2,
					    F@_1, TrUserData);
skip_varint_m_combat1v1_join_reward_toc(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_length_delimited_m_combat1v1_join_reward_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_join_reward_toc(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
skip_length_delimited_m_combat1v1_join_reward_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_join_reward_toc(Rest2, 0,
						   0, F@_1, TrUserData).

skip_group_m_combat1v1_join_reward_toc(Bin, FNum, Z2,
				       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_join_reward_toc(Rest, 0,
						   Z2, F@_1, TrUserData).

skip_32_m_combat1v1_join_reward_toc(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_64_m_combat1v1_join_reward_toc(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_join_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

decode_msg_m_combat1v1_daily_reward_tos(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_tos(Bin, 0,
						    0, TrUserData).

dfp_read_field_def_m_combat1v1_daily_reward_tos(<<>>, 0,
						0, _) ->
    #m_combat1v1_daily_reward_tos{};
dfp_read_field_def_m_combat1v1_daily_reward_tos(Other,
						Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_daily_reward_tos(Other,
						   Z1, Z2, TrUserData).

dg_read_field_def_m_combat1v1_daily_reward_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_daily_reward_tos(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
dg_read_field_def_m_combat1v1_daily_reward_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_daily_reward_tos(Rest, 0, 0,
						   TrUserData);
      1 ->
	  skip_64_m_combat1v1_daily_reward_tos(Rest, 0, 0,
					       TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_daily_reward_tos(Rest,
							     0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_daily_reward_tos(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_daily_reward_tos(Rest, 0, 0,
					       TrUserData)
    end;
dg_read_field_def_m_combat1v1_daily_reward_tos(<<>>, 0,
					       0, _) ->
    #m_combat1v1_daily_reward_tos{}.

skip_varint_m_combat1v1_daily_reward_tos(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_daily_reward_tos(Rest, Z1, Z2,
					     TrUserData);
skip_varint_m_combat1v1_daily_reward_tos(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_tos(Rest,
						    Z1, Z2, TrUserData).

skip_length_delimited_m_combat1v1_daily_reward_tos(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_daily_reward_tos(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
skip_length_delimited_m_combat1v1_daily_reward_tos(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_daily_reward_tos(Rest2,
						    0, 0, TrUserData).

skip_group_m_combat1v1_daily_reward_tos(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_daily_reward_tos(Rest, 0,
						    Z2, TrUserData).

skip_32_m_combat1v1_daily_reward_tos(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_tos(Rest,
						    Z1, Z2, TrUserData).

skip_64_m_combat1v1_daily_reward_tos(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_tos(Rest,
						    Z1, Z2, TrUserData).

decode_msg_m_combat1v1_daily_reward_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_toc(Bin, 0,
						    0, TrUserData).

dfp_read_field_def_m_combat1v1_daily_reward_toc(<<>>, 0,
						0, _) ->
    #m_combat1v1_daily_reward_toc{};
dfp_read_field_def_m_combat1v1_daily_reward_toc(Other,
						Z1, Z2, TrUserData) ->
    dg_read_field_def_m_combat1v1_daily_reward_toc(Other,
						   Z1, Z2, TrUserData).

dg_read_field_def_m_combat1v1_daily_reward_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_daily_reward_toc(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
dg_read_field_def_m_combat1v1_daily_reward_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_combat1v1_daily_reward_toc(Rest, 0, 0,
						   TrUserData);
      1 ->
	  skip_64_m_combat1v1_daily_reward_toc(Rest, 0, 0,
					       TrUserData);
      2 ->
	  skip_length_delimited_m_combat1v1_daily_reward_toc(Rest,
							     0, 0, TrUserData);
      3 ->
	  skip_group_m_combat1v1_daily_reward_toc(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  skip_32_m_combat1v1_daily_reward_toc(Rest, 0, 0,
					       TrUserData)
    end;
dg_read_field_def_m_combat1v1_daily_reward_toc(<<>>, 0,
					       0, _) ->
    #m_combat1v1_daily_reward_toc{}.

skip_varint_m_combat1v1_daily_reward_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    skip_varint_m_combat1v1_daily_reward_toc(Rest, Z1, Z2,
					     TrUserData);
skip_varint_m_combat1v1_daily_reward_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_toc(Rest,
						    Z1, Z2, TrUserData).

skip_length_delimited_m_combat1v1_daily_reward_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_daily_reward_toc(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
skip_length_delimited_m_combat1v1_daily_reward_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_daily_reward_toc(Rest2,
						    0, 0, TrUserData).

skip_group_m_combat1v1_daily_reward_toc(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_daily_reward_toc(Rest, 0,
						    Z2, TrUserData).

skip_32_m_combat1v1_daily_reward_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_toc(Rest,
						    Z1, Z2, TrUserData).

skip_64_m_combat1v1_daily_reward_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_daily_reward_toc(Rest,
						    Z1, Z2, TrUserData).

decode_msg_m_combat1v1_merit_reward_tos(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_tos(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_combat1v1_merit_reward_tos(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_m_combat1v1_merit_reward_tos_merit(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_m_combat1v1_merit_reward_tos(<<>>, 0,
						0, F@_1, _) ->
    #m_combat1v1_merit_reward_tos{merit = F@_1};
dfp_read_field_def_m_combat1v1_merit_reward_tos(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_combat1v1_merit_reward_tos(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_combat1v1_merit_reward_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_merit_reward_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_m_combat1v1_merit_reward_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_merit_reward_tos_merit(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_merit_reward_tos(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_m_combat1v1_merit_reward_tos(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_merit_reward_tos(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_m_combat1v1_merit_reward_tos(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_m_combat1v1_merit_reward_tos(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_merit_reward_tos(<<>>, 0,
					       0, F@_1, _) ->
    #m_combat1v1_merit_reward_tos{merit = F@_1}.

d_field_m_combat1v1_merit_reward_tos_merit(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_merit_reward_tos_merit(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_m_combat1v1_merit_reward_tos_merit(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_merit_reward_tos(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_m_combat1v1_merit_reward_tos(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_combat1v1_merit_reward_tos(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_m_combat1v1_merit_reward_tos(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_tos(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_combat1v1_merit_reward_tos(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_merit_reward_tos(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_m_combat1v1_merit_reward_tos(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_merit_reward_tos(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_m_combat1v1_merit_reward_tos(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_merit_reward_tos(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_m_combat1v1_merit_reward_tos(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_tos(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_m_combat1v1_merit_reward_tos(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_tos(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_m_combat1v1_merit_reward_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_toc(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_combat1v1_merit_reward_toc(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_m_combat1v1_merit_reward_toc_merit(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_m_combat1v1_merit_reward_toc(<<>>, 0,
						0, F@_1, _) ->
    #m_combat1v1_merit_reward_toc{merit = F@_1};
dfp_read_field_def_m_combat1v1_merit_reward_toc(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_combat1v1_merit_reward_toc(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_combat1v1_merit_reward_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_merit_reward_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_m_combat1v1_merit_reward_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_merit_reward_toc_merit(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_merit_reward_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_m_combat1v1_merit_reward_toc(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_merit_reward_toc(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_m_combat1v1_merit_reward_toc(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_m_combat1v1_merit_reward_toc(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_merit_reward_toc(<<>>, 0,
					       0, F@_1, _) ->
    #m_combat1v1_merit_reward_toc{merit = F@_1}.

d_field_m_combat1v1_merit_reward_toc_merit(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_merit_reward_toc_merit(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_m_combat1v1_merit_reward_toc_merit(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_merit_reward_toc(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_m_combat1v1_merit_reward_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_combat1v1_merit_reward_toc(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_m_combat1v1_merit_reward_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_combat1v1_merit_reward_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_merit_reward_toc(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_m_combat1v1_merit_reward_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_merit_reward_toc(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_m_combat1v1_merit_reward_toc(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_merit_reward_toc(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_m_combat1v1_merit_reward_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_m_combat1v1_merit_reward_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_merit_reward_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_m_combat1v1_buy_times_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_tos(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_combat1v1_buy_times_tos(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_combat1v1_buy_times_tos_num(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_combat1v1_buy_times_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_combat1v1_buy_times_tos{num = F@_1};
dfp_read_field_def_m_combat1v1_buy_times_tos(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_combat1v1_buy_times_tos(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_combat1v1_buy_times_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_buy_times_tos(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_combat1v1_buy_times_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_buy_times_tos_num(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_buy_times_tos(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_combat1v1_buy_times_tos(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_buy_times_tos(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_combat1v1_buy_times_tos(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_combat1v1_buy_times_tos(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_buy_times_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_combat1v1_buy_times_tos{num = F@_1}.

d_field_m_combat1v1_buy_times_tos_num(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_buy_times_tos_num(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_combat1v1_buy_times_tos_num(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_buy_times_tos(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_combat1v1_buy_times_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_combat1v1_buy_times_tos(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_combat1v1_buy_times_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_combat1v1_buy_times_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_buy_times_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_combat1v1_buy_times_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_buy_times_tos(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_combat1v1_buy_times_tos(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_buy_times_tos(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_combat1v1_buy_times_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_combat1v1_buy_times_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_combat1v1_buy_times_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_combat1v1_buy_times_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_combat1v1_buy_times_toc_remain_join(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_combat1v1_buy_times_toc(<<16,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_combat1v1_buy_times_toc_remain_buy(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_combat1v1_buy_times_toc(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #m_combat1v1_buy_times_toc{remain_join = F@_1,
			       remain_buy = F@_2};
dfp_read_field_def_m_combat1v1_buy_times_toc(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_combat1v1_buy_times_toc(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_combat1v1_buy_times_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_combat1v1_buy_times_toc(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_m_combat1v1_buy_times_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_combat1v1_buy_times_toc_remain_join(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      16 ->
	  d_field_m_combat1v1_buy_times_toc_remain_buy(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_combat1v1_buy_times_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_m_combat1v1_buy_times_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_combat1v1_buy_times_toc(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_m_combat1v1_buy_times_toc(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_combat1v1_buy_times_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_combat1v1_buy_times_toc(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_combat1v1_buy_times_toc{remain_join = F@_1,
			       remain_buy = F@_2}.

d_field_m_combat1v1_buy_times_toc_remain_join(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_buy_times_toc_remain_join(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
d_field_m_combat1v1_buy_times_toc_remain_join(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_buy_times_toc(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

d_field_m_combat1v1_buy_times_toc_remain_buy(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_combat1v1_buy_times_toc_remain_buy(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
d_field_m_combat1v1_buy_times_toc_remain_buy(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_combat1v1_buy_times_toc(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_m_combat1v1_buy_times_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_combat1v1_buy_times_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_m_combat1v1_buy_times_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_combat1v1_buy_times_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_combat1v1_buy_times_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_m_combat1v1_buy_times_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_combat1v1_buy_times_toc(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_m_combat1v1_buy_times_toc(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_combat1v1_buy_times_toc(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_m_combat1v1_buy_times_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_m_combat1v1_buy_times_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_combat1v1_buy_times_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'decode_msg_map<int32,bool>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,bool>'(Bin, 0, 0,
					 id(0, TrUserData),
					 id(false, TrUserData), TrUserData).

'dfp_read_field_def_map<int32,bool>'(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,bool>_key'(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
'dfp_read_field_def_map<int32,bool>'(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,bool>_value'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_map<int32,bool>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,bool>'(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,bool>'(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

'dg_read_field_def_map<int32,bool>'(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,bool>'(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,bool>'(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,bool>_key'(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      16 ->
	  'd_field_map<int32,bool>_value'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,bool>'(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		'skip_64_map<int32,bool>'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,bool>'(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		'skip_group_map<int32,bool>'(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,bool>'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,bool>'(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,bool>_key'(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,bool>_key'(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,bool>_key'(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,bool>'(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

'd_field_map<int32,bool>_value'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,bool>_value'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,bool>_value'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_map<int32,bool>'(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

'skip_varint_map<int32,bool>'(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,bool>'(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
'skip_varint_map<int32,bool>'(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,bool>'(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

'skip_length_delimited_map<int32,bool>'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,bool>'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
'skip_length_delimited_map<int32,bool>'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,bool>'(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

'skip_group_map<int32,bool>'(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,bool>'(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

'skip_32_map<int32,bool>'(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,bool>'(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

'skip_64_map<int32,bool>'(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,bool>'(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_combat1v1_info_tos ->
	  merge_msg_m_combat1v1_info_tos(Prev, New, TrUserData);
      m_combat1v1_info_toc ->
	  merge_msg_m_combat1v1_info_toc(Prev, New, TrUserData);
      m_combat1v1_match_start_tos ->
	  merge_msg_m_combat1v1_match_start_tos(Prev, New,
						TrUserData);
      m_combat1v1_match_start_toc ->
	  merge_msg_m_combat1v1_match_start_toc(Prev, New,
						TrUserData);
      m_combat1v1_match_cancel_tos ->
	  merge_msg_m_combat1v1_match_cancel_tos(Prev, New,
						 TrUserData);
      m_combat1v1_match_cancel_toc ->
	  merge_msg_m_combat1v1_match_cancel_toc(Prev, New,
						 TrUserData);
      m_combat1v1_match_succ_toc ->
	  merge_msg_m_combat1v1_match_succ_toc(Prev, New,
					       TrUserData);
      m_combat1v1_battle_prepare_tos ->
	  merge_msg_m_combat1v1_battle_prepare_tos(Prev, New,
						   TrUserData);
      m_combat1v1_battle_prepare_toc ->
	  merge_msg_m_combat1v1_battle_prepare_toc(Prev, New,
						   TrUserData);
      m_combat1v1_battle_start_toc ->
	  merge_msg_m_combat1v1_battle_start_toc(Prev, New,
						 TrUserData);
      m_combat1v1_battle_result_toc ->
	  merge_msg_m_combat1v1_battle_result_toc(Prev, New,
						  TrUserData);
      m_combat1v1_join_reward_tos ->
	  merge_msg_m_combat1v1_join_reward_tos(Prev, New,
						TrUserData);
      m_combat1v1_join_reward_toc ->
	  merge_msg_m_combat1v1_join_reward_toc(Prev, New,
						TrUserData);
      m_combat1v1_daily_reward_tos ->
	  merge_msg_m_combat1v1_daily_reward_tos(Prev, New,
						 TrUserData);
      m_combat1v1_daily_reward_toc ->
	  merge_msg_m_combat1v1_daily_reward_toc(Prev, New,
						 TrUserData);
      m_combat1v1_merit_reward_tos ->
	  merge_msg_m_combat1v1_merit_reward_tos(Prev, New,
						 TrUserData);
      m_combat1v1_merit_reward_toc ->
	  merge_msg_m_combat1v1_merit_reward_toc(Prev, New,
						 TrUserData);
      m_combat1v1_buy_times_tos ->
	  merge_msg_m_combat1v1_buy_times_tos(Prev, New,
					      TrUserData);
      m_combat1v1_buy_times_toc ->
	  merge_msg_m_combat1v1_buy_times_toc(Prev, New,
					      TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_info_tos/3}).
merge_msg_m_combat1v1_info_tos(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_info_toc/3}).
merge_msg_m_combat1v1_info_toc(#m_combat1v1_info_toc{join_reward
							 = PFjoin_reward,
						     merit_reward =
							 PFmerit_reward},
			       #m_combat1v1_info_toc{grade = NFgrade,
						     score = NFscore,
						     today_join = NFtoday_join,
						     today_merit =
							 NFtoday_merit,
						     merit = NFmerit,
						     join_reward =
							 NFjoin_reward,
						     last_grade = NFlast_grade,
						     daily_reward =
							 NFdaily_reward,
						     merit_reward =
							 NFmerit_reward,
						     mode = NFmode,
						     remain_join =
							 NFremain_join,
						     remain_buy = NFremain_buy,
						     season_end = NFseason_end},
			       TrUserData) ->
    #m_combat1v1_info_toc{grade = NFgrade, score = NFscore,
			  today_join = NFtoday_join,
			  today_merit = NFtoday_merit, merit = NFmerit,
			  join_reward =
			      if PFjoin_reward /= undefined,
				 NFjoin_reward /= undefined ->
				     'tr_merge_m_combat1v1_info_toc.join_reward'(PFjoin_reward,
										 NFjoin_reward,
										 TrUserData);
				 PFjoin_reward == undefined -> NFjoin_reward;
				 NFjoin_reward == undefined -> PFjoin_reward
			      end,
			  last_grade = NFlast_grade,
			  daily_reward = NFdaily_reward,
			  merit_reward =
			      if PFmerit_reward /= undefined,
				 NFmerit_reward /= undefined ->
				     'erlang_++'(PFmerit_reward, NFmerit_reward,
						 TrUserData);
				 PFmerit_reward == undefined -> NFmerit_reward;
				 NFmerit_reward == undefined -> PFmerit_reward
			      end,
			  mode = NFmode, remain_join = NFremain_join,
			  remain_buy = NFremain_buy, season_end = NFseason_end}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_match_start_tos/3}).
merge_msg_m_combat1v1_match_start_tos(_Prev, New,
				      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_match_start_toc/3}).
merge_msg_m_combat1v1_match_start_toc(_Prev, New,
				      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_match_cancel_tos/3}).
merge_msg_m_combat1v1_match_cancel_tos(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_match_cancel_toc/3}).
merge_msg_m_combat1v1_match_cancel_toc(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_match_succ_toc/3}).
merge_msg_m_combat1v1_match_succ_toc(_Prev, New,
				     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_battle_prepare_tos/3}).
merge_msg_m_combat1v1_battle_prepare_tos(_Prev, New,
					 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_battle_prepare_toc/3}).
merge_msg_m_combat1v1_battle_prepare_toc(#m_combat1v1_battle_prepare_toc{},
					 #m_combat1v1_battle_prepare_toc{opponent
									     =
									     NFopponent,
									 pos =
									     NFpos},
					 _) ->
    #m_combat1v1_battle_prepare_toc{opponent = NFopponent,
				    pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_battle_start_toc/3}).
merge_msg_m_combat1v1_battle_start_toc(#m_combat1v1_battle_start_toc{ptime
									 =
									 PFptime,
								     etime =
									 PFetime},
				       #m_combat1v1_battle_start_toc{ptime =
									 NFptime,
								     etime =
									 NFetime},
				       _) ->
    #m_combat1v1_battle_start_toc{ptime =
				      if NFptime =:= undefined -> PFptime;
					 true -> NFptime
				      end,
				  etime =
				      if NFetime =:= undefined -> PFetime;
					 true -> NFetime
				      end}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_battle_result_toc/3}).
merge_msg_m_combat1v1_battle_result_toc(#m_combat1v1_battle_result_toc{rewards
									   =
									   PFrewards},
					#m_combat1v1_battle_result_toc{is_win =
									   NFis_win,
								       grade =
									   NFgrade,
								       score =
									   NFscore,
								       chg =
									   NFchg,
								       rewards =
									   NFrewards},
					TrUserData) ->
    #m_combat1v1_battle_result_toc{is_win = NFis_win,
				   grade = NFgrade, score = NFscore,
				   chg = NFchg,
				   rewards =
				       if PFrewards /= undefined,
					  NFrewards /= undefined ->
					      'tr_merge_m_combat1v1_battle_result_toc.rewards'(PFrewards,
											       NFrewards,
											       TrUserData);
					  PFrewards == undefined -> NFrewards;
					  NFrewards == undefined -> PFrewards
				       end}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_join_reward_tos/3}).
merge_msg_m_combat1v1_join_reward_tos(#m_combat1v1_join_reward_tos{},
				      #m_combat1v1_join_reward_tos{num = NFnum},
				      _) ->
    #m_combat1v1_join_reward_tos{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_join_reward_toc/3}).
merge_msg_m_combat1v1_join_reward_toc(#m_combat1v1_join_reward_toc{},
				      #m_combat1v1_join_reward_toc{num = NFnum},
				      _) ->
    #m_combat1v1_join_reward_toc{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_daily_reward_tos/3}).
merge_msg_m_combat1v1_daily_reward_tos(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_daily_reward_toc/3}).
merge_msg_m_combat1v1_daily_reward_toc(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_merit_reward_tos/3}).
merge_msg_m_combat1v1_merit_reward_tos(#m_combat1v1_merit_reward_tos{},
				       #m_combat1v1_merit_reward_tos{merit =
									 NFmerit},
				       _) ->
    #m_combat1v1_merit_reward_tos{merit = NFmerit}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_merit_reward_toc/3}).
merge_msg_m_combat1v1_merit_reward_toc(#m_combat1v1_merit_reward_toc{},
				       #m_combat1v1_merit_reward_toc{merit =
									 NFmerit},
				       _) ->
    #m_combat1v1_merit_reward_toc{merit = NFmerit}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_buy_times_tos/3}).
merge_msg_m_combat1v1_buy_times_tos(#m_combat1v1_buy_times_tos{},
				    #m_combat1v1_buy_times_tos{num = NFnum},
				    _) ->
    #m_combat1v1_buy_times_tos{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_combat1v1_buy_times_toc/3}).
merge_msg_m_combat1v1_buy_times_toc(#m_combat1v1_buy_times_toc{},
				    #m_combat1v1_buy_times_toc{remain_join =
								   NFremain_join,
							       remain_buy =
								   NFremain_buy},
				    _) ->
    #m_combat1v1_buy_times_toc{remain_join = NFremain_join,
			       remain_buy = NFremain_buy}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_combat1v1_info_tos ->
	  v_msg_m_combat1v1_info_tos(Msg, [MsgName], TrUserData);
      m_combat1v1_info_toc ->
	  v_msg_m_combat1v1_info_toc(Msg, [MsgName], TrUserData);
      m_combat1v1_match_start_tos ->
	  v_msg_m_combat1v1_match_start_tos(Msg, [MsgName],
					    TrUserData);
      m_combat1v1_match_start_toc ->
	  v_msg_m_combat1v1_match_start_toc(Msg, [MsgName],
					    TrUserData);
      m_combat1v1_match_cancel_tos ->
	  v_msg_m_combat1v1_match_cancel_tos(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_match_cancel_toc ->
	  v_msg_m_combat1v1_match_cancel_toc(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_match_succ_toc ->
	  v_msg_m_combat1v1_match_succ_toc(Msg, [MsgName],
					   TrUserData);
      m_combat1v1_battle_prepare_tos ->
	  v_msg_m_combat1v1_battle_prepare_tos(Msg, [MsgName],
					       TrUserData);
      m_combat1v1_battle_prepare_toc ->
	  v_msg_m_combat1v1_battle_prepare_toc(Msg, [MsgName],
					       TrUserData);
      m_combat1v1_battle_start_toc ->
	  v_msg_m_combat1v1_battle_start_toc(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_battle_result_toc ->
	  v_msg_m_combat1v1_battle_result_toc(Msg, [MsgName],
					      TrUserData);
      m_combat1v1_join_reward_tos ->
	  v_msg_m_combat1v1_join_reward_tos(Msg, [MsgName],
					    TrUserData);
      m_combat1v1_join_reward_toc ->
	  v_msg_m_combat1v1_join_reward_toc(Msg, [MsgName],
					    TrUserData);
      m_combat1v1_daily_reward_tos ->
	  v_msg_m_combat1v1_daily_reward_tos(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_daily_reward_toc ->
	  v_msg_m_combat1v1_daily_reward_toc(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_merit_reward_tos ->
	  v_msg_m_combat1v1_merit_reward_tos(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_merit_reward_toc ->
	  v_msg_m_combat1v1_merit_reward_toc(Msg, [MsgName],
					     TrUserData);
      m_combat1v1_buy_times_tos ->
	  v_msg_m_combat1v1_buy_times_tos(Msg, [MsgName],
					  TrUserData);
      m_combat1v1_buy_times_toc ->
	  v_msg_m_combat1v1_buy_times_toc(Msg, [MsgName],
					  TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_combat1v1_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_info_tos/3}).
v_msg_m_combat1v1_info_tos(#m_combat1v1_info_tos{},
			   _Path, _) ->
    ok;
v_msg_m_combat1v1_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_combat1v1_info_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_info_toc/3}).
v_msg_m_combat1v1_info_toc(#m_combat1v1_info_toc{grade =
						     F1,
						 score = F2, today_join = F3,
						 today_merit = F4, merit = F5,
						 join_reward = F6,
						 last_grade = F7,
						 daily_reward = F8,
						 merit_reward = F9, mode = F10,
						 remain_join = F11,
						 remain_buy = F12,
						 season_end = F13},
			   Path, TrUserData) ->
    v_type_int32(F1, [grade | Path], TrUserData),
    v_type_int32(F2, [score | Path], TrUserData),
    v_type_int32(F3, [today_join | Path], TrUserData),
    v_type_int32(F4, [today_merit | Path], TrUserData),
    v_type_int32(F5, [merit | Path], TrUserData),
    'v_map<int32,bool>'(F6, [join_reward | Path],
			TrUserData),
    v_type_int32(F7, [last_grade | Path], TrUserData),
    v_type_int32(F8, [daily_reward | Path], TrUserData),
    if is_list(F9) ->
	   _ = [v_type_int32(Elem, [merit_reward | Path],
			     TrUserData)
		|| Elem <- F9],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F9,
			 [merit_reward | Path])
    end,
    v_type_string(F10, [mode | Path], TrUserData),
    v_type_int32(F11, [remain_join | Path], TrUserData),
    v_type_int32(F12, [remain_buy | Path], TrUserData),
    v_type_int32(F13, [season_end | Path], TrUserData),
    ok;
v_msg_m_combat1v1_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_combat1v1_info_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_match_start_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_match_start_tos/3}).
v_msg_m_combat1v1_match_start_tos(#m_combat1v1_match_start_tos{},
				  _Path, _) ->
    ok;
v_msg_m_combat1v1_match_start_tos(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_match_start_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_match_start_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_match_start_toc/3}).
v_msg_m_combat1v1_match_start_toc(#m_combat1v1_match_start_toc{},
				  _Path, _) ->
    ok;
v_msg_m_combat1v1_match_start_toc(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_match_start_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_match_cancel_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_match_cancel_tos/3}).
v_msg_m_combat1v1_match_cancel_tos(#m_combat1v1_match_cancel_tos{},
				   _Path, _) ->
    ok;
v_msg_m_combat1v1_match_cancel_tos(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_match_cancel_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_match_cancel_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_match_cancel_toc/3}).
v_msg_m_combat1v1_match_cancel_toc(#m_combat1v1_match_cancel_toc{},
				   _Path, _) ->
    ok;
v_msg_m_combat1v1_match_cancel_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_match_cancel_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_match_succ_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_match_succ_toc/3}).
v_msg_m_combat1v1_match_succ_toc(#m_combat1v1_match_succ_toc{},
				 _Path, _) ->
    ok;
v_msg_m_combat1v1_match_succ_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_match_succ_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_battle_prepare_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_battle_prepare_tos/3}).
v_msg_m_combat1v1_battle_prepare_tos(#m_combat1v1_battle_prepare_tos{},
				     _Path, _) ->
    ok;
v_msg_m_combat1v1_battle_prepare_tos(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_battle_prepare_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_battle_prepare_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_battle_prepare_toc/3}).
v_msg_m_combat1v1_battle_prepare_toc(#m_combat1v1_battle_prepare_toc{opponent
									 = F1,
								     pos = F2},
				     Path, TrUserData) ->
    v_type_fixed64(F1, [opponent | Path], TrUserData),
    v_type_int32(F2, [pos | Path], TrUserData),
    ok;
v_msg_m_combat1v1_battle_prepare_toc(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_battle_prepare_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_battle_start_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_battle_start_toc/3}).
v_msg_m_combat1v1_battle_start_toc(#m_combat1v1_battle_start_toc{ptime
								     = F1,
								 etime = F2},
				   Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [ptime | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [etime | Path], TrUserData)
    end,
    ok;
v_msg_m_combat1v1_battle_start_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_battle_start_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_battle_result_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_battle_result_toc/3}).
v_msg_m_combat1v1_battle_result_toc(#m_combat1v1_battle_result_toc{is_win
								       = F1,
								   grade = F2,
								   score = F3,
								   chg = F4,
								   rewards =
								       F5},
				    Path, TrUserData) ->
    v_type_bool(F1, [is_win | Path], TrUserData),
    v_type_int32(F2, [grade | Path], TrUserData),
    v_type_int32(F3, [score | Path], TrUserData),
    v_type_int32(F4, [chg | Path], TrUserData),
    'v_map<int32,int32>'(F5, [rewards | Path], TrUserData),
    ok;
v_msg_m_combat1v1_battle_result_toc(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_battle_result_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_join_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_join_reward_tos/3}).
v_msg_m_combat1v1_join_reward_tos(#m_combat1v1_join_reward_tos{num
								   = F1},
				  Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_combat1v1_join_reward_tos(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_join_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_join_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_join_reward_toc/3}).
v_msg_m_combat1v1_join_reward_toc(#m_combat1v1_join_reward_toc{num
								   = F1},
				  Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_combat1v1_join_reward_toc(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_join_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_daily_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_daily_reward_tos/3}).
v_msg_m_combat1v1_daily_reward_tos(#m_combat1v1_daily_reward_tos{},
				   _Path, _) ->
    ok;
v_msg_m_combat1v1_daily_reward_tos(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_daily_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_daily_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_daily_reward_toc/3}).
v_msg_m_combat1v1_daily_reward_toc(#m_combat1v1_daily_reward_toc{},
				   _Path, _) ->
    ok;
v_msg_m_combat1v1_daily_reward_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_daily_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_merit_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_merit_reward_tos/3}).
v_msg_m_combat1v1_merit_reward_tos(#m_combat1v1_merit_reward_tos{merit
								     = F1},
				   Path, TrUserData) ->
    v_type_int32(F1, [merit | Path], TrUserData), ok;
v_msg_m_combat1v1_merit_reward_tos(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_merit_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_merit_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_merit_reward_toc/3}).
v_msg_m_combat1v1_merit_reward_toc(#m_combat1v1_merit_reward_toc{merit
								     = F1},
				   Path, TrUserData) ->
    v_type_int32(F1, [merit | Path], TrUserData), ok;
v_msg_m_combat1v1_merit_reward_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_combat1v1_merit_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_buy_times_tos/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_buy_times_tos/3}).
v_msg_m_combat1v1_buy_times_tos(#m_combat1v1_buy_times_tos{num
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_combat1v1_buy_times_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_combat1v1_buy_times_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_combat1v1_buy_times_toc/3}).
-dialyzer({nowarn_function,v_msg_m_combat1v1_buy_times_toc/3}).
v_msg_m_combat1v1_buy_times_toc(#m_combat1v1_buy_times_toc{remain_join
							       = F1,
							   remain_buy = F2},
				Path, TrUserData) ->
    v_type_int32(F1, [remain_join | Path], TrUserData),
    v_type_int32(F2, [remain_buy | Path], TrUserData),
    ok;
v_msg_m_combat1v1_buy_times_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_combat1v1_buy_times_toc},
		  X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,bool>'/3}).
-dialyzer({nowarn_function,'v_map<int32,bool>'/3}).
'v_map<int32,bool>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_bool(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,bool>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_combat1v1_battle_result_toc.rewards[x]'/2}).
'tr_encode_m_combat1v1_battle_result_toc.rewards[x]'(X,
						     _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_combat1v1_battle_result_toc.rewards'/2}).
'tr_decode_init_default_m_combat1v1_battle_result_toc.rewards'(_,
							       _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_combat1v1_battle_result_toc.rewards'/3}).
'tr_merge_m_combat1v1_battle_result_toc.rewards'(X1, X2,
						 _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_combat1v1_battle_result_toc.rewards'/2}).
'tr_decode_repeated_finalize_m_combat1v1_battle_result_toc.rewards'(L,
								    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_combat1v1_battle_result_toc.rewards'/2}).
'tr_encode_m_combat1v1_battle_result_toc.rewards'(X,
						  _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_combat1v1_battle_result_toc.rewards'/3}).
'tr_decode_repeated_add_elem_m_combat1v1_battle_result_toc.rewards'(Elem,
								    L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_combat1v1_info_toc.join_reward'/2}).
'tr_decode_init_default_m_combat1v1_info_toc.join_reward'(_,
							  _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_combat1v1_info_toc.join_reward'/3}).
'tr_merge_m_combat1v1_info_toc.join_reward'(X1, X2,
					    _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_combat1v1_info_toc.join_reward'/2}).
'tr_decode_repeated_finalize_m_combat1v1_info_toc.join_reward'(L,
							       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_combat1v1_info_toc.join_reward'/2}).
'tr_encode_m_combat1v1_info_toc.join_reward'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_combat1v1_info_toc.join_reward'/3}).
'tr_decode_repeated_add_elem_m_combat1v1_info_toc.join_reward'(Elem,
							       L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_combat1v1_info_toc.join_reward[x]'/2}).
'tr_encode_m_combat1v1_info_toc.join_reward[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_combat1v1_info_tos}, []},
     {{msg, m_combat1v1_info_toc},
      [#field{name = grade, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = today_join, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = today_merit, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = merit, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = join_reward, fnum = 6, rnum = 7,
	      type = {map, int32, bool}, occurrence = repeated,
	      opts = []},
       #field{name = last_grade, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []},
       #field{name = daily_reward, fnum = 8, rnum = 9,
	      type = int32, occurrence = required, opts = []},
       #field{name = merit_reward, fnum = 9, rnum = 10,
	      type = int32, occurrence = repeated, opts = []},
       #field{name = mode, fnum = 10, rnum = 11, type = string,
	      occurrence = required, opts = []},
       #field{name = remain_join, fnum = 11, rnum = 12,
	      type = int32, occurrence = required, opts = []},
       #field{name = remain_buy, fnum = 12, rnum = 13,
	      type = int32, occurrence = required, opts = []},
       #field{name = season_end, fnum = 13, rnum = 14,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_combat1v1_match_start_tos}, []},
     {{msg, m_combat1v1_match_start_toc}, []},
     {{msg, m_combat1v1_match_cancel_tos}, []},
     {{msg, m_combat1v1_match_cancel_toc}, []},
     {{msg, m_combat1v1_match_succ_toc}, []},
     {{msg, m_combat1v1_battle_prepare_tos}, []},
     {{msg, m_combat1v1_battle_prepare_toc},
      [#field{name = opponent, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_combat1v1_battle_start_toc},
      [#field{name = ptime, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = etime, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, m_combat1v1_battle_result_toc},
      [#field{name = is_win, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []},
       #field{name = grade, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = chg, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = rewards, fnum = 5, rnum = 6,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_combat1v1_join_reward_tos},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_combat1v1_join_reward_toc},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_combat1v1_daily_reward_tos}, []},
     {{msg, m_combat1v1_daily_reward_toc}, []},
     {{msg, m_combat1v1_merit_reward_tos},
      [#field{name = merit, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_combat1v1_merit_reward_toc},
      [#field{name = merit, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_combat1v1_buy_times_tos},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_combat1v1_buy_times_toc},
      [#field{name = remain_join, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = remain_buy, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_combat1v1_info_tos, m_combat1v1_info_toc,
     m_combat1v1_match_start_tos,
     m_combat1v1_match_start_toc,
     m_combat1v1_match_cancel_tos,
     m_combat1v1_match_cancel_toc,
     m_combat1v1_match_succ_toc,
     m_combat1v1_battle_prepare_tos,
     m_combat1v1_battle_prepare_toc,
     m_combat1v1_battle_start_toc,
     m_combat1v1_battle_result_toc,
     m_combat1v1_join_reward_tos,
     m_combat1v1_join_reward_toc,
     m_combat1v1_daily_reward_tos,
     m_combat1v1_daily_reward_toc,
     m_combat1v1_merit_reward_tos,
     m_combat1v1_merit_reward_toc, m_combat1v1_buy_times_tos,
     m_combat1v1_buy_times_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_combat1v1_info_tos, m_combat1v1_info_toc,
     m_combat1v1_match_start_tos,
     m_combat1v1_match_start_toc,
     m_combat1v1_match_cancel_tos,
     m_combat1v1_match_cancel_toc,
     m_combat1v1_match_succ_toc,
     m_combat1v1_battle_prepare_tos,
     m_combat1v1_battle_prepare_toc,
     m_combat1v1_battle_start_toc,
     m_combat1v1_battle_result_toc,
     m_combat1v1_join_reward_tos,
     m_combat1v1_join_reward_toc,
     m_combat1v1_daily_reward_tos,
     m_combat1v1_daily_reward_toc,
     m_combat1v1_merit_reward_tos,
     m_combat1v1_merit_reward_toc, m_combat1v1_buy_times_tos,
     m_combat1v1_buy_times_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_combat1v1_info_tos) -> [];
find_msg_def(m_combat1v1_info_toc) ->
    [#field{name = grade, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = today_join, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = today_merit, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = merit, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = join_reward, fnum = 6, rnum = 7,
	    type = {map, int32, bool}, occurrence = repeated,
	    opts = []},
     #field{name = last_grade, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []},
     #field{name = daily_reward, fnum = 8, rnum = 9,
	    type = int32, occurrence = required, opts = []},
     #field{name = merit_reward, fnum = 9, rnum = 10,
	    type = int32, occurrence = repeated, opts = []},
     #field{name = mode, fnum = 10, rnum = 11, type = string,
	    occurrence = required, opts = []},
     #field{name = remain_join, fnum = 11, rnum = 12,
	    type = int32, occurrence = required, opts = []},
     #field{name = remain_buy, fnum = 12, rnum = 13,
	    type = int32, occurrence = required, opts = []},
     #field{name = season_end, fnum = 13, rnum = 14,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_combat1v1_match_start_tos) -> [];
find_msg_def(m_combat1v1_match_start_toc) -> [];
find_msg_def(m_combat1v1_match_cancel_tos) -> [];
find_msg_def(m_combat1v1_match_cancel_toc) -> [];
find_msg_def(m_combat1v1_match_succ_toc) -> [];
find_msg_def(m_combat1v1_battle_prepare_tos) -> [];
find_msg_def(m_combat1v1_battle_prepare_toc) ->
    [#field{name = opponent, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_combat1v1_battle_start_toc) ->
    [#field{name = ptime, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = etime, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(m_combat1v1_battle_result_toc) ->
    [#field{name = is_win, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []},
     #field{name = grade, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = chg, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = rewards, fnum = 5, rnum = 6,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_combat1v1_join_reward_tos) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_combat1v1_join_reward_toc) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_combat1v1_daily_reward_tos) -> [];
find_msg_def(m_combat1v1_daily_reward_toc) -> [];
find_msg_def(m_combat1v1_merit_reward_tos) ->
    [#field{name = merit, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_combat1v1_merit_reward_toc) ->
    [#field{name = merit, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_combat1v1_buy_times_tos) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_combat1v1_buy_times_toc) ->
    [#field{name = remain_join, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = remain_buy, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
