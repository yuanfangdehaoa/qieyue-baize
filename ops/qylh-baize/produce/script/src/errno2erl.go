package main

import (
	"encoding/xml"
	"os"
	xml2 "parser/xml"
	"path"
)

type errs struct {
	XMLName xml.Name `xml:"errs"`
	Errs    []err    `xml:"err"`
}

type err struct {
	XMLName xml.Name `xml:"err"`
	Name    string   `xml:"name,attr"`
	Code    int      `xml:"code,attr"`
	Desc    string   `xml:"desc,attr"`
}

var tplErrnoErl = `%% Automatically generated, do not edit
%% Generated by parse_errno.go

-ifndef(ERRNO_HRL).
-define(ERRNO_HRL, true).
{{ range .Errs }}
-define({{ .Name }}, {{ .Code }}). %% {{ .Desc }}
{{ end }}
-endif.
`

var tplErrnoPhp = `<?php
// Automatically generated, do not edit
// Generated by parse_errno.go

{{ range .Errs }}
define("{{ .Name }}", {{ .Code }}); //{{ .Desc }}
{{ end }}
`

func main() {
	x := xml2.ParseXML(os.Args[1], &errs{})

	if xml2.IsDirExist(os.Args[2]) {
		x.Exec(tplErrnoErl, nil)
		x.Write(path.Join(os.Args[2], "include", "errno.hrl"))
		x.Clear()
	}

	if len(os.Args) > 3 && os.Args[3] != "undefined" && xml2.IsDirExist(os.Args[3]) {
		x.Exec(tplErrnoPhp, nil)
		x.Write(path.Join(os.Args[3], "/app/Admin/Helpers/errno.php"))
	}
}
