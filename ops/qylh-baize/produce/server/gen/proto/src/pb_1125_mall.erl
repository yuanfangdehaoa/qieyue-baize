%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1125_mall).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1125_mall.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type p_mall_limit_item() :: #p_mall_limit_item{}.

-type p_mallitem() :: #p_mallitem{}.

-type m_mall_bought_tos() :: #m_mall_bought_tos{}.

-type m_mall_bought_toc() :: #m_mall_bought_toc{}.

-type m_mall_buy_tos() :: #m_mall_buy_tos{}.

-type m_mall_buy_toc() :: #m_mall_buy_toc{}.

-type m_mall_getlimit_tos() :: #m_mall_getlimit_tos{}.

-type m_mall_getlimit_toc() :: #m_mall_getlimit_toc{}.

-type m_mall_act_items_tos() :: #m_mall_act_items_tos{}.

-type m_mall_act_items_toc() :: #m_mall_act_items_toc{}.

-type m_mall_validate_tos() :: #m_mall_validate_tos{}.

-type m_mall_validate_toc() :: #m_mall_validate_toc{}.

-type m_mall_buy_pack_tos() :: #m_mall_buy_pack_tos{}.

-type m_mall_buy_pack_toc() :: #m_mall_buy_pack_toc{}.

-export_type(['p_mall_limit_item'/0, 'p_mallitem'/0, 'm_mall_bought_tos'/0, 'm_mall_bought_toc'/0, 'm_mall_buy_tos'/0, 'm_mall_buy_toc'/0, 'm_mall_getlimit_tos'/0, 'm_mall_getlimit_toc'/0, 'm_mall_act_items_tos'/0, 'm_mall_act_items_toc'/0, 'm_mall_validate_tos'/0, 'm_mall_validate_toc'/0, 'm_mall_buy_pack_tos'/0, 'm_mall_buy_pack_toc'/0]).

-spec encode_msg(#p_mall_limit_item{} | #p_mallitem{} | #m_mall_bought_tos{} | #m_mall_bought_toc{} | #m_mall_buy_tos{} | #m_mall_buy_toc{} | #m_mall_getlimit_tos{} | #m_mall_getlimit_toc{} | #m_mall_act_items_tos{} | #m_mall_act_items_toc{} | #m_mall_validate_tos{} | #m_mall_validate_toc{} | #m_mall_buy_pack_tos{} | #m_mall_buy_pack_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#p_mall_limit_item{} | #p_mallitem{} | #m_mall_bought_tos{} | #m_mall_bought_toc{} | #m_mall_buy_tos{} | #m_mall_buy_toc{} | #m_mall_getlimit_tos{} | #m_mall_getlimit_toc{} | #m_mall_act_items_tos{} | #m_mall_act_items_toc{} | #m_mall_validate_tos{} | #m_mall_validate_toc{} | #m_mall_buy_pack_tos{} | #m_mall_buy_pack_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#p_mall_limit_item{} | #p_mallitem{} | #m_mall_bought_tos{} | #m_mall_bought_toc{} | #m_mall_buy_tos{} | #m_mall_buy_toc{} | #m_mall_getlimit_tos{} | #m_mall_getlimit_toc{} | #m_mall_act_items_tos{} | #m_mall_act_items_toc{} | #m_mall_validate_tos{} | #m_mall_validate_toc{} | #m_mall_buy_pack_tos{} | #m_mall_buy_pack_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      p_mall_limit_item ->
	  encode_msg_p_mall_limit_item(id(Msg, TrUserData),
				       TrUserData);
      p_mallitem ->
	  encode_msg_p_mallitem(id(Msg, TrUserData), TrUserData);
      m_mall_bought_tos ->
	  encode_msg_m_mall_bought_tos(id(Msg, TrUserData),
				       TrUserData);
      m_mall_bought_toc ->
	  encode_msg_m_mall_bought_toc(id(Msg, TrUserData),
				       TrUserData);
      m_mall_buy_tos ->
	  encode_msg_m_mall_buy_tos(id(Msg, TrUserData),
				    TrUserData);
      m_mall_buy_toc ->
	  encode_msg_m_mall_buy_toc(id(Msg, TrUserData),
				    TrUserData);
      m_mall_getlimit_tos ->
	  encode_msg_m_mall_getlimit_tos(id(Msg, TrUserData),
					 TrUserData);
      m_mall_getlimit_toc ->
	  encode_msg_m_mall_getlimit_toc(id(Msg, TrUserData),
					 TrUserData);
      m_mall_act_items_tos ->
	  encode_msg_m_mall_act_items_tos(id(Msg, TrUserData),
					  TrUserData);
      m_mall_act_items_toc ->
	  encode_msg_m_mall_act_items_toc(id(Msg, TrUserData),
					  TrUserData);
      m_mall_validate_tos ->
	  encode_msg_m_mall_validate_tos(id(Msg, TrUserData),
					 TrUserData);
      m_mall_validate_toc ->
	  encode_msg_m_mall_validate_toc(id(Msg, TrUserData),
					 TrUserData);
      m_mall_buy_pack_tos ->
	  encode_msg_m_mall_buy_pack_tos(id(Msg, TrUserData),
					 TrUserData);
      m_mall_buy_pack_toc ->
	  encode_msg_m_mall_buy_pack_toc(id(Msg, TrUserData),
					 TrUserData)
    end.


encode_msg_p_mall_limit_item(Msg, TrUserData) ->
    encode_msg_p_mall_limit_item(Msg, <<>>, TrUserData).


encode_msg_p_mall_limit_item(#p_mall_limit_item{id = F1,
						left_num = F2, end_time = F3,
						buy_num = F4},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	   end
    end.

encode_msg_p_mallitem(Msg, TrUserData) ->
    encode_msg_p_mallitem(Msg, <<>>, TrUserData).


encode_msg_p_mallitem(#p_mallitem{id = F1, order = F2,
				  item = F3, discount = F4, price = F5,
				  original_price = F6, limit_num = F7,
				  limit_vip = F8, limit_other = F9,
				  limit_pre_id = F10, limit_level = F11,
				  activity = F12, name = F13},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = 'tr_encode_p_mallitem.price'(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_p_mallitem_price(TrF5, B4, TrUserData)
	   end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
	  end,
    B12 = begin
	    TrF12 = id(F12, TrUserData),
	    e_type_int32(TrF12, <<B11/binary, 96>>, TrUserData)
	  end,
    begin
      TrF13 = id(F13, TrUserData),
      e_type_string(TrF13, <<B12/binary, 106>>, TrUserData)
    end.

encode_msg_m_mall_bought_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_mall_bought_toc(Msg, TrUserData) ->
    encode_msg_m_mall_bought_toc(Msg, <<>>, TrUserData).


encode_msg_m_mall_bought_toc(#m_mall_bought_toc{bought_items
						    = F1},
			     Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_mall_bought_toc.bought_items'(F1,
							TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_mall_bought_toc_bought_items(TrF1, Bin,
						    TrUserData)
      end
    end.

encode_msg_m_mall_buy_tos(Msg, TrUserData) ->
    encode_msg_m_mall_buy_tos(Msg, <<>>, TrUserData).


encode_msg_m_mall_buy_tos(#m_mall_buy_tos{id = F1,
					  num = F2},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_mall_buy_toc(Msg, TrUserData) ->
    encode_msg_m_mall_buy_toc(Msg, <<>>, TrUserData).


encode_msg_m_mall_buy_toc(#m_mall_buy_toc{id = F1}, Bin,
			  TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_mall_getlimit_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_mall_getlimit_toc(Msg, TrUserData) ->
    encode_msg_m_mall_getlimit_toc(Msg, <<>>, TrUserData).


encode_msg_m_mall_getlimit_toc(#m_mall_getlimit_toc{limit_items
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_mall_getlimit_toc_limit_items(TrF1, Bin,
						     TrUserData)
      end
    end.

encode_msg_m_mall_act_items_tos(Msg, TrUserData) ->
    encode_msg_m_mall_act_items_tos(Msg, <<>>, TrUserData).


encode_msg_m_mall_act_items_tos(#m_mall_act_items_tos{act_id
							  = F1},
				Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_mall_act_items_toc(Msg, TrUserData) ->
    encode_msg_m_mall_act_items_toc(Msg, <<>>, TrUserData).


encode_msg_m_mall_act_items_toc(#m_mall_act_items_toc{act_id
							  = F1,
						      items = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_mall_act_items_toc_items(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_mall_validate_tos(Msg, TrUserData) ->
    encode_msg_m_mall_validate_tos(Msg, <<>>, TrUserData).


encode_msg_m_mall_validate_tos(#m_mall_validate_tos{id =
							F1,
						    uid = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_mall_validate_toc(Msg, TrUserData) ->
    encode_msg_m_mall_validate_toc(Msg, <<>>, TrUserData).


encode_msg_m_mall_validate_toc(#m_mall_validate_toc{id =
							F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_mall_buy_pack_tos(Msg, TrUserData) ->
    encode_msg_m_mall_buy_pack_tos(Msg, <<>>, TrUserData).


encode_msg_m_mall_buy_pack_tos(#m_mall_buy_pack_tos{act_id
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_mall_buy_pack_toc(_Msg, _TrUserData) ->
    <<>>.

e_mfield_p_mallitem_price(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_mallitem_price([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	e_mfield_p_mallitem_price('tr_encode_p_mallitem.price[x]'(Elem,
								  TrUserData),
				  Bin2, TrUserData),
    e_field_p_mallitem_price(Rest, Bin3, TrUserData);
e_field_p_mallitem_price([], Bin, _TrUserData) -> Bin.

e_mfield_m_mall_bought_toc_bought_items(Msg, Bin,
					TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_mall_bought_toc_bought_items([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_mall_bought_toc_bought_items('tr_encode_m_mall_bought_toc.bought_items[x]'(Elem,
											      TrUserData),
						Bin2, TrUserData),
    e_field_m_mall_bought_toc_bought_items(Rest, Bin3,
					   TrUserData);
e_field_m_mall_bought_toc_bought_items([], Bin,
				       _TrUserData) ->
    Bin.

e_mfield_m_mall_getlimit_toc_limit_items(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_p_mall_limit_item(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_mall_getlimit_toc_limit_items([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_mall_getlimit_toc_limit_items(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_m_mall_getlimit_toc_limit_items(Rest, Bin3,
					    TrUserData);
e_field_m_mall_getlimit_toc_limit_items([], Bin,
					_TrUserData) ->
    Bin.

e_mfield_m_mall_act_items_toc_items(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_p_mallitem(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_mall_act_items_toc_items([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_mall_act_items_toc_items(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_m_mall_act_items_toc_items(Rest, Bin3,
				       TrUserData);
e_field_m_mall_act_items_toc_items([], Bin,
				   _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(p_mall_limit_item, Bin, TrUserData) ->
    id(decode_msg_p_mall_limit_item(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_mallitem, Bin, TrUserData) ->
    id(decode_msg_p_mallitem(Bin, TrUserData), TrUserData);
decode_msg_2_doit(m_mall_bought_tos, Bin, TrUserData) ->
    id(decode_msg_m_mall_bought_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_bought_toc, Bin, TrUserData) ->
    id(decode_msg_m_mall_bought_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_buy_tos, Bin, TrUserData) ->
    id(decode_msg_m_mall_buy_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_buy_toc, Bin, TrUserData) ->
    id(decode_msg_m_mall_buy_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_getlimit_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_getlimit_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_getlimit_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_getlimit_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_act_items_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_act_items_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_act_items_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_act_items_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_validate_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_validate_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_validate_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_validate_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_buy_pack_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_buy_pack_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_mall_buy_pack_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_mall_buy_pack_toc(Bin, TrUserData),
       TrUserData).



decode_msg_p_mall_limit_item(Bin, TrUserData) ->
    dfp_read_field_def_p_mall_limit_item(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_mall_limit_item(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_p_mall_limit_item_id(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_p_mall_limit_item(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_p_mall_limit_item_left_num(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_mall_limit_item(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_p_mall_limit_item_end_time(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_mall_limit_item(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    d_field_p_mall_limit_item_buy_num(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_p_mall_limit_item(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #p_mall_limit_item{id = F@_1, left_num = F@_2,
		       end_time = F@_3, buy_num = F@_4};
dfp_read_field_def_p_mall_limit_item(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_mall_limit_item(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_p_mall_limit_item(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_mall_limit_item(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
dg_read_field_def_p_mall_limit_item(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_mall_limit_item_id(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      16 ->
	  d_field_p_mall_limit_item_left_num(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_p_mall_limit_item_end_time(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_p_mall_limit_item_buy_num(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_mall_limit_item(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_p_mall_limit_item(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    2 ->
		skip_length_delimited_p_mall_limit_item(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							TrUserData);
	    3 ->
		skip_group_p_mall_limit_item(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_p_mall_limit_item(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData)
	  end
    end;
dg_read_field_def_p_mall_limit_item(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #p_mall_limit_item{id = F@_1, left_num = F@_2,
		       end_time = F@_3, buy_num = F@_4}.

d_field_p_mall_limit_item_id(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_mall_limit_item_id(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_mall_limit_item_id(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mall_limit_item(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4,
					 TrUserData).

d_field_p_mall_limit_item_left_num(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_mall_limit_item_left_num(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_p_mall_limit_item_left_num(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mall_limit_item(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, TrUserData).

d_field_p_mall_limit_item_end_time(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_mall_limit_item_end_time(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_p_mall_limit_item_end_time(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mall_limit_item(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, TrUserData).

d_field_p_mall_limit_item_buy_num(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_mall_limit_item_buy_num(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_p_mall_limit_item_buy_num(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mall_limit_item(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, TrUserData).

skip_varint_p_mall_limit_item(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_mall_limit_item(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
skip_varint_p_mall_limit_item(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_mall_limit_item(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_p_mall_limit_item(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_p_mall_limit_item(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
skip_length_delimited_p_mall_limit_item(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_mall_limit_item(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_group_p_mall_limit_item(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_mall_limit_item(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_32_p_mall_limit_item(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_mall_limit_item(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

skip_64_p_mall_limit_item(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_mall_limit_item(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData).

decode_msg_p_mallitem(Bin, TrUserData) ->
    dfp_read_field_def_p_mallitem(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  'tr_decode_init_default_p_mallitem.price'([],
									    TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_mallitem(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_order(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_item(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_discount(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_price(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<50, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_original_price(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, F@_12, F@_13,
				      TrUserData);
dfp_read_field_def_p_mallitem(<<56, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_limit_num(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_limit_vip(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<74, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_limit_other(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<80, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_limit_pre_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, F@_12, F@_13,
				    TrUserData);
dfp_read_field_def_p_mallitem(<<88, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_limit_level(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<96, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_activity(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<106, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    d_field_p_mallitem_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData);
dfp_read_field_def_p_mallitem(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, R1, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData) ->
    #p_mallitem{id = F@_1, order = F@_2, item = F@_3,
		discount = F@_4,
		price =
		    'tr_decode_repeated_finalize_p_mallitem.price'(R1,
								   TrUserData),
		original_price = F@_6, limit_num = F@_7,
		limit_vip = F@_8, limit_other = F@_9,
		limit_pre_id = F@_10, limit_level = F@_11,
		activity = F@_12, name = F@_13};
dfp_read_field_def_p_mallitem(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_p_mallitem(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_p_mallitem(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_mallitem(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_p_mallitem(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_mallitem_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      16 ->
	  d_field_p_mallitem_order(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      26 ->
	  d_field_p_mallitem_item(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, TrUserData);
      32 ->
	  d_field_p_mallitem_discount(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, TrUserData);
      42 ->
	  d_field_p_mallitem_price(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      50 ->
	  d_field_p_mallitem_original_price(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11, F@_12,
					    F@_13, TrUserData);
      56 ->
	  d_field_p_mallitem_limit_num(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, TrUserData);
      64 ->
	  d_field_p_mallitem_limit_vip(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, TrUserData);
      74 ->
	  d_field_p_mallitem_limit_other(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
      80 ->
	  d_field_p_mallitem_limit_pre_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, F@_12, F@_13,
					  TrUserData);
      88 ->
	  d_field_p_mallitem_limit_level(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 TrUserData);
      96 ->
	  d_field_p_mallitem_activity(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, TrUserData);
      106 ->
	  d_field_p_mallitem_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_mallitem(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, TrUserData);
	    1 ->
		skip_64_p_mallitem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   F@_12, F@_13, TrUserData);
	    2 ->
		skip_length_delimited_p_mallitem(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6, F@_7,
						 F@_8, F@_9, F@_10, F@_11,
						 F@_12, F@_13, TrUserData);
	    3 ->
		skip_group_p_mallitem(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, TrUserData);
	    5 ->
		skip_32_p_mallitem(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   F@_12, F@_13, TrUserData)
	  end
    end;
dg_read_field_def_p_mallitem(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, R1, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, F@_12, F@_13, TrUserData) ->
    #p_mallitem{id = F@_1, order = F@_2, item = F@_3,
		discount = F@_4,
		price =
		    'tr_decode_repeated_finalize_p_mallitem.price'(R1,
								   TrUserData),
		original_price = F@_6, limit_num = F@_7,
		limit_vip = F@_8, limit_other = F@_9,
		limit_pre_id = F@_10, limit_level = F@_11,
		activity = F@_12, name = F@_13}.

d_field_p_mallitem_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_order(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_order(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_order(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_item(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_item(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_item(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_discount(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_discount(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_discount(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_price(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_price(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_price(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4,
				  'tr_decode_repeated_add_elem_p_mallitem.price'(NewFValue,
										 Prev,
										 TrUserData),
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData).

d_field_p_mallitem_original_price(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData)
    when N < 57 ->
    d_field_p_mallitem_original_price(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_original_price(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
				  F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_limit_num(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_limit_num(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_limit_num(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_limit_vip(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_limit_vip(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_limit_vip(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     _, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_limit_other(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 57 ->
    d_field_p_mallitem_limit_other(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
d_field_p_mallitem_limit_other(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, _, F@_10, F@_11, F@_12, F@_13,
			       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_limit_pre_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				TrUserData)
    when N < 57 ->
    d_field_p_mallitem_limit_pre_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				    F@_13, TrUserData);
d_field_p_mallitem_limit_pre_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, _, F@_11, F@_12, F@_13,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  NewFValue, F@_11, F@_12, F@_13, TrUserData).

d_field_p_mallitem_limit_level(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			       TrUserData)
    when N < 57 ->
    d_field_p_mallitem_limit_level(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, TrUserData);
d_field_p_mallitem_limit_level(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, _, F@_12, F@_13,
			       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, NewFValue, F@_12, F@_13, TrUserData).

d_field_p_mallitem_activity(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_activity(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_activity(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, _, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, NewFValue, F@_13, TrUserData).

d_field_p_mallitem_name(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_mallitem_name(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_mallitem_name(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_mallitem(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, NewFValue, TrUserData).

skip_varint_p_mallitem(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_p_mallitem(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, TrUserData);
skip_varint_p_mallitem(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_p_mallitem(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_p_mallitem(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_p_mallitem(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				     F@_12, F@_13, TrUserData);
skip_length_delimited_p_mallitem(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_mallitem(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_group_p_mallitem(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		      F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_mallitem(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_32_p_mallitem(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_p_mallitem(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

skip_64_p_mallitem(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_p_mallitem(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, TrUserData).

decode_msg_m_mall_bought_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_bought_tos(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_m_mall_bought_tos(<<>>, 0, 0, _) ->
    #m_mall_bought_tos{};
dfp_read_field_def_m_mall_bought_tos(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_m_mall_bought_tos(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_m_mall_bought_tos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_bought_tos(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_m_mall_bought_tos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_mall_bought_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_mall_bought_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_mall_bought_tos(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_m_mall_bought_tos(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_m_mall_bought_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_mall_bought_tos(<<>>, 0, 0, _) ->
    #m_mall_bought_tos{}.

skip_varint_m_mall_bought_tos(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_m_mall_bought_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_mall_bought_tos(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_mall_bought_tos(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_m_mall_bought_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_bought_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_m_mall_bought_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_bought_tos(Rest2, 0, 0,
					 TrUserData).

skip_group_m_mall_bought_tos(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_bought_tos(Rest, 0, Z2,
					 TrUserData).

skip_32_m_mall_bought_tos(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_mall_bought_tos(Rest, Z1, Z2,
					 TrUserData).

skip_64_m_mall_bought_tos(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_mall_bought_tos(Rest, Z1, Z2,
					 TrUserData).

decode_msg_m_mall_bought_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_bought_toc(Bin, 0, 0,
					 'tr_decode_init_default_m_mall_bought_toc.bought_items'([],
												 TrUserData),
					 TrUserData).

dfp_read_field_def_m_mall_bought_toc(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_mall_bought_toc_bought_items(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_mall_bought_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_mall_bought_toc{bought_items =
			   'tr_decode_repeated_finalize_m_mall_bought_toc.bought_items'(R1,
											TrUserData)};
dfp_read_field_def_m_mall_bought_toc(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_m_mall_bought_toc(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_m_mall_bought_toc(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_bought_toc(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_mall_bought_toc(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_mall_bought_toc_bought_items(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_bought_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_m_mall_bought_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_mall_bought_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_m_mall_bought_toc(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_m_mall_bought_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_mall_bought_toc(<<>>, 0, 0, R1,
				    TrUserData) ->
    #m_mall_bought_toc{bought_items =
			   'tr_decode_repeated_finalize_m_mall_bought_toc.bought_items'(R1,
											TrUserData)}.

d_field_m_mall_bought_toc_bought_items(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_mall_bought_toc_bought_items(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_mall_bought_toc_bought_items(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_mall_bought_toc(RestF, 0, 0,
					 'tr_decode_repeated_add_elem_m_mall_bought_toc.bought_items'(NewFValue,
												      Prev,
												      TrUserData),
					 TrUserData).

skip_varint_m_mall_bought_toc(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_mall_bought_toc(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_m_mall_bought_toc(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_bought_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_m_mall_bought_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_bought_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_mall_bought_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_bought_toc(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_m_mall_bought_toc(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_bought_toc(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_m_mall_bought_toc(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_bought_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_m_mall_bought_toc(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_bought_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_m_mall_buy_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_buy_tos(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_mall_buy_tos(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_mall_buy_tos_id(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_m_mall_buy_tos(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_mall_buy_tos_num(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_m_mall_buy_tos(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #m_mall_buy_tos{id = F@_1, num = F@_2};
dfp_read_field_def_m_mall_buy_tos(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_m_mall_buy_tos(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_m_mall_buy_tos(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_buy_tos(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_mall_buy_tos(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_buy_tos_id(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_m_mall_buy_tos_num(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_buy_tos(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_m_mall_buy_tos(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_m_mall_buy_tos(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_m_mall_buy_tos(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_m_mall_buy_tos(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_m_mall_buy_tos(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #m_mall_buy_tos{id = F@_1, num = F@_2}.

d_field_m_mall_buy_tos_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_mall_buy_tos_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_m_mall_buy_tos_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_buy_tos(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_m_mall_buy_tos_num(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_mall_buy_tos_num(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_m_mall_buy_tos_num(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_buy_tos(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_m_mall_buy_tos(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_mall_buy_tos(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_m_mall_buy_tos(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_buy_tos(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_m_mall_buy_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_buy_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_m_mall_buy_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_buy_tos(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_m_mall_buy_tos(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_buy_tos(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_m_mall_buy_tos(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_buy_tos(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_m_mall_buy_tos(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_buy_tos(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_m_mall_buy_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_buy_toc(Bin, 0, 0,
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_mall_buy_toc(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_mall_buy_toc_id(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_m_mall_buy_toc(<<>>, 0, 0, F@_1,
				  _) ->
    #m_mall_buy_toc{id = F@_1};
dfp_read_field_def_m_mall_buy_toc(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_m_mall_buy_toc(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_m_mall_buy_toc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_buy_toc(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_mall_buy_toc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_buy_toc_id(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_buy_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_m_mall_buy_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_mall_buy_toc(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_m_mall_buy_toc(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_m_mall_buy_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_mall_buy_toc(<<>>, 0, 0, F@_1, _) ->
    #m_mall_buy_toc{id = F@_1}.

d_field_m_mall_buy_toc_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_mall_buy_toc_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_m_mall_buy_toc_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_buy_toc(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_m_mall_buy_toc(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_mall_buy_toc(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_m_mall_buy_toc(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_buy_toc(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_m_mall_buy_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_buy_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_mall_buy_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_buy_toc(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_m_mall_buy_toc(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_buy_toc(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_m_mall_buy_toc(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_buy_toc(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_m_mall_buy_toc(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_buy_toc(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_m_mall_getlimit_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_tos(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_mall_getlimit_tos(<<>>, 0, 0, _) ->
    #m_mall_getlimit_tos{};
dfp_read_field_def_m_mall_getlimit_tos(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_mall_getlimit_tos(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_mall_getlimit_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_getlimit_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_mall_getlimit_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_mall_getlimit_tos(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_mall_getlimit_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_mall_getlimit_tos(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_mall_getlimit_tos(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_mall_getlimit_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_mall_getlimit_tos(<<>>, 0, 0, _) ->
    #m_mall_getlimit_tos{}.

skip_varint_m_mall_getlimit_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_mall_getlimit_tos(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_mall_getlimit_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_tos(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_mall_getlimit_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_getlimit_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_mall_getlimit_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_getlimit_tos(Rest2, 0, 0,
					   TrUserData).

skip_group_m_mall_getlimit_tos(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_getlimit_tos(Rest, 0, Z2,
					   TrUserData).

skip_32_m_mall_getlimit_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_tos(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_mall_getlimit_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_tos(Rest, Z1, Z2,
					   TrUserData).

decode_msg_m_mall_getlimit_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_toc(Bin, 0, 0,
					   id([], TrUserData), TrUserData).

dfp_read_field_def_m_mall_getlimit_toc(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_mall_getlimit_toc_limit_items(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_mall_getlimit_toc(<<>>, 0, 0, R1,
				       TrUserData) ->
    #m_mall_getlimit_toc{limit_items =
			     lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_mall_getlimit_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_mall_getlimit_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_mall_getlimit_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_getlimit_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_mall_getlimit_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_mall_getlimit_toc_limit_items(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_getlimit_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_mall_getlimit_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_mall_getlimit_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_mall_getlimit_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_mall_getlimit_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_mall_getlimit_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_mall_getlimit_toc{limit_items =
			     lists_reverse(R1, TrUserData)}.

d_field_m_mall_getlimit_toc_limit_items(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_mall_getlimit_toc_limit_items(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_mall_getlimit_toc_limit_items(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_mall_limit_item(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_mall_getlimit_toc(RestF, 0, 0,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_m_mall_getlimit_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_mall_getlimit_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_mall_getlimit_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_mall_getlimit_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_getlimit_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_mall_getlimit_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_getlimit_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_mall_getlimit_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_getlimit_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_mall_getlimit_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_mall_getlimit_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_getlimit_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_mall_act_items_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_tos(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_mall_act_items_tos(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_m_mall_act_items_tos_act_id(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_mall_act_items_tos(<<>>, 0, 0,
					F@_1, _) ->
    #m_mall_act_items_tos{act_id = F@_1};
dfp_read_field_def_m_mall_act_items_tos(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_m_mall_act_items_tos(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_m_mall_act_items_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_act_items_tos(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_mall_act_items_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_act_items_tos_act_id(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_act_items_tos(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_m_mall_act_items_tos(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_mall_act_items_tos(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_m_mall_act_items_tos(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_m_mall_act_items_tos(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_mall_act_items_tos(<<>>, 0, 0, F@_1,
				       _) ->
    #m_mall_act_items_tos{act_id = F@_1}.

d_field_m_mall_act_items_tos_act_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_mall_act_items_tos_act_id(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_mall_act_items_tos_act_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_act_items_tos(RestF, 0, 0,
					    NewFValue, TrUserData).

skip_varint_m_mall_act_items_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_mall_act_items_tos(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_m_mall_act_items_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_m_mall_act_items_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_act_items_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_mall_act_items_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_act_items_tos(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_m_mall_act_items_tos(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_act_items_tos(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_m_mall_act_items_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_m_mall_act_items_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_m_mall_act_items_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_m_mall_act_items_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_mall_act_items_toc_act_id(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_m_mall_act_items_toc(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_mall_act_items_toc_items(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_mall_act_items_toc(<<>>, 0, 0,
					F@_1, R1, TrUserData) ->
    #m_mall_act_items_toc{act_id = F@_1,
			  items = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_mall_act_items_toc(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_mall_act_items_toc(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_m_mall_act_items_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_act_items_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_m_mall_act_items_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_act_items_toc_act_id(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_m_mall_act_items_toc_items(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_act_items_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_m_mall_act_items_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_mall_act_items_toc(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_m_mall_act_items_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_mall_act_items_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_mall_act_items_toc(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    #m_mall_act_items_toc{act_id = F@_1,
			  items = lists_reverse(R1, TrUserData)}.

d_field_m_mall_act_items_toc_act_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_mall_act_items_toc_act_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_mall_act_items_toc_act_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_act_items_toc(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_m_mall_act_items_toc_items(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_mall_act_items_toc_items(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_mall_act_items_toc_items(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_mallitem(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_mall_act_items_toc(RestF, 0, 0,
					    F@_1,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_m_mall_act_items_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_mall_act_items_toc(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_m_mall_act_items_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_m_mall_act_items_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_act_items_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_m_mall_act_items_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_act_items_toc(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_m_mall_act_items_toc(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_act_items_toc(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_m_mall_act_items_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_m_mall_act_items_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_act_items_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_m_mall_validate_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_validate_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_mall_validate_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_mall_validate_tos_id(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_m_mall_validate_tos(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_mall_validate_tos_uid(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_m_mall_validate_tos(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #m_mall_validate_tos{id = F@_1, uid = F@_2};
dfp_read_field_def_m_mall_validate_tos(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_mall_validate_tos(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_m_mall_validate_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_validate_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_m_mall_validate_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_validate_tos_id(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  d_field_m_mall_validate_tos_uid(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_validate_tos(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_m_mall_validate_tos(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_mall_validate_tos(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_m_mall_validate_tos(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_m_mall_validate_tos(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_mall_validate_tos(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #m_mall_validate_tos{id = F@_1, uid = F@_2}.

d_field_m_mall_validate_tos_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_mall_validate_tos_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_mall_validate_tos_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_validate_tos(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_m_mall_validate_tos_uid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_mall_validate_tos_uid(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_mall_validate_tos_uid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_validate_tos(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_m_mall_validate_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_mall_validate_tos(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_m_mall_validate_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_validate_tos(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_m_mall_validate_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_validate_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_m_mall_validate_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_validate_tos(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_m_mall_validate_tos(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_validate_tos(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_m_mall_validate_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_validate_tos(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_m_mall_validate_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_mall_validate_tos(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_m_mall_validate_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_validate_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_mall_validate_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_mall_validate_toc_id(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_m_mall_validate_toc(<<>>, 0, 0, F@_1,
				       _) ->
    #m_mall_validate_toc{id = F@_1};
dfp_read_field_def_m_mall_validate_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_mall_validate_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_mall_validate_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_validate_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_mall_validate_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_validate_toc_id(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_validate_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_mall_validate_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_mall_validate_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_mall_validate_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_mall_validate_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_mall_validate_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_mall_validate_toc{id = F@_1}.

d_field_m_mall_validate_toc_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_mall_validate_toc_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_m_mall_validate_toc_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_validate_toc(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_mall_validate_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_mall_validate_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_mall_validate_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_validate_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_mall_validate_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_validate_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_mall_validate_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_validate_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_mall_validate_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_validate_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_mall_validate_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_validate_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_mall_validate_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_validate_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_mall_buy_pack_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_mall_buy_pack_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_mall_buy_pack_tos_act_id(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_mall_buy_pack_tos(<<>>, 0, 0, F@_1,
				       _) ->
    #m_mall_buy_pack_tos{act_id = F@_1};
dfp_read_field_def_m_mall_buy_pack_tos(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_mall_buy_pack_tos(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_mall_buy_pack_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_buy_pack_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_mall_buy_pack_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_mall_buy_pack_tos_act_id(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_mall_buy_pack_tos(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_mall_buy_pack_tos(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_mall_buy_pack_tos(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_mall_buy_pack_tos(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_mall_buy_pack_tos(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_mall_buy_pack_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_mall_buy_pack_tos{act_id = F@_1}.

d_field_m_mall_buy_pack_tos_act_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_mall_buy_pack_tos_act_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_mall_buy_pack_tos_act_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_mall_buy_pack_tos(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_mall_buy_pack_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_mall_buy_pack_tos(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_mall_buy_pack_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_mall_buy_pack_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_buy_pack_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_mall_buy_pack_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_buy_pack_tos(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_mall_buy_pack_tos(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_buy_pack_tos(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_mall_buy_pack_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_mall_buy_pack_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_mall_buy_pack_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_toc(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_mall_buy_pack_toc(<<>>, 0, 0, _) ->
    #m_mall_buy_pack_toc{};
dfp_read_field_def_m_mall_buy_pack_toc(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_mall_buy_pack_toc(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_mall_buy_pack_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_mall_buy_pack_toc(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_mall_buy_pack_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_mall_buy_pack_toc(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_mall_buy_pack_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_mall_buy_pack_toc(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_mall_buy_pack_toc(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_mall_buy_pack_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_mall_buy_pack_toc(<<>>, 0, 0, _) ->
    #m_mall_buy_pack_toc{}.

skip_varint_m_mall_buy_pack_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_mall_buy_pack_toc(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_mall_buy_pack_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_toc(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_mall_buy_pack_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_mall_buy_pack_toc(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_mall_buy_pack_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_mall_buy_pack_toc(Rest2, 0, 0,
					   TrUserData).

skip_group_m_mall_buy_pack_toc(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_mall_buy_pack_toc(Rest, 0, Z2,
					   TrUserData).

skip_32_m_mall_buy_pack_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_toc(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_mall_buy_pack_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_mall_buy_pack_toc(Rest, Z1, Z2,
					   TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      p_mall_limit_item ->
	  merge_msg_p_mall_limit_item(Prev, New, TrUserData);
      p_mallitem ->
	  merge_msg_p_mallitem(Prev, New, TrUserData);
      m_mall_bought_tos ->
	  merge_msg_m_mall_bought_tos(Prev, New, TrUserData);
      m_mall_bought_toc ->
	  merge_msg_m_mall_bought_toc(Prev, New, TrUserData);
      m_mall_buy_tos ->
	  merge_msg_m_mall_buy_tos(Prev, New, TrUserData);
      m_mall_buy_toc ->
	  merge_msg_m_mall_buy_toc(Prev, New, TrUserData);
      m_mall_getlimit_tos ->
	  merge_msg_m_mall_getlimit_tos(Prev, New, TrUserData);
      m_mall_getlimit_toc ->
	  merge_msg_m_mall_getlimit_toc(Prev, New, TrUserData);
      m_mall_act_items_tos ->
	  merge_msg_m_mall_act_items_tos(Prev, New, TrUserData);
      m_mall_act_items_toc ->
	  merge_msg_m_mall_act_items_toc(Prev, New, TrUserData);
      m_mall_validate_tos ->
	  merge_msg_m_mall_validate_tos(Prev, New, TrUserData);
      m_mall_validate_toc ->
	  merge_msg_m_mall_validate_toc(Prev, New, TrUserData);
      m_mall_buy_pack_tos ->
	  merge_msg_m_mall_buy_pack_tos(Prev, New, TrUserData);
      m_mall_buy_pack_toc ->
	  merge_msg_m_mall_buy_pack_toc(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_p_mall_limit_item/3}).
merge_msg_p_mall_limit_item(#p_mall_limit_item{buy_num =
						   PFbuy_num},
			    #p_mall_limit_item{id = NFid, left_num = NFleft_num,
					       end_time = NFend_time,
					       buy_num = NFbuy_num},
			    _) ->
    #p_mall_limit_item{id = NFid, left_num = NFleft_num,
		       end_time = NFend_time,
		       buy_num =
			   if NFbuy_num =:= undefined -> PFbuy_num;
			      true -> NFbuy_num
			   end}.

-compile({nowarn_unused_function,merge_msg_p_mallitem/3}).
merge_msg_p_mallitem(#p_mallitem{price = PFprice},
		     #p_mallitem{id = NFid, order = NForder, item = NFitem,
				 discount = NFdiscount, price = NFprice,
				 original_price = NForiginal_price,
				 limit_num = NFlimit_num,
				 limit_vip = NFlimit_vip,
				 limit_other = NFlimit_other,
				 limit_pre_id = NFlimit_pre_id,
				 limit_level = NFlimit_level,
				 activity = NFactivity, name = NFname},
		     TrUserData) ->
    #p_mallitem{id = NFid, order = NForder, item = NFitem,
		discount = NFdiscount,
		price =
		    if PFprice /= undefined, NFprice /= undefined ->
			   'tr_merge_p_mallitem.price'(PFprice, NFprice,
						       TrUserData);
		       PFprice == undefined -> NFprice;
		       NFprice == undefined -> PFprice
		    end,
		original_price = NForiginal_price,
		limit_num = NFlimit_num, limit_vip = NFlimit_vip,
		limit_other = NFlimit_other,
		limit_pre_id = NFlimit_pre_id,
		limit_level = NFlimit_level, activity = NFactivity,
		name = NFname}.

-compile({nowarn_unused_function,merge_msg_m_mall_bought_tos/3}).
merge_msg_m_mall_bought_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_mall_bought_toc/3}).
merge_msg_m_mall_bought_toc(#m_mall_bought_toc{bought_items
						   = PFbought_items},
			    #m_mall_bought_toc{bought_items = NFbought_items},
			    TrUserData) ->
    #m_mall_bought_toc{bought_items =
			   if PFbought_items /= undefined,
			      NFbought_items /= undefined ->
				  'tr_merge_m_mall_bought_toc.bought_items'(PFbought_items,
									    NFbought_items,
									    TrUserData);
			      PFbought_items == undefined -> NFbought_items;
			      NFbought_items == undefined -> PFbought_items
			   end}.

-compile({nowarn_unused_function,merge_msg_m_mall_buy_tos/3}).
merge_msg_m_mall_buy_tos(#m_mall_buy_tos{},
			 #m_mall_buy_tos{id = NFid, num = NFnum}, _) ->
    #m_mall_buy_tos{id = NFid, num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_mall_buy_toc/3}).
merge_msg_m_mall_buy_toc(#m_mall_buy_toc{},
			 #m_mall_buy_toc{id = NFid}, _) ->
    #m_mall_buy_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_mall_getlimit_tos/3}).
merge_msg_m_mall_getlimit_tos(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_mall_getlimit_toc/3}).
merge_msg_m_mall_getlimit_toc(#m_mall_getlimit_toc{limit_items
						       = PFlimit_items},
			      #m_mall_getlimit_toc{limit_items = NFlimit_items},
			      TrUserData) ->
    #m_mall_getlimit_toc{limit_items =
			     if PFlimit_items /= undefined,
				NFlimit_items /= undefined ->
				    'erlang_++'(PFlimit_items, NFlimit_items,
						TrUserData);
				PFlimit_items == undefined -> NFlimit_items;
				NFlimit_items == undefined -> PFlimit_items
			     end}.

-compile({nowarn_unused_function,merge_msg_m_mall_act_items_tos/3}).
merge_msg_m_mall_act_items_tos(#m_mall_act_items_tos{},
			       #m_mall_act_items_tos{act_id = NFact_id}, _) ->
    #m_mall_act_items_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_mall_act_items_toc/3}).
merge_msg_m_mall_act_items_toc(#m_mall_act_items_toc{items
							 = PFitems},
			       #m_mall_act_items_toc{act_id = NFact_id,
						     items = NFitems},
			       TrUserData) ->
    #m_mall_act_items_toc{act_id = NFact_id,
			  items =
			      if PFitems /= undefined, NFitems /= undefined ->
				     'erlang_++'(PFitems, NFitems, TrUserData);
				 PFitems == undefined -> NFitems;
				 NFitems == undefined -> PFitems
			      end}.

-compile({nowarn_unused_function,merge_msg_m_mall_validate_tos/3}).
merge_msg_m_mall_validate_tos(#m_mall_validate_tos{},
			      #m_mall_validate_tos{id = NFid, uid = NFuid},
			      _) ->
    #m_mall_validate_tos{id = NFid, uid = NFuid}.

-compile({nowarn_unused_function,merge_msg_m_mall_validate_toc/3}).
merge_msg_m_mall_validate_toc(#m_mall_validate_toc{},
			      #m_mall_validate_toc{id = NFid}, _) ->
    #m_mall_validate_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_mall_buy_pack_tos/3}).
merge_msg_m_mall_buy_pack_tos(#m_mall_buy_pack_tos{},
			      #m_mall_buy_pack_tos{act_id = NFact_id}, _) ->
    #m_mall_buy_pack_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_mall_buy_pack_toc/3}).
merge_msg_m_mall_buy_pack_toc(_Prev, New,
			      _TrUserData) ->
    New.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      p_mall_limit_item ->
	  v_msg_p_mall_limit_item(Msg, [MsgName], TrUserData);
      p_mallitem ->
	  v_msg_p_mallitem(Msg, [MsgName], TrUserData);
      m_mall_bought_tos ->
	  v_msg_m_mall_bought_tos(Msg, [MsgName], TrUserData);
      m_mall_bought_toc ->
	  v_msg_m_mall_bought_toc(Msg, [MsgName], TrUserData);
      m_mall_buy_tos ->
	  v_msg_m_mall_buy_tos(Msg, [MsgName], TrUserData);
      m_mall_buy_toc ->
	  v_msg_m_mall_buy_toc(Msg, [MsgName], TrUserData);
      m_mall_getlimit_tos ->
	  v_msg_m_mall_getlimit_tos(Msg, [MsgName], TrUserData);
      m_mall_getlimit_toc ->
	  v_msg_m_mall_getlimit_toc(Msg, [MsgName], TrUserData);
      m_mall_act_items_tos ->
	  v_msg_m_mall_act_items_tos(Msg, [MsgName], TrUserData);
      m_mall_act_items_toc ->
	  v_msg_m_mall_act_items_toc(Msg, [MsgName], TrUserData);
      m_mall_validate_tos ->
	  v_msg_m_mall_validate_tos(Msg, [MsgName], TrUserData);
      m_mall_validate_toc ->
	  v_msg_m_mall_validate_toc(Msg, [MsgName], TrUserData);
      m_mall_buy_pack_tos ->
	  v_msg_m_mall_buy_pack_tos(Msg, [MsgName], TrUserData);
      m_mall_buy_pack_toc ->
	  v_msg_m_mall_buy_pack_toc(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_p_mall_limit_item/3}).
-dialyzer({nowarn_function,v_msg_p_mall_limit_item/3}).
v_msg_p_mall_limit_item(#p_mall_limit_item{id = F1,
					   left_num = F2, end_time = F3,
					   buy_num = F4},
			Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [left_num | Path], TrUserData),
    v_type_int32(F3, [end_time | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [buy_num | Path], TrUserData)
    end,
    ok;
v_msg_p_mall_limit_item(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_mall_limit_item}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_mallitem/3}).
-dialyzer({nowarn_function,v_msg_p_mallitem/3}).
v_msg_p_mallitem(#p_mallitem{id = F1, order = F2,
			     item = F3, discount = F4, price = F5,
			     original_price = F6, limit_num = F7,
			     limit_vip = F8, limit_other = F9,
			     limit_pre_id = F10, limit_level = F11,
			     activity = F12, name = F13},
		 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [order | Path], TrUserData),
    v_type_string(F3, [item | Path], TrUserData),
    v_type_int32(F4, [discount | Path], TrUserData),
    'v_map<int32,int32>'(F5, [price | Path], TrUserData),
    v_type_string(F6, [original_price | Path], TrUserData),
    v_type_int32(F7, [limit_num | Path], TrUserData),
    v_type_int32(F8, [limit_vip | Path], TrUserData),
    v_type_string(F9, [limit_other | Path], TrUserData),
    v_type_int32(F10, [limit_pre_id | Path], TrUserData),
    v_type_int32(F11, [limit_level | Path], TrUserData),
    v_type_int32(F12, [activity | Path], TrUserData),
    v_type_string(F13, [name | Path], TrUserData),
    ok;
v_msg_p_mallitem(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_mallitem}, X, Path).

-compile({nowarn_unused_function,v_msg_m_mall_bought_tos/3}).
-dialyzer({nowarn_function,v_msg_m_mall_bought_tos/3}).
v_msg_m_mall_bought_tos(#m_mall_bought_tos{}, _Path,
			_) ->
    ok;
v_msg_m_mall_bought_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_bought_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_bought_toc/3}).
-dialyzer({nowarn_function,v_msg_m_mall_bought_toc/3}).
v_msg_m_mall_bought_toc(#m_mall_bought_toc{bought_items
					       = F1},
			Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [bought_items | Path],
			 TrUserData),
    ok;
v_msg_m_mall_bought_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_bought_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_buy_tos/3}).
-dialyzer({nowarn_function,v_msg_m_mall_buy_tos/3}).
v_msg_m_mall_buy_tos(#m_mall_buy_tos{id = F1, num = F2},
		     Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [num | Path], TrUserData),
    ok;
v_msg_m_mall_buy_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_buy_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_mall_buy_toc/3}).
-dialyzer({nowarn_function,v_msg_m_mall_buy_toc/3}).
v_msg_m_mall_buy_toc(#m_mall_buy_toc{id = F1}, Path,
		     TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_mall_buy_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_buy_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_mall_getlimit_tos/3}).
-dialyzer({nowarn_function,v_msg_m_mall_getlimit_tos/3}).
v_msg_m_mall_getlimit_tos(#m_mall_getlimit_tos{}, _Path,
			  _) ->
    ok;
v_msg_m_mall_getlimit_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_getlimit_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_getlimit_toc/3}).
-dialyzer({nowarn_function,v_msg_m_mall_getlimit_toc/3}).
v_msg_m_mall_getlimit_toc(#m_mall_getlimit_toc{limit_items
						   = F1},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_mall_limit_item(Elem, [limit_items | Path],
					TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_mall_limit_item}},
			 F1, [limit_items | Path])
    end,
    ok;
v_msg_m_mall_getlimit_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_getlimit_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_act_items_tos/3}).
-dialyzer({nowarn_function,v_msg_m_mall_act_items_tos/3}).
v_msg_m_mall_act_items_tos(#m_mall_act_items_tos{act_id
						     = F1},
			   Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_mall_act_items_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_act_items_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_act_items_toc/3}).
-dialyzer({nowarn_function,v_msg_m_mall_act_items_toc/3}).
v_msg_m_mall_act_items_toc(#m_mall_act_items_toc{act_id
						     = F1,
						 items = F2},
			   Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_mallitem(Elem, [items | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_mallitem}}, F2,
			 [items | Path])
    end,
    ok;
v_msg_m_mall_act_items_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_act_items_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_validate_tos/3}).
-dialyzer({nowarn_function,v_msg_m_mall_validate_tos/3}).
v_msg_m_mall_validate_tos(#m_mall_validate_tos{id = F1,
					       uid = F2},
			  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [uid | Path], TrUserData),
    ok;
v_msg_m_mall_validate_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_validate_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_validate_toc/3}).
-dialyzer({nowarn_function,v_msg_m_mall_validate_toc/3}).
v_msg_m_mall_validate_toc(#m_mall_validate_toc{id = F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_mall_validate_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_validate_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_buy_pack_tos/3}).
-dialyzer({nowarn_function,v_msg_m_mall_buy_pack_tos/3}).
v_msg_m_mall_buy_pack_tos(#m_mall_buy_pack_tos{act_id =
						   F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_mall_buy_pack_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_buy_pack_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_mall_buy_pack_toc/3}).
-dialyzer({nowarn_function,v_msg_m_mall_buy_pack_toc/3}).
v_msg_m_mall_buy_pack_toc(#m_mall_buy_pack_toc{}, _Path,
			  _) ->
    ok;
v_msg_m_mall_buy_pack_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_mall_buy_pack_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_p_mallitem.price[x]'/2}).
'tr_encode_p_mallitem.price[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_mall_bought_toc.bought_items[x]'/2}).
'tr_encode_m_mall_bought_toc.bought_items[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_p_mallitem.price'/2}).
'tr_decode_init_default_p_mallitem.price'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_mallitem.price'/3}).
'tr_merge_p_mallitem.price'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_mallitem.price'/2}).
'tr_decode_repeated_finalize_p_mallitem.price'(L,
					       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_mallitem.price'/2}).
'tr_encode_p_mallitem.price'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_mallitem.price'/3}).
'tr_decode_repeated_add_elem_p_mallitem.price'(Elem, L,
					       _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_mall_bought_toc.bought_items'/2}).
'tr_decode_init_default_m_mall_bought_toc.bought_items'(_,
							_) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_mall_bought_toc.bought_items'/3}).
'tr_merge_m_mall_bought_toc.bought_items'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_mall_bought_toc.bought_items'/2}).
'tr_decode_repeated_finalize_m_mall_bought_toc.bought_items'(L,
							     TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_mall_bought_toc.bought_items'/2}).
'tr_encode_m_mall_bought_toc.bought_items'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_mall_bought_toc.bought_items'/3}).
'tr_decode_repeated_add_elem_m_mall_bought_toc.bought_items'(Elem,
							     L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, p_mall_limit_item},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = left_num, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = end_time, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = buy_num, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, p_mallitem},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = order, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = item, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = discount, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = price, fnum = 5, rnum = 6,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = original_price, fnum = 6, rnum = 7,
	      type = string, occurrence = required, opts = []},
       #field{name = limit_num, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []},
       #field{name = limit_vip, fnum = 8, rnum = 9,
	      type = int32, occurrence = required, opts = []},
       #field{name = limit_other, fnum = 9, rnum = 10,
	      type = string, occurrence = required, opts = []},
       #field{name = limit_pre_id, fnum = 10, rnum = 11,
	      type = int32, occurrence = required, opts = []},
       #field{name = limit_level, fnum = 11, rnum = 12,
	      type = int32, occurrence = required, opts = []},
       #field{name = activity, fnum = 12, rnum = 13,
	      type = int32, occurrence = required, opts = []},
       #field{name = name, fnum = 13, rnum = 14, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_bought_tos}, []},
     {{msg, m_mall_bought_toc},
      [#field{name = bought_items, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_mall_buy_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_buy_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_getlimit_tos}, []},
     {{msg, m_mall_getlimit_toc},
      [#field{name = limit_items, fnum = 1, rnum = 2,
	      type = {msg, p_mall_limit_item}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_mall_act_items_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_act_items_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = items, fnum = 2, rnum = 3,
	      type = {msg, p_mallitem}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_mall_validate_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_validate_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_buy_pack_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_mall_buy_pack_toc}, []}].


get_msg_names() ->
    [p_mall_limit_item, p_mallitem, m_mall_bought_tos,
     m_mall_bought_toc, m_mall_buy_tos, m_mall_buy_toc,
     m_mall_getlimit_tos, m_mall_getlimit_toc,
     m_mall_act_items_tos, m_mall_act_items_toc,
     m_mall_validate_tos, m_mall_validate_toc,
     m_mall_buy_pack_tos, m_mall_buy_pack_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [p_mall_limit_item, p_mallitem, m_mall_bought_tos,
     m_mall_bought_toc, m_mall_buy_tos, m_mall_buy_toc,
     m_mall_getlimit_tos, m_mall_getlimit_toc,
     m_mall_act_items_tos, m_mall_act_items_toc,
     m_mall_validate_tos, m_mall_validate_toc,
     m_mall_buy_pack_tos, m_mall_buy_pack_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(p_mall_limit_item) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = left_num, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = end_time, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = buy_num, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(p_mallitem) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = order, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = item, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = discount, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = price, fnum = 5, rnum = 6,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = original_price, fnum = 6, rnum = 7,
	    type = string, occurrence = required, opts = []},
     #field{name = limit_num, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []},
     #field{name = limit_vip, fnum = 8, rnum = 9,
	    type = int32, occurrence = required, opts = []},
     #field{name = limit_other, fnum = 9, rnum = 10,
	    type = string, occurrence = required, opts = []},
     #field{name = limit_pre_id, fnum = 10, rnum = 11,
	    type = int32, occurrence = required, opts = []},
     #field{name = limit_level, fnum = 11, rnum = 12,
	    type = int32, occurrence = required, opts = []},
     #field{name = activity, fnum = 12, rnum = 13,
	    type = int32, occurrence = required, opts = []},
     #field{name = name, fnum = 13, rnum = 14, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_bought_tos) -> [];
find_msg_def(m_mall_bought_toc) ->
    [#field{name = bought_items, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_mall_buy_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_buy_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_getlimit_tos) -> [];
find_msg_def(m_mall_getlimit_toc) ->
    [#field{name = limit_items, fnum = 1, rnum = 2,
	    type = {msg, p_mall_limit_item}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_mall_act_items_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_act_items_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = items, fnum = 2, rnum = 3,
	    type = {msg, p_mallitem}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_mall_validate_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_validate_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_buy_pack_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_mall_buy_pack_toc) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
