package main

import (
	"encoding/xml"
	"os"
	xml2 "parser/xml"
	"path"
)

type glogs struct {
	XMLName xml.Name `xml:"logs"`
	GLogs   []glog   `xml:"log"`
}

type glog struct {
	XMLName xml.Name `xml:"log"`
	Name    string   `xml:"name,attr"`
	Code    int      `xml:"code,attr"`
	Notify  int      `xml:"notify,attr"`
	Desc    string   `xml:"desc,attr"`
}

var tplLogHrl = `%% Automatically generated, do not edit
%% Generated by parse_errno.go

-ifndef(LOG_HRL).
-define(LOG_HRL, true).
{{ range .GLogs }}
-define({{ .Name }}, {{ .Code }}). % {{ .Desc }}
{{ end }}

-endif.
`

var tplLogErl = `%% Automatically generated, do not edit
%% Generated by parse_errno.go

-module(log_desc).

-compile([export_all]).
-compile(nowarn_export_all).

{{ range .GLogs }}
find({{ .Code }}) -> "{{ .Desc }}";
{{ end }}
find(_) -> "".
`

var tplLogPhp = `<?php
// Automatically generated, do not edit
// Generated by parse_log.go

return [
    'list' => [
    	{{ range .GLogs }}
		{{ .Code }} => '{{ .Desc }}',
		{{ end }}
    ]
];
`

func main() {
	x := xml2.ParseXML(os.Args[1], &glogs{})

	if xml2.IsDirExist(os.Args[2]) {
		x.Exec(tplLogHrl, nil)
		x.Write(path.Join(os.Args[2], "include", "log.hrl"))
		x.Clear()

		x.Exec(tplLogErl, nil)
		x.Write(path.Join(os.Args[2], "src", "log_desc.erl"))
		x.Clear()
	}

	if len(os.Args) > 3 && os.Args[3] != "undefined" && xml2.IsDirExist(os.Args[3]) {
		x.Exec(tplLogPhp, nil)
		x.Write(path.Join(os.Args[3], "/config/game_logtype.php"))
	}
}
