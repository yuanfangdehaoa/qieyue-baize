%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1403_guild_house).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1403_guild_house.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_guild_house_question_tos() :: #m_guild_house_question_tos{}.

-type m_guild_house_question_toc() :: #m_guild_house_question_toc{}.

-type m_guild_house_answer_tos() :: #m_guild_house_answer_tos{}.

-type m_guild_house_answer_toc() :: #m_guild_house_answer_toc{}.

-type m_guild_house_callboss_tos() :: #m_guild_house_callboss_tos{}.

-type m_guild_house_callboss_toc() :: #m_guild_house_callboss_toc{}.

-type m_guild_house_exp_toc() :: #m_guild_house_exp_toc{}.

-type m_guild_question_first_toc() :: #m_guild_question_first_toc{}.

-type m_guild_question_result_toc() :: #m_guild_question_result_toc{}.

-type m_guild_house_score_tos() :: #m_guild_house_score_tos{}.

-type m_guild_house_score_toc() :: #m_guild_house_score_toc{}.

-type m_guild_house_boss_time_tos() :: #m_guild_house_boss_time_tos{}.

-type m_guild_house_callboss_bc_toc() :: #m_guild_house_callboss_bc_toc{}.

-type m_guild_house_boss_finish_toc() :: #m_guild_house_boss_finish_toc{}.

-export_type(['m_guild_house_question_tos'/0, 'm_guild_house_question_toc'/0, 'm_guild_house_answer_tos'/0, 'm_guild_house_answer_toc'/0, 'm_guild_house_callboss_tos'/0, 'm_guild_house_callboss_toc'/0, 'm_guild_house_exp_toc'/0, 'm_guild_question_first_toc'/0, 'm_guild_question_result_toc'/0, 'm_guild_house_score_tos'/0, 'm_guild_house_score_toc'/0, 'm_guild_house_boss_time_tos'/0, 'm_guild_house_callboss_bc_toc'/0, 'm_guild_house_boss_finish_toc'/0]).

-spec encode_msg(#m_guild_house_question_tos{} | #m_guild_house_question_toc{} | #m_guild_house_answer_tos{} | #m_guild_house_answer_toc{} | #m_guild_house_callboss_tos{} | #m_guild_house_callboss_toc{} | #m_guild_house_exp_toc{} | #m_guild_question_first_toc{} | #m_guild_question_result_toc{} | #m_guild_house_score_tos{} | #m_guild_house_score_toc{} | #m_guild_house_boss_time_tos{} | #m_guild_house_callboss_bc_toc{} | #m_guild_house_boss_finish_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_guild_house_question_tos{} | #m_guild_house_question_toc{} | #m_guild_house_answer_tos{} | #m_guild_house_answer_toc{} | #m_guild_house_callboss_tos{} | #m_guild_house_callboss_toc{} | #m_guild_house_exp_toc{} | #m_guild_question_first_toc{} | #m_guild_question_result_toc{} | #m_guild_house_score_tos{} | #m_guild_house_score_toc{} | #m_guild_house_boss_time_tos{} | #m_guild_house_callboss_bc_toc{} | #m_guild_house_boss_finish_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_guild_house_question_tos{} | #m_guild_house_question_toc{} | #m_guild_house_answer_tos{} | #m_guild_house_answer_toc{} | #m_guild_house_callboss_tos{} | #m_guild_house_callboss_toc{} | #m_guild_house_exp_toc{} | #m_guild_question_first_toc{} | #m_guild_question_result_toc{} | #m_guild_house_score_tos{} | #m_guild_house_score_toc{} | #m_guild_house_boss_time_tos{} | #m_guild_house_callboss_bc_toc{} | #m_guild_house_boss_finish_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_guild_house_question_tos ->
	  encode_msg_m_guild_house_question_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_guild_house_question_toc ->
	  encode_msg_m_guild_house_question_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_guild_house_answer_tos ->
	  encode_msg_m_guild_house_answer_tos(id(Msg, TrUserData),
					      TrUserData);
      m_guild_house_answer_toc ->
	  encode_msg_m_guild_house_answer_toc(id(Msg, TrUserData),
					      TrUserData);
      m_guild_house_callboss_tos ->
	  encode_msg_m_guild_house_callboss_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_guild_house_callboss_toc ->
	  encode_msg_m_guild_house_callboss_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_guild_house_exp_toc ->
	  encode_msg_m_guild_house_exp_toc(id(Msg, TrUserData),
					   TrUserData);
      m_guild_question_first_toc ->
	  encode_msg_m_guild_question_first_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_guild_question_result_toc ->
	  encode_msg_m_guild_question_result_toc(id(Msg,
						    TrUserData),
						 TrUserData);
      m_guild_house_score_tos ->
	  encode_msg_m_guild_house_score_tos(id(Msg, TrUserData),
					     TrUserData);
      m_guild_house_score_toc ->
	  encode_msg_m_guild_house_score_toc(id(Msg, TrUserData),
					     TrUserData);
      m_guild_house_boss_time_tos ->
	  encode_msg_m_guild_house_boss_time_tos(id(Msg,
						    TrUserData),
						 TrUserData);
      m_guild_house_callboss_bc_toc ->
	  encode_msg_m_guild_house_callboss_bc_toc(id(Msg,
						      TrUserData),
						   TrUserData);
      m_guild_house_boss_finish_toc ->
	  encode_msg_m_guild_house_boss_finish_toc(id(Msg,
						      TrUserData),
						   TrUserData)
    end.


encode_msg_m_guild_house_question_tos(_Msg,
				      _TrUserData) ->
    <<>>.

encode_msg_m_guild_house_question_toc(Msg,
				      TrUserData) ->
    encode_msg_m_guild_house_question_toc(Msg, <<>>,
					  TrUserData).


encode_msg_m_guild_house_question_toc(#m_guild_house_question_toc{id
								      = F1,
								  num = F2,
								  end_time = F3,
								  score = F4},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	   end
    end.

encode_msg_m_guild_house_answer_tos(Msg, TrUserData) ->
    encode_msg_m_guild_house_answer_tos(Msg, <<>>,
					TrUserData).


encode_msg_m_guild_house_answer_tos(#m_guild_house_answer_tos{answer
								  = F1},
				    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_guild_house_answer_toc(Msg, TrUserData) ->
    encode_msg_m_guild_house_answer_toc(Msg, <<>>,
					TrUserData).


encode_msg_m_guild_house_answer_toc(#m_guild_house_answer_toc{is_right
								  = F1,
							      score = F2,
							      answer = F3},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	   end
    end.

encode_msg_m_guild_house_callboss_tos(Msg,
				      TrUserData) ->
    encode_msg_m_guild_house_callboss_tos(Msg, <<>>,
					  TrUserData).


encode_msg_m_guild_house_callboss_tos(#m_guild_house_callboss_tos{id
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_guild_house_callboss_toc(_Msg,
				      _TrUserData) ->
    <<>>.

encode_msg_m_guild_house_exp_toc(Msg, TrUserData) ->
    encode_msg_m_guild_house_exp_toc(Msg, <<>>, TrUserData).


encode_msg_m_guild_house_exp_toc(#m_guild_house_exp_toc{exp
							    = F1},
				 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_guild_question_first_toc(Msg,
				      TrUserData) ->
    encode_msg_m_guild_question_first_toc(Msg, <<>>,
					  TrUserData).


encode_msg_m_guild_question_first_toc(#m_guild_question_first_toc{name
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_guild_question_result_toc(Msg,
				       TrUserData) ->
    encode_msg_m_guild_question_result_toc(Msg, <<>>,
					   TrUserData).


encode_msg_m_guild_question_result_toc(#m_guild_question_result_toc{rank
									= F1,
								    score = F2,
								    rewards =
									F3},
				       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 =
	  'tr_encode_m_guild_question_result_toc.rewards'(F3,
							  TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_m_guild_question_result_toc_rewards(TrF3, B2,
							 TrUserData)
      end
    end.

encode_msg_m_guild_house_score_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_guild_house_score_toc(Msg, TrUserData) ->
    encode_msg_m_guild_house_score_toc(Msg, <<>>,
				       TrUserData).


encode_msg_m_guild_house_score_toc(#m_guild_house_score_toc{score
								= F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 16>>, TrUserData)
    end.

encode_msg_m_guild_house_boss_time_tos(_Msg,
				       _TrUserData) ->
    <<>>.

encode_msg_m_guild_house_callboss_bc_toc(Msg,
					 TrUserData) ->
    encode_msg_m_guild_house_callboss_bc_toc(Msg, <<>>,
					     TrUserData).


encode_msg_m_guild_house_callboss_bc_toc(#m_guild_house_callboss_bc_toc{start_time
									    =
									    F1},
					 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_guild_house_boss_finish_toc(_Msg,
					 _TrUserData) ->
    <<>>.

e_mfield_m_guild_question_result_toc_rewards(Msg, Bin,
					     TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_guild_question_result_toc_rewards([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_m_guild_question_result_toc_rewards('tr_encode_m_guild_question_result_toc.rewards[x]'(Elem,
													TrUserData),
						     Bin2, TrUserData),
    e_field_m_guild_question_result_toc_rewards(Rest, Bin3,
						TrUserData);
e_field_m_guild_question_result_toc_rewards([], Bin,
					    _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_guild_house_question_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_question_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_question_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_question_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_answer_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_answer_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_answer_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_answer_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_callboss_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_callboss_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_callboss_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_callboss_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_exp_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_exp_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_question_first_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_question_first_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_question_result_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_question_result_toc(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_score_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_score_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_score_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_score_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_boss_time_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_boss_time_tos(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_callboss_bc_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_callboss_bc_toc(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(m_guild_house_boss_finish_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_guild_house_boss_finish_toc(Bin,
						TrUserData),
       TrUserData).



decode_msg_m_guild_house_question_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_guild_house_question_tos(Bin, 0, 0,
						  TrUserData).

dfp_read_field_def_m_guild_house_question_tos(<<>>, 0,
					      0, _) ->
    #m_guild_house_question_tos{};
dfp_read_field_def_m_guild_house_question_tos(Other, Z1,
					      Z2, TrUserData) ->
    dg_read_field_def_m_guild_house_question_tos(Other, Z1,
						 Z2, TrUserData).

dg_read_field_def_m_guild_house_question_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_question_tos(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
dg_read_field_def_m_guild_house_question_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_house_question_tos(Rest, 0, 0,
						 TrUserData);
      1 ->
	  skip_64_m_guild_house_question_tos(Rest, 0, 0,
					     TrUserData);
      2 ->
	  skip_length_delimited_m_guild_house_question_tos(Rest,
							   0, 0, TrUserData);
      3 ->
	  skip_group_m_guild_house_question_tos(Rest, Key bsr 3,
						0, TrUserData);
      5 ->
	  skip_32_m_guild_house_question_tos(Rest, 0, 0,
					     TrUserData)
    end;
dg_read_field_def_m_guild_house_question_tos(<<>>, 0, 0,
					     _) ->
    #m_guild_house_question_tos{}.

skip_varint_m_guild_house_question_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    skip_varint_m_guild_house_question_tos(Rest, Z1, Z2,
					   TrUserData);
skip_varint_m_guild_house_question_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_question_tos(Rest, Z1,
						  Z2, TrUserData).

skip_length_delimited_m_guild_house_question_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_question_tos(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
skip_length_delimited_m_guild_house_question_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_question_tos(Rest2, 0,
						  0, TrUserData).

skip_group_m_guild_house_question_tos(Bin, FNum, Z2,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_question_tos(Rest, 0,
						  Z2, TrUserData).

skip_32_m_guild_house_question_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_question_tos(Rest, Z1,
						  Z2, TrUserData).

skip_64_m_guild_house_question_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_question_tos(Rest, Z1,
						  Z2, TrUserData).

decode_msg_m_guild_house_question_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_guild_house_question_toc(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_guild_house_question_toc(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    d_field_m_guild_house_question_toc_id(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_guild_house_question_toc(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    d_field_m_guild_house_question_toc_num(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_guild_house_question_toc(<<24,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    d_field_m_guild_house_question_toc_end_time(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						TrUserData);
dfp_read_field_def_m_guild_house_question_toc(<<32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    d_field_m_guild_house_question_toc_score(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
dfp_read_field_def_m_guild_house_question_toc(<<>>, 0,
					      0, F@_1, F@_2, F@_3, F@_4, _) ->
    #m_guild_house_question_toc{id = F@_1, num = F@_2,
				end_time = F@_3, score = F@_4};
dfp_read_field_def_m_guild_house_question_toc(Other, Z1,
					      Z2, F@_1, F@_2, F@_3, F@_4,
					      TrUserData) ->
    dg_read_field_def_m_guild_house_question_toc(Other, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 TrUserData).

dg_read_field_def_m_guild_house_question_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_question_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_m_guild_house_question_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_house_question_toc_id(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      16 ->
	  d_field_m_guild_house_question_toc_num(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_m_guild_house_question_toc_end_time(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
      32 ->
	  d_field_m_guild_house_question_toc_score(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_question_toc(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4,
						       TrUserData);
	    1 ->
		skip_64_m_guild_house_question_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_question_toc(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4,
								 TrUserData);
	    3 ->
		skip_group_m_guild_house_question_toc(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3, F@_4,
						      TrUserData);
	    5 ->
		skip_32_m_guild_house_question_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_question_toc(<<>>, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, _) ->
    #m_guild_house_question_toc{id = F@_1, num = F@_2,
				end_time = F@_3, score = F@_4}.

d_field_m_guild_house_question_toc_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_m_guild_house_question_toc_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_m_guild_house_question_toc_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_question_toc(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  F@_4, TrUserData).

d_field_m_guild_house_question_toc_num(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    d_field_m_guild_house_question_toc_num(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
d_field_m_guild_house_question_toc_num(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, F@_4,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_question_toc(RestF, 0,
						  0, F@_1, NewFValue, F@_3,
						  F@_4, TrUserData).

d_field_m_guild_house_question_toc_end_time(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    TrUserData)
    when N < 57 ->
    d_field_m_guild_house_question_toc_end_time(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, TrUserData);
d_field_m_guild_house_question_toc_end_time(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, _, F@_4,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_question_toc(RestF, 0,
						  0, F@_1, F@_2, NewFValue,
						  F@_4, TrUserData).

d_field_m_guild_house_question_toc_score(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    d_field_m_guild_house_question_toc_score(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
d_field_m_guild_house_question_toc_score(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, _,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_question_toc(RestF, 0,
						  0, F@_1, F@_2, F@_3,
						  NewFValue, TrUserData).

skip_varint_m_guild_house_question_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    skip_varint_m_guild_house_question_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_varint_m_guild_house_question_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    dfp_read_field_def_m_guild_house_question_toc(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

skip_length_delimited_m_guild_house_question_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_question_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4,
						     TrUserData);
skip_length_delimited_m_guild_house_question_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_question_toc(Rest2, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

skip_group_m_guild_house_question_toc(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_question_toc(Rest, 0,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

skip_32_m_guild_house_question_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    dfp_read_field_def_m_guild_house_question_toc(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

skip_64_m_guild_house_question_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    dfp_read_field_def_m_guild_house_question_toc(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  TrUserData).

decode_msg_m_guild_house_answer_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_tos(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_guild_house_answer_tos(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_house_answer_tos_answer(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_guild_house_answer_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_guild_house_answer_tos{answer = F@_1};
dfp_read_field_def_m_guild_house_answer_tos(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_house_answer_tos(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_house_answer_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_answer_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_guild_house_answer_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_house_answer_tos_answer(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_answer_tos(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_m_guild_house_answer_tos(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_answer_tos(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_m_guild_house_answer_tos(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_m_guild_house_answer_tos(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_answer_tos(<<>>, 0, 0,
					   F@_1, _) ->
    #m_guild_house_answer_tos{answer = F@_1}.

d_field_m_guild_house_answer_tos_answer(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_answer_tos_answer(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_guild_house_answer_tos_answer(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_answer_tos(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_m_guild_house_answer_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_house_answer_tos(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_m_guild_house_answer_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_house_answer_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_answer_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_m_guild_house_answer_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_answer_tos(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_m_guild_house_answer_tos(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_answer_tos(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_m_guild_house_answer_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_m_guild_house_answer_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

decode_msg_m_guild_house_answer_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_toc(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_guild_house_answer_toc(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_m_guild_house_answer_toc_is_right(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_guild_house_answer_toc(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_m_guild_house_answer_toc_score(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_guild_house_answer_toc(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3,
					    TrUserData) ->
    d_field_m_guild_house_answer_toc_answer(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_guild_house_answer_toc(<<>>, 0, 0,
					    F@_1, F@_2, F@_3, _) ->
    #m_guild_house_answer_toc{is_right = F@_1, score = F@_2,
			      answer = F@_3};
dfp_read_field_def_m_guild_house_answer_toc(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_guild_house_answer_toc(Other, Z1,
					       Z2, F@_1, F@_2, F@_3,
					       TrUserData).

dg_read_field_def_m_guild_house_answer_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_answer_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
dg_read_field_def_m_guild_house_answer_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_house_answer_toc_is_right(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      16 ->
	  d_field_m_guild_house_answer_toc_score(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      24 ->
	  d_field_m_guild_house_answer_toc_answer(Rest, 0, 0,
						  F@_1, F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_answer_toc(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_m_guild_house_answer_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_answer_toc(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3,
							       TrUserData);
	    3 ->
		skip_group_m_guild_house_answer_toc(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
	    5 ->
		skip_32_m_guild_house_answer_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_answer_toc(<<>>, 0, 0,
					   F@_1, F@_2, F@_3, _) ->
    #m_guild_house_answer_toc{is_right = F@_1, score = F@_2,
			      answer = F@_3}.

d_field_m_guild_house_answer_toc_is_right(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_answer_toc_is_right(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
d_field_m_guild_house_answer_toc_is_right(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_guild_house_answer_toc(RestF, 0, 0,
						NewFValue, F@_2, F@_3,
						TrUserData).

d_field_m_guild_house_answer_toc_score(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_answer_toc_score(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_m_guild_house_answer_toc_score(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_answer_toc(RestF, 0, 0,
						F@_1, NewFValue, F@_3,
						TrUserData).

d_field_m_guild_house_answer_toc_answer(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_answer_toc_answer(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
d_field_m_guild_house_answer_toc_answer(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_answer_toc(RestF, 0, 0,
						F@_1, F@_2, NewFValue,
						TrUserData).

skip_varint_m_guild_house_answer_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_guild_house_answer_toc(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
skip_varint_m_guild_house_answer_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_toc(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

skip_length_delimited_m_guild_house_answer_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_answer_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
skip_length_delimited_m_guild_house_answer_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_answer_toc(Rest2, 0, 0,
						F@_1, F@_2, F@_3, TrUserData).

skip_group_m_guild_house_answer_toc(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_answer_toc(Rest, 0, Z2,
						F@_1, F@_2, F@_3, TrUserData).

skip_32_m_guild_house_answer_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_toc(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

skip_64_m_guild_house_answer_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_guild_house_answer_toc(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData).

decode_msg_m_guild_house_callboss_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_tos(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_guild_house_callboss_tos(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_house_callboss_tos_id(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_guild_house_callboss_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_guild_house_callboss_tos{id = F@_1};
dfp_read_field_def_m_guild_house_callboss_tos(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_house_callboss_tos(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_house_callboss_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_callboss_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_guild_house_callboss_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_house_callboss_tos_id(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_callboss_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_guild_house_callboss_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_callboss_tos(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_guild_house_callboss_tos(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_guild_house_callboss_tos(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_callboss_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_guild_house_callboss_tos{id = F@_1}.

d_field_m_guild_house_callboss_tos_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_callboss_tos_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_guild_house_callboss_tos_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_callboss_tos(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_guild_house_callboss_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_house_callboss_tos(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_guild_house_callboss_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_house_callboss_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_callboss_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_guild_house_callboss_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_callboss_tos(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_guild_house_callboss_tos(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_callboss_tos(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_guild_house_callboss_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_guild_house_callboss_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_guild_house_callboss_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_toc(Bin, 0, 0,
						  TrUserData).

dfp_read_field_def_m_guild_house_callboss_toc(<<>>, 0,
					      0, _) ->
    #m_guild_house_callboss_toc{};
dfp_read_field_def_m_guild_house_callboss_toc(Other, Z1,
					      Z2, TrUserData) ->
    dg_read_field_def_m_guild_house_callboss_toc(Other, Z1,
						 Z2, TrUserData).

dg_read_field_def_m_guild_house_callboss_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_callboss_toc(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
dg_read_field_def_m_guild_house_callboss_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_house_callboss_toc(Rest, 0, 0,
						 TrUserData);
      1 ->
	  skip_64_m_guild_house_callboss_toc(Rest, 0, 0,
					     TrUserData);
      2 ->
	  skip_length_delimited_m_guild_house_callboss_toc(Rest,
							   0, 0, TrUserData);
      3 ->
	  skip_group_m_guild_house_callboss_toc(Rest, Key bsr 3,
						0, TrUserData);
      5 ->
	  skip_32_m_guild_house_callboss_toc(Rest, 0, 0,
					     TrUserData)
    end;
dg_read_field_def_m_guild_house_callboss_toc(<<>>, 0, 0,
					     _) ->
    #m_guild_house_callboss_toc{}.

skip_varint_m_guild_house_callboss_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    skip_varint_m_guild_house_callboss_toc(Rest, Z1, Z2,
					   TrUserData);
skip_varint_m_guild_house_callboss_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_toc(Rest, Z1,
						  Z2, TrUserData).

skip_length_delimited_m_guild_house_callboss_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_callboss_toc(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
skip_length_delimited_m_guild_house_callboss_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_callboss_toc(Rest2, 0,
						  0, TrUserData).

skip_group_m_guild_house_callboss_toc(Bin, FNum, Z2,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_callboss_toc(Rest, 0,
						  Z2, TrUserData).

skip_32_m_guild_house_callboss_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_toc(Rest, Z1,
						  Z2, TrUserData).

skip_64_m_guild_house_callboss_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_toc(Rest, Z1,
						  Z2, TrUserData).

decode_msg_m_guild_house_exp_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_guild_house_exp_toc(Bin, 0, 0,
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_m_guild_house_exp_toc(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_house_exp_toc_exp(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_guild_house_exp_toc(<<>>, 0, 0,
					 F@_1, _) ->
    #m_guild_house_exp_toc{exp = F@_1};
dfp_read_field_def_m_guild_house_exp_toc(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_m_guild_house_exp_toc(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_m_guild_house_exp_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_exp_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_guild_house_exp_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_house_exp_toc_exp(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_exp_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_m_guild_house_exp_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_exp_toc(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_m_guild_house_exp_toc(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_m_guild_house_exp_toc(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_exp_toc(<<>>, 0, 0,
					F@_1, _) ->
    #m_guild_house_exp_toc{exp = F@_1}.

d_field_m_guild_house_exp_toc_exp(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_exp_toc_exp(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_guild_house_exp_toc_exp(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_exp_toc(RestF, 0, 0,
					     NewFValue, TrUserData).

skip_varint_m_guild_house_exp_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_house_exp_toc(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_m_guild_house_exp_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_exp_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_m_guild_house_exp_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_exp_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_m_guild_house_exp_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_exp_toc(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_m_guild_house_exp_toc(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_exp_toc(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_m_guild_house_exp_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_exp_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_m_guild_house_exp_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_exp_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_m_guild_question_first_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_guild_question_first_toc(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_guild_question_first_toc(<<10,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_question_first_toc_name(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_guild_question_first_toc(<<>>, 0,
					      0, F@_1, _) ->
    #m_guild_question_first_toc{name = F@_1};
dfp_read_field_def_m_guild_question_first_toc(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_question_first_toc(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_question_first_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_question_first_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_guild_question_first_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_guild_question_first_toc_name(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_question_first_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_guild_question_first_toc(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_guild_question_first_toc(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_guild_question_first_toc(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_guild_question_first_toc(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_guild_question_first_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_guild_question_first_toc{name = F@_1}.

d_field_m_guild_question_first_toc_name(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_question_first_toc_name(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_guild_question_first_toc_name(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_question_first_toc(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_guild_question_first_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_question_first_toc(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_guild_question_first_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_question_first_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_question_first_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_question_first_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_guild_question_first_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_question_first_toc(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_guild_question_first_toc(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_question_first_toc(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_guild_question_first_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_question_first_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_guild_question_first_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_question_first_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_guild_question_result_toc(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_guild_question_result_toc(Bin, 0,
						   0, id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   'tr_decode_init_default_m_guild_question_result_toc.rewards'([],
														TrUserData),
						   TrUserData).

dfp_read_field_def_m_guild_question_result_toc(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    d_field_m_guild_question_result_toc_rank(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_guild_question_result_toc(<<16,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    d_field_m_guild_question_result_toc_score(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_guild_question_result_toc(<<26,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    d_field_m_guild_question_result_toc_rewards(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
dfp_read_field_def_m_guild_question_result_toc(<<>>, 0,
					       0, F@_1, F@_2, R1, TrUserData) ->
    #m_guild_question_result_toc{rank = F@_1, score = F@_2,
				 rewards =
				     'tr_decode_repeated_finalize_m_guild_question_result_toc.rewards'(R1,
												       TrUserData)};
dfp_read_field_def_m_guild_question_result_toc(Other,
					       Z1, Z2, F@_1, F@_2, F@_3,
					       TrUserData) ->
    dg_read_field_def_m_guild_question_result_toc(Other, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData).

dg_read_field_def_m_guild_question_result_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_question_result_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
dg_read_field_def_m_guild_question_result_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_question_result_toc_rank(Rest, 0, 0,
						   F@_1, F@_2, F@_3,
						   TrUserData);
      16 ->
	  d_field_m_guild_question_result_toc_score(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      26 ->
	  d_field_m_guild_question_result_toc_rewards(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_question_result_toc(Rest, 0, 0,
							F@_1, F@_2, F@_3,
							TrUserData);
	    1 ->
		skip_64_m_guild_question_result_toc(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_guild_question_result_toc(Rest,
								  0, 0, F@_1,
								  F@_2, F@_3,
								  TrUserData);
	    3 ->
		skip_group_m_guild_question_result_toc(Rest, Key bsr 3,
						       0, F@_1, F@_2, F@_3,
						       TrUserData);
	    5 ->
		skip_32_m_guild_question_result_toc(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_guild_question_result_toc(<<>>, 0,
					      0, F@_1, F@_2, R1, TrUserData) ->
    #m_guild_question_result_toc{rank = F@_1, score = F@_2,
				 rewards =
				     'tr_decode_repeated_finalize_m_guild_question_result_toc.rewards'(R1,
												       TrUserData)}.

d_field_m_guild_question_result_toc_rank(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_guild_question_result_toc_rank(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
d_field_m_guild_question_result_toc_rank(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_question_result_toc(RestF, 0,
						   0, NewFValue, F@_2, F@_3,
						   TrUserData).

d_field_m_guild_question_result_toc_score(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_guild_question_result_toc_score(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
d_field_m_guild_question_result_toc_score(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_question_result_toc(RestF, 0,
						   0, F@_1, NewFValue, F@_3,
						   TrUserData).

d_field_m_guild_question_result_toc_rewards(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    d_field_m_guild_question_result_toc_rewards(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
d_field_m_guild_question_result_toc_rewards(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, Prev,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_guild_question_result_toc(RestF, 0,
						   0, F@_1, F@_2,
						   'tr_decode_repeated_add_elem_m_guild_question_result_toc.rewards'(NewFValue,
														     Prev,
														     TrUserData),
						   TrUserData).

skip_varint_m_guild_question_result_toc(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_guild_question_result_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData);
skip_varint_m_guild_question_result_toc(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_guild_question_result_toc(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

skip_length_delimited_m_guild_question_result_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_question_result_toc(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, F@_3,
						      TrUserData);
skip_length_delimited_m_guild_question_result_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2, F@_3,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_question_result_toc(Rest2, 0,
						   0, F@_1, F@_2, F@_3,
						   TrUserData).

skip_group_m_guild_question_result_toc(Bin, FNum, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_question_result_toc(Rest, 0,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

skip_32_m_guild_question_result_toc(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_guild_question_result_toc(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

skip_64_m_guild_question_result_toc(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_guild_question_result_toc(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData).

decode_msg_m_guild_house_score_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_tos(Bin, 0, 0,
					       TrUserData).

dfp_read_field_def_m_guild_house_score_tos(<<>>, 0, 0,
					   _) ->
    #m_guild_house_score_tos{};
dfp_read_field_def_m_guild_house_score_tos(Other, Z1,
					   Z2, TrUserData) ->
    dg_read_field_def_m_guild_house_score_tos(Other, Z1, Z2,
					      TrUserData).

dg_read_field_def_m_guild_house_score_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_score_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
dg_read_field_def_m_guild_house_score_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_house_score_tos(Rest, 0, 0,
					      TrUserData);
      1 ->
	  skip_64_m_guild_house_score_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_guild_house_score_tos(Rest, 0,
							0, TrUserData);
      3 ->
	  skip_group_m_guild_house_score_tos(Rest, Key bsr 3, 0,
					     TrUserData);
      5 ->
	  skip_32_m_guild_house_score_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_guild_house_score_tos(<<>>, 0, 0,
					  _) ->
    #m_guild_house_score_tos{}.

skip_varint_m_guild_house_score_tos(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    skip_varint_m_guild_house_score_tos(Rest, Z1, Z2,
					TrUserData);
skip_varint_m_guild_house_score_tos(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_tos(Rest, Z1, Z2,
					       TrUserData).

skip_length_delimited_m_guild_house_score_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_score_tos(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
skip_length_delimited_m_guild_house_score_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_score_tos(Rest2, 0, 0,
					       TrUserData).

skip_group_m_guild_house_score_tos(Bin, FNum, Z2,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_score_tos(Rest, 0, Z2,
					       TrUserData).

skip_32_m_guild_house_score_tos(<<_:32, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_tos(Rest, Z1, Z2,
					       TrUserData).

skip_64_m_guild_house_score_tos(<<_:64, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_tos(Rest, Z1, Z2,
					       TrUserData).

decode_msg_m_guild_house_score_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_toc(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_guild_house_score_toc(<<16,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_house_score_toc_score(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_guild_house_score_toc(<<>>, 0, 0,
					   F@_1, _) ->
    #m_guild_house_score_toc{score = F@_1};
dfp_read_field_def_m_guild_house_score_toc(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_house_score_toc(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_m_guild_house_score_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_score_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_guild_house_score_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      16 ->
	  d_field_m_guild_house_score_toc_score(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_score_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_m_guild_house_score_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_score_toc(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_m_guild_house_score_toc(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_m_guild_house_score_toc(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_score_toc(<<>>, 0, 0,
					  F@_1, _) ->
    #m_guild_house_score_toc{score = F@_1}.

d_field_m_guild_house_score_toc_score(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_score_toc_score(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_guild_house_score_toc_score(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_score_toc(RestF, 0, 0,
					       NewFValue, TrUserData).

skip_varint_m_guild_house_score_toc(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_house_score_toc(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_m_guild_house_score_toc(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_m_guild_house_score_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_score_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_m_guild_house_score_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_score_toc(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_m_guild_house_score_toc(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_score_toc(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_m_guild_house_score_toc(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_m_guild_house_score_toc(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_score_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_m_guild_house_boss_time_tos(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_time_tos(Bin, 0,
						   0, TrUserData).

dfp_read_field_def_m_guild_house_boss_time_tos(<<>>, 0,
					       0, _) ->
    #m_guild_house_boss_time_tos{};
dfp_read_field_def_m_guild_house_boss_time_tos(Other,
					       Z1, Z2, TrUserData) ->
    dg_read_field_def_m_guild_house_boss_time_tos(Other, Z1,
						  Z2, TrUserData).

dg_read_field_def_m_guild_house_boss_time_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_boss_time_tos(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
dg_read_field_def_m_guild_house_boss_time_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_house_boss_time_tos(Rest, 0, 0,
						  TrUserData);
      1 ->
	  skip_64_m_guild_house_boss_time_tos(Rest, 0, 0,
					      TrUserData);
      2 ->
	  skip_length_delimited_m_guild_house_boss_time_tos(Rest,
							    0, 0, TrUserData);
      3 ->
	  skip_group_m_guild_house_boss_time_tos(Rest, Key bsr 3,
						 0, TrUserData);
      5 ->
	  skip_32_m_guild_house_boss_time_tos(Rest, 0, 0,
					      TrUserData)
    end;
dg_read_field_def_m_guild_house_boss_time_tos(<<>>, 0,
					      0, _) ->
    #m_guild_house_boss_time_tos{}.

skip_varint_m_guild_house_boss_time_tos(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    skip_varint_m_guild_house_boss_time_tos(Rest, Z1, Z2,
					    TrUserData);
skip_varint_m_guild_house_boss_time_tos(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_time_tos(Rest, Z1,
						   Z2, TrUserData).

skip_length_delimited_m_guild_house_boss_time_tos(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_boss_time_tos(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
skip_length_delimited_m_guild_house_boss_time_tos(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_boss_time_tos(Rest2, 0,
						   0, TrUserData).

skip_group_m_guild_house_boss_time_tos(Bin, FNum, Z2,
				       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_boss_time_tos(Rest, 0,
						   Z2, TrUserData).

skip_32_m_guild_house_boss_time_tos(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_time_tos(Rest, Z1,
						   Z2, TrUserData).

skip_64_m_guild_house_boss_time_tos(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_time_tos(Rest, Z1,
						   Z2, TrUserData).

decode_msg_m_guild_house_callboss_bc_toc(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_bc_toc(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_m_guild_house_callboss_bc_toc(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_guild_house_callboss_bc_toc_start_time(Rest,
						     Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_m_guild_house_callboss_bc_toc(<<>>,
						 0, 0, F@_1, _) ->
    #m_guild_house_callboss_bc_toc{start_time = F@_1};
dfp_read_field_def_m_guild_house_callboss_bc_toc(Other,
						 Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_guild_house_callboss_bc_toc(Other,
						    Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_guild_house_callboss_bc_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_callboss_bc_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
dg_read_field_def_m_guild_house_callboss_bc_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_guild_house_callboss_bc_toc_start_time(Rest,
							   0, 0, F@_1,
							   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_guild_house_callboss_bc_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    1 ->
		skip_64_m_guild_house_callboss_bc_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    2 ->
		skip_length_delimited_m_guild_house_callboss_bc_toc(Rest,
								    0, 0, F@_1,
								    TrUserData);
	    3 ->
		skip_group_m_guild_house_callboss_bc_toc(Rest,
							 Key bsr 3, 0, F@_1,
							 TrUserData);
	    5 ->
		skip_32_m_guild_house_callboss_bc_toc(Rest, 0, 0, F@_1,
						      TrUserData)
	  end
    end;
dg_read_field_def_m_guild_house_callboss_bc_toc(<<>>, 0,
						0, F@_1, _) ->
    #m_guild_house_callboss_bc_toc{start_time = F@_1}.

d_field_m_guild_house_callboss_bc_toc_start_time(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_guild_house_callboss_bc_toc_start_time(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
d_field_m_guild_house_callboss_bc_toc_start_time(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_guild_house_callboss_bc_toc(RestF,
						     0, 0, NewFValue,
						     TrUserData).

skip_varint_m_guild_house_callboss_bc_toc(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_guild_house_callboss_bc_toc(Rest, Z1, Z2,
					      F@_1, TrUserData);
skip_varint_m_guild_house_callboss_bc_toc(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_bc_toc(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_guild_house_callboss_bc_toc(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_callboss_bc_toc(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
skip_length_delimited_m_guild_house_callboss_bc_toc(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_callboss_bc_toc(Rest2,
						     0, 0, F@_1, TrUserData).

skip_group_m_guild_house_callboss_bc_toc(Bin, FNum, Z2,
					 F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_callboss_bc_toc(Rest,
						     0, Z2, F@_1, TrUserData).

skip_32_m_guild_house_callboss_bc_toc(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_bc_toc(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_64_m_guild_house_callboss_bc_toc(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_guild_house_callboss_bc_toc(Rest,
						     Z1, Z2, F@_1, TrUserData).

decode_msg_m_guild_house_boss_finish_toc(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_finish_toc(Bin, 0,
						     0, TrUserData).

dfp_read_field_def_m_guild_house_boss_finish_toc(<<>>,
						 0, 0, _) ->
    #m_guild_house_boss_finish_toc{};
dfp_read_field_def_m_guild_house_boss_finish_toc(Other,
						 Z1, Z2, TrUserData) ->
    dg_read_field_def_m_guild_house_boss_finish_toc(Other,
						    Z1, Z2, TrUserData).

dg_read_field_def_m_guild_house_boss_finish_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_guild_house_boss_finish_toc(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
dg_read_field_def_m_guild_house_boss_finish_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_guild_house_boss_finish_toc(Rest, 0, 0,
						    TrUserData);
      1 ->
	  skip_64_m_guild_house_boss_finish_toc(Rest, 0, 0,
						TrUserData);
      2 ->
	  skip_length_delimited_m_guild_house_boss_finish_toc(Rest,
							      0, 0, TrUserData);
      3 ->
	  skip_group_m_guild_house_boss_finish_toc(Rest,
						   Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_m_guild_house_boss_finish_toc(Rest, 0, 0,
						TrUserData)
    end;
dg_read_field_def_m_guild_house_boss_finish_toc(<<>>, 0,
						0, _) ->
    #m_guild_house_boss_finish_toc{}.

skip_varint_m_guild_house_boss_finish_toc(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, TrUserData) ->
    skip_varint_m_guild_house_boss_finish_toc(Rest, Z1, Z2,
					      TrUserData);
skip_varint_m_guild_house_boss_finish_toc(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_finish_toc(Rest,
						     Z1, Z2, TrUserData).

skip_length_delimited_m_guild_house_boss_finish_toc(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_guild_house_boss_finish_toc(Rest,
							N + 7, X bsl N + Acc,
							TrUserData);
skip_length_delimited_m_guild_house_boss_finish_toc(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_guild_house_boss_finish_toc(Rest2,
						     0, 0, TrUserData).

skip_group_m_guild_house_boss_finish_toc(Bin, FNum, Z2,
					 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_guild_house_boss_finish_toc(Rest,
						     0, Z2, TrUserData).

skip_32_m_guild_house_boss_finish_toc(<<_:32,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_finish_toc(Rest,
						     Z1, Z2, TrUserData).

skip_64_m_guild_house_boss_finish_toc(<<_:64,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_guild_house_boss_finish_toc(Rest,
						     Z1, Z2, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_guild_house_question_tos ->
	  merge_msg_m_guild_house_question_tos(Prev, New,
					       TrUserData);
      m_guild_house_question_toc ->
	  merge_msg_m_guild_house_question_toc(Prev, New,
					       TrUserData);
      m_guild_house_answer_tos ->
	  merge_msg_m_guild_house_answer_tos(Prev, New,
					     TrUserData);
      m_guild_house_answer_toc ->
	  merge_msg_m_guild_house_answer_toc(Prev, New,
					     TrUserData);
      m_guild_house_callboss_tos ->
	  merge_msg_m_guild_house_callboss_tos(Prev, New,
					       TrUserData);
      m_guild_house_callboss_toc ->
	  merge_msg_m_guild_house_callboss_toc(Prev, New,
					       TrUserData);
      m_guild_house_exp_toc ->
	  merge_msg_m_guild_house_exp_toc(Prev, New, TrUserData);
      m_guild_question_first_toc ->
	  merge_msg_m_guild_question_first_toc(Prev, New,
					       TrUserData);
      m_guild_question_result_toc ->
	  merge_msg_m_guild_question_result_toc(Prev, New,
						TrUserData);
      m_guild_house_score_tos ->
	  merge_msg_m_guild_house_score_tos(Prev, New,
					    TrUserData);
      m_guild_house_score_toc ->
	  merge_msg_m_guild_house_score_toc(Prev, New,
					    TrUserData);
      m_guild_house_boss_time_tos ->
	  merge_msg_m_guild_house_boss_time_tos(Prev, New,
						TrUserData);
      m_guild_house_callboss_bc_toc ->
	  merge_msg_m_guild_house_callboss_bc_toc(Prev, New,
						  TrUserData);
      m_guild_house_boss_finish_toc ->
	  merge_msg_m_guild_house_boss_finish_toc(Prev, New,
						  TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_guild_house_question_tos/3}).
merge_msg_m_guild_house_question_tos(_Prev, New,
				     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_guild_house_question_toc/3}).
merge_msg_m_guild_house_question_toc(#m_guild_house_question_toc{score
								     = PFscore},
				     #m_guild_house_question_toc{id = NFid,
								 num = NFnum,
								 end_time =
								     NFend_time,
								 score =
								     NFscore},
				     _) ->
    #m_guild_house_question_toc{id = NFid, num = NFnum,
				end_time = NFend_time,
				score =
				    if NFscore =:= undefined -> PFscore;
				       true -> NFscore
				    end}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_answer_tos/3}).
merge_msg_m_guild_house_answer_tos(#m_guild_house_answer_tos{},
				   #m_guild_house_answer_tos{answer = NFanswer},
				   _) ->
    #m_guild_house_answer_tos{answer = NFanswer}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_answer_toc/3}).
merge_msg_m_guild_house_answer_toc(#m_guild_house_answer_toc{is_right
								 = PFis_right,
							     score = PFscore,
							     answer = PFanswer},
				   #m_guild_house_answer_toc{is_right =
								 NFis_right,
							     score = NFscore,
							     answer = NFanswer},
				   _) ->
    #m_guild_house_answer_toc{is_right =
				  if NFis_right =:= undefined -> PFis_right;
				     true -> NFis_right
				  end,
			      score =
				  if NFscore =:= undefined -> PFscore;
				     true -> NFscore
				  end,
			      answer =
				  if NFanswer =:= undefined -> PFanswer;
				     true -> NFanswer
				  end}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_callboss_tos/3}).
merge_msg_m_guild_house_callboss_tos(#m_guild_house_callboss_tos{},
				     #m_guild_house_callboss_tos{id = NFid},
				     _) ->
    #m_guild_house_callboss_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_callboss_toc/3}).
merge_msg_m_guild_house_callboss_toc(_Prev, New,
				     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_guild_house_exp_toc/3}).
merge_msg_m_guild_house_exp_toc(#m_guild_house_exp_toc{},
				#m_guild_house_exp_toc{exp = NFexp}, _) ->
    #m_guild_house_exp_toc{exp = NFexp}.

-compile({nowarn_unused_function,merge_msg_m_guild_question_first_toc/3}).
merge_msg_m_guild_question_first_toc(#m_guild_question_first_toc{},
				     #m_guild_question_first_toc{name = NFname},
				     _) ->
    #m_guild_question_first_toc{name = NFname}.

-compile({nowarn_unused_function,merge_msg_m_guild_question_result_toc/3}).
merge_msg_m_guild_question_result_toc(#m_guild_question_result_toc{rewards
								       =
								       PFrewards},
				      #m_guild_question_result_toc{rank =
								       NFrank,
								   score =
								       NFscore,
								   rewards =
								       NFrewards},
				      TrUserData) ->
    #m_guild_question_result_toc{rank = NFrank,
				 score = NFscore,
				 rewards =
				     if PFrewards /= undefined,
					NFrewards /= undefined ->
					    'tr_merge_m_guild_question_result_toc.rewards'(PFrewards,
											   NFrewards,
											   TrUserData);
					PFrewards == undefined -> NFrewards;
					NFrewards == undefined -> PFrewards
				     end}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_score_tos/3}).
merge_msg_m_guild_house_score_tos(_Prev, New,
				  _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_guild_house_score_toc/3}).
merge_msg_m_guild_house_score_toc(#m_guild_house_score_toc{},
				  #m_guild_house_score_toc{score = NFscore},
				  _) ->
    #m_guild_house_score_toc{score = NFscore}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_boss_time_tos/3}).
merge_msg_m_guild_house_boss_time_tos(_Prev, New,
				      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_guild_house_callboss_bc_toc/3}).
merge_msg_m_guild_house_callboss_bc_toc(#m_guild_house_callboss_bc_toc{},
					#m_guild_house_callboss_bc_toc{start_time
									   =
									   NFstart_time},
					_) ->
    #m_guild_house_callboss_bc_toc{start_time =
				       NFstart_time}.

-compile({nowarn_unused_function,merge_msg_m_guild_house_boss_finish_toc/3}).
merge_msg_m_guild_house_boss_finish_toc(_Prev, New,
					_TrUserData) ->
    New.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_guild_house_question_tos ->
	  v_msg_m_guild_house_question_tos(Msg, [MsgName],
					   TrUserData);
      m_guild_house_question_toc ->
	  v_msg_m_guild_house_question_toc(Msg, [MsgName],
					   TrUserData);
      m_guild_house_answer_tos ->
	  v_msg_m_guild_house_answer_tos(Msg, [MsgName],
					 TrUserData);
      m_guild_house_answer_toc ->
	  v_msg_m_guild_house_answer_toc(Msg, [MsgName],
					 TrUserData);
      m_guild_house_callboss_tos ->
	  v_msg_m_guild_house_callboss_tos(Msg, [MsgName],
					   TrUserData);
      m_guild_house_callboss_toc ->
	  v_msg_m_guild_house_callboss_toc(Msg, [MsgName],
					   TrUserData);
      m_guild_house_exp_toc ->
	  v_msg_m_guild_house_exp_toc(Msg, [MsgName], TrUserData);
      m_guild_question_first_toc ->
	  v_msg_m_guild_question_first_toc(Msg, [MsgName],
					   TrUserData);
      m_guild_question_result_toc ->
	  v_msg_m_guild_question_result_toc(Msg, [MsgName],
					    TrUserData);
      m_guild_house_score_tos ->
	  v_msg_m_guild_house_score_tos(Msg, [MsgName],
					TrUserData);
      m_guild_house_score_toc ->
	  v_msg_m_guild_house_score_toc(Msg, [MsgName],
					TrUserData);
      m_guild_house_boss_time_tos ->
	  v_msg_m_guild_house_boss_time_tos(Msg, [MsgName],
					    TrUserData);
      m_guild_house_callboss_bc_toc ->
	  v_msg_m_guild_house_callboss_bc_toc(Msg, [MsgName],
					      TrUserData);
      m_guild_house_boss_finish_toc ->
	  v_msg_m_guild_house_boss_finish_toc(Msg, [MsgName],
					      TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_guild_house_question_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_question_tos/3}).
v_msg_m_guild_house_question_tos(#m_guild_house_question_tos{},
				 _Path, _) ->
    ok;
v_msg_m_guild_house_question_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_question_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_question_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_question_toc/3}).
v_msg_m_guild_house_question_toc(#m_guild_house_question_toc{id
								 = F1,
							     num = F2,
							     end_time = F3,
							     score = F4},
				 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [num | Path], TrUserData),
    v_type_int32(F3, [end_time | Path], TrUserData),
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [score | Path], TrUserData)
    end,
    ok;
v_msg_m_guild_house_question_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_question_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_answer_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_answer_tos/3}).
v_msg_m_guild_house_answer_tos(#m_guild_house_answer_tos{answer
							     = F1},
			       Path, TrUserData) ->
    v_type_int32(F1, [answer | Path], TrUserData), ok;
v_msg_m_guild_house_answer_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_guild_house_answer_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_answer_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_answer_toc/3}).
v_msg_m_guild_house_answer_toc(#m_guild_house_answer_toc{is_right
							     = F1,
							 score = F2,
							 answer = F3},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_bool(F1, [is_right | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [score | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [answer | Path], TrUserData)
    end,
    ok;
v_msg_m_guild_house_answer_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_guild_house_answer_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_callboss_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_callboss_tos/3}).
v_msg_m_guild_house_callboss_tos(#m_guild_house_callboss_tos{id
								 = F1},
				 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_guild_house_callboss_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_callboss_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_callboss_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_callboss_toc/3}).
v_msg_m_guild_house_callboss_toc(#m_guild_house_callboss_toc{},
				 _Path, _) ->
    ok;
v_msg_m_guild_house_callboss_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_callboss_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_exp_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_exp_toc/3}).
v_msg_m_guild_house_exp_toc(#m_guild_house_exp_toc{exp =
						       F1},
			    Path, TrUserData) ->
    v_type_int32(F1, [exp | Path], TrUserData), ok;
v_msg_m_guild_house_exp_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_guild_house_exp_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_guild_question_first_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_question_first_toc/3}).
v_msg_m_guild_question_first_toc(#m_guild_question_first_toc{name
								 = F1},
				 Path, TrUserData) ->
    v_type_string(F1, [name | Path], TrUserData), ok;
v_msg_m_guild_question_first_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_question_first_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_question_result_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_question_result_toc/3}).
v_msg_m_guild_question_result_toc(#m_guild_question_result_toc{rank
								   = F1,
							       score = F2,
							       rewards = F3},
				  Path, TrUserData) ->
    v_type_int32(F1, [rank | Path], TrUserData),
    v_type_int32(F2, [score | Path], TrUserData),
    'v_map<int32,int32>'(F3, [rewards | Path], TrUserData),
    ok;
v_msg_m_guild_question_result_toc(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_question_result_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_score_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_score_tos/3}).
v_msg_m_guild_house_score_tos(#m_guild_house_score_tos{},
			      _Path, _) ->
    ok;
v_msg_m_guild_house_score_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_guild_house_score_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_score_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_score_toc/3}).
v_msg_m_guild_house_score_toc(#m_guild_house_score_toc{score
							   = F1},
			      Path, TrUserData) ->
    v_type_int32(F1, [score | Path], TrUserData), ok;
v_msg_m_guild_house_score_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_guild_house_score_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_boss_time_tos/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_boss_time_tos/3}).
v_msg_m_guild_house_boss_time_tos(#m_guild_house_boss_time_tos{},
				  _Path, _) ->
    ok;
v_msg_m_guild_house_boss_time_tos(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_boss_time_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_callboss_bc_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_callboss_bc_toc/3}).
v_msg_m_guild_house_callboss_bc_toc(#m_guild_house_callboss_bc_toc{start_time
								       = F1},
				    Path, TrUserData) ->
    v_type_int32(F1, [start_time | Path], TrUserData), ok;
v_msg_m_guild_house_callboss_bc_toc(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_callboss_bc_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_guild_house_boss_finish_toc/3}).
-dialyzer({nowarn_function,v_msg_m_guild_house_boss_finish_toc/3}).
v_msg_m_guild_house_boss_finish_toc(#m_guild_house_boss_finish_toc{},
				    _Path, _) ->
    ok;
v_msg_m_guild_house_boss_finish_toc(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_guild_house_boss_finish_toc},
		  X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_guild_question_result_toc.rewards[x]'/2}).
'tr_encode_m_guild_question_result_toc.rewards[x]'(X,
						   _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_guild_question_result_toc.rewards'/2}).
'tr_decode_init_default_m_guild_question_result_toc.rewards'(_,
							     _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_guild_question_result_toc.rewards'/3}).
'tr_merge_m_guild_question_result_toc.rewards'(X1, X2,
					       _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_guild_question_result_toc.rewards'/2}).
'tr_decode_repeated_finalize_m_guild_question_result_toc.rewards'(L,
								  TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_guild_question_result_toc.rewards'/2}).
'tr_encode_m_guild_question_result_toc.rewards'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_guild_question_result_toc.rewards'/3}).
'tr_decode_repeated_add_elem_m_guild_question_result_toc.rewards'(Elem,
								  L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_guild_house_question_tos}, []},
     {{msg, m_guild_house_question_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = end_time, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = score, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, m_guild_house_answer_tos},
      [#field{name = answer, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_house_answer_toc},
      [#field{name = is_right, fnum = 1, rnum = 2,
	      type = bool, occurrence = optional, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = answer, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, m_guild_house_callboss_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_house_callboss_toc}, []},
     {{msg, m_guild_house_exp_toc},
      [#field{name = exp, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_question_first_toc},
      [#field{name = name, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_question_result_toc},
      [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = rewards, fnum = 3, rnum = 4,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_guild_house_score_tos}, []},
     {{msg, m_guild_house_score_toc},
      [#field{name = score, fnum = 2, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_guild_house_boss_time_tos}, []},
     {{msg, m_guild_house_callboss_bc_toc},
      [#field{name = start_time, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_guild_house_boss_finish_toc}, []}].


get_msg_names() ->
    [m_guild_house_question_tos, m_guild_house_question_toc,
     m_guild_house_answer_tos, m_guild_house_answer_toc,
     m_guild_house_callboss_tos, m_guild_house_callboss_toc,
     m_guild_house_exp_toc, m_guild_question_first_toc,
     m_guild_question_result_toc, m_guild_house_score_tos,
     m_guild_house_score_toc, m_guild_house_boss_time_tos,
     m_guild_house_callboss_bc_toc,
     m_guild_house_boss_finish_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_guild_house_question_tos, m_guild_house_question_toc,
     m_guild_house_answer_tos, m_guild_house_answer_toc,
     m_guild_house_callboss_tos, m_guild_house_callboss_toc,
     m_guild_house_exp_toc, m_guild_question_first_toc,
     m_guild_question_result_toc, m_guild_house_score_tos,
     m_guild_house_score_toc, m_guild_house_boss_time_tos,
     m_guild_house_callboss_bc_toc,
     m_guild_house_boss_finish_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_guild_house_question_tos) -> [];
find_msg_def(m_guild_house_question_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = end_time, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = score, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(m_guild_house_answer_tos) ->
    [#field{name = answer, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_house_answer_toc) ->
    [#field{name = is_right, fnum = 1, rnum = 2,
	    type = bool, occurrence = optional, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = answer, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(m_guild_house_callboss_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_house_callboss_toc) -> [];
find_msg_def(m_guild_house_exp_toc) ->
    [#field{name = exp, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_question_first_toc) ->
    [#field{name = name, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_question_result_toc) ->
    [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = rewards, fnum = 3, rnum = 4,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_guild_house_score_tos) -> [];
find_msg_def(m_guild_house_score_toc) ->
    [#field{name = score, fnum = 2, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_guild_house_boss_time_tos) -> [];
find_msg_def(m_guild_house_callboss_bc_toc) ->
    [#field{name = start_time, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_guild_house_boss_finish_toc) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
