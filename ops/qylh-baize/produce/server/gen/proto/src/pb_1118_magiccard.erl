%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1118_magiccard).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1118_magiccard.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_magic_card_list_tos() :: #m_magic_card_list_tos{}.

-type m_magic_card_list_toc() :: #m_magic_card_list_toc{}.

-type m_magic_card_puton_tos() :: #m_magic_card_puton_tos{}.

-type m_magic_card_puton_toc() :: #m_magic_card_puton_toc{}.

-type m_magic_card_upstar_tos() :: #m_magic_card_upstar_tos{}.

-type m_magic_card_upstar_toc() :: #m_magic_card_upstar_toc{}.

-type m_magic_card_strength_tos() :: #m_magic_card_strength_tos{}.

-type m_magic_card_strength_toc() :: #m_magic_card_strength_toc{}.

-type m_magic_card_decompose_tos() :: #m_magic_card_decompose_tos{}.

-type m_magic_card_decompose_toc() :: #m_magic_card_decompose_toc{}.

-type m_magic_card_suite_toc() :: #m_magic_card_suite_toc{}.

-type m_magic_card_combine_tos() :: #m_magic_card_combine_tos{}.

-type m_magic_card_combine_toc() :: #m_magic_card_combine_toc{}.

-type m_magic_card_get_set_tos() :: #m_magic_card_get_set_tos{}.

-type m_magic_card_get_set_toc() :: #m_magic_card_get_set_toc{}.

-type m_magic_card_decompose_set_tos() :: #m_magic_card_decompose_set_tos{}.

-type m_magic_card_decompose_set_toc() :: #m_magic_card_decompose_set_toc{}.

-type m_magic_card_bag_info_tos() :: #m_magic_card_bag_info_tos{}.

-type m_magic_card_bag_info_toc() :: #m_magic_card_bag_info_toc{}.

-type m_magic_card_putoff_toc() :: #m_magic_card_putoff_toc{}.

-type m_magic_power_toc() :: #m_magic_power_toc{}.

-type p_role_base() :: #p_role_base{}.

-type p_aspect() :: #p_aspect{}.

-type p_attr() :: #p_attr{}.

-type p_item_base() :: #p_item_base{}.

-type p_item() :: #p_item{}.

-type p_equip() :: #p_equip{}.

-type p_pet() :: #p_pet{}.

-type p_marriage() :: #p_marriage{}.

-type p_refine() :: #p_refine{}.

-type p_actor() :: #p_actor{}.

-type p_role() :: #p_role{}.

-type p_creep() :: #p_creep{}.

-type p_npc() :: #p_npc{}.

-type p_drop() :: #p_drop{}.

-type p_buff() :: #p_buff{}.

-type p_coord() :: #p_coord{}.

-type p_icon() :: #p_icon{}.

-type p_ranking() :: #p_ranking{}.

-type p_dropped() :: #p_dropped{}.

-export_type(['m_magic_card_list_tos'/0, 'm_magic_card_list_toc'/0, 'm_magic_card_puton_tos'/0, 'm_magic_card_puton_toc'/0, 'm_magic_card_upstar_tos'/0, 'm_magic_card_upstar_toc'/0, 'm_magic_card_strength_tos'/0, 'm_magic_card_strength_toc'/0, 'm_magic_card_decompose_tos'/0, 'm_magic_card_decompose_toc'/0, 'm_magic_card_suite_toc'/0, 'm_magic_card_combine_tos'/0, 'm_magic_card_combine_toc'/0, 'm_magic_card_get_set_tos'/0, 'm_magic_card_get_set_toc'/0, 'm_magic_card_decompose_set_tos'/0, 'm_magic_card_decompose_set_toc'/0, 'm_magic_card_bag_info_tos'/0, 'm_magic_card_bag_info_toc'/0, 'm_magic_card_putoff_toc'/0, 'm_magic_power_toc'/0, 'p_role_base'/0, 'p_aspect'/0, 'p_attr'/0, 'p_item_base'/0, 'p_item'/0, 'p_equip'/0, 'p_pet'/0, 'p_marriage'/0, 'p_refine'/0, 'p_actor'/0, 'p_role'/0, 'p_creep'/0, 'p_npc'/0, 'p_drop'/0, 'p_buff'/0, 'p_coord'/0, 'p_icon'/0, 'p_ranking'/0, 'p_dropped'/0]).

-spec encode_msg(#m_magic_card_list_tos{} | #m_magic_card_list_toc{} | #m_magic_card_puton_tos{} | #m_magic_card_puton_toc{} | #m_magic_card_upstar_tos{} | #m_magic_card_upstar_toc{} | #m_magic_card_strength_tos{} | #m_magic_card_strength_toc{} | #m_magic_card_decompose_tos{} | #m_magic_card_decompose_toc{} | #m_magic_card_suite_toc{} | #m_magic_card_combine_tos{} | #m_magic_card_combine_toc{} | #m_magic_card_get_set_tos{} | #m_magic_card_get_set_toc{} | #m_magic_card_decompose_set_tos{} | #m_magic_card_decompose_set_toc{} | #m_magic_card_bag_info_tos{} | #m_magic_card_bag_info_toc{} | #m_magic_card_putoff_toc{} | #m_magic_power_toc{} | #p_role_base{} | #p_aspect{} | #p_attr{} | #p_item_base{} | #p_item{} | #p_equip{} | #p_pet{} | #p_marriage{} | #p_refine{} | #p_actor{} | #p_role{} | #p_creep{} | #p_npc{} | #p_drop{} | #p_buff{} | #p_coord{} | #p_icon{} | #p_ranking{} | #p_dropped{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_magic_card_list_tos{} | #m_magic_card_list_toc{} | #m_magic_card_puton_tos{} | #m_magic_card_puton_toc{} | #m_magic_card_upstar_tos{} | #m_magic_card_upstar_toc{} | #m_magic_card_strength_tos{} | #m_magic_card_strength_toc{} | #m_magic_card_decompose_tos{} | #m_magic_card_decompose_toc{} | #m_magic_card_suite_toc{} | #m_magic_card_combine_tos{} | #m_magic_card_combine_toc{} | #m_magic_card_get_set_tos{} | #m_magic_card_get_set_toc{} | #m_magic_card_decompose_set_tos{} | #m_magic_card_decompose_set_toc{} | #m_magic_card_bag_info_tos{} | #m_magic_card_bag_info_toc{} | #m_magic_card_putoff_toc{} | #m_magic_power_toc{} | #p_role_base{} | #p_aspect{} | #p_attr{} | #p_item_base{} | #p_item{} | #p_equip{} | #p_pet{} | #p_marriage{} | #p_refine{} | #p_actor{} | #p_role{} | #p_creep{} | #p_npc{} | #p_drop{} | #p_buff{} | #p_coord{} | #p_icon{} | #p_ranking{} | #p_dropped{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_magic_card_list_tos{} | #m_magic_card_list_toc{} | #m_magic_card_puton_tos{} | #m_magic_card_puton_toc{} | #m_magic_card_upstar_tos{} | #m_magic_card_upstar_toc{} | #m_magic_card_strength_tos{} | #m_magic_card_strength_toc{} | #m_magic_card_decompose_tos{} | #m_magic_card_decompose_toc{} | #m_magic_card_suite_toc{} | #m_magic_card_combine_tos{} | #m_magic_card_combine_toc{} | #m_magic_card_get_set_tos{} | #m_magic_card_get_set_toc{} | #m_magic_card_decompose_set_tos{} | #m_magic_card_decompose_set_toc{} | #m_magic_card_bag_info_tos{} | #m_magic_card_bag_info_toc{} | #m_magic_card_putoff_toc{} | #m_magic_power_toc{} | #p_role_base{} | #p_aspect{} | #p_attr{} | #p_item_base{} | #p_item{} | #p_equip{} | #p_pet{} | #p_marriage{} | #p_refine{} | #p_actor{} | #p_role{} | #p_creep{} | #p_npc{} | #p_drop{} | #p_buff{} | #p_coord{} | #p_icon{} | #p_ranking{} | #p_dropped{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_magic_card_list_tos ->
	  encode_msg_m_magic_card_list_tos(id(Msg, TrUserData),
					   TrUserData);
      m_magic_card_list_toc ->
	  encode_msg_m_magic_card_list_toc(id(Msg, TrUserData),
					   TrUserData);
      m_magic_card_puton_tos ->
	  encode_msg_m_magic_card_puton_tos(id(Msg, TrUserData),
					    TrUserData);
      m_magic_card_puton_toc ->
	  encode_msg_m_magic_card_puton_toc(id(Msg, TrUserData),
					    TrUserData);
      m_magic_card_upstar_tos ->
	  encode_msg_m_magic_card_upstar_tos(id(Msg, TrUserData),
					     TrUserData);
      m_magic_card_upstar_toc ->
	  encode_msg_m_magic_card_upstar_toc(id(Msg, TrUserData),
					     TrUserData);
      m_magic_card_strength_tos ->
	  encode_msg_m_magic_card_strength_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_magic_card_strength_toc ->
	  encode_msg_m_magic_card_strength_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_magic_card_decompose_tos ->
	  encode_msg_m_magic_card_decompose_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_magic_card_decompose_toc ->
	  encode_msg_m_magic_card_decompose_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_magic_card_suite_toc ->
	  encode_msg_m_magic_card_suite_toc(id(Msg, TrUserData),
					    TrUserData);
      m_magic_card_combine_tos ->
	  encode_msg_m_magic_card_combine_tos(id(Msg, TrUserData),
					      TrUserData);
      m_magic_card_combine_toc ->
	  encode_msg_m_magic_card_combine_toc(id(Msg, TrUserData),
					      TrUserData);
      m_magic_card_get_set_tos ->
	  encode_msg_m_magic_card_get_set_tos(id(Msg, TrUserData),
					      TrUserData);
      m_magic_card_get_set_toc ->
	  encode_msg_m_magic_card_get_set_toc(id(Msg, TrUserData),
					      TrUserData);
      m_magic_card_decompose_set_tos ->
	  encode_msg_m_magic_card_decompose_set_tos(id(Msg,
						       TrUserData),
						    TrUserData);
      m_magic_card_decompose_set_toc ->
	  encode_msg_m_magic_card_decompose_set_toc(id(Msg,
						       TrUserData),
						    TrUserData);
      m_magic_card_bag_info_tos ->
	  encode_msg_m_magic_card_bag_info_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_magic_card_bag_info_toc ->
	  encode_msg_m_magic_card_bag_info_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_magic_card_putoff_toc ->
	  encode_msg_m_magic_card_putoff_toc(id(Msg, TrUserData),
					     TrUserData);
      m_magic_power_toc ->
	  encode_msg_m_magic_power_toc(id(Msg, TrUserData),
				       TrUserData);
      p_role_base ->
	  encode_msg_p_role_base(id(Msg, TrUserData), TrUserData);
      p_aspect ->
	  encode_msg_p_aspect(id(Msg, TrUserData), TrUserData);
      p_attr ->
	  encode_msg_p_attr(id(Msg, TrUserData), TrUserData);
      p_item_base ->
	  encode_msg_p_item_base(id(Msg, TrUserData), TrUserData);
      p_item ->
	  encode_msg_p_item(id(Msg, TrUserData), TrUserData);
      p_equip ->
	  encode_msg_p_equip(id(Msg, TrUserData), TrUserData);
      p_pet ->
	  encode_msg_p_pet(id(Msg, TrUserData), TrUserData);
      p_marriage ->
	  encode_msg_p_marriage(id(Msg, TrUserData), TrUserData);
      p_refine ->
	  encode_msg_p_refine(id(Msg, TrUserData), TrUserData);
      p_actor ->
	  encode_msg_p_actor(id(Msg, TrUserData), TrUserData);
      p_role ->
	  encode_msg_p_role(id(Msg, TrUserData), TrUserData);
      p_creep ->
	  encode_msg_p_creep(id(Msg, TrUserData), TrUserData);
      p_npc ->
	  encode_msg_p_npc(id(Msg, TrUserData), TrUserData);
      p_drop ->
	  encode_msg_p_drop(id(Msg, TrUserData), TrUserData);
      p_buff ->
	  encode_msg_p_buff(id(Msg, TrUserData), TrUserData);
      p_coord ->
	  encode_msg_p_coord(id(Msg, TrUserData), TrUserData);
      p_icon ->
	  encode_msg_p_icon(id(Msg, TrUserData), TrUserData);
      p_ranking ->
	  encode_msg_p_ranking(id(Msg, TrUserData), TrUserData);
      p_dropped ->
	  encode_msg_p_dropped(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_magic_card_list_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_list_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_list_toc(Msg, <<>>, TrUserData).


encode_msg_m_magic_card_list_toc(#m_magic_card_list_toc{cards
							    = F1},
				 Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_magic_card_list_toc.cards'(F1,
						     TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_magic_card_list_toc_cards(TrF1, Bin,
						 TrUserData)
      end
    end.

encode_msg_m_magic_card_puton_tos(Msg, TrUserData) ->
    encode_msg_m_magic_card_puton_tos(Msg, <<>>,
				      TrUserData).


encode_msg_m_magic_card_puton_tos(#m_magic_card_puton_tos{pos
							      = F1,
							  uid = F2},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_magic_card_puton_toc(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_upstar_tos(Msg, TrUserData) ->
    encode_msg_m_magic_card_upstar_tos(Msg, <<>>,
				       TrUserData).


encode_msg_m_magic_card_upstar_tos(#m_magic_card_upstar_tos{pos
								= F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_magic_card_upstar_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_upstar_toc(Msg, <<>>,
				       TrUserData).


encode_msg_m_magic_card_upstar_toc(#m_magic_card_upstar_toc{pos
								= F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_magic_card_strength_tos(Msg, TrUserData) ->
    encode_msg_m_magic_card_strength_tos(Msg, <<>>,
					 TrUserData).


encode_msg_m_magic_card_strength_tos(#m_magic_card_strength_tos{pos
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_magic_card_strength_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_strength_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_magic_card_strength_toc(#m_magic_card_strength_toc{pos
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_magic_card_decompose_tos(Msg,
				      TrUserData) ->
    encode_msg_m_magic_card_decompose_tos(Msg, <<>>,
					  TrUserData).


encode_msg_m_magic_card_decompose_tos(#m_magic_card_decompose_tos{uid
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_magic_card_decompose_tos_uid(TrF1, Bin,
						    TrUserData)
      end
    end.

encode_msg_m_magic_card_decompose_toc(_Msg,
				      _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_suite_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_suite_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_magic_card_suite_toc(#m_magic_card_suite_toc{suite_id
							      = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_magic_card_combine_tos(Msg, TrUserData) ->
    encode_msg_m_magic_card_combine_tos(Msg, <<>>,
					TrUserData).


encode_msg_m_magic_card_combine_tos(#m_magic_card_combine_tos{r_item_id
								  = F1},
				    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_magic_card_combine_toc(_Msg,
				    _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_get_set_tos(_Msg,
				    _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_get_set_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_get_set_toc(Msg, <<>>,
					TrUserData).


encode_msg_m_magic_card_get_set_toc(#m_magic_card_get_set_toc{auto
								  = F1,
							      color = F2},
				    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_magic_card_get_set_toc_color(TrF2, B1,
						    TrUserData)
      end
    end.

encode_msg_m_magic_card_decompose_set_tos(Msg,
					  TrUserData) ->
    encode_msg_m_magic_card_decompose_set_tos(Msg, <<>>,
					      TrUserData).


encode_msg_m_magic_card_decompose_set_tos(#m_magic_card_decompose_set_tos{auto
									      =
									      F1,
									  color
									      =
									      F2},
					  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_magic_card_decompose_set_tos_color(TrF2, B1,
							  TrUserData)
      end
    end.

encode_msg_m_magic_card_decompose_set_toc(_Msg,
					  _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_bag_info_tos(_Msg,
				     _TrUserData) ->
    <<>>.

encode_msg_m_magic_card_bag_info_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_bag_info_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_magic_card_bag_info_toc(#m_magic_card_bag_info_toc{items
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_magic_card_bag_info_toc.items'(F1,
							 TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_magic_card_bag_info_toc_items(TrF1, Bin,
						     TrUserData)
      end
    end.

encode_msg_m_magic_card_putoff_toc(Msg, TrUserData) ->
    encode_msg_m_magic_card_putoff_toc(Msg, <<>>,
				       TrUserData).


encode_msg_m_magic_card_putoff_toc(#m_magic_card_putoff_toc{pos
								= F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_magic_card_putoff_toc_pos(TrF1, Bin,
						 TrUserData)
      end
    end.

encode_msg_m_magic_power_toc(Msg, TrUserData) ->
    encode_msg_m_magic_power_toc(Msg, <<>>, TrUserData).


encode_msg_m_magic_power_toc(#m_magic_power_toc{power =
						    F1},
			     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_p_role_base(Msg, TrUserData) ->
    encode_msg_p_role_base(Msg, <<>>, TrUserData).


encode_msg_p_role_base(#p_role_base{id = F1, name = F2,
				    career = F3, gender = F4, level = F5,
				    viplv = F6, power = F7, figure = F8,
				    guild = F9, gname = F10, charm = F11,
				    wake = F12, gpost = F13, marry = F14,
				    mname = F15, mtype = F16, icon = F17,
				    suid = F18, zoneid = F19, team = F20},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = 'tr_encode_p_role_base.figure'(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true -> e_field_p_role_base_figure(TrF8, B7, TrUserData)
	   end
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   e_varint(TrF9, <<B8/binary, 72>>, TrUserData)
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    e_type_string(TrF10, <<B9/binary, 82>>, TrUserData)
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
	  end,
    B12 = begin
	    TrF12 = id(F12, TrUserData),
	    e_type_int32(TrF12, <<B11/binary, 96>>, TrUserData)
	  end,
    B13 = begin
	    TrF13 = id(F13, TrUserData),
	    e_type_int32(TrF13, <<B12/binary, 104>>, TrUserData)
	  end,
    B14 = begin
	    TrF14 = id(F14, TrUserData),
	    e_type_int32(TrF14, <<B13/binary, 112>>, TrUserData)
	  end,
    B15 = begin
	    TrF15 = id(F15, TrUserData),
	    e_type_string(TrF15, <<B14/binary, 122>>, TrUserData)
	  end,
    B16 = begin
	    TrF16 = id(F16, TrUserData),
	    e_type_int32(TrF16, <<B15/binary, 128, 1>>, TrUserData)
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   e_mfield_p_role_base_icon(TrF17, <<B16/binary, 138, 1>>,
					     TrUserData)
		 end
	  end,
    B18 = begin
	    TrF18 = id(F18, TrUserData),
	    e_type_int32(TrF18, <<B17/binary, 144, 1>>, TrUserData)
	  end,
    B19 = begin
	    TrF19 = id(F19, TrUserData),
	    e_type_int32(TrF19, <<B18/binary, 152, 1>>, TrUserData)
	  end,
    begin
      TrF20 = id(F20, TrUserData),
      e_type_fixed64(TrF20, <<B19/binary, 161, 1>>,
		     TrUserData)
    end.

encode_msg_p_aspect(Msg, TrUserData) ->
    encode_msg_p_aspect(Msg, <<>>, TrUserData).


encode_msg_p_aspect(#p_aspect{model = F1, skin = F2,
			      show = F3},
		    Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    if F3 == undefined -> B2;
       true ->
	   begin
	     TrF3 = id(F3, TrUserData),
	     e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
	   end
    end.

encode_msg_p_attr(Msg, TrUserData) ->
    encode_msg_p_attr(Msg, <<>>, TrUserData).


encode_msg_p_attr(#p_attr{hp = F1, hpmax = F2,
			  speed = F3, att = F4, def = F5, wreck = F6, hit = F7,
			  miss = F8, crit = F9, tough = F10, holy_att = F11,
			  holy_def = F12, abs_att = F13, abs_miss = F14,
			  dmg_amp = F15, dmg_red = F16, hit_pro = F17,
			  miss_pro = F18, armor_pro = F19, armor_str = F20,
			  block_pro = F21, block_str = F22, crit_pro = F23,
			  crit_res = F24, heart_pro = F25, heart_res = F26,
			  crit_dmg = F27, crit_red = F28, heart_dmg = F29,
			  heart_red = F30, skill_amp = F31, skill_red = F32,
			  thump_pro = F33, weak_pro = F34,
			  skill_att_power = F35, skill_def_power = F36,
			  hew_amp = F37, block_red = F38, boss_amp = F39,
			  creep_amp = F40, pvp_red = F41, pvp_armor_pro = F42,
			  pvp_armor_str = F43, exp_per = F44, gold_drop = F45,
			  item_drop = F46, equip_def = F47, equip_hpmax = F48,
			  equip_att = F49, power = F50, all_gp = F51,
			  hpmax_gp = F52, att_gp = F53, def_gp = F54,
			  wreck_gp = F55, hit_gp = F56, miss_gp = F57,
			  crit_gp = F58, tough_gp = F59, holy_att_gp = F60,
			  holy_def_gp = F61, hpmax_bp = F62, att_bp = F63,
			  def_bp = F64, wreck_bp = F65},
		  Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
		 end
	  end,
    B11 = if F11 == undefined -> B10;
	     true ->
		 begin
		   TrF11 = id(F11, TrUserData),
		   e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
		 end
	  end,
    B12 = if F12 == undefined -> B11;
	     true ->
		 begin
		   TrF12 = id(F12, TrUserData),
		   e_type_int32(TrF12, <<B11/binary, 96>>, TrUserData)
		 end
	  end,
    B13 = if F13 == undefined -> B12;
	     true ->
		 begin
		   TrF13 = id(F13, TrUserData),
		   e_type_int32(TrF13, <<B12/binary, 104>>, TrUserData)
		 end
	  end,
    B14 = if F14 == undefined -> B13;
	     true ->
		 begin
		   TrF14 = id(F14, TrUserData),
		   e_type_int32(TrF14, <<B13/binary, 112>>, TrUserData)
		 end
	  end,
    B15 = if F15 == undefined -> B14;
	     true ->
		 begin
		   TrF15 = id(F15, TrUserData),
		   e_type_int32(TrF15, <<B14/binary, 120>>, TrUserData)
		 end
	  end,
    B16 = if F16 == undefined -> B15;
	     true ->
		 begin
		   TrF16 = id(F16, TrUserData),
		   e_type_int32(TrF16, <<B15/binary, 128, 1>>, TrUserData)
		 end
	  end,
    B17 = if F17 == undefined -> B16;
	     true ->
		 begin
		   TrF17 = id(F17, TrUserData),
		   e_type_int32(TrF17, <<B16/binary, 136, 1>>, TrUserData)
		 end
	  end,
    B18 = if F18 == undefined -> B17;
	     true ->
		 begin
		   TrF18 = id(F18, TrUserData),
		   e_type_int32(TrF18, <<B17/binary, 144, 1>>, TrUserData)
		 end
	  end,
    B19 = if F19 == undefined -> B18;
	     true ->
		 begin
		   TrF19 = id(F19, TrUserData),
		   e_type_int32(TrF19, <<B18/binary, 152, 1>>, TrUserData)
		 end
	  end,
    B20 = if F20 == undefined -> B19;
	     true ->
		 begin
		   TrF20 = id(F20, TrUserData),
		   e_type_int32(TrF20, <<B19/binary, 160, 1>>, TrUserData)
		 end
	  end,
    B21 = if F21 == undefined -> B20;
	     true ->
		 begin
		   TrF21 = id(F21, TrUserData),
		   e_type_int32(TrF21, <<B20/binary, 168, 1>>, TrUserData)
		 end
	  end,
    B22 = if F22 == undefined -> B21;
	     true ->
		 begin
		   TrF22 = id(F22, TrUserData),
		   e_type_int32(TrF22, <<B21/binary, 176, 1>>, TrUserData)
		 end
	  end,
    B23 = if F23 == undefined -> B22;
	     true ->
		 begin
		   TrF23 = id(F23, TrUserData),
		   e_type_int32(TrF23, <<B22/binary, 184, 1>>, TrUserData)
		 end
	  end,
    B24 = if F24 == undefined -> B23;
	     true ->
		 begin
		   TrF24 = id(F24, TrUserData),
		   e_type_int32(TrF24, <<B23/binary, 192, 1>>, TrUserData)
		 end
	  end,
    B25 = if F25 == undefined -> B24;
	     true ->
		 begin
		   TrF25 = id(F25, TrUserData),
		   e_type_int32(TrF25, <<B24/binary, 200, 1>>, TrUserData)
		 end
	  end,
    B26 = if F26 == undefined -> B25;
	     true ->
		 begin
		   TrF26 = id(F26, TrUserData),
		   e_type_int32(TrF26, <<B25/binary, 208, 1>>, TrUserData)
		 end
	  end,
    B27 = if F27 == undefined -> B26;
	     true ->
		 begin
		   TrF27 = id(F27, TrUserData),
		   e_type_int32(TrF27, <<B26/binary, 216, 1>>, TrUserData)
		 end
	  end,
    B28 = if F28 == undefined -> B27;
	     true ->
		 begin
		   TrF28 = id(F28, TrUserData),
		   e_type_int32(TrF28, <<B27/binary, 224, 1>>, TrUserData)
		 end
	  end,
    B29 = if F29 == undefined -> B28;
	     true ->
		 begin
		   TrF29 = id(F29, TrUserData),
		   e_type_int32(TrF29, <<B28/binary, 232, 1>>, TrUserData)
		 end
	  end,
    B30 = if F30 == undefined -> B29;
	     true ->
		 begin
		   TrF30 = id(F30, TrUserData),
		   e_type_int32(TrF30, <<B29/binary, 240, 1>>, TrUserData)
		 end
	  end,
    B31 = if F31 == undefined -> B30;
	     true ->
		 begin
		   TrF31 = id(F31, TrUserData),
		   e_type_int32(TrF31, <<B30/binary, 248, 1>>, TrUserData)
		 end
	  end,
    B32 = if F32 == undefined -> B31;
	     true ->
		 begin
		   TrF32 = id(F32, TrUserData),
		   e_type_int32(TrF32, <<B31/binary, 128, 2>>, TrUserData)
		 end
	  end,
    B33 = if F33 == undefined -> B32;
	     true ->
		 begin
		   TrF33 = id(F33, TrUserData),
		   e_type_int32(TrF33, <<B32/binary, 136, 2>>, TrUserData)
		 end
	  end,
    B34 = if F34 == undefined -> B33;
	     true ->
		 begin
		   TrF34 = id(F34, TrUserData),
		   e_type_int32(TrF34, <<B33/binary, 144, 2>>, TrUserData)
		 end
	  end,
    B35 = if F35 == undefined -> B34;
	     true ->
		 begin
		   TrF35 = id(F35, TrUserData),
		   e_type_int32(TrF35, <<B34/binary, 152, 2>>, TrUserData)
		 end
	  end,
    B36 = if F36 == undefined -> B35;
	     true ->
		 begin
		   TrF36 = id(F36, TrUserData),
		   e_type_int32(TrF36, <<B35/binary, 160, 2>>, TrUserData)
		 end
	  end,
    B37 = if F37 == undefined -> B36;
	     true ->
		 begin
		   TrF37 = id(F37, TrUserData),
		   e_type_int32(TrF37, <<B36/binary, 168, 2>>, TrUserData)
		 end
	  end,
    B38 = if F38 == undefined -> B37;
	     true ->
		 begin
		   TrF38 = id(F38, TrUserData),
		   e_type_int32(TrF38, <<B37/binary, 176, 2>>, TrUserData)
		 end
	  end,
    B39 = if F39 == undefined -> B38;
	     true ->
		 begin
		   TrF39 = id(F39, TrUserData),
		   e_type_int32(TrF39, <<B38/binary, 184, 2>>, TrUserData)
		 end
	  end,
    B40 = if F40 == undefined -> B39;
	     true ->
		 begin
		   TrF40 = id(F40, TrUserData),
		   e_type_int32(TrF40, <<B39/binary, 192, 2>>, TrUserData)
		 end
	  end,
    B41 = if F41 == undefined -> B40;
	     true ->
		 begin
		   TrF41 = id(F41, TrUserData),
		   e_type_int32(TrF41, <<B40/binary, 200, 2>>, TrUserData)
		 end
	  end,
    B42 = if F42 == undefined -> B41;
	     true ->
		 begin
		   TrF42 = id(F42, TrUserData),
		   e_type_int32(TrF42, <<B41/binary, 208, 2>>, TrUserData)
		 end
	  end,
    B43 = if F43 == undefined -> B42;
	     true ->
		 begin
		   TrF43 = id(F43, TrUserData),
		   e_type_int32(TrF43, <<B42/binary, 216, 2>>, TrUserData)
		 end
	  end,
    B44 = if F44 == undefined -> B43;
	     true ->
		 begin
		   TrF44 = id(F44, TrUserData),
		   e_type_int32(TrF44, <<B43/binary, 224, 2>>, TrUserData)
		 end
	  end,
    B45 = if F45 == undefined -> B44;
	     true ->
		 begin
		   TrF45 = id(F45, TrUserData),
		   e_type_int32(TrF45, <<B44/binary, 232, 2>>, TrUserData)
		 end
	  end,
    B46 = if F46 == undefined -> B45;
	     true ->
		 begin
		   TrF46 = id(F46, TrUserData),
		   e_type_int32(TrF46, <<B45/binary, 240, 2>>, TrUserData)
		 end
	  end,
    B47 = if F47 == undefined -> B46;
	     true ->
		 begin
		   TrF47 = id(F47, TrUserData),
		   e_type_int32(TrF47, <<B46/binary, 248, 2>>, TrUserData)
		 end
	  end,
    B48 = if F48 == undefined -> B47;
	     true ->
		 begin
		   TrF48 = id(F48, TrUserData),
		   e_type_int32(TrF48, <<B47/binary, 128, 3>>, TrUserData)
		 end
	  end,
    B49 = if F49 == undefined -> B48;
	     true ->
		 begin
		   TrF49 = id(F49, TrUserData),
		   e_type_int32(TrF49, <<B48/binary, 136, 3>>, TrUserData)
		 end
	  end,
    B50 = if F50 == undefined -> B49;
	     true ->
		 begin
		   TrF50 = id(F50, TrUserData),
		   e_type_int32(TrF50, <<B49/binary, 144, 3>>, TrUserData)
		 end
	  end,
    B51 = if F51 == undefined -> B50;
	     true ->
		 begin
		   TrF51 = id(F51, TrUserData),
		   e_type_int32(TrF51, <<B50/binary, 152, 3>>, TrUserData)
		 end
	  end,
    B52 = if F52 == undefined -> B51;
	     true ->
		 begin
		   TrF52 = id(F52, TrUserData),
		   e_type_int32(TrF52, <<B51/binary, 160, 3>>, TrUserData)
		 end
	  end,
    B53 = if F53 == undefined -> B52;
	     true ->
		 begin
		   TrF53 = id(F53, TrUserData),
		   e_type_int32(TrF53, <<B52/binary, 168, 3>>, TrUserData)
		 end
	  end,
    B54 = if F54 == undefined -> B53;
	     true ->
		 begin
		   TrF54 = id(F54, TrUserData),
		   e_type_int32(TrF54, <<B53/binary, 176, 3>>, TrUserData)
		 end
	  end,
    B55 = if F55 == undefined -> B54;
	     true ->
		 begin
		   TrF55 = id(F55, TrUserData),
		   e_type_int32(TrF55, <<B54/binary, 184, 3>>, TrUserData)
		 end
	  end,
    B56 = if F56 == undefined -> B55;
	     true ->
		 begin
		   TrF56 = id(F56, TrUserData),
		   e_type_int32(TrF56, <<B55/binary, 192, 3>>, TrUserData)
		 end
	  end,
    B57 = if F57 == undefined -> B56;
	     true ->
		 begin
		   TrF57 = id(F57, TrUserData),
		   e_type_int32(TrF57, <<B56/binary, 200, 3>>, TrUserData)
		 end
	  end,
    B58 = if F58 == undefined -> B57;
	     true ->
		 begin
		   TrF58 = id(F58, TrUserData),
		   e_type_int32(TrF58, <<B57/binary, 208, 3>>, TrUserData)
		 end
	  end,
    B59 = if F59 == undefined -> B58;
	     true ->
		 begin
		   TrF59 = id(F59, TrUserData),
		   e_type_int32(TrF59, <<B58/binary, 216, 3>>, TrUserData)
		 end
	  end,
    B60 = if F60 == undefined -> B59;
	     true ->
		 begin
		   TrF60 = id(F60, TrUserData),
		   e_type_int32(TrF60, <<B59/binary, 224, 3>>, TrUserData)
		 end
	  end,
    B61 = if F61 == undefined -> B60;
	     true ->
		 begin
		   TrF61 = id(F61, TrUserData),
		   e_type_int32(TrF61, <<B60/binary, 232, 3>>, TrUserData)
		 end
	  end,
    B62 = if F62 == undefined -> B61;
	     true ->
		 begin
		   TrF62 = id(F62, TrUserData),
		   e_type_int32(TrF62, <<B61/binary, 240, 3>>, TrUserData)
		 end
	  end,
    B63 = if F63 == undefined -> B62;
	     true ->
		 begin
		   TrF63 = id(F63, TrUserData),
		   e_type_int32(TrF63, <<B62/binary, 248, 3>>, TrUserData)
		 end
	  end,
    B64 = if F64 == undefined -> B63;
	     true ->
		 begin
		   TrF64 = id(F64, TrUserData),
		   e_type_int32(TrF64, <<B63/binary, 128, 4>>, TrUserData)
		 end
	  end,
    if F65 == undefined -> B64;
       true ->
	   begin
	     TrF65 = id(F65, TrUserData),
	     e_type_int32(TrF65, <<B64/binary, 136, 4>>, TrUserData)
	   end
    end.

encode_msg_p_item_base(Msg, TrUserData) ->
    encode_msg_p_item_base(Msg, <<>>, TrUserData).


encode_msg_p_item_base(#p_item_base{uid = F1, id = F2,
				    num = F3, bag = F4, bind = F5, etime = F6,
				    gender = F7, score = F8, extra = F9,
				    misc = F10},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
		end
	 end,
    begin
      TrF10 = 'tr_encode_p_item_base.misc'(F10, TrUserData),
      if TrF10 == [] -> B9;
	 true -> e_field_p_item_base_misc(TrF10, B9, TrUserData)
      end
    end.

encode_msg_p_item(Msg, TrUserData) ->
    encode_msg_p_item(Msg, <<>>, TrUserData).


encode_msg_p_item(#p_item{uid = F1, id = F2, num = F3,
			  bag = F4, bind = F5, etime = F6, gender = F7,
			  score = F8, equip = F9, pet = F10, extra = F11},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  e_mfield_p_item_equip(TrF9, <<B8/binary, 74>>,
					TrUserData)
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_mfield_p_item_pet(TrF10, <<B9/binary, 82>>,
				       TrUserData)
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
	   end
    end.

encode_msg_p_equip(Msg, TrUserData) ->
    encode_msg_p_equip(Msg, <<>>, TrUserData).


encode_msg_p_equip(#p_equip{base = F1, rare1 = F2,
			    rare2 = F3, rare3 = F4, marriage = F5,
			    stren_phase = F6, stren_lv = F7, stones = F8,
			    power = F9, cast = F10, refine = F11, suite = F12,
			    combine = F13},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_p_equip_base(TrF1, <<Bin/binary, 10>>,
				 TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_p_equip_rare1(TrF2, <<B1/binary, 18>>,
					 TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_p_equip_rare2(TrF3, <<B2/binary, 26>>,
					 TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_p_equip_rare3(TrF4, <<B3/binary, 34>>,
					 TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_p_equip_marriage(TrF5, <<B4/binary, 42>>,
					    TrUserData)
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = 'tr_encode_p_equip.stones'(F8, TrUserData),
	   if TrF8 == [] -> B7;
	      true -> e_field_p_equip_stones(TrF8, B7, TrUserData)
	   end
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
		 end
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    if TrF11 == [] -> B10;
	       true -> e_field_p_equip_refine(TrF11, B10, TrUserData)
	    end
	  end,
    B12 = begin
	    TrF12 = 'tr_encode_p_equip.suite'(F12, TrUserData),
	    if TrF12 == [] -> B11;
	       true -> e_field_p_equip_suite(TrF12, B11, TrUserData)
	    end
	  end,
    begin
      TrF13 = id(F13, TrUserData),
      if TrF13 == [] -> B12;
	 true -> e_field_p_equip_combine(TrF13, B12, TrUserData)
      end
    end.

encode_msg_p_pet(Msg, TrUserData) ->
    encode_msg_p_pet(Msg, <<>>, TrUserData).


encode_msg_p_pet(#p_pet{base = F1, rare1 = F2,
			rare2 = F3, rare3 = F4, cross = F5, strong = F6,
			power = F7},
		 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_mfield_p_pet_base(TrF1, <<Bin/binary, 10>>,
			       TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_mfield_p_pet_rare1(TrF2, <<B1/binary, 18>>,
				       TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_mfield_p_pet_rare2(TrF3, <<B2/binary, 26>>,
				       TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_mfield_p_pet_rare3(TrF4, <<B3/binary, 34>>,
				       TrUserData)
		end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = 'tr_encode_p_pet.strong'(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_p_pet_strong(TrF6, B5, TrUserData)
	   end
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
    end.

encode_msg_p_marriage(Msg, TrUserData) ->
    encode_msg_p_marriage(Msg, <<>>, TrUserData).


encode_msg_p_marriage(#p_marriage{husband_id = F1,
				  husband = F2, wife_id = F3, wife = F4,
				  rare = F5},
		      Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_fixed64(TrF3, <<B2/binary, 25>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		end
	 end,
    if F5 == undefined -> B4;
       true ->
	   begin
	     TrF5 = id(F5, TrUserData),
	     e_mfield_p_marriage_rare(TrF5, <<B4/binary, 42>>,
				      TrUserData)
	   end
    end.

encode_msg_p_refine(Msg, TrUserData) ->
    encode_msg_p_refine(Msg, <<>>, TrUserData).


encode_msg_p_refine(#p_refine{attr = F1, value = F2,
			      min = F3, max = F4, color = F5},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_p_actor(Msg, TrUserData) ->
    encode_msg_p_actor(Msg, <<>>, TrUserData).


encode_msg_p_actor(#p_actor{uid = F1, name = F2,
			    type = F3, coord = F4, state = F5, stargs = F6,
			    role = F7, creep = F8, drop = F9},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_mfield_p_actor_coord(TrF4, <<B3/binary, 34>>,
				  TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = 'tr_encode_p_actor.stargs'(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_p_actor_stargs(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  e_mfield_p_actor_role(TrF7, <<B6/binary, 58>>,
					TrUserData)
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  e_mfield_p_actor_creep(TrF8, <<B7/binary, 66>>,
					 TrUserData)
		end
	 end,
    if F9 == undefined -> B8;
       true ->
	   begin
	     TrF9 = id(F9, TrUserData),
	     e_mfield_p_actor_drop(TrF9, <<B8/binary, 74>>,
				   TrUserData)
	   end
    end.

encode_msg_p_role(Msg, TrUserData) ->
    encode_msg_p_role(Msg, <<>>, TrUserData).


encode_msg_p_role(#p_role{career = F1, gender = F2,
			  level = F3, viplv = F4, figure = F5, suid = F6,
			  guild = F7, gname = F8, hp = F9, hpmax = F10,
			  speed = F11, buffs = F12, power = F13, pkmode = F14,
			  crime = F15, dir = F16, dest = F17, group = F18,
			  team = F19, marry = F20, mname = F21, mtype = F22,
			  zoneid = F23, ext = F24, icon = F25},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = 'tr_encode_p_role.figure'(F5, TrUserData),
	   if TrF5 == [] -> B4;
	      true -> e_field_p_role_figure(TrF5, B4, TrUserData)
	   end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_varint(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_string(TrF8, <<B7/binary, 66>>, TrUserData)
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
	  end,
    B11 = begin
	    TrF11 = id(F11, TrUserData),
	    e_type_int32(TrF11, <<B10/binary, 88>>, TrUserData)
	  end,
    B12 = begin
	    TrF12 = id(F12, TrUserData),
	    if TrF12 == [] -> B11;
	       true -> e_field_p_role_buffs(TrF12, B11, TrUserData)
	    end
	  end,
    B13 = begin
	    TrF13 = id(F13, TrUserData),
	    e_type_int32(TrF13, <<B12/binary, 104>>, TrUserData)
	  end,
    B14 = begin
	    TrF14 = id(F14, TrUserData),
	    e_type_int32(TrF14, <<B13/binary, 112>>, TrUserData)
	  end,
    B15 = begin
	    TrF15 = id(F15, TrUserData),
	    e_type_int32(TrF15, <<B14/binary, 120>>, TrUserData)
	  end,
    B16 = begin
	    TrF16 = id(F16, TrUserData),
	    e_type_double(TrF16, <<B15/binary, 129, 1>>, TrUserData)
	  end,
    B17 = begin
	    TrF17 = id(F17, TrUserData),
	    e_mfield_p_role_dest(TrF17, <<B16/binary, 138, 1>>,
				 TrUserData)
	  end,
    B18 = begin
	    TrF18 = id(F18, TrUserData),
	    e_type_int32(TrF18, <<B17/binary, 144, 1>>, TrUserData)
	  end,
    B19 = begin
	    TrF19 = id(F19, TrUserData),
	    e_type_fixed64(TrF19, <<B18/binary, 153, 1>>,
			   TrUserData)
	  end,
    B20 = begin
	    TrF20 = id(F20, TrUserData),
	    e_type_int32(TrF20, <<B19/binary, 160, 1>>, TrUserData)
	  end,
    B21 = begin
	    TrF21 = id(F21, TrUserData),
	    e_type_string(TrF21, <<B20/binary, 170, 1>>, TrUserData)
	  end,
    B22 = begin
	    TrF22 = id(F22, TrUserData),
	    e_type_int32(TrF22, <<B21/binary, 176, 1>>, TrUserData)
	  end,
    B23 = begin
	    TrF23 = id(F23, TrUserData),
	    e_type_int32(TrF23, <<B22/binary, 184, 1>>, TrUserData)
	  end,
    B24 = begin
	    TrF24 = 'tr_encode_p_role.ext'(F24, TrUserData),
	    if TrF24 == [] -> B23;
	       true -> e_field_p_role_ext(TrF24, B23, TrUserData)
	    end
	  end,
    if F25 == undefined -> B24;
       true ->
	   begin
	     TrF25 = id(F25, TrUserData),
	     e_mfield_p_role_icon(TrF25, <<B24/binary, 202, 1>>,
				  TrUserData)
	   end
    end.

encode_msg_p_creep(Msg, TrUserData) ->
    encode_msg_p_creep(Msg, <<>>, TrUserData).


encode_msg_p_creep(#p_creep{id = F1, owner = F2,
			    hp = F3, hpmax = F4, speed = F5, buffs = F6,
			    dir = F7, dest = F8, group = F9, level = F10,
			    ext = F11},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_fixed64(TrF2, <<B1/binary, 17>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_p_creep_buffs(TrF6, B5, TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_mfield_p_creep_dest(TrF8, <<B7/binary, 66>>,
				 TrUserData)
	 end,
    B9 = begin
	   TrF9 = id(F9, TrUserData),
	   e_type_int32(TrF9, <<B8/binary, 72>>, TrUserData)
	 end,
    B10 = begin
	    TrF10 = id(F10, TrUserData),
	    e_type_int32(TrF10, <<B9/binary, 80>>, TrUserData)
	  end,
    begin
      TrF11 = 'tr_encode_p_creep.ext'(F11, TrUserData),
      if TrF11 == [] -> B10;
	 true -> e_field_p_creep_ext(TrF11, B10, TrUserData)
      end
    end.

encode_msg_p_npc(Msg, TrUserData) ->
    encode_msg_p_npc(Msg, <<>>, TrUserData).


encode_msg_p_npc(#p_npc{id = F1, coord = F2}, Bin,
		 TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_p_npc_coord(TrF2, <<B1/binary, 18>>,
			   TrUserData)
    end.

encode_msg_p_drop(Msg, TrUserData) ->
    encode_msg_p_drop(Msg, <<>>, TrUserData).


encode_msg_p_drop(#p_drop{id = F1, num = F2, mode = F3,
			  from = F4, coord = F5, belong = F6, unlock = F7},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  e_mfield_p_drop_coord(TrF5, <<B4/binary, 42>>,
					TrUserData)
		end
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   if TrF6 == [] -> B5;
	      true -> e_field_p_drop_belong(TrF6, B5, TrUserData)
	   end
	 end,
    if F7 == undefined -> B6;
       true ->
	   begin
	     TrF7 = id(F7, TrUserData),
	     e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	   end
    end.

encode_msg_p_buff(Msg, TrUserData) ->
    encode_msg_p_buff(Msg, <<>>, TrUserData).


encode_msg_p_buff(#p_buff{id = F1, type = F2,
			  origin = F3, value = F4, eff = F5, etime = F6,
			  group = F7, attrs = F8},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    begin
      TrF8 = id(F8, TrUserData),
      if TrF8 == [] -> B7;
	 true -> e_field_p_buff_attrs(TrF8, B7, TrUserData)
      end
    end.

encode_msg_p_coord(Msg, TrUserData) ->
    encode_msg_p_coord(Msg, <<>>, TrUserData).


encode_msg_p_coord(#p_coord{x = F1, y = F2}, Bin,
		   TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
    end.

encode_msg_p_icon(Msg, TrUserData) ->
    encode_msg_p_icon(Msg, <<>>, TrUserData).


encode_msg_p_icon(#p_icon{pic = F1, md5 = F2,
			  frame = F3, bubble = F4},
		  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_p_ranking(Msg, TrUserData) ->
    encode_msg_p_ranking(Msg, <<>>, TrUserData).


encode_msg_p_ranking(#p_ranking{base = F1, rank = F2,
				sort = F3, data = F4},
		     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_p_ranking_base(TrF1, <<Bin/binary, 10>>,
					  TrUserData)
		end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = 'tr_encode_p_ranking.data'(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true -> e_field_p_ranking_data(TrF4, B3, TrUserData)
      end
    end.

encode_msg_p_dropped(Msg, TrUserData) ->
    encode_msg_p_dropped(Msg, <<>>, TrUserData).


encode_msg_p_dropped(#p_dropped{time = F1, scene = F2,
				picker_id = F3, picker_name = F4, boss = F5,
				item_id = F6, cache_id = F7},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_fixed64(TrF3, <<B2/binary, 25>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
    end.

e_mfield_m_magic_card_list_toc_cards(Msg, Bin,
				     TrUserData) ->
    SubBin = 'encode_msg_map<int32,p_item>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_magic_card_list_toc_cards([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_magic_card_list_toc_cards('tr_encode_m_magic_card_list_toc.cards[x]'(Elem,
											TrUserData),
					     Bin2, TrUserData),
    e_field_m_magic_card_list_toc_cards(Rest, Bin3,
					TrUserData);
e_field_m_magic_card_list_toc_cards([], Bin,
				    _TrUserData) ->
    Bin.

e_field_m_magic_card_decompose_tos_uid([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_magic_card_decompose_tos_uid(Rest, Bin3,
					   TrUserData);
e_field_m_magic_card_decompose_tos_uid([], Bin,
				       _TrUserData) ->
    Bin.

e_field_m_magic_card_get_set_toc_color([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_magic_card_get_set_toc_color(Rest, Bin3,
					   TrUserData);
e_field_m_magic_card_get_set_toc_color([], Bin,
				       _TrUserData) ->
    Bin.

e_field_m_magic_card_decompose_set_tos_color([Elem
					      | Rest],
					     Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_magic_card_decompose_set_tos_color(Rest, Bin3,
						 TrUserData);
e_field_m_magic_card_decompose_set_tos_color([], Bin,
					     _TrUserData) ->
    Bin.

e_mfield_m_magic_card_bag_info_toc_items(Msg, Bin,
					 TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_magic_card_bag_info_toc_items([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_magic_card_bag_info_toc_items('tr_encode_m_magic_card_bag_info_toc.items[x]'(Elem,
												TrUserData),
						 Bin2, TrUserData),
    e_field_m_magic_card_bag_info_toc_items(Rest, Bin3,
					    TrUserData);
e_field_m_magic_card_bag_info_toc_items([], Bin,
					_TrUserData) ->
    Bin.

e_field_m_magic_card_putoff_toc_pos([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_magic_card_putoff_toc_pos(Rest, Bin3,
					TrUserData);
e_field_m_magic_card_putoff_toc_pos([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_p_role_base_figure(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,p_aspect>'(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_role_base_figure([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 =
	e_mfield_p_role_base_figure('tr_encode_p_role_base.figure[x]'(Elem,
								      TrUserData),
				    Bin2, TrUserData),
    e_field_p_role_base_figure(Rest, Bin3, TrUserData);
e_field_p_role_base_figure([], Bin, _TrUserData) -> Bin.

e_mfield_p_role_base_icon(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_icon(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_item_base_misc(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,int32>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_item_base_misc([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 82>>,
    Bin3 =
	e_mfield_p_item_base_misc('tr_encode_p_item_base.misc[x]'(Elem,
								  TrUserData),
				  Bin2, TrUserData),
    e_field_p_item_base_misc(Rest, Bin3, TrUserData);
e_field_p_item_base_misc([], Bin, _TrUserData) -> Bin.

e_mfield_p_item_equip(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_equip(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_item_pet(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_pet(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_equip_base(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_equip_rare1(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_equip_rare2(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_equip_rare3(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_equip_marriage(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_marriage(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_equip_stones(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_equip_stones([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 66>>,
    Bin3 =
	e_mfield_p_equip_stones('tr_encode_p_equip.stones[x]'(Elem,
							      TrUserData),
				Bin2, TrUserData),
    e_field_p_equip_stones(Rest, Bin3, TrUserData);
e_field_p_equip_stones([], Bin, _TrUserData) -> Bin.

e_mfield_p_equip_refine(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_refine(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_equip_refine([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 = e_mfield_p_equip_refine(id(Elem, TrUserData),
				   Bin2, TrUserData),
    e_field_p_equip_refine(Rest, Bin3, TrUserData);
e_field_p_equip_refine([], Bin, _TrUserData) -> Bin.

e_mfield_p_equip_suite(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_equip_suite([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 98>>,
    Bin3 =
	e_mfield_p_equip_suite('tr_encode_p_equip.suite[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_p_equip_suite(Rest, Bin3, TrUserData);
e_field_p_equip_suite([], Bin, _TrUserData) -> Bin.

e_mfield_p_equip_combine(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_item(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_equip_combine([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 106>>,
    Bin3 = e_mfield_p_equip_combine(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_p_equip_combine(Rest, Bin3, TrUserData);
e_field_p_equip_combine([], Bin, _TrUserData) -> Bin.

e_mfield_p_pet_base(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_pet_rare1(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_pet_rare2(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_pet_rare3(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_pet_strong(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_pet_strong([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 =
	e_mfield_p_pet_strong('tr_encode_p_pet.strong[x]'(Elem,
							  TrUserData),
			      Bin2, TrUserData),
    e_field_p_pet_strong(Rest, Bin3, TrUserData);
e_field_p_pet_strong([], Bin, _TrUserData) -> Bin.

e_mfield_p_marriage_rare(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_attr(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_actor_coord(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    encode_msg_p_coord(Msg, Bin2, TrUserData).

e_mfield_p_actor_stargs(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,string>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_actor_stargs([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 =
	e_mfield_p_actor_stargs('tr_encode_p_actor.stargs[x]'(Elem,
							      TrUserData),
				Bin2, TrUserData),
    e_field_p_actor_stargs(Rest, Bin3, TrUserData);
e_field_p_actor_stargs([], Bin, _TrUserData) -> Bin.

e_mfield_p_actor_role(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_role(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_actor_creep(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_creep(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_actor_drop(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_drop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_role_figure(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,p_aspect>'(Msg, <<>>,
					       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_role_figure([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 =
	e_mfield_p_role_figure('tr_encode_p_role.figure[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_p_role_figure(Rest, Bin3, TrUserData);
e_field_p_role_figure([], Bin, _TrUserData) -> Bin.

e_mfield_p_role_buffs(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_buff(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_role_buffs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 98>>,
    Bin3 = e_mfield_p_role_buffs(id(Elem, TrUserData), Bin2,
				 TrUserData),
    e_field_p_role_buffs(Rest, Bin3, TrUserData);
e_field_p_role_buffs([], Bin, _TrUserData) -> Bin.

e_mfield_p_role_dest(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    encode_msg_p_coord(Msg, Bin2, TrUserData).

e_mfield_p_role_ext(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,int32>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_role_ext([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 194, 1>>,
    Bin3 =
	e_mfield_p_role_ext('tr_encode_p_role.ext[x]'(Elem,
						      TrUserData),
			    Bin2, TrUserData),
    e_field_p_role_ext(Rest, Bin3, TrUserData);
e_field_p_role_ext([], Bin, _TrUserData) -> Bin.

e_mfield_p_role_icon(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_icon(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_creep_buffs(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_buff(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_creep_buffs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 = e_mfield_p_creep_buffs(id(Elem, TrUserData),
				  Bin2, TrUserData),
    e_field_p_creep_buffs(Rest, Bin3, TrUserData);
e_field_p_creep_buffs([], Bin, _TrUserData) -> Bin.

e_mfield_p_creep_dest(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    encode_msg_p_coord(Msg, Bin2, TrUserData).

e_mfield_p_creep_ext(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,uint64>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_creep_ext([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 90>>,
    Bin3 =
	e_mfield_p_creep_ext('tr_encode_p_creep.ext[x]'(Elem,
							TrUserData),
			     Bin2, TrUserData),
    e_field_p_creep_ext(Rest, Bin3, TrUserData);
e_field_p_creep_ext([], Bin, _TrUserData) -> Bin.

e_mfield_p_npc_coord(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    encode_msg_p_coord(Msg, Bin2, TrUserData).

e_mfield_p_drop_coord(Msg, Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    encode_msg_p_coord(Msg, Bin2, TrUserData).

e_field_p_drop_belong([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 49>>,
    Bin3 = e_type_fixed64(id(Elem, TrUserData), Bin2,
			  TrUserData),
    e_field_p_drop_belong(Rest, Bin3, TrUserData);
e_field_p_drop_belong([], Bin, _TrUserData) -> Bin.

e_field_p_buff_attrs([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 64>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_p_buff_attrs(Rest, Bin3, TrUserData);
e_field_p_buff_attrs([], Bin, _TrUserData) -> Bin.

e_mfield_p_ranking_base(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_role_base(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_p_ranking_data(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,int32>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_ranking_data([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_p_ranking_data('tr_encode_p_ranking.data[x]'(Elem,
							      TrUserData),
				Bin2, TrUserData),
    e_field_p_ranking_data(Rest, Bin3, TrUserData);
e_field_p_ranking_data([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,p_aspect>'(#{key := F1,
				    value := F2},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,p_aspect>_value'(TrF2,
					    <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_map<int32,string>'(#{key := F1,
				 value := F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_map<string,uint64>'(#{key := F1,
				  value := F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_map<int32,p_item>'(#{key := F1,
				 value := F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<int32,p_item>_value'(TrF2,
					 <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_map<string,int32>'(#{key := F1,
				 value := F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'e_mfield_map<string,p_aspect>_value'(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_p_aspect(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_mfield_map<int32,p_item>_value'(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_p_item(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_magic_card_list_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_list_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_list_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_list_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_puton_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_puton_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_puton_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_puton_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_upstar_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_upstar_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_upstar_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_upstar_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_strength_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_strength_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_strength_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_strength_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_decompose_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_decompose_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_decompose_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_decompose_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_suite_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_suite_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_combine_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_combine_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_combine_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_combine_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_get_set_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_get_set_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_get_set_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_get_set_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_decompose_set_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_decompose_set_tos(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_decompose_set_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_decompose_set_toc(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_bag_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_bag_info_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_bag_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_bag_info_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_card_putoff_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_magic_card_putoff_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_magic_power_toc, Bin, TrUserData) ->
    id(decode_msg_m_magic_power_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_role_base, Bin, TrUserData) ->
    id(decode_msg_p_role_base(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_aspect, Bin, TrUserData) ->
    id(decode_msg_p_aspect(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_attr, Bin, TrUserData) ->
    id(decode_msg_p_attr(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_item_base, Bin, TrUserData) ->
    id(decode_msg_p_item_base(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_item, Bin, TrUserData) ->
    id(decode_msg_p_item(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_equip, Bin, TrUserData) ->
    id(decode_msg_p_equip(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_pet, Bin, TrUserData) ->
    id(decode_msg_p_pet(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_marriage, Bin, TrUserData) ->
    id(decode_msg_p_marriage(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_refine, Bin, TrUserData) ->
    id(decode_msg_p_refine(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_actor, Bin, TrUserData) ->
    id(decode_msg_p_actor(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_role, Bin, TrUserData) ->
    id(decode_msg_p_role(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_creep, Bin, TrUserData) ->
    id(decode_msg_p_creep(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_npc, Bin, TrUserData) ->
    id(decode_msg_p_npc(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_drop, Bin, TrUserData) ->
    id(decode_msg_p_drop(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_buff, Bin, TrUserData) ->
    id(decode_msg_p_buff(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_coord, Bin, TrUserData) ->
    id(decode_msg_p_coord(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_icon, Bin, TrUserData) ->
    id(decode_msg_p_icon(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_ranking, Bin, TrUserData) ->
    id(decode_msg_p_ranking(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_dropped, Bin, TrUserData) ->
    id(decode_msg_p_dropped(Bin, TrUserData), TrUserData).



decode_msg_m_magic_card_list_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_tos(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_m_magic_card_list_tos(<<>>, 0, 0,
					 _) ->
    #m_magic_card_list_tos{};
dfp_read_field_def_m_magic_card_list_tos(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_m_magic_card_list_tos(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_m_magic_card_list_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_list_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_m_magic_card_list_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_list_tos(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_m_magic_card_list_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_list_tos(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_m_magic_card_list_tos(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_m_magic_card_list_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_magic_card_list_tos(<<>>, 0, 0,
					_) ->
    #m_magic_card_list_tos{}.

skip_varint_m_magic_card_list_tos(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_list_tos(Rest, Z1, Z2,
				      TrUserData);
skip_varint_m_magic_card_list_tos(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_tos(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_m_magic_card_list_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_list_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_m_magic_card_list_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_list_tos(Rest2, 0, 0,
					     TrUserData).

skip_group_m_magic_card_list_tos(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_list_tos(Rest, 0, Z2,
					     TrUserData).

skip_32_m_magic_card_list_tos(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_tos(Rest, Z1, Z2,
					     TrUserData).

skip_64_m_magic_card_list_tos(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_tos(Rest, Z1, Z2,
					     TrUserData).

decode_msg_m_magic_card_list_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_toc(Bin, 0, 0,
					     'tr_decode_init_default_m_magic_card_list_toc.cards'([],
												  TrUserData),
					     TrUserData).

dfp_read_field_def_m_magic_card_list_toc(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_list_toc_cards(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_magic_card_list_toc(<<>>, 0, 0, R1,
					 TrUserData) ->
    #m_magic_card_list_toc{cards =
			       'tr_decode_repeated_finalize_m_magic_card_list_toc.cards'(R1,
											 TrUserData)};
dfp_read_field_def_m_magic_card_list_toc(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_list_toc(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_m_magic_card_list_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_list_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_card_list_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_magic_card_list_toc_cards(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_list_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_m_magic_card_list_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_list_toc(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_m_magic_card_list_toc(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_list_toc(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_list_toc(<<>>, 0, 0, R1,
					TrUserData) ->
    #m_magic_card_list_toc{cards =
			       'tr_decode_repeated_finalize_m_magic_card_list_toc.cards'(R1,
											 TrUserData)}.

d_field_m_magic_card_list_toc_cards(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_list_toc_cards(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_list_toc_cards(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,p_item>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_magic_card_list_toc(RestF, 0, 0,
					     'tr_decode_repeated_add_elem_m_magic_card_list_toc.cards'(NewFValue,
												       Prev,
												       TrUserData),
					     TrUserData).

skip_varint_m_magic_card_list_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_list_toc(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_m_magic_card_list_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_m_magic_card_list_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_list_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_m_magic_card_list_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_list_toc(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_m_magic_card_list_toc(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_list_toc(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_m_magic_card_list_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_m_magic_card_list_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_list_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_m_magic_card_puton_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_tos(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_magic_card_puton_tos(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_magic_card_puton_tos_pos(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_magic_card_puton_tos(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_magic_card_puton_tos_uid(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_magic_card_puton_tos(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    #m_magic_card_puton_tos{pos = F@_1, uid = F@_2};
dfp_read_field_def_m_magic_card_puton_tos(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_magic_card_puton_tos(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_m_magic_card_puton_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_puton_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_m_magic_card_puton_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_puton_tos_pos(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      16 ->
	  d_field_m_magic_card_puton_tos_uid(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_puton_tos(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_m_magic_card_puton_tos(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_puton_tos(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_m_magic_card_puton_tos(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_magic_card_puton_tos(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_puton_tos(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    #m_magic_card_puton_tos{pos = F@_1, uid = F@_2}.

d_field_m_magic_card_puton_tos_pos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_puton_tos_pos(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_magic_card_puton_tos_pos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_puton_tos(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_m_magic_card_puton_tos_uid(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_puton_tos_uid(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_magic_card_puton_tos_uid(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_puton_tos(RestF, 0, 0,
					      F@_1, NewFValue, TrUserData).

skip_varint_m_magic_card_puton_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_magic_card_puton_tos(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_m_magic_card_puton_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_tos(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_m_magic_card_puton_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_puton_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_m_magic_card_puton_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_puton_tos(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_m_magic_card_puton_tos(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_puton_tos(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_m_magic_card_puton_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_tos(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_m_magic_card_puton_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_tos(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

decode_msg_m_magic_card_puton_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_toc(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_m_magic_card_puton_toc(<<>>, 0, 0,
					  _) ->
    #m_magic_card_puton_toc{};
dfp_read_field_def_m_magic_card_puton_toc(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_m_magic_card_puton_toc(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_m_magic_card_puton_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_puton_toc(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_m_magic_card_puton_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_puton_toc(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_m_magic_card_puton_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_puton_toc(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_m_magic_card_puton_toc(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_m_magic_card_puton_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_magic_card_puton_toc(<<>>, 0, 0,
					 _) ->
    #m_magic_card_puton_toc{}.

skip_varint_m_magic_card_puton_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_puton_toc(Rest, Z1, Z2,
				       TrUserData);
skip_varint_m_magic_card_puton_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_toc(Rest, Z1, Z2,
					      TrUserData).

skip_length_delimited_m_magic_card_puton_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_puton_toc(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_m_magic_card_puton_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_puton_toc(Rest2, 0, 0,
					      TrUserData).

skip_group_m_magic_card_puton_toc(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_puton_toc(Rest, 0, Z2,
					      TrUserData).

skip_32_m_magic_card_puton_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_toc(Rest, Z1, Z2,
					      TrUserData).

skip_64_m_magic_card_puton_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_puton_toc(Rest, Z1, Z2,
					      TrUserData).

decode_msg_m_magic_card_upstar_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_tos(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_magic_card_upstar_tos(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_upstar_tos_pos(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_magic_card_upstar_tos(<<>>, 0, 0,
					   F@_1, _) ->
    #m_magic_card_upstar_tos{pos = F@_1};
dfp_read_field_def_m_magic_card_upstar_tos(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_upstar_tos(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_m_magic_card_upstar_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_upstar_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_card_upstar_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_upstar_tos_pos(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_upstar_tos(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_m_magic_card_upstar_tos(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_upstar_tos(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_m_magic_card_upstar_tos(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_upstar_tos(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_upstar_tos(<<>>, 0, 0,
					  F@_1, _) ->
    #m_magic_card_upstar_tos{pos = F@_1}.

d_field_m_magic_card_upstar_tos_pos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_upstar_tos_pos(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_upstar_tos_pos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_upstar_tos(RestF, 0, 0,
					       NewFValue, TrUserData).

skip_varint_m_magic_card_upstar_tos(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_upstar_tos(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_m_magic_card_upstar_tos(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_tos(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_m_magic_card_upstar_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_upstar_tos(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_m_magic_card_upstar_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_upstar_tos(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_m_magic_card_upstar_tos(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_upstar_tos(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_m_magic_card_upstar_tos(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_tos(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_m_magic_card_upstar_tos(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_tos(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_m_magic_card_upstar_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_toc(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_magic_card_upstar_toc(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_upstar_toc_pos(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_magic_card_upstar_toc(<<>>, 0, 0,
					   F@_1, _) ->
    #m_magic_card_upstar_toc{pos = F@_1};
dfp_read_field_def_m_magic_card_upstar_toc(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_upstar_toc(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_m_magic_card_upstar_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_upstar_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_card_upstar_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_upstar_toc_pos(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_upstar_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_m_magic_card_upstar_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_upstar_toc(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_m_magic_card_upstar_toc(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_upstar_toc(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_upstar_toc(<<>>, 0, 0,
					  F@_1, _) ->
    #m_magic_card_upstar_toc{pos = F@_1}.

d_field_m_magic_card_upstar_toc_pos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_upstar_toc_pos(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_upstar_toc_pos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_upstar_toc(RestF, 0, 0,
					       NewFValue, TrUserData).

skip_varint_m_magic_card_upstar_toc(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_upstar_toc(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_m_magic_card_upstar_toc(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_m_magic_card_upstar_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_upstar_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_m_magic_card_upstar_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_upstar_toc(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_m_magic_card_upstar_toc(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_upstar_toc(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_m_magic_card_upstar_toc(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_m_magic_card_upstar_toc(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_upstar_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_m_magic_card_strength_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_tos(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_magic_card_strength_tos(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_strength_tos_pos(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_magic_card_strength_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_magic_card_strength_tos{pos = F@_1};
dfp_read_field_def_m_magic_card_strength_tos(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_strength_tos(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_magic_card_strength_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_strength_tos(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_magic_card_strength_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_strength_tos_pos(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_strength_tos(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_magic_card_strength_tos(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_strength_tos(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_magic_card_strength_tos(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_strength_tos(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_strength_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_magic_card_strength_tos{pos = F@_1}.

d_field_m_magic_card_strength_tos_pos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_strength_tos_pos(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_strength_tos_pos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_strength_tos(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_magic_card_strength_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_strength_tos(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_magic_card_strength_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_magic_card_strength_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_strength_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_magic_card_strength_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_strength_tos(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_magic_card_strength_tos(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_strength_tos(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_magic_card_strength_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_magic_card_strength_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_magic_card_strength_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_magic_card_strength_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_strength_toc_pos(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_magic_card_strength_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_magic_card_strength_toc{pos = F@_1};
dfp_read_field_def_m_magic_card_strength_toc(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_strength_toc(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_magic_card_strength_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_strength_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_magic_card_strength_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_strength_toc_pos(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_strength_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_magic_card_strength_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_strength_toc(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_magic_card_strength_toc(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_strength_toc(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_strength_toc(<<>>, 0, 0,
					    F@_1, _) ->
    #m_magic_card_strength_toc{pos = F@_1}.

d_field_m_magic_card_strength_toc_pos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_strength_toc_pos(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_strength_toc_pos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_strength_toc(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_magic_card_strength_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_strength_toc(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_magic_card_strength_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_magic_card_strength_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_strength_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_magic_card_strength_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_strength_toc(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_magic_card_strength_toc(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_strength_toc(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_magic_card_strength_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_magic_card_strength_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_strength_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_magic_card_decompose_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_tos(Bin, 0, 0,
						  id([], TrUserData),
						  TrUserData).

dfp_read_field_def_m_magic_card_decompose_tos(<<10,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_pfield_m_magic_card_decompose_tos_uid(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_magic_card_decompose_tos(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_decompose_tos_uid(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_magic_card_decompose_tos(<<>>, 0,
					      0, R1, TrUserData) ->
    #m_magic_card_decompose_tos{uid =
				    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_magic_card_decompose_tos(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_decompose_tos(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_magic_card_decompose_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_decompose_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_magic_card_decompose_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_magic_card_decompose_tos_uid(Rest, 0, 0,
						  F@_1, TrUserData);
      8 ->
	  d_field_m_magic_card_decompose_tos_uid(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_decompose_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_magic_card_decompose_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_decompose_tos(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_magic_card_decompose_tos(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_decompose_tos(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_decompose_tos(<<>>, 0, 0,
					     R1, TrUserData) ->
    #m_magic_card_decompose_tos{uid =
				    lists_reverse(R1, TrUserData)}.

d_field_m_magic_card_decompose_tos_uid(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_decompose_tos_uid(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_decompose_tos_uid(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_decompose_tos(RestF, 0,
						  0,
						  cons(NewFValue, Prev,
						       TrUserData),
						  TrUserData).

d_pfield_m_magic_card_decompose_tos_uid(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_m_magic_card_decompose_tos_uid(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_pfield_m_magic_card_decompose_tos_uid(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_magic_card_decompose_tos_uid(PackedBytes,
						      0, 0, E, TrUserData),
    dfp_read_field_def_m_magic_card_decompose_tos(Rest2, 0,
						  0, NewSeq, TrUserData).

d_packed_field_m_magic_card_decompose_tos_uid(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_magic_card_decompose_tos_uid(Rest,
						  N + 7, X bsl N + Acc, AccSeq,
						  TrUserData);
d_packed_field_m_magic_card_decompose_tos_uid(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_magic_card_decompose_tos_uid(RestF, 0,
						  0, [NewFValue | AccSeq],
						  TrUserData);
d_packed_field_m_magic_card_decompose_tos_uid(<<>>, 0,
					      0, AccSeq, _) ->
    AccSeq.

skip_varint_m_magic_card_decompose_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_decompose_tos(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_magic_card_decompose_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_magic_card_decompose_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_decompose_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_magic_card_decompose_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_decompose_tos(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_magic_card_decompose_tos(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_decompose_tos(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_magic_card_decompose_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_magic_card_decompose_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_magic_card_decompose_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_toc(Bin, 0, 0,
						  TrUserData).

dfp_read_field_def_m_magic_card_decompose_toc(<<>>, 0,
					      0, _) ->
    #m_magic_card_decompose_toc{};
dfp_read_field_def_m_magic_card_decompose_toc(Other, Z1,
					      Z2, TrUserData) ->
    dg_read_field_def_m_magic_card_decompose_toc(Other, Z1,
						 Z2, TrUserData).

dg_read_field_def_m_magic_card_decompose_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_decompose_toc(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
dg_read_field_def_m_magic_card_decompose_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_decompose_toc(Rest, 0, 0,
						 TrUserData);
      1 ->
	  skip_64_m_magic_card_decompose_toc(Rest, 0, 0,
					     TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_decompose_toc(Rest,
							   0, 0, TrUserData);
      3 ->
	  skip_group_m_magic_card_decompose_toc(Rest, Key bsr 3,
						0, TrUserData);
      5 ->
	  skip_32_m_magic_card_decompose_toc(Rest, 0, 0,
					     TrUserData)
    end;
dg_read_field_def_m_magic_card_decompose_toc(<<>>, 0, 0,
					     _) ->
    #m_magic_card_decompose_toc{}.

skip_varint_m_magic_card_decompose_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_decompose_toc(Rest, Z1, Z2,
					   TrUserData);
skip_varint_m_magic_card_decompose_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_toc(Rest, Z1,
						  Z2, TrUserData).

skip_length_delimited_m_magic_card_decompose_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_decompose_toc(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
skip_length_delimited_m_magic_card_decompose_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_decompose_toc(Rest2, 0,
						  0, TrUserData).

skip_group_m_magic_card_decompose_toc(Bin, FNum, Z2,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_decompose_toc(Rest, 0,
						  Z2, TrUserData).

skip_32_m_magic_card_decompose_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_toc(Rest, Z1,
						  Z2, TrUserData).

skip_64_m_magic_card_decompose_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_toc(Rest, Z1,
						  Z2, TrUserData).

decode_msg_m_magic_card_suite_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_suite_toc(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_magic_card_suite_toc(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_suite_toc_suite_id(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_magic_card_suite_toc(<<>>, 0, 0,
					  F@_1, _) ->
    #m_magic_card_suite_toc{suite_id = F@_1};
dfp_read_field_def_m_magic_card_suite_toc(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_suite_toc(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_m_magic_card_suite_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_suite_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_card_suite_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_suite_toc_suite_id(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_suite_toc(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_m_magic_card_suite_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_suite_toc(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_m_magic_card_suite_toc(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_suite_toc(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_suite_toc(<<>>, 0, 0,
					 F@_1, _) ->
    #m_magic_card_suite_toc{suite_id = F@_1}.

d_field_m_magic_card_suite_toc_suite_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_suite_toc_suite_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_suite_toc_suite_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_suite_toc(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_m_magic_card_suite_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_suite_toc(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_m_magic_card_suite_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_suite_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_m_magic_card_suite_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_suite_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_m_magic_card_suite_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_suite_toc(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_m_magic_card_suite_toc(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_suite_toc(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_m_magic_card_suite_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_suite_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_m_magic_card_suite_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_suite_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_m_magic_card_combine_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_tos(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_magic_card_combine_tos(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_combine_tos_r_item_id(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_m_magic_card_combine_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_magic_card_combine_tos{r_item_id = F@_1};
dfp_read_field_def_m_magic_card_combine_tos(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_combine_tos(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_m_magic_card_combine_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_combine_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_card_combine_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_combine_tos_r_item_id(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_combine_tos(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_m_magic_card_combine_tos(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_combine_tos(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_m_magic_card_combine_tos(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_combine_tos(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_combine_tos(<<>>, 0, 0,
					   F@_1, _) ->
    #m_magic_card_combine_tos{r_item_id = F@_1}.

d_field_m_magic_card_combine_tos_r_item_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_combine_tos_r_item_id(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_combine_tos_r_item_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_combine_tos(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_m_magic_card_combine_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_combine_tos(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_m_magic_card_combine_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_m_magic_card_combine_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_combine_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_m_magic_card_combine_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_combine_tos(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_m_magic_card_combine_tos(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_combine_tos(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_m_magic_card_combine_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_m_magic_card_combine_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

decode_msg_m_magic_card_combine_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_toc(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_m_magic_card_combine_toc(<<>>, 0, 0,
					    _) ->
    #m_magic_card_combine_toc{};
dfp_read_field_def_m_magic_card_combine_toc(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_m_magic_card_combine_toc(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_m_magic_card_combine_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_combine_toc(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_m_magic_card_combine_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_combine_toc(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_m_magic_card_combine_toc(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_combine_toc(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_m_magic_card_combine_toc(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_m_magic_card_combine_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_magic_card_combine_toc(<<>>, 0, 0,
					   _) ->
    #m_magic_card_combine_toc{}.

skip_varint_m_magic_card_combine_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_combine_toc(Rest, Z1, Z2,
					 TrUserData);
skip_varint_m_magic_card_combine_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_toc(Rest, Z1,
						Z2, TrUserData).

skip_length_delimited_m_magic_card_combine_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_combine_toc(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_m_magic_card_combine_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_combine_toc(Rest2, 0, 0,
						TrUserData).

skip_group_m_magic_card_combine_toc(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_combine_toc(Rest, 0, Z2,
						TrUserData).

skip_32_m_magic_card_combine_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_toc(Rest, Z1,
						Z2, TrUserData).

skip_64_m_magic_card_combine_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_combine_toc(Rest, Z1,
						Z2, TrUserData).

decode_msg_m_magic_card_get_set_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_tos(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_m_magic_card_get_set_tos(<<>>, 0, 0,
					    _) ->
    #m_magic_card_get_set_tos{};
dfp_read_field_def_m_magic_card_get_set_tos(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_m_magic_card_get_set_tos(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_m_magic_card_get_set_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_get_set_tos(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_m_magic_card_get_set_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_get_set_tos(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_m_magic_card_get_set_tos(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_get_set_tos(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_m_magic_card_get_set_tos(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_m_magic_card_get_set_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_magic_card_get_set_tos(<<>>, 0, 0,
					   _) ->
    #m_magic_card_get_set_tos{}.

skip_varint_m_magic_card_get_set_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_get_set_tos(Rest, Z1, Z2,
					 TrUserData);
skip_varint_m_magic_card_get_set_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_tos(Rest, Z1,
						Z2, TrUserData).

skip_length_delimited_m_magic_card_get_set_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_get_set_tos(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_m_magic_card_get_set_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_get_set_tos(Rest2, 0, 0,
						TrUserData).

skip_group_m_magic_card_get_set_tos(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_get_set_tos(Rest, 0, Z2,
						TrUserData).

skip_32_m_magic_card_get_set_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_tos(Rest, Z1,
						Z2, TrUserData).

skip_64_m_magic_card_get_set_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_tos(Rest, Z1,
						Z2, TrUserData).

decode_msg_m_magic_card_get_set_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_toc(Bin, 0, 0,
						id(undefined, TrUserData),
						id([], TrUserData), TrUserData).

dfp_read_field_def_m_magic_card_get_set_toc(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_magic_card_get_set_toc_auto(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_magic_card_get_set_toc(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_m_magic_card_get_set_toc_color(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_m_magic_card_get_set_toc(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_magic_card_get_set_toc_color(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_m_magic_card_get_set_toc(<<>>, 0, 0,
					    F@_1, R1, TrUserData) ->
    #m_magic_card_get_set_toc{auto = F@_1,
			      color = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_magic_card_get_set_toc(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_magic_card_get_set_toc(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_magic_card_get_set_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_get_set_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_m_magic_card_get_set_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_get_set_toc_auto(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_pfield_m_magic_card_get_set_toc_color(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      16 ->
	  d_field_m_magic_card_get_set_toc_color(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_get_set_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_m_magic_card_get_set_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_get_set_toc(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_m_magic_card_get_set_toc(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_magic_card_get_set_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_get_set_toc(<<>>, 0, 0,
					   F@_1, R1, TrUserData) ->
    #m_magic_card_get_set_toc{auto = F@_1,
			      color = lists_reverse(R1, TrUserData)}.

d_field_m_magic_card_get_set_toc_auto(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_get_set_toc_auto(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_magic_card_get_set_toc_auto(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_get_set_toc(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_m_magic_card_get_set_toc_color(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_get_set_toc_color(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_m_magic_card_get_set_toc_color(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_get_set_toc(RestF, 0, 0,
						F@_1,
						cons(NewFValue, Prev,
						     TrUserData),
						TrUserData).

d_pfield_m_magic_card_get_set_toc_color(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_magic_card_get_set_toc_color(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_pfield_m_magic_card_get_set_toc_color(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_magic_card_get_set_toc_color(PackedBytes,
						      0, 0, E, TrUserData),
    dfp_read_field_def_m_magic_card_get_set_toc(Rest2, 0, 0,
						F@_1, NewSeq, TrUserData).

d_packed_field_m_magic_card_get_set_toc_color(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_magic_card_get_set_toc_color(Rest,
						  N + 7, X bsl N + Acc, AccSeq,
						  TrUserData);
d_packed_field_m_magic_card_get_set_toc_color(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_magic_card_get_set_toc_color(RestF, 0,
						  0, [NewFValue | AccSeq],
						  TrUserData);
d_packed_field_m_magic_card_get_set_toc_color(<<>>, 0,
					      0, AccSeq, _) ->
    AccSeq.

skip_varint_m_magic_card_get_set_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_magic_card_get_set_toc(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_m_magic_card_get_set_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_magic_card_get_set_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_get_set_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_m_magic_card_get_set_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_get_set_toc(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_m_magic_card_get_set_toc(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_get_set_toc(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_m_magic_card_get_set_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_m_magic_card_get_set_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_get_set_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_m_magic_card_decompose_set_tos(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_tos(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      id([], TrUserData),
						      TrUserData).

dfp_read_field_def_m_magic_card_decompose_set_tos(<<8,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_m_magic_card_decompose_set_tos_auto(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_magic_card_decompose_set_tos(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_pfield_m_magic_card_decompose_set_tos_color(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_magic_card_decompose_set_tos(<<16,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    d_field_m_magic_card_decompose_set_tos_color(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_magic_card_decompose_set_tos(<<>>,
						  0, 0, F@_1, R1, TrUserData) ->
    #m_magic_card_decompose_set_tos{auto = F@_1,
				    color = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_magic_card_decompose_set_tos(Other,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    dg_read_field_def_m_magic_card_decompose_set_tos(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

dg_read_field_def_m_magic_card_decompose_set_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_decompose_set_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
dg_read_field_def_m_magic_card_decompose_set_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_card_decompose_set_tos_auto(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      18 ->
	  d_pfield_m_magic_card_decompose_set_tos_color(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      16 ->
	  d_field_m_magic_card_decompose_set_tos_color(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_decompose_set_tos(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    1 ->
		skip_64_m_magic_card_decompose_set_tos(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_decompose_set_tos(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    3 ->
		skip_group_m_magic_card_decompose_set_tos(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, TrUserData);
	    5 ->
		skip_32_m_magic_card_decompose_set_tos(Rest, 0, 0, F@_1,
						       F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_decompose_set_tos(<<>>,
						 0, 0, F@_1, R1, TrUserData) ->
    #m_magic_card_decompose_set_tos{auto = F@_1,
				    color = lists_reverse(R1, TrUserData)}.

d_field_m_magic_card_decompose_set_tos_auto(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_decompose_set_tos_auto(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
d_field_m_magic_card_decompose_set_tos_auto(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_decompose_set_tos(RestF,
						      0, 0, NewFValue, F@_2,
						      TrUserData).

d_field_m_magic_card_decompose_set_tos_color(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_decompose_set_tos_color(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
d_field_m_magic_card_decompose_set_tos_color(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_decompose_set_tos(RestF,
						      0, 0, F@_1,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

d_pfield_m_magic_card_decompose_set_tos_color(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_magic_card_decompose_set_tos_color(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
d_pfield_m_magic_card_decompose_set_tos_color(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_magic_card_decompose_set_tos_color(PackedBytes,
							    0, 0, E,
							    TrUserData),
    dfp_read_field_def_m_magic_card_decompose_set_tos(Rest2,
						      0, 0, F@_1, NewSeq,
						      TrUserData).

d_packed_field_m_magic_card_decompose_set_tos_color(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_magic_card_decompose_set_tos_color(Rest,
							N + 7, X bsl N + Acc,
							AccSeq, TrUserData);
d_packed_field_m_magic_card_decompose_set_tos_color(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, AccSeq,
						    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_magic_card_decompose_set_tos_color(RestF,
							0, 0,
							[NewFValue | AccSeq],
							TrUserData);
d_packed_field_m_magic_card_decompose_set_tos_color(<<>>,
						    0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_m_magic_card_decompose_set_tos(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_magic_card_decompose_set_tos(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
skip_varint_m_magic_card_decompose_set_tos(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_tos(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_length_delimited_m_magic_card_decompose_set_tos(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_decompose_set_tos(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
skip_length_delimited_m_magic_card_decompose_set_tos(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_decompose_set_tos(Rest2,
						      0, 0, F@_1, F@_2,
						      TrUserData).

skip_group_m_magic_card_decompose_set_tos(Bin, FNum, Z2,
					  F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_decompose_set_tos(Rest,
						      0, Z2, F@_1, F@_2,
						      TrUserData).

skip_32_m_magic_card_decompose_set_tos(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_tos(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

skip_64_m_magic_card_decompose_set_tos(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_tos(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

decode_msg_m_magic_card_decompose_set_toc(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_toc(Bin,
						      0, 0, TrUserData).

dfp_read_field_def_m_magic_card_decompose_set_toc(<<>>,
						  0, 0, _) ->
    #m_magic_card_decompose_set_toc{};
dfp_read_field_def_m_magic_card_decompose_set_toc(Other,
						  Z1, Z2, TrUserData) ->
    dg_read_field_def_m_magic_card_decompose_set_toc(Other,
						     Z1, Z2, TrUserData).

dg_read_field_def_m_magic_card_decompose_set_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_decompose_set_toc(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
dg_read_field_def_m_magic_card_decompose_set_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_decompose_set_toc(Rest, 0, 0,
						     TrUserData);
      1 ->
	  skip_64_m_magic_card_decompose_set_toc(Rest, 0, 0,
						 TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_decompose_set_toc(Rest,
							       0, 0,
							       TrUserData);
      3 ->
	  skip_group_m_magic_card_decompose_set_toc(Rest,
						    Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_m_magic_card_decompose_set_toc(Rest, 0, 0,
						 TrUserData)
    end;
dg_read_field_def_m_magic_card_decompose_set_toc(<<>>,
						 0, 0, _) ->
    #m_magic_card_decompose_set_toc{}.

skip_varint_m_magic_card_decompose_set_toc(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_decompose_set_toc(Rest, Z1, Z2,
					       TrUserData);
skip_varint_m_magic_card_decompose_set_toc(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_toc(Rest,
						      Z1, Z2, TrUserData).

skip_length_delimited_m_magic_card_decompose_set_toc(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_decompose_set_toc(Rest,
							 N + 7, X bsl N + Acc,
							 TrUserData);
skip_length_delimited_m_magic_card_decompose_set_toc(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_decompose_set_toc(Rest2,
						      0, 0, TrUserData).

skip_group_m_magic_card_decompose_set_toc(Bin, FNum, Z2,
					  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_decompose_set_toc(Rest,
						      0, Z2, TrUserData).

skip_32_m_magic_card_decompose_set_toc(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_toc(Rest,
						      Z1, Z2, TrUserData).

skip_64_m_magic_card_decompose_set_toc(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_decompose_set_toc(Rest,
						      Z1, Z2, TrUserData).

decode_msg_m_magic_card_bag_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_tos(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_m_magic_card_bag_info_tos(<<>>, 0, 0,
					     _) ->
    #m_magic_card_bag_info_tos{};
dfp_read_field_def_m_magic_card_bag_info_tos(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_m_magic_card_bag_info_tos(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_m_magic_card_bag_info_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_bag_info_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_m_magic_card_bag_info_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_magic_card_bag_info_tos(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_m_magic_card_bag_info_tos(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_m_magic_card_bag_info_tos(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_m_magic_card_bag_info_tos(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_m_magic_card_bag_info_tos(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_m_magic_card_bag_info_tos(<<>>, 0, 0,
					    _) ->
    #m_magic_card_bag_info_tos{}.

skip_varint_m_magic_card_bag_info_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_m_magic_card_bag_info_tos(Rest, Z1, Z2,
					  TrUserData);
skip_varint_m_magic_card_bag_info_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_tos(Rest, Z1,
						 Z2, TrUserData).

skip_length_delimited_m_magic_card_bag_info_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_bag_info_tos(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_m_magic_card_bag_info_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_bag_info_tos(Rest2, 0,
						 0, TrUserData).

skip_group_m_magic_card_bag_info_tos(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_bag_info_tos(Rest, 0,
						 Z2, TrUserData).

skip_32_m_magic_card_bag_info_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_tos(Rest, Z1,
						 Z2, TrUserData).

skip_64_m_magic_card_bag_info_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_tos(Rest, Z1,
						 Z2, TrUserData).

decode_msg_m_magic_card_bag_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_toc(Bin, 0, 0,
						 'tr_decode_init_default_m_magic_card_bag_info_toc.items'([],
													  TrUserData),
						 TrUserData).

dfp_read_field_def_m_magic_card_bag_info_toc(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_bag_info_toc_items(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_magic_card_bag_info_toc(<<>>, 0, 0,
					     R1, TrUserData) ->
    #m_magic_card_bag_info_toc{items =
				   'tr_decode_repeated_finalize_m_magic_card_bag_info_toc.items'(R1,
												 TrUserData)};
dfp_read_field_def_m_magic_card_bag_info_toc(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_bag_info_toc(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_magic_card_bag_info_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_bag_info_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_magic_card_bag_info_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_magic_card_bag_info_toc_items(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_bag_info_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_magic_card_bag_info_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_bag_info_toc(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_magic_card_bag_info_toc(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_bag_info_toc(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_bag_info_toc(<<>>, 0, 0,
					    R1, TrUserData) ->
    #m_magic_card_bag_info_toc{items =
				   'tr_decode_repeated_finalize_m_magic_card_bag_info_toc.items'(R1,
												 TrUserData)}.

d_field_m_magic_card_bag_info_toc_items(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_bag_info_toc_items(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_bag_info_toc_items(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_magic_card_bag_info_toc(RestF, 0,
						 0,
						 'tr_decode_repeated_add_elem_m_magic_card_bag_info_toc.items'(NewFValue,
													       Prev,
													       TrUserData),
						 TrUserData).

skip_varint_m_magic_card_bag_info_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_bag_info_toc(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_magic_card_bag_info_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_magic_card_bag_info_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_bag_info_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_magic_card_bag_info_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_bag_info_toc(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_magic_card_bag_info_toc(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_bag_info_toc(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_magic_card_bag_info_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_magic_card_bag_info_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_bag_info_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_magic_card_putoff_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_card_putoff_toc(Bin, 0, 0,
					       id([], TrUserData), TrUserData).

dfp_read_field_def_m_magic_card_putoff_toc(<<10,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_pfield_m_magic_card_putoff_toc_pos(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_m_magic_card_putoff_toc(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_card_putoff_toc_pos(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_magic_card_putoff_toc(<<>>, 0, 0,
					   R1, TrUserData) ->
    #m_magic_card_putoff_toc{pos =
				 lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_magic_card_putoff_toc(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_magic_card_putoff_toc(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_m_magic_card_putoff_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_card_putoff_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_card_putoff_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_magic_card_putoff_toc_pos(Rest, 0, 0, F@_1,
					       TrUserData);
      8 ->
	  d_field_m_magic_card_putoff_toc_pos(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_card_putoff_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_m_magic_card_putoff_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_m_magic_card_putoff_toc(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_m_magic_card_putoff_toc(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_m_magic_card_putoff_toc(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_m_magic_card_putoff_toc(<<>>, 0, 0,
					  R1, TrUserData) ->
    #m_magic_card_putoff_toc{pos =
				 lists_reverse(R1, TrUserData)}.

d_field_m_magic_card_putoff_toc_pos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_card_putoff_toc_pos(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_card_putoff_toc_pos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_card_putoff_toc(RestF, 0, 0,
					       cons(NewFValue, Prev,
						    TrUserData),
					       TrUserData).

d_pfield_m_magic_card_putoff_toc_pos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_m_magic_card_putoff_toc_pos(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_pfield_m_magic_card_putoff_toc_pos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_magic_card_putoff_toc_pos(PackedBytes,
						   0, 0, E, TrUserData),
    dfp_read_field_def_m_magic_card_putoff_toc(Rest2, 0, 0,
					       NewSeq, TrUserData).

d_packed_field_m_magic_card_putoff_toc_pos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_magic_card_putoff_toc_pos(Rest, N + 7,
					       X bsl N + Acc, AccSeq,
					       TrUserData);
d_packed_field_m_magic_card_putoff_toc_pos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_magic_card_putoff_toc_pos(RestF, 0, 0,
					       [NewFValue | AccSeq],
					       TrUserData);
d_packed_field_m_magic_card_putoff_toc_pos(<<>>, 0, 0,
					   AccSeq, _) ->
    AccSeq.

skip_varint_m_magic_card_putoff_toc(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_card_putoff_toc(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_m_magic_card_putoff_toc(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_putoff_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_m_magic_card_putoff_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_card_putoff_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_m_magic_card_putoff_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_card_putoff_toc(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_m_magic_card_putoff_toc(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_card_putoff_toc(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_m_magic_card_putoff_toc(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_putoff_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_m_magic_card_putoff_toc(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_card_putoff_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_m_magic_power_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_magic_power_toc(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_magic_power_toc(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_magic_power_toc_power(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_magic_power_toc(<<>>, 0, 0, F@_1,
				     _) ->
    #m_magic_power_toc{power = F@_1};
dfp_read_field_def_m_magic_power_toc(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_m_magic_power_toc(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_m_magic_power_toc(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_magic_power_toc(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_magic_power_toc(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_magic_power_toc_power(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_magic_power_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_m_magic_power_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_magic_power_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_m_magic_power_toc(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_m_magic_power_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_magic_power_toc(<<>>, 0, 0, F@_1,
				    _) ->
    #m_magic_power_toc{power = F@_1}.

d_field_m_magic_power_toc_power(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_magic_power_toc_power(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_magic_power_toc_power(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_magic_power_toc(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_m_magic_power_toc(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_magic_power_toc(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_m_magic_power_toc(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_power_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_m_magic_power_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_magic_power_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_magic_power_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_magic_power_toc(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_m_magic_power_toc(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_magic_power_toc(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_m_magic_power_toc(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_power_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_m_magic_power_toc(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_magic_power_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_p_role_base(Bin, TrUserData) ->
    dfp_read_field_def_p_role_base(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   'tr_decode_init_default_p_role_base.figure'([],
									       TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_role_base(<<9, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_career(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_gender(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_level(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<48, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_viplv(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<56, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_power(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<66, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_figure(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<72, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_guild(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<82, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_gname(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<88, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_charm(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<96, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_wake(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<104, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_gpost(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<112, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_marry(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<122, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_mname(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<128, 1, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_mtype(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<138, 1, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_icon(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<144, 1, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_suid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<152, 1, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_zoneid(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<161, 1, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			       TrUserData) ->
    d_field_p_role_base_team(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, TrUserData);
dfp_read_field_def_p_role_base(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, R1, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, TrUserData) ->
    #p_role_base{id = F@_1, name = F@_2, career = F@_3,
		 gender = F@_4, level = F@_5, viplv = F@_6, power = F@_7,
		 figure =
		     'tr_decode_repeated_finalize_p_role_base.figure'(R1,
								      TrUserData),
		 guild = F@_9, gname = F@_10, charm = F@_11,
		 wake = F@_12, gpost = F@_13, marry = F@_14,
		 mname = F@_15, mtype = F@_16, icon = F@_17,
		 suid = F@_18, zoneid = F@_19, team = F@_20};
dfp_read_field_def_p_role_base(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			       F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    dg_read_field_def_p_role_base(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  F@_16, F@_17, F@_18, F@_19, F@_20,
				  TrUserData).

dg_read_field_def_p_role_base(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_role_base(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
				  F@_19, F@_20, TrUserData);
dg_read_field_def_p_role_base(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_role_base_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, TrUserData);
      18 ->
	  d_field_p_role_base_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, TrUserData);
      24 ->
	  d_field_p_role_base_career(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, TrUserData);
      32 ->
	  d_field_p_role_base_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, TrUserData);
      40 ->
	  d_field_p_role_base_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      48 ->
	  d_field_p_role_base_viplv(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      56 ->
	  d_field_p_role_base_power(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      66 ->
	  d_field_p_role_base_figure(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, TrUserData);
      72 ->
	  d_field_p_role_base_guild(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      82 ->
	  d_field_p_role_base_gname(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      88 ->
	  d_field_p_role_base_charm(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      96 ->
	  d_field_p_role_base_wake(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, TrUserData);
      104 ->
	  d_field_p_role_base_gpost(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      112 ->
	  d_field_p_role_base_marry(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      122 ->
	  d_field_p_role_base_mname(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      128 ->
	  d_field_p_role_base_mtype(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				    F@_17, F@_18, F@_19, F@_20, TrUserData);
      138 ->
	  d_field_p_role_base_icon(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, TrUserData);
      144 ->
	  d_field_p_role_base_suid(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, TrUserData);
      152 ->
	  d_field_p_role_base_zoneid(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, TrUserData);
      161 ->
	  d_field_p_role_base_team(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_role_base(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, F@_16, F@_17, F@_18, F@_19,
					F@_20, TrUserData);
	    1 ->
		skip_64_p_role_base(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				    F@_18, F@_19, F@_20, TrUserData);
	    2 ->
		skip_length_delimited_p_role_base(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  F@_11, F@_12, F@_13, F@_14,
						  F@_15, F@_16, F@_17, F@_18,
						  F@_19, F@_20, TrUserData);
	    3 ->
		skip_group_p_role_base(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				       F@_16, F@_17, F@_18, F@_19, F@_20,
				       TrUserData);
	    5 ->
		skip_32_p_role_base(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				    F@_18, F@_19, F@_20, TrUserData)
	  end
    end;
dg_read_field_def_p_role_base(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, R1, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, TrUserData) ->
    #p_role_base{id = F@_1, name = F@_2, career = F@_3,
		 gender = F@_4, level = F@_5, viplv = F@_6, power = F@_7,
		 figure =
		     'tr_decode_repeated_finalize_p_role_base.figure'(R1,
								      TrUserData),
		 guild = F@_9, gname = F@_10, charm = F@_11,
		 wake = F@_12, gpost = F@_13, marry = F@_14,
		 mname = F@_15, mtype = F@_16, icon = F@_17,
		 suid = F@_18, zoneid = F@_19, team = F@_20}.

d_field_p_role_base_id(<<Value:64/little, Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    dfp_read_field_def_p_role_base(Rest, Z1, Z2,
				   id(Value, TrUserData), F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				   F@_18, F@_19, F@_20, TrUserData).

d_field_p_role_base_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			 F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				   F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				   F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
				   F@_20, TrUserData).

d_field_p_role_base_career(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_career(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_career(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_gender(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_gender(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_gender(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_level(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_level(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_level(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_viplv(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_viplv(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_viplv(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_power(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_power(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_power(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_figure(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_figure(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_figure(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,p_aspect>'(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7,
				   'tr_decode_repeated_add_elem_p_role_base.figure'(NewFValue,
										    Prev,
										    TrUserData),
				   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_guild(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_guild(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_guild(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  _, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   NewFValue, F@_10, F@_11, F@_12, F@_13, F@_14,
				   F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_gname(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_gname(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_gname(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, _, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   NewFValue, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_charm(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_charm(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_charm(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, NewFValue, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_wake(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_wake(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_wake(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, NewFValue, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_gpost(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_gpost(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_gpost(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, NewFValue, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_marry(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_marry(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_marry(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, NewFValue, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_mname(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_mname(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_mname(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, NewFValue,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_mtype(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_mtype(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			      F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_mtype(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _,
			  F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   NewFValue, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_icon(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_icon(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_icon(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 Prev, F@_18, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_icon(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16,
				   if Prev == undefined -> NewFValue;
				      true ->
					  merge_msg_p_icon(Prev, NewFValue,
							   TrUserData)
				   end,
				   F@_18, F@_19, F@_20, TrUserData).

d_field_p_role_base_suid(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_suid(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_suid(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, _, F@_19, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, NewFValue, F@_19, F@_20,
				   TrUserData).

d_field_p_role_base_zoneid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData)
    when N < 57 ->
    d_field_p_role_base_zoneid(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, TrUserData);
d_field_p_role_base_zoneid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, _, F@_20, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, NewFValue, F@_20,
				   TrUserData).

d_field_p_role_base_team(<<Value:64/little,
			   Rest/binary>>,
			 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, _, TrUserData) ->
    dfp_read_field_def_p_role_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19,
				   id(Value, TrUserData), TrUserData).

skip_varint_p_role_base(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    skip_varint_p_role_base(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, TrUserData);
skip_varint_p_role_base(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, TrUserData) ->
    dfp_read_field_def_p_role_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

skip_length_delimited_p_role_base(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
				  F@_20, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_role_base(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				      F@_17, F@_18, F@_19, F@_20, TrUserData);
skip_length_delimited_p_role_base(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
				  F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
				  F@_20, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_role_base(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

skip_group_p_role_base(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_role_base(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

skip_32_p_role_base(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		    F@_19, F@_20, TrUserData) ->
    dfp_read_field_def_p_role_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

skip_64_p_role_base(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		    F@_19, F@_20, TrUserData) ->
    dfp_read_field_def_p_role_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20,
				   TrUserData).

decode_msg_p_aspect(Bin, TrUserData) ->
    dfp_read_field_def_p_aspect(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_aspect(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_aspect_model(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_p_aspect(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_aspect_skin(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_p_aspect(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_aspect_show(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_p_aspect(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #p_aspect{model = F@_1, skin = F@_2, show = F@_3};
dfp_read_field_def_p_aspect(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_p_aspect(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_p_aspect(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_aspect(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_p_aspect(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_aspect_model(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      16 ->
	  d_field_p_aspect_skin(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      24 ->
	  d_field_p_aspect_show(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_aspect(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_p_aspect(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_p_aspect(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_p_aspect(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_p_aspect(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_p_aspect(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #p_aspect{model = F@_1, skin = F@_2, show = F@_3}.

d_field_p_aspect_model(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_aspect_model(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_p_aspect_model(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_aspect(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_p_aspect_skin(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_aspect_skin(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_p_aspect_skin(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_aspect(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_p_aspect_show(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_aspect_show(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_p_aspect_show(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_aspect(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_p_aspect(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_aspect(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_p_aspect(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_aspect(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_p_aspect(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_aspect(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_p_aspect(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_aspect(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_p_aspect(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_aspect(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_p_aspect(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_aspect(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_p_aspect(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_aspect(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_p_attr(Bin, TrUserData) ->
    dfp_read_field_def_p_attr(Bin, 0, 0, id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData),
			      id(0, TrUserData), id(0, TrUserData), TrUserData).

dfp_read_field_def_p_attr(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hp(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		      F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
		      F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
		      F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
		      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
		      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
		      F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hpmax(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
			 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			 F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			 F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			 F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_speed(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
			 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			 F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			 F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			 F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_att(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
		       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
		       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
		       F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
		       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
		       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_def(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
		       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
		       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
		       F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
		       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
		       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<48, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_wreck(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
			 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			 F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			 F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			 F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<56, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hit(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
		       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
		       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
		       F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
		       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
		       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_miss(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<72, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_crit(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<80, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_tough(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
			 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			 F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			 F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			 F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<88, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_holy_att(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<96, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_holy_def(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<104, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_abs_att(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<112, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_abs_miss(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<120, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_dmg_amp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<128, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_dmg_red(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<136, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hit_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<144, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_miss_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<152, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_armor_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<160, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_armor_str(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<168, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_block_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<176, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_block_str(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<184, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_crit_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<192, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_crit_res(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<200, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_heart_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<208, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_heart_res(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<216, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_crit_dmg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<224, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_crit_red(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<232, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_heart_dmg(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<240, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_heart_red(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<248, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_skill_amp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<128, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_skill_red(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<136, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_thump_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<144, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_weak_pro(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<152, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_skill_att_power(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				   F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				   F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				   F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				   F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<160, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_skill_def_power(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				   F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				   F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				   F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				   F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<168, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hew_amp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<176, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_block_red(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<184, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_boss_amp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<192, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_creep_amp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<200, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_pvp_red(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<208, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_pvp_armor_pro(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				 F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				 F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				 F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				 F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				 F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				 F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				 F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<216, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_pvp_armor_str(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				 F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				 F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				 F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				 F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				 F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				 F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				 F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<224, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_exp_per(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<232, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_gold_drop(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<240, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_item_drop(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<248, 2, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_equip_def(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<128, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_equip_hpmax(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			       F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			       F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			       F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			       F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			       TrUserData);
dfp_read_field_def_p_attr(<<136, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_equip_att(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			     F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			     F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			     F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			     F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<144, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_power(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
			 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			 F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			 F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			 F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<152, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_all_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<160, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hpmax_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<168, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_att_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<176, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_def_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<184, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_wreck_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<192, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hit_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<200, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_miss_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<208, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_crit_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			   F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			   F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			   F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<216, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_tough_gp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<224, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_holy_att_gp(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			       F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			       F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			       F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			       F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			       TrUserData);
dfp_read_field_def_p_attr(<<232, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_holy_def_gp(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			       F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			       F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			       F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			       F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			       F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			       TrUserData);
dfp_read_field_def_p_attr(<<240, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_hpmax_bp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<248, 3, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_att_bp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<128, 4, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_def_bp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<136, 4, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			  F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			  F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			  F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    d_field_p_attr_wreck_bp(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			    F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			    F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			    F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			    F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			    F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			    F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
dfp_read_field_def_p_attr(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			  F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			  F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			  F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			  F@_61, F@_62, F@_63, F@_64, F@_65, _) ->
    #p_attr{hp = F@_1, hpmax = F@_2, speed = F@_3,
	    att = F@_4, def = F@_5, wreck = F@_6, hit = F@_7,
	    miss = F@_8, crit = F@_9, tough = F@_10,
	    holy_att = F@_11, holy_def = F@_12, abs_att = F@_13,
	    abs_miss = F@_14, dmg_amp = F@_15, dmg_red = F@_16,
	    hit_pro = F@_17, miss_pro = F@_18, armor_pro = F@_19,
	    armor_str = F@_20, block_pro = F@_21, block_str = F@_22,
	    crit_pro = F@_23, crit_res = F@_24, heart_pro = F@_25,
	    heart_res = F@_26, crit_dmg = F@_27, crit_red = F@_28,
	    heart_dmg = F@_29, heart_red = F@_30, skill_amp = F@_31,
	    skill_red = F@_32, thump_pro = F@_33, weak_pro = F@_34,
	    skill_att_power = F@_35, skill_def_power = F@_36,
	    hew_amp = F@_37, block_red = F@_38, boss_amp = F@_39,
	    creep_amp = F@_40, pvp_red = F@_41,
	    pvp_armor_pro = F@_42, pvp_armor_str = F@_43,
	    exp_per = F@_44, gold_drop = F@_45, item_drop = F@_46,
	    equip_def = F@_47, equip_hpmax = F@_48,
	    equip_att = F@_49, power = F@_50, all_gp = F@_51,
	    hpmax_gp = F@_52, att_gp = F@_53, def_gp = F@_54,
	    wreck_gp = F@_55, hit_gp = F@_56, miss_gp = F@_57,
	    crit_gp = F@_58, tough_gp = F@_59, holy_att_gp = F@_60,
	    holy_def_gp = F@_61, hpmax_bp = F@_62, att_bp = F@_63,
	    def_bp = F@_64, wreck_bp = F@_65};
dfp_read_field_def_p_attr(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			  TrUserData) ->
    dg_read_field_def_p_attr(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			     F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			     F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			     F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			     F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			     F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			     F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			     TrUserData).

dg_read_field_def_p_attr(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_attr(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
dg_read_field_def_p_attr(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_attr_hp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			    F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			    F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			    F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			    F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			    F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			    F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			    F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			    F@_62, F@_63, F@_64, F@_65, TrUserData);
      16 ->
	  d_field_p_attr_hpmax(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			       F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			       F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
      24 ->
	  d_field_p_attr_speed(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			       F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			       F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
      32 ->
	  d_field_p_attr_att(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			     F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			     F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			     F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			     F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			     F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			     F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			     F@_62, F@_63, F@_64, F@_65, TrUserData);
      40 ->
	  d_field_p_attr_def(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			     F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			     F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			     F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			     F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			     F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			     F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			     F@_62, F@_63, F@_64, F@_65, TrUserData);
      48 ->
	  d_field_p_attr_wreck(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			       F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			       F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
      56 ->
	  d_field_p_attr_hit(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			     F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			     F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			     F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			     F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			     F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			     F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			     F@_62, F@_63, F@_64, F@_65, TrUserData);
      64 ->
	  d_field_p_attr_miss(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			      F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			      F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			      F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			      F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			      F@_62, F@_63, F@_64, F@_65, TrUserData);
      72 ->
	  d_field_p_attr_crit(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			      F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			      F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			      F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			      F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			      F@_62, F@_63, F@_64, F@_65, TrUserData);
      80 ->
	  d_field_p_attr_tough(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			       F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			       F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
      88 ->
	  d_field_p_attr_holy_att(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      96 ->
	  d_field_p_attr_holy_def(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      104 ->
	  d_field_p_attr_abs_att(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      112 ->
	  d_field_p_attr_abs_miss(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      120 ->
	  d_field_p_attr_dmg_amp(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      128 ->
	  d_field_p_attr_dmg_red(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      136 ->
	  d_field_p_attr_hit_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      144 ->
	  d_field_p_attr_miss_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      152 ->
	  d_field_p_attr_armor_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      160 ->
	  d_field_p_attr_armor_str(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      168 ->
	  d_field_p_attr_block_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      176 ->
	  d_field_p_attr_block_str(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      184 ->
	  d_field_p_attr_crit_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      192 ->
	  d_field_p_attr_crit_res(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      200 ->
	  d_field_p_attr_heart_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      208 ->
	  d_field_p_attr_heart_res(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      216 ->
	  d_field_p_attr_crit_dmg(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      224 ->
	  d_field_p_attr_crit_red(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      232 ->
	  d_field_p_attr_heart_dmg(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      240 ->
	  d_field_p_attr_heart_red(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      248 ->
	  d_field_p_attr_skill_amp(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      256 ->
	  d_field_p_attr_skill_red(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      264 ->
	  d_field_p_attr_thump_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      272 ->
	  d_field_p_attr_weak_pro(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      280 ->
	  d_field_p_attr_skill_att_power(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, F@_15, F@_16, F@_17, F@_18,
					 F@_19, F@_20, F@_21, F@_22, F@_23,
					 F@_24, F@_25, F@_26, F@_27, F@_28,
					 F@_29, F@_30, F@_31, F@_32, F@_33,
					 F@_34, F@_35, F@_36, F@_37, F@_38,
					 F@_39, F@_40, F@_41, F@_42, F@_43,
					 F@_44, F@_45, F@_46, F@_47, F@_48,
					 F@_49, F@_50, F@_51, F@_52, F@_53,
					 F@_54, F@_55, F@_56, F@_57, F@_58,
					 F@_59, F@_60, F@_61, F@_62, F@_63,
					 F@_64, F@_65, TrUserData);
      288 ->
	  d_field_p_attr_skill_def_power(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, F@_12, F@_13,
					 F@_14, F@_15, F@_16, F@_17, F@_18,
					 F@_19, F@_20, F@_21, F@_22, F@_23,
					 F@_24, F@_25, F@_26, F@_27, F@_28,
					 F@_29, F@_30, F@_31, F@_32, F@_33,
					 F@_34, F@_35, F@_36, F@_37, F@_38,
					 F@_39, F@_40, F@_41, F@_42, F@_43,
					 F@_44, F@_45, F@_46, F@_47, F@_48,
					 F@_49, F@_50, F@_51, F@_52, F@_53,
					 F@_54, F@_55, F@_56, F@_57, F@_58,
					 F@_59, F@_60, F@_61, F@_62, F@_63,
					 F@_64, F@_65, TrUserData);
      296 ->
	  d_field_p_attr_hew_amp(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      304 ->
	  d_field_p_attr_block_red(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      312 ->
	  d_field_p_attr_boss_amp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      320 ->
	  d_field_p_attr_creep_amp(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      328 ->
	  d_field_p_attr_pvp_red(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      336 ->
	  d_field_p_attr_pvp_armor_pro(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				       F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				       F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				       F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				       F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				       F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				       F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				       F@_64, F@_65, TrUserData);
      344 ->
	  d_field_p_attr_pvp_armor_str(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				       F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				       F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				       F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				       F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				       F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				       F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				       F@_64, F@_65, TrUserData);
      352 ->
	  d_field_p_attr_exp_per(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      360 ->
	  d_field_p_attr_gold_drop(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      368 ->
	  d_field_p_attr_item_drop(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      376 ->
	  d_field_p_attr_equip_def(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      384 ->
	  d_field_p_attr_equip_hpmax(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				     F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				     F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				     F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				     F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				     F@_65, TrUserData);
      392 ->
	  d_field_p_attr_equip_att(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				   F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				   F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				   F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				   F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				   F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				   F@_65, TrUserData);
      400 ->
	  d_field_p_attr_power(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			       F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			       F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			       F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
      408 ->
	  d_field_p_attr_all_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
				F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
				F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				TrUserData);
      416 ->
	  d_field_p_attr_hpmax_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      424 ->
	  d_field_p_attr_att_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
				F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
				F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				TrUserData);
      432 ->
	  d_field_p_attr_def_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
				F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
				F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				TrUserData);
      440 ->
	  d_field_p_attr_wreck_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      448 ->
	  d_field_p_attr_hit_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
				F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
				F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				TrUserData);
      456 ->
	  d_field_p_attr_miss_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      464 ->
	  d_field_p_attr_crit_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				 F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				 F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				 F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				 F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				 F@_65, TrUserData);
      472 ->
	  d_field_p_attr_tough_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      480 ->
	  d_field_p_attr_holy_att_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				     F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				     F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				     F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				     F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				     F@_65, TrUserData);
      488 ->
	  d_field_p_attr_holy_def_gp(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				     F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				     F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				     F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				     F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				     F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				     F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				     F@_65, TrUserData);
      496 ->
	  d_field_p_attr_hpmax_bp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      504 ->
	  d_field_p_attr_att_bp(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
				F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
				F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				TrUserData);
      512 ->
	  d_field_p_attr_def_bp(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
				F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
				F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				TrUserData);
      520 ->
	  d_field_p_attr_wreck_bp(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_attr(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
				   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
				   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
				   F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
				   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
				   F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
				   F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
				   F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
				   TrUserData);
	    1 ->
		skip_64_p_attr(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			       F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			       F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			       F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			       F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			       F@_62, F@_63, F@_64, F@_65, TrUserData);
	    2 ->
		skip_length_delimited_p_attr(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, F@_12, F@_13,
					     F@_14, F@_15, F@_16, F@_17, F@_18,
					     F@_19, F@_20, F@_21, F@_22, F@_23,
					     F@_24, F@_25, F@_26, F@_27, F@_28,
					     F@_29, F@_30, F@_31, F@_32, F@_33,
					     F@_34, F@_35, F@_36, F@_37, F@_38,
					     F@_39, F@_40, F@_41, F@_42, F@_43,
					     F@_44, F@_45, F@_46, F@_47, F@_48,
					     F@_49, F@_50, F@_51, F@_52, F@_53,
					     F@_54, F@_55, F@_56, F@_57, F@_58,
					     F@_59, F@_60, F@_61, F@_62, F@_63,
					     F@_64, F@_65, TrUserData);
	    3 ->
		skip_group_p_attr(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
				  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
				  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
				  F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
				  F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
				  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
				  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
				  F@_65, TrUserData);
	    5 ->
		skip_32_p_attr(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			       F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
			       F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47,
			       F@_48, F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
			       F@_55, F@_56, F@_57, F@_58, F@_59, F@_60, F@_61,
			       F@_62, F@_63, F@_64, F@_65, TrUserData)
	  end
    end;
dg_read_field_def_p_attr(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
			 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			 F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			 F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			 F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, _) ->
    #p_attr{hp = F@_1, hpmax = F@_2, speed = F@_3,
	    att = F@_4, def = F@_5, wreck = F@_6, hit = F@_7,
	    miss = F@_8, crit = F@_9, tough = F@_10,
	    holy_att = F@_11, holy_def = F@_12, abs_att = F@_13,
	    abs_miss = F@_14, dmg_amp = F@_15, dmg_red = F@_16,
	    hit_pro = F@_17, miss_pro = F@_18, armor_pro = F@_19,
	    armor_str = F@_20, block_pro = F@_21, block_str = F@_22,
	    crit_pro = F@_23, crit_res = F@_24, heart_pro = F@_25,
	    heart_res = F@_26, crit_dmg = F@_27, crit_red = F@_28,
	    heart_dmg = F@_29, heart_red = F@_30, skill_amp = F@_31,
	    skill_red = F@_32, thump_pro = F@_33, weak_pro = F@_34,
	    skill_att_power = F@_35, skill_def_power = F@_36,
	    hew_amp = F@_37, block_red = F@_38, boss_amp = F@_39,
	    creep_amp = F@_40, pvp_red = F@_41,
	    pvp_armor_pro = F@_42, pvp_armor_str = F@_43,
	    exp_per = F@_44, gold_drop = F@_45, item_drop = F@_46,
	    equip_def = F@_47, equip_hpmax = F@_48,
	    equip_att = F@_49, power = F@_50, all_gp = F@_51,
	    hpmax_gp = F@_52, att_gp = F@_53, def_gp = F@_54,
	    wreck_gp = F@_55, hit_gp = F@_56, miss_gp = F@_57,
	    crit_gp = F@_58, tough_gp = F@_59, holy_att_gp = F@_60,
	    holy_def_gp = F@_61, hpmax_bp = F@_62, att_bp = F@_63,
	    def_bp = F@_64, wreck_bp = F@_65}.

d_field_p_attr_hp(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		  F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		  F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		  F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		  F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		  F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		  TrUserData)
    when N < 57 ->
    d_field_p_attr_hp(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
		      F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
		      F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
		      F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
		      F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
		      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData);
d_field_p_attr_hp(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
		  F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
		  F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
		  F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
		  F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
		  F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hpmax(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData)
    when N < 57 ->
    d_field_p_attr_hpmax(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			 F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			 F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			 F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			 TrUserData);
d_field_p_attr_hpmax(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_speed(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData)
    when N < 57 ->
    d_field_p_attr_speed(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			 F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			 F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			 F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			 TrUserData);
d_field_p_attr_speed(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			      F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			      F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			      F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			      F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_att(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData)
    when N < 57 ->
    d_field_p_attr_att(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
		       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
		       F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
		       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
		       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
		       F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		       TrUserData);
d_field_p_attr_att(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_def(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData)
    when N < 57 ->
    d_field_p_attr_def(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
		       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
		       F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
		       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
		       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
		       F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		       TrUserData);
d_field_p_attr_def(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_wreck(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData)
    when N < 57 ->
    d_field_p_attr_wreck(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			 F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			 F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			 F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			 TrUserData);
d_field_p_attr_wreck(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hit(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData)
    when N < 57 ->
    d_field_p_attr_hit(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
		       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
		       F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
		       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
		       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
		       F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		       TrUserData);
d_field_p_attr_hit(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_miss(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		    F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		    F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		    F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		    TrUserData)
    when N < 57 ->
    d_field_p_attr_miss(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			TrUserData);
d_field_p_attr_miss(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		    F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		    F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		    F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_crit(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		    F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		    F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		    F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		    TrUserData)
    when N < 57 ->
    d_field_p_attr_crit(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			TrUserData);
d_field_p_attr_crit(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		    F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		    F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		    F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_tough(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData)
    when N < 57 ->
    d_field_p_attr_tough(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			 F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			 F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			 F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			 TrUserData);
d_field_p_attr_tough(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
		     F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
		     F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
		     F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
		     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
		     F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_holy_att(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_holy_att(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_holy_att(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      NewFValue, F@_12, F@_13, F@_14, F@_15, F@_16,
			      F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			      F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			      F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			      F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_holy_def(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_holy_def(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_holy_def(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, _, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      NewFValue, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_abs_att(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_abs_att(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_abs_att(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, NewFValue, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_abs_miss(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_abs_miss(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_abs_miss(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, NewFValue, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_dmg_amp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_dmg_amp(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_dmg_amp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, NewFValue, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_dmg_red(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_dmg_red(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_dmg_red(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, NewFValue, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hit_pro(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_hit_pro(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_hit_pro(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       _, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, NewFValue,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_miss_pro(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_miss_pro(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_miss_pro(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, _, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      NewFValue, F@_19, F@_20, F@_21, F@_22, F@_23,
			      F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			      F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			      F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_armor_pro(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_armor_pro(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_armor_pro(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, _, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      NewFValue, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_armor_str(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_armor_str(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_armor_str(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, _, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, NewFValue, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_block_pro(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_block_pro(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_block_pro(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, _, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, NewFValue, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_block_str(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_block_str(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_block_str(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, _, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, NewFValue, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_crit_pro(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_crit_pro(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_crit_pro(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, _, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, NewFValue, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_crit_res(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_crit_res(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_crit_res(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, _,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, NewFValue,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_heart_pro(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_heart_pro(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_heart_pro(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 _, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      NewFValue, F@_26, F@_27, F@_28, F@_29, F@_30,
			      F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			      F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_heart_res(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_heart_res(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_heart_res(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, _, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      NewFValue, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_crit_dmg(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_crit_dmg(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_crit_dmg(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, _, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, NewFValue, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_crit_red(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_crit_red(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_crit_red(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, _, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, NewFValue, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_heart_dmg(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_heart_dmg(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_heart_dmg(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, _, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, NewFValue, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_heart_red(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_heart_red(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_heart_red(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, _, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, NewFValue, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_skill_amp(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_skill_amp(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_skill_amp(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, _, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, NewFValue,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_skill_red(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_skill_red(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_skill_red(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, _,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      NewFValue, F@_33, F@_34, F@_35, F@_36, F@_37,
			      F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_thump_pro(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_thump_pro(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_thump_pro(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 _, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      NewFValue, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_weak_pro(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_weak_pro(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_weak_pro(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, _, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, NewFValue, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_skill_att_power(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			       F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			       F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			       F@_64, F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_skill_att_power(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
				   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				   F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
				   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
				   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
				   F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
				   F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
				   F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
				   F@_61, F@_62, F@_63, F@_64, F@_65,
				   TrUserData);
d_field_p_attr_skill_att_power(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, _,
			       F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			       F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			       F@_64, F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, NewFValue, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_skill_def_power(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			       F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			       F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			       F@_64, F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_skill_def_power(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				   F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
				   F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				   F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
				   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
				   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
				   F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
				   F@_49, F@_50, F@_51, F@_52, F@_53, F@_54,
				   F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
				   F@_61, F@_62, F@_63, F@_64, F@_65,
				   TrUserData);
d_field_p_attr_skill_def_power(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			       F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			       F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			       _, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			       F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			       F@_64, F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, NewFValue, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hew_amp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_hew_amp(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_hew_amp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, _, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, NewFValue, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_block_red(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_block_red(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_block_red(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, _, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, NewFValue,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_boss_amp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_boss_amp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_boss_amp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, _, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      NewFValue, F@_40, F@_41, F@_42, F@_43, F@_44,
			      F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_creep_amp(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_creep_amp(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_creep_amp(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, _,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      NewFValue, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_pvp_red(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_pvp_red(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_pvp_red(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       _, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, NewFValue, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_pvp_armor_pro(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			     F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			     F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			     F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			     F@_64, F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_pvp_armor_pro(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				 F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				 F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				 F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				 F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				 F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				 F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				 F@_64, F@_65, TrUserData);
d_field_p_attr_pvp_armor_pro(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			     F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, _, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, NewFValue, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_pvp_armor_str(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			     F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			     F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			     F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			     F@_64, F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_pvp_armor_str(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				 F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				 F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				 F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				 F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				 F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				 F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				 F@_64, F@_65, TrUserData);
d_field_p_attr_pvp_armor_str(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			     F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, _,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, NewFValue, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_exp_per(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_exp_per(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_exp_per(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, _, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, NewFValue, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_gold_drop(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_gold_drop(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_gold_drop(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, _, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, NewFValue,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_item_drop(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_item_drop(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_item_drop(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, _, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      NewFValue, F@_47, F@_48, F@_49, F@_50, F@_51,
			      F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_equip_def(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_equip_def(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_equip_def(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, _, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      NewFValue, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_equip_hpmax(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			   F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			   F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			   F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_equip_hpmax(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			       F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			       F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			       F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			       F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			       F@_65, TrUserData);
d_field_p_attr_equip_hpmax(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			   F@_44, F@_45, F@_46, F@_47, _, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, NewFValue, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_equip_att(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_equip_att(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			     F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			     F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			     F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			     F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			     F@_65, TrUserData);
d_field_p_attr_equip_att(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			 F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			 F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			 _, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			 F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			 F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, NewFValue, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_power(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData)
    when N < 57 ->
    d_field_p_attr_power(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
			 F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
			 F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			 F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			 F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			 F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			 TrUserData);
d_field_p_attr_power(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		     F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		     F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		     _, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		     F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, NewFValue, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_all_gp(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData)
    when N < 57 ->
    d_field_p_attr_all_gp(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
d_field_p_attr_all_gp(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, _, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, NewFValue, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hpmax_gp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_hpmax_gp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_hpmax_gp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, _, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, NewFValue,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_att_gp(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData)
    when N < 57 ->
    d_field_p_attr_att_gp(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
d_field_p_attr_att_gp(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, _, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      NewFValue, F@_54, F@_55, F@_56, F@_57, F@_58,
			      F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_def_gp(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData)
    when N < 57 ->
    d_field_p_attr_def_gp(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
d_field_p_attr_def_gp(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, _, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      NewFValue, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_wreck_gp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_wreck_gp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_wreck_gp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, _, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, NewFValue, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hit_gp(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData)
    when N < 57 ->
    d_field_p_attr_hit_gp(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
d_field_p_attr_hit_gp(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, _, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, NewFValue, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_miss_gp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_miss_gp(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_miss_gp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       _, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, NewFValue, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_crit_gp(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_crit_gp(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			   F@_24, F@_25, F@_26, F@_27, F@_28, F@_29, F@_30,
			   F@_31, F@_32, F@_33, F@_34, F@_35, F@_36, F@_37,
			   F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
			   F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
			   F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
			   F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData);
d_field_p_attr_crit_gp(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		       F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
		       F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
		       F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
		       F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
		       F@_57, _, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
		       F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, NewFValue, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_tough_gp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_tough_gp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_tough_gp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, _, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, NewFValue,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_holy_att_gp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			   F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			   F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			   F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_holy_att_gp(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			       F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			       F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			       F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			       F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			       F@_65, TrUserData);
d_field_p_attr_holy_att_gp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			   F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			   F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			   F@_58, F@_59, _, F@_61, F@_62, F@_63, F@_64, F@_65,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      NewFValue, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_holy_def_gp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			   F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			   F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			   F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_holy_def_gp(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			       F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			       F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			       F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			       F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			       F@_65, TrUserData);
d_field_p_attr_holy_def_gp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			   F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			   F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			   F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			   F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			   F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			   F@_58, F@_59, F@_60, _, F@_62, F@_63, F@_64, F@_65,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      NewFValue, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_hpmax_bp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_hpmax_bp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_hpmax_bp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, _, F@_63, F@_64,
			F@_65, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      F@_61, NewFValue, F@_63, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_att_bp(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData)
    when N < 57 ->
    d_field_p_attr_att_bp(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
d_field_p_attr_att_bp(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, _, F@_64, F@_65,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      F@_61, F@_62, NewFValue, F@_64, F@_65,
			      TrUserData).

d_field_p_attr_def_bp(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		      TrUserData)
    when N < 57 ->
    d_field_p_attr_def_bp(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			  F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			  F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			  F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			  F@_60, F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
d_field_p_attr_def_bp(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		      F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		      F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		      F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		      F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, _, F@_65,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      F@_61, F@_62, F@_63, NewFValue, F@_65,
			      TrUserData).

d_field_p_attr_wreck_bp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			F@_65, TrUserData)
    when N < 57 ->
    d_field_p_attr_wreck_bp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			    F@_23, F@_24, F@_25, F@_26, F@_27, F@_28, F@_29,
			    F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
			    F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43,
			    F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
			    F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
			    F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			    F@_65, TrUserData);
d_field_p_attr_wreck_bp(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40,
			F@_41, F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48,
			F@_49, F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64,
			_, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_attr(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      F@_61, F@_62, F@_63, F@_64, NewFValue,
			      TrUserData).

skip_varint_p_attr(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData) ->
    skip_varint_p_attr(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
		       F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
		       F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
		       F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
		       F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
		       F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData);
skip_varint_p_attr(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
		   F@_34, F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41,
		   F@_42, F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
		   F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
		   F@_58, F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
		   TrUserData) ->
    dfp_read_field_def_p_attr(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

skip_length_delimited_p_attr(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			     F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			     F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			     F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			     F@_64, F@_65, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_attr(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				 F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				 F@_22, F@_23, F@_24, F@_25, F@_26, F@_27,
				 F@_28, F@_29, F@_30, F@_31, F@_32, F@_33,
				 F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
				 F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
				 F@_46, F@_47, F@_48, F@_49, F@_50, F@_51,
				 F@_52, F@_53, F@_54, F@_55, F@_56, F@_57,
				 F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
				 F@_64, F@_65, TrUserData);
skip_length_delimited_p_attr(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
			     F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35,
			     F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
			     F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49,
			     F@_50, F@_51, F@_52, F@_53, F@_54, F@_55, F@_56,
			     F@_57, F@_58, F@_59, F@_60, F@_61, F@_62, F@_63,
			     F@_64, F@_65, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_attr(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData).

skip_group_p_attr(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		  F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		  F@_21, F@_22, F@_23, F@_24, F@_25, F@_26, F@_27, F@_28,
		  F@_29, F@_30, F@_31, F@_32, F@_33, F@_34, F@_35, F@_36,
		  F@_37, F@_38, F@_39, F@_40, F@_41, F@_42, F@_43, F@_44,
		  F@_45, F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
		  F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
		  F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_attr(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      F@_26, F@_27, F@_28, F@_29, F@_30, F@_31, F@_32,
			      F@_33, F@_34, F@_35, F@_36, F@_37, F@_38, F@_39,
			      F@_40, F@_41, F@_42, F@_43, F@_44, F@_45, F@_46,
			      F@_47, F@_48, F@_49, F@_50, F@_51, F@_52, F@_53,
			      F@_54, F@_55, F@_56, F@_57, F@_58, F@_59, F@_60,
			      F@_61, F@_62, F@_63, F@_64, F@_65, TrUserData).

skip_32_p_attr(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
	       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
	       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
	       F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
	       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
	       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
	       F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
	       TrUserData) ->
    dfp_read_field_def_p_attr(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

skip_64_p_attr(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
	       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, F@_26,
	       F@_27, F@_28, F@_29, F@_30, F@_31, F@_32, F@_33, F@_34,
	       F@_35, F@_36, F@_37, F@_38, F@_39, F@_40, F@_41, F@_42,
	       F@_43, F@_44, F@_45, F@_46, F@_47, F@_48, F@_49, F@_50,
	       F@_51, F@_52, F@_53, F@_54, F@_55, F@_56, F@_57, F@_58,
	       F@_59, F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
	       TrUserData) ->
    dfp_read_field_def_p_attr(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, F@_26, F@_27, F@_28, F@_29, F@_30, F@_31,
			      F@_32, F@_33, F@_34, F@_35, F@_36, F@_37, F@_38,
			      F@_39, F@_40, F@_41, F@_42, F@_43, F@_44, F@_45,
			      F@_46, F@_47, F@_48, F@_49, F@_50, F@_51, F@_52,
			      F@_53, F@_54, F@_55, F@_56, F@_57, F@_58, F@_59,
			      F@_60, F@_61, F@_62, F@_63, F@_64, F@_65,
			      TrUserData).

decode_msg_p_item_base(Bin, TrUserData) ->
    dfp_read_field_def_p_item_base(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   'tr_decode_init_default_p_item_base.misc'([],
									     TrUserData),
				   TrUserData).

dfp_read_field_def_p_item_base(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_p_item_base(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   TrUserData);
dfp_read_field_def_p_item_base(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_num(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_p_item_base(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_bag(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
dfp_read_field_def_p_item_base(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_bind(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_p_item_base(<<48, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_etime(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_p_item_base(<<56, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_gender(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       TrUserData);
dfp_read_field_def_p_item_base(<<64, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_score(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_p_item_base(<<72, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_extra(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      TrUserData);
dfp_read_field_def_p_item_base(<<82, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    d_field_p_item_base_misc(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData);
dfp_read_field_def_p_item_base(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1,
			       TrUserData) ->
    #p_item_base{uid = F@_1, id = F@_2, num = F@_3,
		 bag = F@_4, bind = F@_5, etime = F@_6, gender = F@_7,
		 score = F@_8, extra = F@_9,
		 misc =
		     'tr_decode_repeated_finalize_p_item_base.misc'(R1,
								    TrUserData)};
dfp_read_field_def_p_item_base(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, TrUserData) ->
    dg_read_field_def_p_item_base(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, TrUserData).

dg_read_field_def_p_item_base(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_item_base(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
dg_read_field_def_p_item_base(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_item_base_uid(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      16 ->
	  d_field_p_item_base_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 TrUserData);
      24 ->
	  d_field_p_item_base_num(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      32 ->
	  d_field_p_item_base_bag(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  TrUserData);
      40 ->
	  d_field_p_item_base_bind(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      48 ->
	  d_field_p_item_base_etime(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      56 ->
	  d_field_p_item_base_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				     TrUserData);
      64 ->
	  d_field_p_item_base_score(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      72 ->
	  d_field_p_item_base_extra(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
      82 ->
	  d_field_p_item_base_misc(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_item_base(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					F@_10, TrUserData);
	    1 ->
		skip_64_p_item_base(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData);
	    2 ->
		skip_length_delimited_p_item_base(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, F@_10,
						  TrUserData);
	    3 ->
		skip_group_p_item_base(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       F@_10, TrUserData);
	    5 ->
		skip_32_p_item_base(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				    TrUserData)
	  end
    end;
dg_read_field_def_p_item_base(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, R1,
			      TrUserData) ->
    #p_item_base{uid = F@_1, id = F@_2, num = F@_3,
		 bag = F@_4, bind = F@_5, etime = F@_6, gender = F@_7,
		 score = F@_8, extra = F@_9,
		 misc =
		     'tr_decode_repeated_finalize_p_item_base.misc'(R1,
								    TrUserData)}.

d_field_p_item_base_uid(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_uid(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_p_item_base_uid(<<0:1, X:7, Rest/binary>>, N,
			Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, TrUserData);
d_field_p_item_base_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				   F@_8, F@_9, F@_10, TrUserData).

d_field_p_item_base_num(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_num(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_p_item_base_num(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_bag(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_bag(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, TrUserData);
d_field_p_item_base_bag(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_bind(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_bind(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_p_item_base_bind(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
			 F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_etime(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_etime(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_p_item_base_etime(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_gender(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_gender(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, TrUserData);
d_field_p_item_base_gender(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
			   F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_score(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_score(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_p_item_base_score(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _,
			  F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				   F@_9, F@_10, TrUserData).

d_field_p_item_base_extra(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_extra(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, TrUserData);
d_field_p_item_base_extra(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  _, F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   NewFValue, F@_10, TrUserData).

d_field_p_item_base_misc(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_p_item_base_misc(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, TrUserData);
d_field_p_item_base_misc(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_item_base(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   'tr_decode_repeated_add_elem_p_item_base.misc'(NewFValue,
										  Prev,
										  TrUserData),
				   TrUserData).

skip_varint_p_item_base(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData) ->
    skip_varint_p_item_base(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    TrUserData);
skip_varint_p_item_base(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_p_item_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData).

skip_length_delimited_p_item_base(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_item_base(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData);
skip_length_delimited_p_item_base(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_item_base(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData).

skip_group_p_item_base(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_item_base(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData).

skip_32_p_item_base(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    TrUserData) ->
    dfp_read_field_def_p_item_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData).

skip_64_p_item_base(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		    TrUserData) ->
    dfp_read_field_def_p_item_base(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData).

decode_msg_p_item(Bin, TrUserData) ->
    dfp_read_field_def_p_item(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_item(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_item(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_item(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_num(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_item(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_bag(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_item(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_bind(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_p_item(<<48, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_etime(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_p_item(<<56, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_item(<<64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_score(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_p_item(<<74, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_equip(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_p_item(<<82, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_pet(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_item(<<88, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    d_field_p_item_extra(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_p_item(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  _) ->
    #p_item{uid = F@_1, id = F@_2, num = F@_3, bag = F@_4,
	    bind = F@_5, etime = F@_6, gender = F@_7, score = F@_8,
	    equip = F@_9, pet = F@_10, extra = F@_11};
dfp_read_field_def_p_item(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData) ->
    dg_read_field_def_p_item(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, TrUserData).

dg_read_field_def_p_item(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_item(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_p_item(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_item_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      16 ->
	  d_field_p_item_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    TrUserData);
      24 ->
	  d_field_p_item_num(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      32 ->
	  d_field_p_item_bag(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      40 ->
	  d_field_p_item_bind(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      48 ->
	  d_field_p_item_etime(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      56 ->
	  d_field_p_item_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      64 ->
	  d_field_p_item_score(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      74 ->
	  d_field_p_item_equip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      82 ->
	  d_field_p_item_pet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      88 ->
	  d_field_p_item_extra(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
	    1 ->
		skip_64_p_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
	    2 ->
		skip_length_delimited_p_item(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, TrUserData);
	    3 ->
		skip_group_p_item(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, TrUserData);
	    5 ->
		skip_32_p_item(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
	  end
    end;
dg_read_field_def_p_item(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, _) ->
    #p_item{uid = F@_1, id = F@_2, num = F@_3, bag = F@_4,
	    bind = F@_5, etime = F@_6, gender = F@_7, score = F@_8,
	    equip = F@_9, pet = F@_10, extra = F@_11}.

d_field_p_item_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_uid(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_p_item_uid(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_id(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		      F@_11, TrUserData);
d_field_p_item_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_num(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_num(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_p_item_num(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, F@_11, TrUserData).

d_field_p_item_bag(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_bag(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_p_item_bag(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_bind(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_bind(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_p_item_bind(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_etime(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_etime(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_p_item_etime(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_gender(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_gender(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_p_item_gender(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_score(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_score(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_p_item_score(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			      F@_11, TrUserData).

d_field_p_item_equip(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_equip(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_p_item_equip(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_equip(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_p_equip(Prev, NewFValue,
						       TrUserData)
			      end,
			      F@_10, F@_11, TrUserData).

d_field_p_item_pet(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_pet(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_p_item_pet(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   Prev, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_pet(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_p_pet(Prev, NewFValue,
						     TrUserData)
			      end,
			      F@_11, TrUserData).

d_field_p_item_extra(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_item_extra(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_p_item_extra(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_item(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      NewFValue, TrUserData).

skip_varint_p_item(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    skip_varint_p_item(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
skip_varint_p_item(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_p_item(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_length_delimited_p_item(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_item(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, TrUserData);
skip_length_delimited_p_item(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_item(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_group_p_item(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_item(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData).

skip_32_p_item(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_p_item(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

skip_64_p_item(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, TrUserData) ->
    dfp_read_field_def_p_item(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

decode_msg_p_equip(Bin, TrUserData) ->
    dfp_read_field_def_p_equip(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       'tr_decode_init_default_p_equip.stones'([],
								       TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), id([], TrUserData),
			       'tr_decode_init_default_p_equip.suite'([],
								      TrUserData),
			       id([], TrUserData), TrUserData).

dfp_read_field_def_p_equip(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_base(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_rare1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_rare2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_rare3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_marriage(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<48, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_stren_phase(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<56, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_stren_lv(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<66, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_stones(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<72, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_power(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<80, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_cast(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<90, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_refine(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<98, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_suite(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<106, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    d_field_p_equip_combine(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, TrUserData);
dfp_read_field_def_p_equip(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, R1, F@_9, F@_10, R2, R3, R4,
			   TrUserData) ->
    #p_equip{base = F@_1, rare1 = F@_2, rare2 = F@_3,
	     rare3 = F@_4, marriage = F@_5, stren_phase = F@_6,
	     stren_lv = F@_7,
	     stones =
		 'tr_decode_repeated_finalize_p_equip.stones'(R1,
							      TrUserData),
	     power = F@_9, cast = F@_10,
	     refine = lists_reverse(R2, TrUserData),
	     suite =
		 'tr_decode_repeated_finalize_p_equip.suite'(R3,
							     TrUserData),
	     combine = lists_reverse(R4, TrUserData)};
dfp_read_field_def_p_equip(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   F@_11, F@_12, F@_13, TrUserData) ->
    dg_read_field_def_p_equip(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, TrUserData).

dg_read_field_def_p_equip(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_equip(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
dg_read_field_def_p_equip(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_equip_base(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      18 ->
	  d_field_p_equip_rare1(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      26 ->
	  d_field_p_equip_rare2(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      34 ->
	  d_field_p_equip_rare3(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      42 ->
	  d_field_p_equip_marriage(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      48 ->
	  d_field_p_equip_stren_phase(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, TrUserData);
      56 ->
	  d_field_p_equip_stren_lv(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
      66 ->
	  d_field_p_equip_stones(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, TrUserData);
      72 ->
	  d_field_p_equip_power(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      80 ->
	  d_field_p_equip_cast(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData);
      90 ->
	  d_field_p_equip_refine(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				 F@_11, F@_12, F@_13, TrUserData);
      98 ->
	  d_field_p_equip_suite(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, TrUserData);
      106 ->
	  d_field_p_equip_combine(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_equip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    F@_12, F@_13, TrUserData);
	    1 ->
		skip_64_p_equip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				F@_12, F@_13, TrUserData);
	    2 ->
		skip_length_delimited_p_equip(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, F@_11, F@_12,
					      F@_13, TrUserData);
	    3 ->
		skip_group_p_equip(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, TrUserData);
	    5 ->
		skip_32_p_equip(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				F@_12, F@_13, TrUserData)
	  end
    end;
dg_read_field_def_p_equip(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, R1, F@_9, F@_10, R2, R3, R4,
			  TrUserData) ->
    #p_equip{base = F@_1, rare1 = F@_2, rare2 = F@_3,
	     rare3 = F@_4, marriage = F@_5, stren_phase = F@_6,
	     stren_lv = F@_7,
	     stones =
		 'tr_decode_repeated_finalize_p_equip.stones'(R1,
							      TrUserData),
	     power = F@_9, cast = F@_10,
	     refine = lists_reverse(R2, TrUserData),
	     suite =
		 'tr_decode_repeated_finalize_p_equip.suite'(R3,
							     TrUserData),
	     combine = lists_reverse(R4, TrUserData)}.

d_field_p_equip_base(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_base(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_base(<<0:1, X:7, Rest/binary>>, N, Acc,
		     Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_attr(Prev, NewFValue,
						       TrUserData)
			       end,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_rare1(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_rare1(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_rare1(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_attr(Prev, NewFValue,
						       TrUserData)
			       end,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_rare2(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_rare2(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_rare2(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_attr(Prev, NewFValue,
						       TrUserData)
			       end,
			       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData).

d_field_p_equip_rare3(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_rare3(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_rare3(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_attr(Prev, NewFValue,
						       TrUserData)
			       end,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, TrUserData).

d_field_p_equip_marriage(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_marriage(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_marriage(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_marriage(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_marriage(Prev, NewFValue,
							   TrUserData)
			       end,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			       F@_13, TrUserData).

d_field_p_equip_stren_phase(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_stren_phase(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_stren_phase(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_stren_lv(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_stren_lv(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_stren_lv(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
			 F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_stones(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_stones(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_stones(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       'tr_decode_repeated_add_elem_p_equip.stones'(NewFValue,
									    Prev,
									    TrUserData),
			       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_power(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_power(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_power(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		      F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
			       F@_10, F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_cast(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_cast(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_cast(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		     F@_11, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       NewFValue, F@_11, F@_12, F@_13, TrUserData).

d_field_p_equip_refine(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_refine(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_refine(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, Prev, F@_12, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_refine(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       cons(NewFValue, Prev, TrUserData), F@_12, F@_13,
			       TrUserData).

d_field_p_equip_suite(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_suite(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_suite(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, Prev, F@_13, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11,
			       'tr_decode_repeated_add_elem_p_equip.suite'(NewFValue,
									   Prev,
									   TrUserData),
			       F@_13, TrUserData).

d_field_p_equip_combine(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData)
    when N < 57 ->
    d_field_p_equip_combine(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, TrUserData);
d_field_p_equip_combine(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_item(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_equip(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, cons(NewFValue, Prev, TrUserData),
			       TrUserData).

skip_varint_p_equip(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    skip_varint_p_equip(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, TrUserData);
skip_varint_p_equip(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_p_equip(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_length_delimited_p_equip(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData)
    when N < 57 ->
    skip_length_delimited_p_equip(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, TrUserData);
skip_length_delimited_p_equip(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_equip(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_group_p_equip(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		   F@_13, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_equip(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_32_p_equip(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_p_equip(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

skip_64_p_equip(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, F@_12, F@_13, TrUserData) ->
    dfp_read_field_def_p_equip(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, F@_12, F@_13, TrUserData).

decode_msg_p_pet(Bin, TrUserData) ->
    dfp_read_field_def_p_pet(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     id(undefined, TrUserData),
			     'tr_decode_init_default_p_pet.strong'([],
								   TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_pet(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_base(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_rare1(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_rare2(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_rare3(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<40, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_cross(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<50, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_strong(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<56, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    d_field_p_pet_power(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_pet(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, R1, F@_7, TrUserData) ->
    #p_pet{base = F@_1, rare1 = F@_2, rare2 = F@_3,
	   rare3 = F@_4, cross = F@_5,
	   strong =
	       'tr_decode_repeated_finalize_p_pet.strong'(R1,
							  TrUserData),
	   power = F@_7};
dfp_read_field_def_p_pet(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_p_pet(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_p_pet(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_pet(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
dg_read_field_def_p_pet(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_pet_base(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData);
      18 ->
	  d_field_p_pet_rare1(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      26 ->
	  d_field_p_pet_rare2(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_p_pet_rare3(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      40 ->
	  d_field_p_pet_cross(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_field_p_pet_strong(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      56 ->
	  d_field_p_pet_power(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_pet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_p_pet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_pet(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
	    3 ->
		skip_group_p_pet(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_p_pet(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_pet(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, R1, F@_7, TrUserData) ->
    #p_pet{base = F@_1, rare1 = F@_2, rare2 = F@_3,
	   rare3 = F@_4, cross = F@_5,
	   strong =
	       'tr_decode_repeated_finalize_p_pet.strong'(R1,
							  TrUserData),
	   power = F@_7}.

d_field_p_pet_base(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_base(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_base(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_pet(RestF, 0, 0,
			     if Prev == undefined -> NewFValue;
				true ->
				    merge_msg_p_attr(Prev, NewFValue,
						     TrUserData)
			     end,
			     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_pet_rare1(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_rare1(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_rare1(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, Prev, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_pet(RestF, 0, 0, F@_1,
			     if Prev == undefined -> NewFValue;
				true ->
				    merge_msg_p_attr(Prev, NewFValue,
						     TrUserData)
			     end,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_pet_rare2(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_rare2(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_rare2(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_pet(RestF, 0, 0, F@_1, F@_2,
			     if Prev == undefined -> NewFValue;
				true ->
				    merge_msg_p_attr(Prev, NewFValue,
						     TrUserData)
			     end,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_pet_rare3(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_rare3(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_rare3(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_pet(RestF, 0, 0, F@_1, F@_2, F@_3,
			     if Prev == undefined -> NewFValue;
				true ->
				    merge_msg_p_attr(Prev, NewFValue,
						     TrUserData)
			     end,
			     F@_5, F@_6, F@_7, TrUserData).

d_field_p_pet_cross(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_cross(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_cross(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_pet(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_p_pet_strong(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_strong(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_strong(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_pet(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5,
			     'tr_decode_repeated_add_elem_p_pet.strong'(NewFValue,
									Prev,
									TrUserData),
			     F@_7, TrUserData).

d_field_p_pet_power(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_pet_power(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_pet_power(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_pet(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_p_pet(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_p_pet(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_pet(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_pet(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_p_pet(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 57 ->
    skip_length_delimited_p_pet(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
skip_length_delimited_p_pet(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_pet(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_p_pet(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_pet(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_p_pet(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_pet(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_p_pet(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_pet(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_p_marriage(Bin, TrUserData) ->
    dfp_read_field_def_p_marriage(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_marriage(<<9, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_marriage_husband_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_marriage(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_marriage_husband(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_marriage(<<25, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_marriage_wife_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_marriage(<<34, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_marriage_wife(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_marriage(<<42, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_marriage_rare(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_marriage(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, _) ->
    #p_marriage{husband_id = F@_1, husband = F@_2,
		wife_id = F@_3, wife = F@_4, rare = F@_5};
dfp_read_field_def_p_marriage(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_marriage(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_marriage(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_marriage(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_marriage(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_marriage_husband_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      18 ->
	  d_field_p_marriage_husband(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      25 ->
	  d_field_p_marriage_wife_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      34 ->
	  d_field_p_marriage_wife(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      42 ->
	  d_field_p_marriage_rare(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_marriage(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_marriage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_marriage(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_marriage(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_marriage(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_marriage(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #p_marriage{husband_id = F@_1, husband = F@_2,
		wife_id = F@_3, wife = F@_4, rare = F@_5}.

d_field_p_marriage_husband_id(<<Value:64/little,
				Rest/binary>>,
			      Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_marriage(Rest, Z1, Z2,
				  id(Value, TrUserData), F@_2, F@_3, F@_4, F@_5,
				  TrUserData).

d_field_p_marriage_husband(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_marriage_husband(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_marriage_husband(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_marriage(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_marriage_wife_id(<<Value:64/little,
			     Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_marriage(Rest, Z1, Z2, F@_1, F@_2,
				  id(Value, TrUserData), F@_4, F@_5,
				  TrUserData).

d_field_p_marriage_wife(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_marriage_wife(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_marriage_wife(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_marriage(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, TrUserData).

d_field_p_marriage_rare(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_marriage_rare(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_marriage_rare(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_attr(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_marriage(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4,
				  if Prev == undefined -> NewFValue;
				     true ->
					 merge_msg_p_attr(Prev, NewFValue,
							  TrUserData)
				  end,
				  TrUserData).

skip_varint_p_marriage(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_marriage(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
skip_varint_p_marriage(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_marriage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_marriage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_p_marriage(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
skip_length_delimited_p_marriage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_marriage(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_group_p_marriage(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_marriage(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_32_p_marriage(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_marriage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

skip_64_p_marriage(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_marriage(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_refine(Bin, TrUserData) ->
    dfp_read_field_def_p_refine(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_refine(<<8, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_refine_attr(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
dfp_read_field_def_p_refine(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_refine_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_p_refine(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_refine_min(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_p_refine(<<32, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_refine_max(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
dfp_read_field_def_p_refine(<<40, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_refine_color(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, TrUserData);
dfp_read_field_def_p_refine(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #p_refine{attr = F@_1, value = F@_2, min = F@_3,
	      max = F@_4, color = F@_5};
dfp_read_field_def_p_refine(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_refine(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_refine(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_refine(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_refine(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_refine_attr(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, TrUserData);
      16 ->
	  d_field_p_refine_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      24 ->
	  d_field_p_refine_min(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      32 ->
	  d_field_p_refine_max(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, TrUserData);
      40 ->
	  d_field_p_refine_color(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_refine(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
	    1 ->
		skip_64_p_refine(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_refine(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_refine(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_refine(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_refine(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, _) ->
    #p_refine{attr = F@_1, value = F@_2, min = F@_3,
	      max = F@_4, color = F@_5}.

d_field_p_refine_attr(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_refine_attr(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_refine_attr(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_refine(RestF, 0, 0, NewFValue,
				F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_p_refine_value(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_refine_value(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_refine_value(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_refine(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_refine_min(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_refine_min(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_refine_min(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_refine(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, F@_5, TrUserData).

d_field_p_refine_max(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_refine_max(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_refine_max(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_refine(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, F@_5, TrUserData).

d_field_p_refine_color(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_refine_color(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_refine_color(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_refine(RestF, 0, 0, F@_1, F@_2,
				F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_refine(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_refine(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, TrUserData);
skip_varint_p_refine(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_refine(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_refine(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_refine(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
skip_length_delimited_p_refine(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_refine(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_group_p_refine(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_refine(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_32_p_refine(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_refine(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

skip_64_p_refine(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_refine(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_actor(Bin, TrUserData) ->
    dfp_read_field_def_p_actor(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       'tr_decode_init_default_p_actor.stargs'([],
								       TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_actor(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_uid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_coord(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_state(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_stargs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<58, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_role(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<66, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_creep(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<74, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    d_field_p_actor_drop(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_actor(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, R1, F@_7, F@_8, F@_9, TrUserData) ->
    #p_actor{uid = F@_1, name = F@_2, type = F@_3,
	     coord = F@_4, state = F@_5,
	     stargs =
		 'tr_decode_repeated_finalize_p_actor.stargs'(R1,
							      TrUserData),
	     role = F@_7, creep = F@_8, drop = F@_9};
dfp_read_field_def_p_actor(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData) ->
    dg_read_field_def_p_actor(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData).

dg_read_field_def_p_actor(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_actor(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
dg_read_field_def_p_actor(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_actor_uid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      18 ->
	  d_field_p_actor_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      24 ->
	  d_field_p_actor_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      34 ->
	  d_field_p_actor_coord(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      40 ->
	  d_field_p_actor_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      50 ->
	  d_field_p_actor_stargs(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
      58 ->
	  d_field_p_actor_role(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      66 ->
	  d_field_p_actor_creep(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      74 ->
	  d_field_p_actor_drop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_actor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
	    1 ->
		skip_64_p_actor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
	    2 ->
		skip_length_delimited_p_actor(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, TrUserData);
	    3 ->
		skip_group_p_actor(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
	    5 ->
		skip_32_p_actor(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
	  end
    end;
dg_read_field_def_p_actor(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, R1, F@_7, F@_8, F@_9, TrUserData) ->
    #p_actor{uid = F@_1, name = F@_2, type = F@_3,
	     coord = F@_4, state = F@_5,
	     stargs =
		 'tr_decode_repeated_finalize_p_actor.stargs'(R1,
							      TrUserData),
	     role = F@_7, creep = F@_8, drop = F@_9}.

d_field_p_actor_uid(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData)
    when N < 57 ->
    d_field_p_actor_uid(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			TrUserData);
d_field_p_actor_uid(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_actor(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

d_field_p_actor_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     TrUserData)
    when N < 57 ->
    d_field_p_actor_name(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData);
d_field_p_actor_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, NewFValue,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

d_field_p_actor_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     TrUserData)
    when N < 57 ->
    d_field_p_actor_type(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData);
d_field_p_actor_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

d_field_p_actor_coord(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      TrUserData)
    when N < 57 ->
    d_field_p_actor_coord(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  TrUserData);
d_field_p_actor_coord(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, Prev, F@_5, F@_6, F@_7, F@_8, F@_9,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_coord(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       F@_3,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_coord(Prev, NewFValue,
							TrUserData)
			       end,
			       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_p_actor_state(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      TrUserData)
    when N < 57 ->
    d_field_p_actor_state(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  TrUserData);
d_field_p_actor_state(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

d_field_p_actor_stargs(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData)
    when N < 57 ->
    d_field_p_actor_stargs(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData);
d_field_p_actor_stargs(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8,
		       F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       'tr_decode_repeated_add_elem_p_actor.stargs'(NewFValue,
									    Prev,
									    TrUserData),
			       F@_7, F@_8, F@_9, TrUserData).

d_field_p_actor_role(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     TrUserData)
    when N < 57 ->
    d_field_p_actor_role(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData);
d_field_p_actor_role(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8, F@_9,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_role(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_role(Prev, NewFValue,
						       TrUserData)
			       end,
			       F@_8, F@_9, TrUserData).

d_field_p_actor_creep(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      TrUserData)
    when N < 57 ->
    d_field_p_actor_creep(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  TrUserData);
d_field_p_actor_creep(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_creep(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_creep(Prev, NewFValue,
							TrUserData)
			       end,
			       F@_9, TrUserData).

d_field_p_actor_drop(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     TrUserData)
    when N < 57 ->
    d_field_p_actor_drop(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData);
d_field_p_actor_drop(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, Prev,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_drop(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_actor(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_drop(Prev, NewFValue,
						       TrUserData)
			       end,
			       TrUserData).

skip_varint_p_actor(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    skip_varint_p_actor(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_p_actor(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    dfp_read_field_def_p_actor(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

skip_length_delimited_p_actor(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_actor(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_length_delimited_p_actor(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_actor(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

skip_group_p_actor(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_actor(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

skip_32_p_actor(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		TrUserData) ->
    dfp_read_field_def_p_actor(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

skip_64_p_actor(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		TrUserData) ->
    dfp_read_field_def_p_actor(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData).

decode_msg_p_role(Bin, TrUserData) ->
    dfp_read_field_def_p_role(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      'tr_decode_init_default_p_role.figure'([],
								     TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      'tr_decode_init_default_p_role.ext'([],
								  TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_role(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_career(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  TrUserData);
dfp_read_field_def_p_role(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_gender(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  TrUserData);
dfp_read_field_def_p_role(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_viplv(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_figure(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  TrUserData);
dfp_read_field_def_p_role(<<48, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_suid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<56, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_guild(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<66, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_gname(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<72, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_hp(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		      F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<80, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_hpmax(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<88, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_speed(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<98, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_buffs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<104, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_power(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<112, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_pkmode(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  TrUserData);
dfp_read_field_def_p_role(<<120, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_crime(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<129, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_dir(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<138, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_dest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<144, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<153, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_team(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<160, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_marry(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<170, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_mname(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<176, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_mtype(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			 F@_20, F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<184, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_zoneid(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			  F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			  TrUserData);
dfp_read_field_def_p_role(<<194, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_ext(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<202, 1, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			  F@_24, F@_25, TrUserData) ->
    d_field_p_role_icon(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
dfp_read_field_def_p_role(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, R1, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, R2,
			  F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			  F@_20, F@_21, F@_22, F@_23, R3, F@_25, TrUserData) ->
    #p_role{career = F@_1, gender = F@_2, level = F@_3,
	    viplv = F@_4,
	    figure =
		'tr_decode_repeated_finalize_p_role.figure'(R1,
							    TrUserData),
	    suid = F@_6, guild = F@_7, gname = F@_8, hp = F@_9,
	    hpmax = F@_10, speed = F@_11,
	    buffs = lists_reverse(R2, TrUserData), power = F@_13,
	    pkmode = F@_14, crime = F@_15, dir = F@_16,
	    dest = F@_17, group = F@_18, team = F@_19,
	    marry = F@_20, mname = F@_21, mtype = F@_22,
	    zoneid = F@_23,
	    ext =
		'tr_decode_repeated_finalize_p_role.ext'(R3,
							 TrUserData),
	    icon = F@_25};
dfp_read_field_def_p_role(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, TrUserData) ->
    dg_read_field_def_p_role(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			     F@_25, TrUserData).

dg_read_field_def_p_role(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_role(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
			     F@_23, F@_24, F@_25, TrUserData);
dg_read_field_def_p_role(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			 F@_25, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_role_career(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, TrUserData);
      16 ->
	  d_field_p_role_gender(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, TrUserData);
      24 ->
	  d_field_p_role_level(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      32 ->
	  d_field_p_role_viplv(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      42 ->
	  d_field_p_role_figure(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, TrUserData);
      48 ->
	  d_field_p_role_suid(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData);
      56 ->
	  d_field_p_role_guild(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      66 ->
	  d_field_p_role_gname(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      72 ->
	  d_field_p_role_hp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			    F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			    F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			    TrUserData);
      80 ->
	  d_field_p_role_hpmax(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      88 ->
	  d_field_p_role_speed(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      98 ->
	  d_field_p_role_buffs(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      104 ->
	  d_field_p_role_power(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      112 ->
	  d_field_p_role_pkmode(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, TrUserData);
      120 ->
	  d_field_p_role_crime(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      129 ->
	  d_field_p_role_dir(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			     F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			     F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     TrUserData);
      138 ->
	  d_field_p_role_dest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData);
      144 ->
	  d_field_p_role_group(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      153 ->
	  d_field_p_role_team(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData);
      160 ->
	  d_field_p_role_marry(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      170 ->
	  d_field_p_role_mname(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      176 ->
	  d_field_p_role_mtype(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
      184 ->
	  d_field_p_role_zoneid(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
				F@_25, TrUserData);
      194 ->
	  d_field_p_role_ext(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			     F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			     F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			     TrUserData);
      202 ->
	  d_field_p_role_icon(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_role(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
				   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
				   F@_24, F@_25, TrUserData);
	    1 ->
		skip_64_p_role(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			       F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData);
	    2 ->
		skip_length_delimited_p_role(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     F@_9, F@_10, F@_11, F@_12, F@_13,
					     F@_14, F@_15, F@_16, F@_17, F@_18,
					     F@_19, F@_20, F@_21, F@_22, F@_23,
					     F@_24, F@_25, TrUserData);
	    3 ->
		skip_group_p_role(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  F@_17, F@_18, F@_19, F@_20, F@_21, F@_22,
				  F@_23, F@_24, F@_25, TrUserData);
	    5 ->
		skip_32_p_role(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			       F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			       TrUserData)
	  end
    end;
dg_read_field_def_p_role(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, R1, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, R2,
			 F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
			 F@_21, F@_22, F@_23, R3, F@_25, TrUserData) ->
    #p_role{career = F@_1, gender = F@_2, level = F@_3,
	    viplv = F@_4,
	    figure =
		'tr_decode_repeated_finalize_p_role.figure'(R1,
							    TrUserData),
	    suid = F@_6, guild = F@_7, gname = F@_8, hp = F@_9,
	    hpmax = F@_10, speed = F@_11,
	    buffs = lists_reverse(R2, TrUserData), power = F@_13,
	    pkmode = F@_14, crime = F@_15, dir = F@_16,
	    dest = F@_17, group = F@_18, team = F@_19,
	    marry = F@_20, mname = F@_21, mtype = F@_22,
	    zoneid = F@_23,
	    ext =
		'tr_decode_repeated_finalize_p_role.ext'(R3,
							 TrUserData),
	    icon = F@_25}.

d_field_p_role_career(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData)
    when N < 57 ->
    d_field_p_role_career(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, TrUserData);
d_field_p_role_career(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_gender(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData)
    when N < 57 ->
    d_field_p_role_gender(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, TrUserData);
d_field_p_role_gender(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_level(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_level(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_level(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			      F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			      F@_24, F@_25, TrUserData).

d_field_p_role_viplv(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_viplv(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_viplv(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_figure(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData)
    when N < 57 ->
    d_field_p_role_figure(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, TrUserData);
d_field_p_role_figure(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,p_aspect>'(Bs,
								 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4,
			      'tr_decode_repeated_add_elem_p_role.figure'(NewFValue,
									  Prev,
									  TrUserData),
			      F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData).

d_field_p_role_suid(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    TrUserData)
    when N < 57 ->
    d_field_p_role_suid(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			TrUserData);
d_field_p_role_suid(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_guild(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_guild(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_guild(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_gname(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_gname(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_gname(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewFValue, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_hp(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		  TrUserData)
    when N < 57 ->
    d_field_p_role_hp(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData);
d_field_p_role_hp(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_hpmax(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_hpmax(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_hpmax(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		     F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		     F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, NewFValue,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_speed(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_speed(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_speed(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, _, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      NewFValue, F@_12, F@_13, F@_14, F@_15, F@_16,
			      F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23,
			      F@_24, F@_25, TrUserData).

d_field_p_role_buffs(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_buffs(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_buffs(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, Prev, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_buff(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      cons(NewFValue, Prev, TrUserData), F@_13, F@_14,
			      F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			      F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_p_role_power(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_power(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_power(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, _, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, NewFValue, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_pkmode(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData)
    when N < 57 ->
    d_field_p_role_pkmode(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, TrUserData);
d_field_p_role_pkmode(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, _, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, NewFValue, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_crime(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_crime(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_crime(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, _, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, NewFValue, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_dir(<<0:48, 240, 127, Rest/binary>>, Z1,
		   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _,
		   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		   F@_25, TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15,
			      id(infinity, TrUserData), F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData);
d_field_p_role_dir(<<0:48, 240, 255, Rest/binary>>, Z1,
		   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _,
		   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		   F@_25, TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15,
			      id('-infinity', TrUserData), F@_17, F@_18, F@_19,
			      F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData);
d_field_p_role_dir(<<_:48, 15:4, _:4, _:1, 127:7,
		     Rest/binary>>,
		   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _,
		   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		   F@_25, TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15,
			      id(nan, TrUserData), F@_17, F@_18, F@_19, F@_20,
			      F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
d_field_p_role_dir(<<Value:64/little-float,
		     Rest/binary>>,
		   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, _,
		   F@_17, F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
		   F@_25, TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15,
			      id(Value, TrUserData), F@_17, F@_18, F@_19, F@_20,
			      F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData).

d_field_p_role_dest(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    TrUserData)
    when N < 57 ->
    d_field_p_role_dest(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			TrUserData);
d_field_p_role_dest(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, Prev,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_coord(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_p_coord(Prev, NewFValue,
						       TrUserData)
			      end,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_group(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_group(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_group(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     _, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      NewFValue, F@_19, F@_20, F@_21, F@_22, F@_23,
			      F@_24, F@_25, TrUserData).

d_field_p_role_team(<<Value:64/little, Rest/binary>>,
		    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		    F@_17, F@_18, _, F@_20, F@_21, F@_22, F@_23, F@_24,
		    F@_25, TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, id(Value, TrUserData), F@_20, F@_21, F@_22,
			      F@_23, F@_24, F@_25, TrUserData).

d_field_p_role_marry(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_marry(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_marry(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, _, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, NewFValue, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_mname(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_mname(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_mname(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, _, F@_22, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, NewFValue, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_mtype(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		     TrUserData)
    when N < 57 ->
    d_field_p_role_mtype(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			 F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			 TrUserData);
d_field_p_role_mtype(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		     F@_18, F@_19, F@_20, F@_21, _, F@_23, F@_24, F@_25,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, NewFValue, F@_23, F@_24,
			      F@_25, TrUserData).

d_field_p_role_zoneid(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		      TrUserData)
    when N < 57 ->
    d_field_p_role_zoneid(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			  F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			  F@_25, TrUserData);
d_field_p_role_zoneid(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		      F@_18, F@_19, F@_20, F@_21, F@_22, _, F@_24, F@_25,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, NewFValue, F@_24,
			      F@_25, TrUserData).

d_field_p_role_ext(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   TrUserData)
    when N < 57 ->
    d_field_p_role_ext(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
		       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		       TrUserData);
d_field_p_role_ext(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, Prev, F@_25,
		   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23,
			      'tr_decode_repeated_add_elem_p_role.ext'(NewFValue,
								       Prev,
								       TrUserData),
			      F@_25, TrUserData).

d_field_p_role_icon(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		    TrUserData)
    when N < 57 ->
    d_field_p_role_icon(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			TrUserData);
d_field_p_role_icon(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		    F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, Prev,
		    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_icon(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_role(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_p_icon(Prev, NewFValue,
						      TrUserData)
			      end,
			      TrUserData).

skip_varint_p_role(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   TrUserData) ->
    skip_varint_p_role(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		       F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData);
skip_varint_p_role(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
		   F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
		   TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

skip_length_delimited_p_role(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_role(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				 F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
				 F@_22, F@_23, F@_24, F@_25, TrUserData);
skip_length_delimited_p_role(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			     F@_15, F@_16, F@_17, F@_18, F@_19, F@_20, F@_21,
			     F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_role(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData).

skip_group_p_role(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		  F@_13, F@_14, F@_15, F@_16, F@_17, F@_18, F@_19, F@_20,
		  F@_21, F@_22, F@_23, F@_24, F@_25, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_role(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
			      F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
			      TrUserData).

skip_32_p_role(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
	       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
	       TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

skip_64_p_role(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
	       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17, F@_18,
	       F@_19, F@_20, F@_21, F@_22, F@_23, F@_24, F@_25,
	       TrUserData) ->
    dfp_read_field_def_p_role(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, F@_17,
			      F@_18, F@_19, F@_20, F@_21, F@_22, F@_23, F@_24,
			      F@_25, TrUserData).

decode_msg_p_creep(Bin, TrUserData) ->
    dfp_read_field_def_p_creep(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), id([], TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       id(undefined, TrUserData),
			       'tr_decode_init_default_p_creep.ext'([],
								    TrUserData),
			       TrUserData).

dfp_read_field_def_p_creep(<<8, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_creep(<<17, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_owner(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_creep(<<24, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_hp(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_p_creep(<<32, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_hpmax(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_creep(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_speed(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_creep(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_buffs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_creep(<<56, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_dir(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_p_creep(<<66, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_dest(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 TrUserData);
dfp_read_field_def_p_creep(<<72, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_creep(<<80, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  TrUserData);
dfp_read_field_def_p_creep(<<90, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, TrUserData) ->
    d_field_p_creep_ext(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
dfp_read_field_def_p_creep(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, F@_5, R1, F@_7, F@_8, F@_9, F@_10, R2,
			   TrUserData) ->
    #p_creep{id = F@_1, owner = F@_2, hp = F@_3,
	     hpmax = F@_4, speed = F@_5,
	     buffs = lists_reverse(R1, TrUserData), dir = F@_7,
	     dest = F@_8, group = F@_9, level = F@_10,
	     ext =
		 'tr_decode_repeated_finalize_p_creep.ext'(R2,
							   TrUserData)};
dfp_read_field_def_p_creep(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			   F@_11, TrUserData) ->
    dg_read_field_def_p_creep(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			      F@_11, TrUserData).

dg_read_field_def_p_creep(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_creep(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, F@_10, F@_11, TrUserData);
dg_read_field_def_p_creep(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, F@_10, F@_11, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_creep_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      17 ->
	  d_field_p_creep_owner(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      24 ->
	  d_field_p_creep_hp(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     TrUserData);
      32 ->
	  d_field_p_creep_hpmax(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      40 ->
	  d_field_p_creep_speed(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      50 ->
	  d_field_p_creep_buffs(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      56 ->
	  d_field_p_creep_dir(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      66 ->
	  d_field_p_creep_dest(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       TrUserData);
      72 ->
	  d_field_p_creep_group(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      80 ->
	  d_field_p_creep_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, TrUserData);
      90 ->
	  d_field_p_creep_ext(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_creep(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
	    1 ->
		skip_64_p_creep(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				TrUserData);
	    2 ->
		skip_length_delimited_p_creep(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
	    3 ->
		skip_group_p_creep(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, TrUserData);
	    5 ->
		skip_32_p_creep(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				TrUserData)
	  end
    end;
dg_read_field_def_p_creep(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, R1, F@_7, F@_8, F@_9, F@_10, R2,
			  TrUserData) ->
    #p_creep{id = F@_1, owner = F@_2, hp = F@_3,
	     hpmax = F@_4, speed = F@_5,
	     buffs = lists_reverse(R1, TrUserData), dir = F@_7,
	     dest = F@_8, group = F@_9, level = F@_10,
	     ext =
		 'tr_decode_repeated_finalize_p_creep.ext'(R2,
							   TrUserData)}.

d_field_p_creep_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_id(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_p_creep_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		   F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

d_field_p_creep_owner(<<Value:64/little, Rest/binary>>,
		      Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_p_creep(Rest, Z1, Z2, F@_1,
			       id(Value, TrUserData), F@_3, F@_4, F@_5, F@_6,
			       F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData).

d_field_p_creep_hp(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_hp(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, TrUserData);
d_field_p_creep_hp(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_p_creep_hpmax(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_hpmax(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_p_creep_hpmax(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_p_creep_speed(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_speed(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_p_creep_speed(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_p_creep_buffs(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_buffs(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_p_creep_buffs(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_buff(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5,
			       cons(NewFValue, Prev, TrUserData), F@_7, F@_8,
			       F@_9, F@_10, F@_11, TrUserData).

d_field_p_creep_dir(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_dir(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_p_creep_dir(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
			       F@_10, F@_11, TrUserData).

d_field_p_creep_dest(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_dest(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, TrUserData);
d_field_p_creep_dest(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9,
		     F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_coord(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7,
			       if Prev == undefined -> NewFValue;
				  true ->
				      merge_msg_p_coord(Prev, NewFValue,
							TrUserData)
			       end,
			       F@_9, F@_10, F@_11, TrUserData).

d_field_p_creep_group(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_group(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_p_creep_group(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
		      F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
			       F@_10, F@_11, TrUserData).

d_field_p_creep_level(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_level(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, TrUserData);
d_field_p_creep_level(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _,
		      F@_11, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       NewFValue, F@_11, TrUserData).

d_field_p_creep_ext(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_p_creep_ext(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, TrUserData);
d_field_p_creep_ext(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,uint64>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_creep(RestF, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       'tr_decode_repeated_add_elem_p_creep.ext'(NewFValue,
									 Prev,
									 TrUserData),
			       TrUserData).

skip_varint_p_creep(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    skip_varint_p_creep(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			TrUserData);
skip_varint_p_creep(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_p_creep(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_length_delimited_p_creep(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_creep(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				  TrUserData);
skip_length_delimited_p_creep(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_creep(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_group_p_creep(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_creep(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_32_p_creep(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, TrUserData) ->
    dfp_read_field_def_p_creep(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

skip_64_p_creep(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		F@_11, TrUserData) ->
    dfp_read_field_def_p_creep(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			       F@_11, TrUserData).

decode_msg_p_npc(Bin, TrUserData) ->
    dfp_read_field_def_p_npc(Bin, 0, 0,
			     id(undefined, TrUserData),
			     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_npc(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_p_npc_id(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_p_npc(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_p_npc_coord(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_p_npc(<<>>, 0, 0, F@_1, F@_2, _) ->
    #p_npc{id = F@_1, coord = F@_2};
dfp_read_field_def_p_npc(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_p_npc(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_p_npc(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_npc(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_p_npc(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_npc_id(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_p_npc_coord(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_npc(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_p_npc(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_p_npc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_p_npc(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_p_npc(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_p_npc(<<>>, 0, 0, F@_1, F@_2, _) ->
    #p_npc{id = F@_1, coord = F@_2}.

d_field_p_npc_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		 F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_npc_id(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		     TrUserData);
d_field_p_npc_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		 F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_npc(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_p_npc_coord(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_npc_coord(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_p_npc_coord(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_coord(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_npc(RestF, 0, 0, F@_1,
			     if Prev == undefined -> NewFValue;
				true ->
				    merge_msg_p_coord(Prev, NewFValue,
						      TrUserData)
			     end,
			     TrUserData).

skip_varint_p_npc(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_p_npc(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_p_npc(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_npc(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_p_npc(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_npc(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_p_npc(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_npc(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_p_npc(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_npc(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_p_npc(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_p_npc(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_p_npc(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_p_npc(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

decode_msg_p_drop(Bin, TrUserData) ->
    dfp_read_field_def_p_drop(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_drop(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_num(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_mode(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_from(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<42, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_coord(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_pfield_p_drop_belong(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<49, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_belong(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<56, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData) ->
    d_field_p_drop_unlock(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_drop(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, R1, F@_7, TrUserData) ->
    #p_drop{id = F@_1, num = F@_2, mode = F@_3, from = F@_4,
	    coord = F@_5, belong = lists_reverse(R1, TrUserData),
	    unlock = F@_7};
dfp_read_field_def_p_drop(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_p_drop(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_p_drop(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_drop(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData);
dg_read_field_def_p_drop(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_drop_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_p_drop_num(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_p_drop_mode(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      32 ->
	  d_field_p_drop_from(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_p_drop_coord(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      50 ->
	  d_pfield_p_drop_belong(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      49 ->
	  d_field_p_drop_belong(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      56 ->
	  d_field_p_drop_unlock(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_drop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_p_drop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_drop(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
	    3 ->
		skip_group_p_drop(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_p_drop(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_drop(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, R1, F@_7, TrUserData) ->
    #p_drop{id = F@_1, num = F@_2, mode = F@_3, from = F@_4,
	    coord = F@_5, belong = lists_reverse(R1, TrUserData),
	    unlock = F@_7}.

d_field_p_drop_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_drop_id(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_drop_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_drop(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_drop_num(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_drop_num(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_drop_num(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_drop(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_drop_mode(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_drop_mode(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_drop_mode(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_drop(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_drop_from(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_drop_from(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_drop_from(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_p_drop(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_p_drop_coord(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_drop_coord(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_drop_coord(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_coord(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_drop(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4,
			      if Prev == undefined -> NewFValue;
				 true ->
				     merge_msg_p_coord(Prev, NewFValue,
						       TrUserData)
			      end,
			      F@_6, F@_7, TrUserData).

d_field_p_drop_belong(<<Value:64/little, Rest/binary>>,
		      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7,
		      TrUserData) ->
    dfp_read_field_def_p_drop(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5,
			      cons(id(Value, TrUserData), Prev, TrUserData),
			      F@_7, TrUserData).

d_pfield_p_drop_belong(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_pfield_p_drop_belong(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_pfield_p_drop_belong(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, E, F@_7,
		       TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_p_drop_belong(PackedBytes, 0, 0,
					  E, TrUserData),
    dfp_read_field_def_p_drop(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewSeq, F@_7, TrUserData).

d_packed_field_p_drop_belong(<<Value:64/little,
			       Rest/binary>>,
			     Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_p_drop_belong(Rest, Z1, Z2,
				 cons(id(Value, TrUserData), AccSeq,
				      TrUserData),
				 TrUserData);
d_packed_field_p_drop_belong(<<>>, _, _, AccSeq, _) ->
    AccSeq.

d_field_p_drop_unlock(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_drop_unlock(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_drop_unlock(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_drop(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_p_drop(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_p_drop(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_drop(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_drop(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_p_drop(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    skip_length_delimited_p_drop(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
skip_length_delimited_p_drop(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_drop(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_p_drop(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_drop(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_p_drop(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_drop(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_p_drop(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_drop(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_p_buff(Bin, TrUserData) ->
    dfp_read_field_def_p_buff(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), id([], TrUserData),
			      TrUserData).

dfp_read_field_def_p_buff(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_id(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_origin(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_eff(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<48, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_etime(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<56, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_group(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<66, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_pfield_p_buff_attrs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  TrUserData) ->
    d_field_p_buff_attrs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
dfp_read_field_def_p_buff(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, R1, TrUserData) ->
    #p_buff{id = F@_1, type = F@_2, origin = F@_3,
	    value = F@_4, eff = F@_5, etime = F@_6, group = F@_7,
	    attrs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_p_buff(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dg_read_field_def_p_buff(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

dg_read_field_def_p_buff(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_buff(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     TrUserData);
dg_read_field_def_p_buff(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_buff_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, F@_8, TrUserData);
      16 ->
	  d_field_p_buff_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, TrUserData);
      24 ->
	  d_field_p_buff_origin(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      32 ->
	  d_field_p_buff_value(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, TrUserData);
      40 ->
	  d_field_p_buff_eff(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, TrUserData);
      48 ->
	  d_field_p_buff_etime(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, TrUserData);
      56 ->
	  d_field_p_buff_group(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, TrUserData);
      66 ->
	  d_pfield_p_buff_attrs(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
      64 ->
	  d_field_p_buff_attrs(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_buff(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, F@_7, F@_8, TrUserData);
	    1 ->
		skip_64_p_buff(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, TrUserData);
	    2 ->
		skip_length_delimited_p_buff(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData);
	    3 ->
		skip_group_p_buff(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
	    5 ->
		skip_32_p_buff(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			       F@_6, F@_7, F@_8, TrUserData)
	  end
    end;
dg_read_field_def_p_buff(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, R1, TrUserData) ->
    #p_buff{id = F@_1, type = F@_2, origin = F@_3,
	    value = F@_4, eff = F@_5, etime = F@_6, group = F@_7,
	    attrs = lists_reverse(R1, TrUserData)}.

d_field_p_buff_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		  TrUserData)
    when N < 57 ->
    d_field_p_buff_id(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_id(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_buff_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		    TrUserData)
    when N < 57 ->
    d_field_p_buff_type(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_buff_origin(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData)
    when N < 57 ->
    d_field_p_buff_origin(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_origin(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
			      TrUserData).

d_field_p_buff_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     TrUserData)
    when N < 57 ->
    d_field_p_buff_value(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, F@_5, F@_6, F@_7, F@_8, TrUserData).

d_field_p_buff_eff(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   TrUserData)
    when N < 57 ->
    d_field_p_buff_eff(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_eff(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
		   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, NewFValue, F@_6, F@_7, F@_8, TrUserData).

d_field_p_buff_etime(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     TrUserData)
    when N < 57 ->
    d_field_p_buff_etime(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_etime(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, NewFValue, F@_7, F@_8, TrUserData).

d_field_p_buff_group(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     TrUserData)
    when N < 57 ->
    d_field_p_buff_group(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_group(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, NewFValue, F@_8, TrUserData).

d_field_p_buff_attrs(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		     TrUserData)
    when N < 57 ->
    d_field_p_buff_attrs(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_p_buff_attrs(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
		     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_buff(RestF, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7,
			      cons(NewFValue, Prev, TrUserData), TrUserData).

d_pfield_p_buff_attrs(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		      TrUserData)
    when N < 57 ->
    d_pfield_p_buff_attrs(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData);
d_pfield_p_buff_attrs(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, E,
		      TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_p_buff_attrs(PackedBytes, 0, 0,
					 E, TrUserData),
    dfp_read_field_def_p_buff(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, NewSeq, TrUserData).

d_packed_field_p_buff_attrs(<<1:1, X:7, Rest/binary>>,
			    N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_p_buff_attrs(Rest, N + 7, X bsl N + Acc,
				AccSeq, TrUserData);
d_packed_field_p_buff_attrs(<<0:1, X:7, Rest/binary>>,
			    N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_p_buff_attrs(RestF, 0, 0,
				[NewFValue | AccSeq], TrUserData);
d_packed_field_p_buff_attrs(<<>>, 0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_p_buff(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   TrUserData) ->
    skip_varint_p_buff(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, TrUserData);
skip_varint_p_buff(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		   TrUserData) ->
    dfp_read_field_def_p_buff(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_length_delimited_p_buff(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_buff(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				 TrUserData);
skip_length_delimited_p_buff(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_buff(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_group_p_buff(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_buff(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_32_p_buff(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_p_buff(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

skip_64_p_buff(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    dfp_read_field_def_p_buff(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData).

decode_msg_p_coord(Bin, TrUserData) ->
    dfp_read_field_def_p_coord(Bin, 0, 0,
			       id(undefined, TrUserData),
			       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_coord(<<9, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_p_coord_x(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_p_coord(<<17, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_p_coord_y(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_p_coord(<<>>, 0, 0, F@_1, F@_2, _) ->
    #p_coord{x = F@_1, y = F@_2};
dfp_read_field_def_p_coord(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_p_coord(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_p_coord(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_coord(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_p_coord(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_coord_x(Rest, 0, 0, F@_1, F@_2, TrUserData);
      17 ->
	  d_field_p_coord_y(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_coord(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_p_coord(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_p_coord(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_p_coord(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_p_coord(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_p_coord(<<>>, 0, 0, F@_1, F@_2, _) ->
    #p_coord{x = F@_1, y = F@_2}.

d_field_p_coord_x(<<0:48, 240, 127, Rest/binary>>, Z1,
		  Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2,
			       id(infinity, TrUserData), F@_2, TrUserData);
d_field_p_coord_x(<<0:48, 240, 255, Rest/binary>>, Z1,
		  Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2,
			       id('-infinity', TrUserData), F@_2, TrUserData);
d_field_p_coord_x(<<_:48, 15:4, _:4, _:1, 127:7,
		    Rest/binary>>,
		  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2,
			       id(nan, TrUserData), F@_2, TrUserData);
d_field_p_coord_x(<<Value:64/little-float,
		    Rest/binary>>,
		  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2,
			       id(Value, TrUserData), F@_2, TrUserData).

d_field_p_coord_y(<<0:48, 240, 127, Rest/binary>>, Z1,
		  Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1,
			       id(infinity, TrUserData), TrUserData);
d_field_p_coord_y(<<0:48, 240, 255, Rest/binary>>, Z1,
		  Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1,
			       id('-infinity', TrUserData), TrUserData);
d_field_p_coord_y(<<_:48, 15:4, _:4, _:1, 127:7,
		    Rest/binary>>,
		  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1,
			       id(nan, TrUserData), TrUserData);
d_field_p_coord_y(<<Value:64/little-float,
		    Rest/binary>>,
		  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1,
			       id(Value, TrUserData), TrUserData).

skip_varint_p_coord(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_p_coord(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_p_coord(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_p_coord(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_coord(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_p_coord(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_coord(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_p_coord(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_coord(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_p_coord(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_p_coord(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_p_coord(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_p_icon(Bin, TrUserData) ->
    dfp_read_field_def_p_icon(Bin, 0, 0,
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData),
			      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_icon(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_icon_pic(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
dfp_read_field_def_p_icon(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_icon_md5(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
dfp_read_field_def_p_icon(<<24, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_icon_frame(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_p_icon(<<32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_icon_bubble(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_p_icon(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  F@_4, _) ->
    #p_icon{pic = F@_1, md5 = F@_2, frame = F@_3,
	    bubble = F@_4};
dfp_read_field_def_p_icon(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_icon(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData).

dg_read_field_def_p_icon(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_icon(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_p_icon(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_icon_pic(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData);
      18 ->
	  d_field_p_icon_md5(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData);
      24 ->
	  d_field_p_icon_frame(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      32 ->
	  d_field_p_icon_bubble(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_icon(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
	    1 ->
		skip_64_p_icon(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
	    2 ->
		skip_length_delimited_p_icon(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_p_icon(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
	    5 ->
		skip_32_p_icon(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData)
	  end
    end;
dg_read_field_def_p_icon(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, _) ->
    #p_icon{pic = F@_1, md5 = F@_2, frame = F@_3,
	    bubble = F@_4}.

d_field_p_icon_pic(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_icon_pic(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, TrUserData);
d_field_p_icon_pic(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_icon(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, F@_4, TrUserData).

d_field_p_icon_md5(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_icon_md5(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, TrUserData);
d_field_p_icon_md5(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_icon(RestF, 0, 0, F@_1, NewFValue,
			      F@_3, F@_4, TrUserData).

d_field_p_icon_frame(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_icon_frame(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_p_icon_frame(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_icon(RestF, 0, 0, F@_1, F@_2,
			      NewFValue, F@_4, TrUserData).

d_field_p_icon_bubble(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_icon_bubble(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_p_icon_bubble(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_icon(RestF, 0, 0, F@_1, F@_2, F@_3,
			      NewFValue, TrUserData).

skip_varint_p_icon(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_icon(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       TrUserData);
skip_varint_p_icon(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_icon(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_length_delimited_p_icon(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_icon(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_p_icon(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_icon(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_group_p_icon(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_icon(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      F@_4, TrUserData).

skip_32_p_icon(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_icon(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

skip_64_p_icon(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_icon(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData).

decode_msg_p_ranking(Bin, TrUserData) ->
    dfp_read_field_def_p_ranking(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 'tr_decode_init_default_p_ranking.data'([],
									 TrUserData),
				 TrUserData).

dfp_read_field_def_p_ranking(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_ranking_base(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_p_ranking(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_ranking_rank(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_p_ranking(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_ranking_sort(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_p_ranking(<<34, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_ranking_data(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData);
dfp_read_field_def_p_ranking(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, R1, TrUserData) ->
    #p_ranking{base = F@_1, rank = F@_2, sort = F@_3,
	       data =
		   'tr_decode_repeated_finalize_p_ranking.data'(R1,
								TrUserData)};
dfp_read_field_def_p_ranking(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_ranking(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

dg_read_field_def_p_ranking(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_ranking(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_p_ranking(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_ranking_base(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      16 ->
	  d_field_p_ranking_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      24 ->
	  d_field_p_ranking_sort(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      34 ->
	  d_field_p_ranking_data(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_ranking(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    1 ->
		skip_64_p_ranking(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
	    2 ->
		skip_length_delimited_p_ranking(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_p_ranking(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_p_ranking(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData)
	  end
    end;
dg_read_field_def_p_ranking(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, R1, TrUserData) ->
    #p_ranking{base = F@_1, rank = F@_2, sort = F@_3,
	       data =
		   'tr_decode_repeated_finalize_p_ranking.data'(R1,
								TrUserData)}.

d_field_p_ranking_base(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_ranking_base(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_p_ranking_base(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_role_base(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_ranking(RestF, 0, 0,
				 if Prev == undefined -> NewFValue;
				    true ->
					merge_msg_p_role_base(Prev, NewFValue,
							      TrUserData)
				 end,
				 F@_2, F@_3, F@_4, TrUserData).

d_field_p_ranking_rank(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_ranking_rank(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_p_ranking_rank(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_ranking(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, TrUserData).

d_field_p_ranking_sort(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_ranking_sort(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_p_ranking_sort(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_ranking(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, TrUserData).

d_field_p_ranking_data(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_ranking_data(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
d_field_p_ranking_data(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_ranking(RestF, 0, 0, F@_1, F@_2,
				 F@_3,
				 'tr_decode_repeated_add_elem_p_ranking.data'(NewFValue,
									      Prev,
									      TrUserData),
				 TrUserData).

skip_varint_p_ranking(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_ranking(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
skip_varint_p_ranking(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_ranking(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_length_delimited_p_ranking(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_ranking(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
skip_length_delimited_p_ranking(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_ranking(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_group_p_ranking(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_ranking(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_32_p_ranking(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_ranking(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_64_p_ranking(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_ranking(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

decode_msg_p_dropped(Bin, TrUserData) ->
    dfp_read_field_def_p_dropped(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_dropped(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_scene(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<25, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_picker_id(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<34, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_picker_name(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<42, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_boss(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<48, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_item_id(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<56, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_dropped_cache_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_dropped(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #p_dropped{time = F@_1, scene = F@_2, picker_id = F@_3,
	       picker_name = F@_4, boss = F@_5, item_id = F@_6,
	       cache_id = F@_7};
dfp_read_field_def_p_dropped(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_p_dropped(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_p_dropped(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_dropped(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
dg_read_field_def_p_dropped(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_dropped_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_p_dropped_scene(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, TrUserData);
      25 ->
	  d_field_p_dropped_picker_id(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
      34 ->
	  d_field_p_dropped_picker_name(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
      42 ->
	  d_field_p_dropped_boss(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      48 ->
	  d_field_p_dropped_item_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      56 ->
	  d_field_p_dropped_cache_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_dropped(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_p_dropped(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_dropped(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						TrUserData);
	    3 ->
		skip_group_p_dropped(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_p_dropped(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_dropped(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #p_dropped{time = F@_1, scene = F@_2, picker_id = F@_3,
	       picker_name = F@_4, boss = F@_5, item_id = F@_6,
	       cache_id = F@_7}.

d_field_p_dropped_time(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_p_dropped_time(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_dropped_time(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_dropped(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_p_dropped_scene(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData)
    when N < 57 ->
    d_field_p_dropped_scene(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData);
d_field_p_dropped_scene(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_dropped(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_p_dropped_picker_id(<<Value:64/little,
			      Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    dfp_read_field_def_p_dropped(Rest, Z1, Z2, F@_1, F@_2,
				 id(Value, TrUserData), F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_p_dropped_picker_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    d_field_p_dropped_picker_name(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
d_field_p_dropped_picker_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_dropped(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_p_dropped_boss(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_p_dropped_boss(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_dropped_boss(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_dropped(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_p_dropped_item_id(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_p_dropped_item_id(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_p_dropped_item_id(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_dropped(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_p_dropped_cache_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_p_dropped_cache_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_p_dropped_cache_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_dropped(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, NewFValue, TrUserData).

skip_varint_p_dropped(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_p_dropped(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_dropped(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_dropped(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_p_dropped(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_dropped(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
skip_length_delimited_p_dropped(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_dropped(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_p_dropped(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_dropped(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_p_dropped(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_dropped(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_p_dropped(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_dropped(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

'decode_msg_map<string,p_aspect>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,p_aspect>'(Bin, 0, 0,
					      id([], TrUserData),
					      id('$undef', TrUserData),
					      TrUserData).

'dfp_read_field_def_map<string,p_aspect>'(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,p_aspect>_key'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,p_aspect>'(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,p_aspect>_value'(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
'dfp_read_field_def_map<string,p_aspect>'(<<>>, 0, 0,
					  F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,p_aspect>'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,p_aspect>'(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,p_aspect>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,p_aspect>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'dg_read_field_def_map<string,p_aspect>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,p_aspect>_key'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      18 ->
	  'd_field_map<string,p_aspect>_value'(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,p_aspect>'(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		'skip_64_map<string,p_aspect>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		'skip_length_delimited_map<string,p_aspect>'(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		'skip_group_map<string,p_aspect>'(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,p_aspect>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
'dg_read_field_def_map<string,p_aspect>'(<<>>, 0, 0,
					 F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,p_aspect>_key'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,p_aspect>_key'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,p_aspect>_key'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,p_aspect>'(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

'd_field_map<string,p_aspect>_value'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,p_aspect>_value'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,p_aspect>_value'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_aspect(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,p_aspect>'(RestF, 0, 0,
					      F@_1,
					      if Prev == '$undef' -> NewFValue;
						 true ->
						     merge_msg_p_aspect(Prev,
									NewFValue,
									TrUserData)
					      end,
					      TrUserData).

'skip_varint_map<string,p_aspect>'(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,p_aspect>'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'skip_varint_map<string,p_aspect>'(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,p_aspect>'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,p_aspect>'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,p_aspect>'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'skip_length_delimited_map<string,p_aspect>'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,p_aspect>'(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

'skip_group_map<string,p_aspect>'(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,p_aspect>'(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

'skip_32_map<string,p_aspect>'(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,p_aspect>'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'skip_64_map<string,p_aspect>'(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,p_aspect>'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

'decode_msg_map<int32,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,string>'(Bin, 0, 0,
					   id(0, TrUserData),
					   id([], TrUserData), TrUserData).

'dfp_read_field_def_map<int32,string>'(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,string>_key'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_map<int32,string>'(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,string>_value'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_map<int32,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,string>'(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,string>'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,string>'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,string>'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'dg_read_field_def_map<int32,string>'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,string>_key'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  'd_field_map<int32,string>_value'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,string>'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		'skip_64_map<int32,string>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,string>'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		'skip_group_map<int32,string>'(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,string>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,string>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,string>_key'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,string>_key'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,string>_key'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,string>'(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

'd_field_map<int32,string>_value'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,string>_value'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,string>_value'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<int32,string>'(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

'skip_varint_map<int32,string>'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,string>'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'skip_varint_map<int32,string>'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,string>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,string>'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,string>'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'skip_length_delimited_map<int32,string>'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,string>'(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

'skip_group_map<int32,string>'(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,string>'(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

'skip_32_map<int32,string>'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,string>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_64_map<int32,string>'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,string>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'decode_msg_map<string,uint64>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,uint64>'(Bin, 0, 0,
					    id([], TrUserData),
					    id(0, TrUserData), TrUserData).

'dfp_read_field_def_map<string,uint64>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,uint64>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,uint64>'(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,uint64>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,uint64>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,uint64>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,uint64>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,uint64>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,uint64>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,uint64>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,uint64>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  'd_field_map<string,uint64>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,uint64>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,uint64>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,uint64>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,uint64>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,uint64>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,uint64>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,uint64>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,uint64>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,uint64>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,uint64>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,uint64>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,uint64>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,uint64>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    'dfp_read_field_def_map<string,uint64>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,uint64>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,uint64>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,uint64>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,uint64>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,uint64>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,uint64>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,uint64>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,uint64>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,uint64>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,uint64>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,uint64>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,uint64>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,uint64>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,uint64>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'decode_msg_map<int32,p_item>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,p_item>'(Bin, 0, 0,
					   id(0, TrUserData),
					   id('$undef', TrUserData),
					   TrUserData).

'dfp_read_field_def_map<int32,p_item>'(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,p_item>_key'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_map<int32,p_item>'(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,p_item>_value'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_map<int32,p_item>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<int32,p_item>'(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,p_item>'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,p_item>'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,p_item>'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'dg_read_field_def_map<int32,p_item>'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,p_item>_key'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  'd_field_map<int32,p_item>_value'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,p_item>'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		'skip_64_map<int32,p_item>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,p_item>'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		'skip_group_map<int32,p_item>'(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,p_item>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,p_item>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<int32,p_item>_key'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,p_item>_key'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,p_item>_key'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,p_item>'(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

'd_field_map<int32,p_item>_value'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,p_item>_value'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,p_item>_value'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_item(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<int32,p_item>'(RestF, 0, 0,
					   F@_1,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_p_item(Prev,
								   NewFValue,
								   TrUserData)
					   end,
					   TrUserData).

'skip_varint_map<int32,p_item>'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,p_item>'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'skip_varint_map<int32,p_item>'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,p_item>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,p_item>'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,p_item>'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'skip_length_delimited_map<int32,p_item>'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,p_item>'(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

'skip_group_map<int32,p_item>'(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,p_item>'(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

'skip_32_map<int32,p_item>'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,p_item>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_64_map<int32,p_item>'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,p_item>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'decode_msg_map<string,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Bin, 0, 0,
					   id([], TrUserData),
					   id(0, TrUserData), TrUserData).

'dfp_read_field_def_map<string,int32>'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,int32>_key'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_map<string,int32>'(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,int32>_value'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_map<string,int32>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,int32>'(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,int32>'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,int32>'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,int32>'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'dg_read_field_def_map<string,int32>'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  'd_field_map<string,int32>_value'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,int32>'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		'skip_64_map<string,int32>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		'skip_length_delimited_map<string,int32>'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		'skip_group_map<string,int32>'(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,int32>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
'dg_read_field_def_map<string,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,int32>_key'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,int32>_key'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,int32>_key'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,int32>'(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

'd_field_map<string,int32>_value'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,int32>_value'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,int32>_value'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<string,int32>'(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

'skip_varint_map<string,int32>'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,int32>'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'skip_varint_map<string,int32>'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,int32>'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,int32>'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'skip_length_delimited_map<string,int32>'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,int32>'(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

'skip_group_map<string,int32>'(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,int32>'(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

'skip_32_map<string,int32>'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_64_map<string,int32>'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_magic_card_list_tos ->
	  merge_msg_m_magic_card_list_tos(Prev, New, TrUserData);
      m_magic_card_list_toc ->
	  merge_msg_m_magic_card_list_toc(Prev, New, TrUserData);
      m_magic_card_puton_tos ->
	  merge_msg_m_magic_card_puton_tos(Prev, New, TrUserData);
      m_magic_card_puton_toc ->
	  merge_msg_m_magic_card_puton_toc(Prev, New, TrUserData);
      m_magic_card_upstar_tos ->
	  merge_msg_m_magic_card_upstar_tos(Prev, New,
					    TrUserData);
      m_magic_card_upstar_toc ->
	  merge_msg_m_magic_card_upstar_toc(Prev, New,
					    TrUserData);
      m_magic_card_strength_tos ->
	  merge_msg_m_magic_card_strength_tos(Prev, New,
					      TrUserData);
      m_magic_card_strength_toc ->
	  merge_msg_m_magic_card_strength_toc(Prev, New,
					      TrUserData);
      m_magic_card_decompose_tos ->
	  merge_msg_m_magic_card_decompose_tos(Prev, New,
					       TrUserData);
      m_magic_card_decompose_toc ->
	  merge_msg_m_magic_card_decompose_toc(Prev, New,
					       TrUserData);
      m_magic_card_suite_toc ->
	  merge_msg_m_magic_card_suite_toc(Prev, New, TrUserData);
      m_magic_card_combine_tos ->
	  merge_msg_m_magic_card_combine_tos(Prev, New,
					     TrUserData);
      m_magic_card_combine_toc ->
	  merge_msg_m_magic_card_combine_toc(Prev, New,
					     TrUserData);
      m_magic_card_get_set_tos ->
	  merge_msg_m_magic_card_get_set_tos(Prev, New,
					     TrUserData);
      m_magic_card_get_set_toc ->
	  merge_msg_m_magic_card_get_set_toc(Prev, New,
					     TrUserData);
      m_magic_card_decompose_set_tos ->
	  merge_msg_m_magic_card_decompose_set_tos(Prev, New,
						   TrUserData);
      m_magic_card_decompose_set_toc ->
	  merge_msg_m_magic_card_decompose_set_toc(Prev, New,
						   TrUserData);
      m_magic_card_bag_info_tos ->
	  merge_msg_m_magic_card_bag_info_tos(Prev, New,
					      TrUserData);
      m_magic_card_bag_info_toc ->
	  merge_msg_m_magic_card_bag_info_toc(Prev, New,
					      TrUserData);
      m_magic_card_putoff_toc ->
	  merge_msg_m_magic_card_putoff_toc(Prev, New,
					    TrUserData);
      m_magic_power_toc ->
	  merge_msg_m_magic_power_toc(Prev, New, TrUserData);
      p_role_base ->
	  merge_msg_p_role_base(Prev, New, TrUserData);
      p_aspect -> merge_msg_p_aspect(Prev, New, TrUserData);
      p_attr -> merge_msg_p_attr(Prev, New, TrUserData);
      p_item_base ->
	  merge_msg_p_item_base(Prev, New, TrUserData);
      p_item -> merge_msg_p_item(Prev, New, TrUserData);
      p_equip -> merge_msg_p_equip(Prev, New, TrUserData);
      p_pet -> merge_msg_p_pet(Prev, New, TrUserData);
      p_marriage ->
	  merge_msg_p_marriage(Prev, New, TrUserData);
      p_refine -> merge_msg_p_refine(Prev, New, TrUserData);
      p_actor -> merge_msg_p_actor(Prev, New, TrUserData);
      p_role -> merge_msg_p_role(Prev, New, TrUserData);
      p_creep -> merge_msg_p_creep(Prev, New, TrUserData);
      p_npc -> merge_msg_p_npc(Prev, New, TrUserData);
      p_drop -> merge_msg_p_drop(Prev, New, TrUserData);
      p_buff -> merge_msg_p_buff(Prev, New, TrUserData);
      p_coord -> merge_msg_p_coord(Prev, New, TrUserData);
      p_icon -> merge_msg_p_icon(Prev, New, TrUserData);
      p_ranking -> merge_msg_p_ranking(Prev, New, TrUserData);
      p_dropped -> merge_msg_p_dropped(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_magic_card_list_tos/3}).
merge_msg_m_magic_card_list_tos(_Prev, New,
				_TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_list_toc/3}).
merge_msg_m_magic_card_list_toc(#m_magic_card_list_toc{cards
							   = PFcards},
				#m_magic_card_list_toc{cards = NFcards},
				TrUserData) ->
    #m_magic_card_list_toc{cards =
			       if PFcards /= undefined, NFcards /= undefined ->
				      'tr_merge_m_magic_card_list_toc.cards'(PFcards,
									     NFcards,
									     TrUserData);
				  PFcards == undefined -> NFcards;
				  NFcards == undefined -> PFcards
			       end}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_puton_tos/3}).
merge_msg_m_magic_card_puton_tos(#m_magic_card_puton_tos{},
				 #m_magic_card_puton_tos{pos = NFpos,
							 uid = NFuid},
				 _) ->
    #m_magic_card_puton_tos{pos = NFpos, uid = NFuid}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_puton_toc/3}).
merge_msg_m_magic_card_puton_toc(_Prev, New,
				 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_upstar_tos/3}).
merge_msg_m_magic_card_upstar_tos(#m_magic_card_upstar_tos{},
				  #m_magic_card_upstar_tos{pos = NFpos}, _) ->
    #m_magic_card_upstar_tos{pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_upstar_toc/3}).
merge_msg_m_magic_card_upstar_toc(#m_magic_card_upstar_toc{},
				  #m_magic_card_upstar_toc{pos = NFpos}, _) ->
    #m_magic_card_upstar_toc{pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_strength_tos/3}).
merge_msg_m_magic_card_strength_tos(#m_magic_card_strength_tos{},
				    #m_magic_card_strength_tos{pos = NFpos},
				    _) ->
    #m_magic_card_strength_tos{pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_strength_toc/3}).
merge_msg_m_magic_card_strength_toc(#m_magic_card_strength_toc{},
				    #m_magic_card_strength_toc{pos = NFpos},
				    _) ->
    #m_magic_card_strength_toc{pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_decompose_tos/3}).
merge_msg_m_magic_card_decompose_tos(#m_magic_card_decompose_tos{uid
								     = PFuid},
				     #m_magic_card_decompose_tos{uid = NFuid},
				     TrUserData) ->
    #m_magic_card_decompose_tos{uid =
				    if PFuid /= undefined, NFuid /= undefined ->
					   'erlang_++'(PFuid, NFuid,
						       TrUserData);
				       PFuid == undefined -> NFuid;
				       NFuid == undefined -> PFuid
				    end}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_decompose_toc/3}).
merge_msg_m_magic_card_decompose_toc(_Prev, New,
				     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_suite_toc/3}).
merge_msg_m_magic_card_suite_toc(#m_magic_card_suite_toc{},
				 #m_magic_card_suite_toc{suite_id = NFsuite_id},
				 _) ->
    #m_magic_card_suite_toc{suite_id = NFsuite_id}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_combine_tos/3}).
merge_msg_m_magic_card_combine_tos(#m_magic_card_combine_tos{},
				   #m_magic_card_combine_tos{r_item_id =
								 NFr_item_id},
				   _) ->
    #m_magic_card_combine_tos{r_item_id = NFr_item_id}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_combine_toc/3}).
merge_msg_m_magic_card_combine_toc(_Prev, New,
				   _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_get_set_tos/3}).
merge_msg_m_magic_card_get_set_tos(_Prev, New,
				   _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_get_set_toc/3}).
merge_msg_m_magic_card_get_set_toc(#m_magic_card_get_set_toc{auto
								 = PFauto,
							     color = PFcolor},
				   #m_magic_card_get_set_toc{auto = NFauto,
							     color = NFcolor},
				   TrUserData) ->
    #m_magic_card_get_set_toc{auto =
				  if NFauto =:= undefined -> PFauto;
				     true -> NFauto
				  end,
			      color =
				  if PFcolor /= undefined,
				     NFcolor /= undefined ->
					 'erlang_++'(PFcolor, NFcolor,
						     TrUserData);
				     PFcolor == undefined -> NFcolor;
				     NFcolor == undefined -> PFcolor
				  end}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_decompose_set_tos/3}).
merge_msg_m_magic_card_decompose_set_tos(#m_magic_card_decompose_set_tos{auto
									     =
									     PFauto,
									 color =
									     PFcolor},
					 #m_magic_card_decompose_set_tos{auto =
									     NFauto,
									 color =
									     NFcolor},
					 TrUserData) ->
    #m_magic_card_decompose_set_tos{auto =
					if NFauto =:= undefined -> PFauto;
					   true -> NFauto
					end,
				    color =
					if PFcolor /= undefined,
					   NFcolor /= undefined ->
					       'erlang_++'(PFcolor, NFcolor,
							   TrUserData);
					   PFcolor == undefined -> NFcolor;
					   NFcolor == undefined -> PFcolor
					end}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_decompose_set_toc/3}).
merge_msg_m_magic_card_decompose_set_toc(_Prev, New,
					 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_bag_info_tos/3}).
merge_msg_m_magic_card_bag_info_tos(_Prev, New,
				    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_magic_card_bag_info_toc/3}).
merge_msg_m_magic_card_bag_info_toc(#m_magic_card_bag_info_toc{items
								   = PFitems},
				    #m_magic_card_bag_info_toc{items = NFitems},
				    TrUserData) ->
    #m_magic_card_bag_info_toc{items =
				   if PFitems /= undefined,
				      NFitems /= undefined ->
					  'tr_merge_m_magic_card_bag_info_toc.items'(PFitems,
										     NFitems,
										     TrUserData);
				      PFitems == undefined -> NFitems;
				      NFitems == undefined -> PFitems
				   end}.

-compile({nowarn_unused_function,merge_msg_m_magic_card_putoff_toc/3}).
merge_msg_m_magic_card_putoff_toc(#m_magic_card_putoff_toc{pos
							       = PFpos},
				  #m_magic_card_putoff_toc{pos = NFpos},
				  TrUserData) ->
    #m_magic_card_putoff_toc{pos =
				 if PFpos /= undefined, NFpos /= undefined ->
					'erlang_++'(PFpos, NFpos, TrUserData);
				    PFpos == undefined -> NFpos;
				    NFpos == undefined -> PFpos
				 end}.

-compile({nowarn_unused_function,merge_msg_m_magic_power_toc/3}).
merge_msg_m_magic_power_toc(#m_magic_power_toc{},
			    #m_magic_power_toc{power = NFpower}, _) ->
    #m_magic_power_toc{power = NFpower}.

-compile({nowarn_unused_function,merge_msg_p_role_base/3}).
merge_msg_p_role_base(#p_role_base{figure = PFfigure,
				   icon = PFicon},
		      #p_role_base{id = NFid, name = NFname,
				   career = NFcareer, gender = NFgender,
				   level = NFlevel, viplv = NFviplv,
				   power = NFpower, figure = NFfigure,
				   guild = NFguild, gname = NFgname,
				   charm = NFcharm, wake = NFwake,
				   gpost = NFgpost, marry = NFmarry,
				   mname = NFmname, mtype = NFmtype,
				   icon = NFicon, suid = NFsuid,
				   zoneid = NFzoneid, team = NFteam},
		      TrUserData) ->
    #p_role_base{id = NFid, name = NFname,
		 career = NFcareer, gender = NFgender, level = NFlevel,
		 viplv = NFviplv, power = NFpower,
		 figure =
		     if PFfigure /= undefined, NFfigure /= undefined ->
			    'tr_merge_p_role_base.figure'(PFfigure, NFfigure,
							  TrUserData);
			PFfigure == undefined -> NFfigure;
			NFfigure == undefined -> PFfigure
		     end,
		 guild = NFguild, gname = NFgname, charm = NFcharm,
		 wake = NFwake, gpost = NFgpost, marry = NFmarry,
		 mname = NFmname, mtype = NFmtype,
		 icon =
		     if PFicon /= undefined, NFicon /= undefined ->
			    merge_msg_p_icon(PFicon, NFicon, TrUserData);
			PFicon == undefined -> NFicon;
			NFicon == undefined -> PFicon
		     end,
		 suid = NFsuid, zoneid = NFzoneid, team = NFteam}.

-compile({nowarn_unused_function,merge_msg_p_aspect/3}).
merge_msg_p_aspect(#p_aspect{model = PFmodel,
			     skin = PFskin, show = PFshow},
		   #p_aspect{model = NFmodel, skin = NFskin,
			     show = NFshow},
		   _) ->
    #p_aspect{model =
		  if NFmodel =:= undefined -> PFmodel;
		     true -> NFmodel
		  end,
	      skin =
		  if NFskin =:= undefined -> PFskin;
		     true -> NFskin
		  end,
	      show =
		  if NFshow =:= undefined -> PFshow;
		     true -> NFshow
		  end}.

-compile({nowarn_unused_function,merge_msg_p_attr/3}).
merge_msg_p_attr(#p_attr{hp = PFhp, hpmax = PFhpmax,
			 speed = PFspeed, att = PFatt, def = PFdef,
			 wreck = PFwreck, hit = PFhit, miss = PFmiss,
			 crit = PFcrit, tough = PFtough, holy_att = PFholy_att,
			 holy_def = PFholy_def, abs_att = PFabs_att,
			 abs_miss = PFabs_miss, dmg_amp = PFdmg_amp,
			 dmg_red = PFdmg_red, hit_pro = PFhit_pro,
			 miss_pro = PFmiss_pro, armor_pro = PFarmor_pro,
			 armor_str = PFarmor_str, block_pro = PFblock_pro,
			 block_str = PFblock_str, crit_pro = PFcrit_pro,
			 crit_res = PFcrit_res, heart_pro = PFheart_pro,
			 heart_res = PFheart_res, crit_dmg = PFcrit_dmg,
			 crit_red = PFcrit_red, heart_dmg = PFheart_dmg,
			 heart_red = PFheart_red, skill_amp = PFskill_amp,
			 skill_red = PFskill_red, thump_pro = PFthump_pro,
			 weak_pro = PFweak_pro,
			 skill_att_power = PFskill_att_power,
			 skill_def_power = PFskill_def_power,
			 hew_amp = PFhew_amp, block_red = PFblock_red,
			 boss_amp = PFboss_amp, creep_amp = PFcreep_amp,
			 pvp_red = PFpvp_red, pvp_armor_pro = PFpvp_armor_pro,
			 pvp_armor_str = PFpvp_armor_str, exp_per = PFexp_per,
			 gold_drop = PFgold_drop, item_drop = PFitem_drop,
			 equip_def = PFequip_def, equip_hpmax = PFequip_hpmax,
			 equip_att = PFequip_att, power = PFpower,
			 all_gp = PFall_gp, hpmax_gp = PFhpmax_gp,
			 att_gp = PFatt_gp, def_gp = PFdef_gp,
			 wreck_gp = PFwreck_gp, hit_gp = PFhit_gp,
			 miss_gp = PFmiss_gp, crit_gp = PFcrit_gp,
			 tough_gp = PFtough_gp, holy_att_gp = PFholy_att_gp,
			 holy_def_gp = PFholy_def_gp, hpmax_bp = PFhpmax_bp,
			 att_bp = PFatt_bp, def_bp = PFdef_bp,
			 wreck_bp = PFwreck_bp},
		 #p_attr{hp = NFhp, hpmax = NFhpmax, speed = NFspeed,
			 att = NFatt, def = NFdef, wreck = NFwreck, hit = NFhit,
			 miss = NFmiss, crit = NFcrit, tough = NFtough,
			 holy_att = NFholy_att, holy_def = NFholy_def,
			 abs_att = NFabs_att, abs_miss = NFabs_miss,
			 dmg_amp = NFdmg_amp, dmg_red = NFdmg_red,
			 hit_pro = NFhit_pro, miss_pro = NFmiss_pro,
			 armor_pro = NFarmor_pro, armor_str = NFarmor_str,
			 block_pro = NFblock_pro, block_str = NFblock_str,
			 crit_pro = NFcrit_pro, crit_res = NFcrit_res,
			 heart_pro = NFheart_pro, heart_res = NFheart_res,
			 crit_dmg = NFcrit_dmg, crit_red = NFcrit_red,
			 heart_dmg = NFheart_dmg, heart_red = NFheart_red,
			 skill_amp = NFskill_amp, skill_red = NFskill_red,
			 thump_pro = NFthump_pro, weak_pro = NFweak_pro,
			 skill_att_power = NFskill_att_power,
			 skill_def_power = NFskill_def_power,
			 hew_amp = NFhew_amp, block_red = NFblock_red,
			 boss_amp = NFboss_amp, creep_amp = NFcreep_amp,
			 pvp_red = NFpvp_red, pvp_armor_pro = NFpvp_armor_pro,
			 pvp_armor_str = NFpvp_armor_str, exp_per = NFexp_per,
			 gold_drop = NFgold_drop, item_drop = NFitem_drop,
			 equip_def = NFequip_def, equip_hpmax = NFequip_hpmax,
			 equip_att = NFequip_att, power = NFpower,
			 all_gp = NFall_gp, hpmax_gp = NFhpmax_gp,
			 att_gp = NFatt_gp, def_gp = NFdef_gp,
			 wreck_gp = NFwreck_gp, hit_gp = NFhit_gp,
			 miss_gp = NFmiss_gp, crit_gp = NFcrit_gp,
			 tough_gp = NFtough_gp, holy_att_gp = NFholy_att_gp,
			 holy_def_gp = NFholy_def_gp, hpmax_bp = NFhpmax_bp,
			 att_bp = NFatt_bp, def_bp = NFdef_bp,
			 wreck_bp = NFwreck_bp},
		 _) ->
    #p_attr{hp =
		if NFhp =:= undefined -> PFhp;
		   true -> NFhp
		end,
	    hpmax =
		if NFhpmax =:= undefined -> PFhpmax;
		   true -> NFhpmax
		end,
	    speed =
		if NFspeed =:= undefined -> PFspeed;
		   true -> NFspeed
		end,
	    att =
		if NFatt =:= undefined -> PFatt;
		   true -> NFatt
		end,
	    def =
		if NFdef =:= undefined -> PFdef;
		   true -> NFdef
		end,
	    wreck =
		if NFwreck =:= undefined -> PFwreck;
		   true -> NFwreck
		end,
	    hit =
		if NFhit =:= undefined -> PFhit;
		   true -> NFhit
		end,
	    miss =
		if NFmiss =:= undefined -> PFmiss;
		   true -> NFmiss
		end,
	    crit =
		if NFcrit =:= undefined -> PFcrit;
		   true -> NFcrit
		end,
	    tough =
		if NFtough =:= undefined -> PFtough;
		   true -> NFtough
		end,
	    holy_att =
		if NFholy_att =:= undefined -> PFholy_att;
		   true -> NFholy_att
		end,
	    holy_def =
		if NFholy_def =:= undefined -> PFholy_def;
		   true -> NFholy_def
		end,
	    abs_att =
		if NFabs_att =:= undefined -> PFabs_att;
		   true -> NFabs_att
		end,
	    abs_miss =
		if NFabs_miss =:= undefined -> PFabs_miss;
		   true -> NFabs_miss
		end,
	    dmg_amp =
		if NFdmg_amp =:= undefined -> PFdmg_amp;
		   true -> NFdmg_amp
		end,
	    dmg_red =
		if NFdmg_red =:= undefined -> PFdmg_red;
		   true -> NFdmg_red
		end,
	    hit_pro =
		if NFhit_pro =:= undefined -> PFhit_pro;
		   true -> NFhit_pro
		end,
	    miss_pro =
		if NFmiss_pro =:= undefined -> PFmiss_pro;
		   true -> NFmiss_pro
		end,
	    armor_pro =
		if NFarmor_pro =:= undefined -> PFarmor_pro;
		   true -> NFarmor_pro
		end,
	    armor_str =
		if NFarmor_str =:= undefined -> PFarmor_str;
		   true -> NFarmor_str
		end,
	    block_pro =
		if NFblock_pro =:= undefined -> PFblock_pro;
		   true -> NFblock_pro
		end,
	    block_str =
		if NFblock_str =:= undefined -> PFblock_str;
		   true -> NFblock_str
		end,
	    crit_pro =
		if NFcrit_pro =:= undefined -> PFcrit_pro;
		   true -> NFcrit_pro
		end,
	    crit_res =
		if NFcrit_res =:= undefined -> PFcrit_res;
		   true -> NFcrit_res
		end,
	    heart_pro =
		if NFheart_pro =:= undefined -> PFheart_pro;
		   true -> NFheart_pro
		end,
	    heart_res =
		if NFheart_res =:= undefined -> PFheart_res;
		   true -> NFheart_res
		end,
	    crit_dmg =
		if NFcrit_dmg =:= undefined -> PFcrit_dmg;
		   true -> NFcrit_dmg
		end,
	    crit_red =
		if NFcrit_red =:= undefined -> PFcrit_red;
		   true -> NFcrit_red
		end,
	    heart_dmg =
		if NFheart_dmg =:= undefined -> PFheart_dmg;
		   true -> NFheart_dmg
		end,
	    heart_red =
		if NFheart_red =:= undefined -> PFheart_red;
		   true -> NFheart_red
		end,
	    skill_amp =
		if NFskill_amp =:= undefined -> PFskill_amp;
		   true -> NFskill_amp
		end,
	    skill_red =
		if NFskill_red =:= undefined -> PFskill_red;
		   true -> NFskill_red
		end,
	    thump_pro =
		if NFthump_pro =:= undefined -> PFthump_pro;
		   true -> NFthump_pro
		end,
	    weak_pro =
		if NFweak_pro =:= undefined -> PFweak_pro;
		   true -> NFweak_pro
		end,
	    skill_att_power =
		if NFskill_att_power =:= undefined -> PFskill_att_power;
		   true -> NFskill_att_power
		end,
	    skill_def_power =
		if NFskill_def_power =:= undefined -> PFskill_def_power;
		   true -> NFskill_def_power
		end,
	    hew_amp =
		if NFhew_amp =:= undefined -> PFhew_amp;
		   true -> NFhew_amp
		end,
	    block_red =
		if NFblock_red =:= undefined -> PFblock_red;
		   true -> NFblock_red
		end,
	    boss_amp =
		if NFboss_amp =:= undefined -> PFboss_amp;
		   true -> NFboss_amp
		end,
	    creep_amp =
		if NFcreep_amp =:= undefined -> PFcreep_amp;
		   true -> NFcreep_amp
		end,
	    pvp_red =
		if NFpvp_red =:= undefined -> PFpvp_red;
		   true -> NFpvp_red
		end,
	    pvp_armor_pro =
		if NFpvp_armor_pro =:= undefined -> PFpvp_armor_pro;
		   true -> NFpvp_armor_pro
		end,
	    pvp_armor_str =
		if NFpvp_armor_str =:= undefined -> PFpvp_armor_str;
		   true -> NFpvp_armor_str
		end,
	    exp_per =
		if NFexp_per =:= undefined -> PFexp_per;
		   true -> NFexp_per
		end,
	    gold_drop =
		if NFgold_drop =:= undefined -> PFgold_drop;
		   true -> NFgold_drop
		end,
	    item_drop =
		if NFitem_drop =:= undefined -> PFitem_drop;
		   true -> NFitem_drop
		end,
	    equip_def =
		if NFequip_def =:= undefined -> PFequip_def;
		   true -> NFequip_def
		end,
	    equip_hpmax =
		if NFequip_hpmax =:= undefined -> PFequip_hpmax;
		   true -> NFequip_hpmax
		end,
	    equip_att =
		if NFequip_att =:= undefined -> PFequip_att;
		   true -> NFequip_att
		end,
	    power =
		if NFpower =:= undefined -> PFpower;
		   true -> NFpower
		end,
	    all_gp =
		if NFall_gp =:= undefined -> PFall_gp;
		   true -> NFall_gp
		end,
	    hpmax_gp =
		if NFhpmax_gp =:= undefined -> PFhpmax_gp;
		   true -> NFhpmax_gp
		end,
	    att_gp =
		if NFatt_gp =:= undefined -> PFatt_gp;
		   true -> NFatt_gp
		end,
	    def_gp =
		if NFdef_gp =:= undefined -> PFdef_gp;
		   true -> NFdef_gp
		end,
	    wreck_gp =
		if NFwreck_gp =:= undefined -> PFwreck_gp;
		   true -> NFwreck_gp
		end,
	    hit_gp =
		if NFhit_gp =:= undefined -> PFhit_gp;
		   true -> NFhit_gp
		end,
	    miss_gp =
		if NFmiss_gp =:= undefined -> PFmiss_gp;
		   true -> NFmiss_gp
		end,
	    crit_gp =
		if NFcrit_gp =:= undefined -> PFcrit_gp;
		   true -> NFcrit_gp
		end,
	    tough_gp =
		if NFtough_gp =:= undefined -> PFtough_gp;
		   true -> NFtough_gp
		end,
	    holy_att_gp =
		if NFholy_att_gp =:= undefined -> PFholy_att_gp;
		   true -> NFholy_att_gp
		end,
	    holy_def_gp =
		if NFholy_def_gp =:= undefined -> PFholy_def_gp;
		   true -> NFholy_def_gp
		end,
	    hpmax_bp =
		if NFhpmax_bp =:= undefined -> PFhpmax_bp;
		   true -> NFhpmax_bp
		end,
	    att_bp =
		if NFatt_bp =:= undefined -> PFatt_bp;
		   true -> NFatt_bp
		end,
	    def_bp =
		if NFdef_bp =:= undefined -> PFdef_bp;
		   true -> NFdef_bp
		end,
	    wreck_bp =
		if NFwreck_bp =:= undefined -> PFwreck_bp;
		   true -> NFwreck_bp
		end}.

-compile({nowarn_unused_function,merge_msg_p_item_base/3}).
merge_msg_p_item_base(#p_item_base{score = PFscore,
				   extra = PFextra, misc = PFmisc},
		      #p_item_base{uid = NFuid, id = NFid, num = NFnum,
				   bag = NFbag, bind = NFbind, etime = NFetime,
				   gender = NFgender, score = NFscore,
				   extra = NFextra, misc = NFmisc},
		      TrUserData) ->
    #p_item_base{uid = NFuid, id = NFid, num = NFnum,
		 bag = NFbag, bind = NFbind, etime = NFetime,
		 gender = NFgender,
		 score =
		     if NFscore =:= undefined -> PFscore;
			true -> NFscore
		     end,
		 extra =
		     if NFextra =:= undefined -> PFextra;
			true -> NFextra
		     end,
		 misc =
		     if PFmisc /= undefined, NFmisc /= undefined ->
			    'tr_merge_p_item_base.misc'(PFmisc, NFmisc,
							TrUserData);
			PFmisc == undefined -> NFmisc;
			NFmisc == undefined -> PFmisc
		     end}.

-compile({nowarn_unused_function,merge_msg_p_item/3}).
merge_msg_p_item(#p_item{score = PFscore,
			 equip = PFequip, pet = PFpet, extra = PFextra},
		 #p_item{uid = NFuid, id = NFid, num = NFnum,
			 bag = NFbag, bind = NFbind, etime = NFetime,
			 gender = NFgender, score = NFscore, equip = NFequip,
			 pet = NFpet, extra = NFextra},
		 TrUserData) ->
    #p_item{uid = NFuid, id = NFid, num = NFnum,
	    bag = NFbag, bind = NFbind, etime = NFetime,
	    gender = NFgender,
	    score =
		if NFscore =:= undefined -> PFscore;
		   true -> NFscore
		end,
	    equip =
		if PFequip /= undefined, NFequip /= undefined ->
		       merge_msg_p_equip(PFequip, NFequip, TrUserData);
		   PFequip == undefined -> NFequip;
		   NFequip == undefined -> PFequip
		end,
	    pet =
		if PFpet /= undefined, NFpet /= undefined ->
		       merge_msg_p_pet(PFpet, NFpet, TrUserData);
		   PFpet == undefined -> NFpet;
		   NFpet == undefined -> PFpet
		end,
	    extra =
		if NFextra =:= undefined -> PFextra;
		   true -> NFextra
		end}.

-compile({nowarn_unused_function,merge_msg_p_equip/3}).
merge_msg_p_equip(#p_equip{base = PFbase,
			   rare1 = PFrare1, rare2 = PFrare2, rare3 = PFrare3,
			   marriage = PFmarriage, stones = PFstones,
			   cast = PFcast, refine = PFrefine, suite = PFsuite,
			   combine = PFcombine},
		  #p_equip{base = NFbase, rare1 = NFrare1,
			   rare2 = NFrare2, rare3 = NFrare3,
			   marriage = NFmarriage, stren_phase = NFstren_phase,
			   stren_lv = NFstren_lv, stones = NFstones,
			   power = NFpower, cast = NFcast, refine = NFrefine,
			   suite = NFsuite, combine = NFcombine},
		  TrUserData) ->
    #p_equip{base =
		 merge_msg_p_attr(PFbase, NFbase, TrUserData),
	     rare1 =
		 if PFrare1 /= undefined, NFrare1 /= undefined ->
			merge_msg_p_attr(PFrare1, NFrare1, TrUserData);
		    PFrare1 == undefined -> NFrare1;
		    NFrare1 == undefined -> PFrare1
		 end,
	     rare2 =
		 if PFrare2 /= undefined, NFrare2 /= undefined ->
			merge_msg_p_attr(PFrare2, NFrare2, TrUserData);
		    PFrare2 == undefined -> NFrare2;
		    NFrare2 == undefined -> PFrare2
		 end,
	     rare3 =
		 if PFrare3 /= undefined, NFrare3 /= undefined ->
			merge_msg_p_attr(PFrare3, NFrare3, TrUserData);
		    PFrare3 == undefined -> NFrare3;
		    NFrare3 == undefined -> PFrare3
		 end,
	     marriage =
		 if PFmarriage /= undefined, NFmarriage /= undefined ->
			merge_msg_p_marriage(PFmarriage, NFmarriage,
					     TrUserData);
		    PFmarriage == undefined -> NFmarriage;
		    NFmarriage == undefined -> PFmarriage
		 end,
	     stren_phase = NFstren_phase, stren_lv = NFstren_lv,
	     stones =
		 if PFstones /= undefined, NFstones /= undefined ->
			'tr_merge_p_equip.stones'(PFstones, NFstones,
						  TrUserData);
		    PFstones == undefined -> NFstones;
		    NFstones == undefined -> PFstones
		 end,
	     power = NFpower,
	     cast =
		 if NFcast =:= undefined -> PFcast;
		    true -> NFcast
		 end,
	     refine =
		 if PFrefine /= undefined, NFrefine /= undefined ->
			'erlang_++'(PFrefine, NFrefine, TrUserData);
		    PFrefine == undefined -> NFrefine;
		    NFrefine == undefined -> PFrefine
		 end,
	     suite =
		 if PFsuite /= undefined, NFsuite /= undefined ->
			'tr_merge_p_equip.suite'(PFsuite, NFsuite, TrUserData);
		    PFsuite == undefined -> NFsuite;
		    NFsuite == undefined -> PFsuite
		 end,
	     combine =
		 if PFcombine /= undefined, NFcombine /= undefined ->
			'erlang_++'(PFcombine, NFcombine, TrUserData);
		    PFcombine == undefined -> NFcombine;
		    NFcombine == undefined -> PFcombine
		 end}.

-compile({nowarn_unused_function,merge_msg_p_pet/3}).
merge_msg_p_pet(#p_pet{base = PFbase, rare1 = PFrare1,
		       rare2 = PFrare2, rare3 = PFrare3, strong = PFstrong},
		#p_pet{base = NFbase, rare1 = NFrare1, rare2 = NFrare2,
		       rare3 = NFrare3, cross = NFcross, strong = NFstrong,
		       power = NFpower},
		TrUserData) ->
    #p_pet{base =
	       merge_msg_p_attr(PFbase, NFbase, TrUserData),
	   rare1 =
	       if PFrare1 /= undefined, NFrare1 /= undefined ->
		      merge_msg_p_attr(PFrare1, NFrare1, TrUserData);
		  PFrare1 == undefined -> NFrare1;
		  NFrare1 == undefined -> PFrare1
	       end,
	   rare2 =
	       if PFrare2 /= undefined, NFrare2 /= undefined ->
		      merge_msg_p_attr(PFrare2, NFrare2, TrUserData);
		  PFrare2 == undefined -> NFrare2;
		  NFrare2 == undefined -> PFrare2
	       end,
	   rare3 =
	       if PFrare3 /= undefined, NFrare3 /= undefined ->
		      merge_msg_p_attr(PFrare3, NFrare3, TrUserData);
		  PFrare3 == undefined -> NFrare3;
		  NFrare3 == undefined -> PFrare3
	       end,
	   cross = NFcross,
	   strong =
	       if PFstrong /= undefined, NFstrong /= undefined ->
		      'tr_merge_p_pet.strong'(PFstrong, NFstrong, TrUserData);
		  PFstrong == undefined -> NFstrong;
		  NFstrong == undefined -> PFstrong
	       end,
	   power = NFpower}.

-compile({nowarn_unused_function,merge_msg_p_marriage/3}).
merge_msg_p_marriage(#p_marriage{husband_id =
				     PFhusband_id,
				 husband = PFhusband, wife_id = PFwife_id,
				 wife = PFwife, rare = PFrare},
		     #p_marriage{husband_id = NFhusband_id,
				 husband = NFhusband, wife_id = NFwife_id,
				 wife = NFwife, rare = NFrare},
		     TrUserData) ->
    #p_marriage{husband_id =
		    if NFhusband_id =:= undefined -> PFhusband_id;
		       true -> NFhusband_id
		    end,
		husband =
		    if NFhusband =:= undefined -> PFhusband;
		       true -> NFhusband
		    end,
		wife_id =
		    if NFwife_id =:= undefined -> PFwife_id;
		       true -> NFwife_id
		    end,
		wife =
		    if NFwife =:= undefined -> PFwife;
		       true -> NFwife
		    end,
		rare =
		    if PFrare /= undefined, NFrare /= undefined ->
			   merge_msg_p_attr(PFrare, NFrare, TrUserData);
		       PFrare == undefined -> NFrare;
		       NFrare == undefined -> PFrare
		    end}.

-compile({nowarn_unused_function,merge_msg_p_refine/3}).
merge_msg_p_refine(#p_refine{},
		   #p_refine{attr = NFattr, value = NFvalue, min = NFmin,
			     max = NFmax, color = NFcolor},
		   _) ->
    #p_refine{attr = NFattr, value = NFvalue, min = NFmin,
	      max = NFmax, color = NFcolor}.

-compile({nowarn_unused_function,merge_msg_p_actor/3}).
merge_msg_p_actor(#p_actor{coord = PFcoord,
			   stargs = PFstargs, role = PFrole, creep = PFcreep,
			   drop = PFdrop},
		  #p_actor{uid = NFuid, name = NFname, type = NFtype,
			   coord = NFcoord, state = NFstate, stargs = NFstargs,
			   role = NFrole, creep = NFcreep, drop = NFdrop},
		  TrUserData) ->
    #p_actor{uid = NFuid, name = NFname, type = NFtype,
	     coord = merge_msg_p_coord(PFcoord, NFcoord, TrUserData),
	     state = NFstate,
	     stargs =
		 if PFstargs /= undefined, NFstargs /= undefined ->
			'tr_merge_p_actor.stargs'(PFstargs, NFstargs,
						  TrUserData);
		    PFstargs == undefined -> NFstargs;
		    NFstargs == undefined -> PFstargs
		 end,
	     role =
		 if PFrole /= undefined, NFrole /= undefined ->
			merge_msg_p_role(PFrole, NFrole, TrUserData);
		    PFrole == undefined -> NFrole;
		    NFrole == undefined -> PFrole
		 end,
	     creep =
		 if PFcreep /= undefined, NFcreep /= undefined ->
			merge_msg_p_creep(PFcreep, NFcreep, TrUserData);
		    PFcreep == undefined -> NFcreep;
		    NFcreep == undefined -> PFcreep
		 end,
	     drop =
		 if PFdrop /= undefined, NFdrop /= undefined ->
			merge_msg_p_drop(PFdrop, NFdrop, TrUserData);
		    PFdrop == undefined -> NFdrop;
		    NFdrop == undefined -> PFdrop
		 end}.

-compile({nowarn_unused_function,merge_msg_p_role/3}).
merge_msg_p_role(#p_role{figure = PFfigure,
			 buffs = PFbuffs, dest = PFdest, ext = PFext,
			 icon = PFicon},
		 #p_role{career = NFcareer, gender = NFgender,
			 level = NFlevel, viplv = NFviplv, figure = NFfigure,
			 suid = NFsuid, guild = NFguild, gname = NFgname,
			 hp = NFhp, hpmax = NFhpmax, speed = NFspeed,
			 buffs = NFbuffs, power = NFpower, pkmode = NFpkmode,
			 crime = NFcrime, dir = NFdir, dest = NFdest,
			 group = NFgroup, team = NFteam, marry = NFmarry,
			 mname = NFmname, mtype = NFmtype, zoneid = NFzoneid,
			 ext = NFext, icon = NFicon},
		 TrUserData) ->
    #p_role{career = NFcareer, gender = NFgender,
	    level = NFlevel, viplv = NFviplv,
	    figure =
		if PFfigure /= undefined, NFfigure /= undefined ->
		       'tr_merge_p_role.figure'(PFfigure, NFfigure,
						TrUserData);
		   PFfigure == undefined -> NFfigure;
		   NFfigure == undefined -> PFfigure
		end,
	    suid = NFsuid, guild = NFguild, gname = NFgname,
	    hp = NFhp, hpmax = NFhpmax, speed = NFspeed,
	    buffs =
		if PFbuffs /= undefined, NFbuffs /= undefined ->
		       'erlang_++'(PFbuffs, NFbuffs, TrUserData);
		   PFbuffs == undefined -> NFbuffs;
		   NFbuffs == undefined -> PFbuffs
		end,
	    power = NFpower, pkmode = NFpkmode, crime = NFcrime,
	    dir = NFdir,
	    dest = merge_msg_p_coord(PFdest, NFdest, TrUserData),
	    group = NFgroup, team = NFteam, marry = NFmarry,
	    mname = NFmname, mtype = NFmtype, zoneid = NFzoneid,
	    ext =
		if PFext /= undefined, NFext /= undefined ->
		       'tr_merge_p_role.ext'(PFext, NFext, TrUserData);
		   PFext == undefined -> NFext;
		   NFext == undefined -> PFext
		end,
	    icon =
		if PFicon /= undefined, NFicon /= undefined ->
		       merge_msg_p_icon(PFicon, NFicon, TrUserData);
		   PFicon == undefined -> NFicon;
		   NFicon == undefined -> PFicon
		end}.

-compile({nowarn_unused_function,merge_msg_p_creep/3}).
merge_msg_p_creep(#p_creep{buffs = PFbuffs,
			   dest = PFdest, ext = PFext},
		  #p_creep{id = NFid, owner = NFowner, hp = NFhp,
			   hpmax = NFhpmax, speed = NFspeed, buffs = NFbuffs,
			   dir = NFdir, dest = NFdest, group = NFgroup,
			   level = NFlevel, ext = NFext},
		  TrUserData) ->
    #p_creep{id = NFid, owner = NFowner, hp = NFhp,
	     hpmax = NFhpmax, speed = NFspeed,
	     buffs =
		 if PFbuffs /= undefined, NFbuffs /= undefined ->
			'erlang_++'(PFbuffs, NFbuffs, TrUserData);
		    PFbuffs == undefined -> NFbuffs;
		    NFbuffs == undefined -> PFbuffs
		 end,
	     dir = NFdir,
	     dest = merge_msg_p_coord(PFdest, NFdest, TrUserData),
	     group = NFgroup, level = NFlevel,
	     ext =
		 if PFext /= undefined, NFext /= undefined ->
			'tr_merge_p_creep.ext'(PFext, NFext, TrUserData);
		    PFext == undefined -> NFext;
		    NFext == undefined -> PFext
		 end}.

-compile({nowarn_unused_function,merge_msg_p_npc/3}).
merge_msg_p_npc(#p_npc{coord = PFcoord},
		#p_npc{id = NFid, coord = NFcoord}, TrUserData) ->
    #p_npc{id = NFid,
	   coord =
	       merge_msg_p_coord(PFcoord, NFcoord, TrUserData)}.

-compile({nowarn_unused_function,merge_msg_p_drop/3}).
merge_msg_p_drop(#p_drop{mode = PFmode, from = PFfrom,
			 coord = PFcoord, belong = PFbelong, unlock = PFunlock},
		 #p_drop{id = NFid, num = NFnum, mode = NFmode,
			 from = NFfrom, coord = NFcoord, belong = NFbelong,
			 unlock = NFunlock},
		 TrUserData) ->
    #p_drop{id = NFid, num = NFnum,
	    mode =
		if NFmode =:= undefined -> PFmode;
		   true -> NFmode
		end,
	    from =
		if NFfrom =:= undefined -> PFfrom;
		   true -> NFfrom
		end,
	    coord =
		if PFcoord /= undefined, NFcoord /= undefined ->
		       merge_msg_p_coord(PFcoord, NFcoord, TrUserData);
		   PFcoord == undefined -> NFcoord;
		   NFcoord == undefined -> PFcoord
		end,
	    belong =
		if PFbelong /= undefined, NFbelong /= undefined ->
		       'erlang_++'(PFbelong, NFbelong, TrUserData);
		   PFbelong == undefined -> NFbelong;
		   NFbelong == undefined -> PFbelong
		end,
	    unlock =
		if NFunlock =:= undefined -> PFunlock;
		   true -> NFunlock
		end}.

-compile({nowarn_unused_function,merge_msg_p_buff/3}).
merge_msg_p_buff(#p_buff{attrs = PFattrs},
		 #p_buff{id = NFid, type = NFtype, origin = NForigin,
			 value = NFvalue, eff = NFeff, etime = NFetime,
			 group = NFgroup, attrs = NFattrs},
		 TrUserData) ->
    #p_buff{id = NFid, type = NFtype, origin = NForigin,
	    value = NFvalue, eff = NFeff, etime = NFetime,
	    group = NFgroup,
	    attrs =
		if PFattrs /= undefined, NFattrs /= undefined ->
		       'erlang_++'(PFattrs, NFattrs, TrUserData);
		   PFattrs == undefined -> NFattrs;
		   NFattrs == undefined -> PFattrs
		end}.

-compile({nowarn_unused_function,merge_msg_p_coord/3}).
merge_msg_p_coord(#p_coord{},
		  #p_coord{x = NFx, y = NFy}, _) ->
    #p_coord{x = NFx, y = NFy}.

-compile({nowarn_unused_function,merge_msg_p_icon/3}).
merge_msg_p_icon(#p_icon{},
		 #p_icon{pic = NFpic, md5 = NFmd5, frame = NFframe,
			 bubble = NFbubble},
		 _) ->
    #p_icon{pic = NFpic, md5 = NFmd5, frame = NFframe,
	    bubble = NFbubble}.

-compile({nowarn_unused_function,merge_msg_p_ranking/3}).
merge_msg_p_ranking(#p_ranking{base = PFbase,
			       data = PFdata},
		    #p_ranking{base = NFbase, rank = NFrank, sort = NFsort,
			       data = NFdata},
		    TrUserData) ->
    #p_ranking{base =
		   if PFbase /= undefined, NFbase /= undefined ->
			  merge_msg_p_role_base(PFbase, NFbase, TrUserData);
		      PFbase == undefined -> NFbase;
		      NFbase == undefined -> PFbase
		   end,
	       rank = NFrank, sort = NFsort,
	       data =
		   if PFdata /= undefined, NFdata /= undefined ->
			  'tr_merge_p_ranking.data'(PFdata, NFdata, TrUserData);
		      PFdata == undefined -> NFdata;
		      NFdata == undefined -> PFdata
		   end}.

-compile({nowarn_unused_function,merge_msg_p_dropped/3}).
merge_msg_p_dropped(#p_dropped{},
		    #p_dropped{time = NFtime, scene = NFscene,
			       picker_id = NFpicker_id,
			       picker_name = NFpicker_name, boss = NFboss,
			       item_id = NFitem_id, cache_id = NFcache_id},
		    _) ->
    #p_dropped{time = NFtime, scene = NFscene,
	       picker_id = NFpicker_id, picker_name = NFpicker_name,
	       boss = NFboss, item_id = NFitem_id,
	       cache_id = NFcache_id}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_magic_card_list_tos ->
	  v_msg_m_magic_card_list_tos(Msg, [MsgName], TrUserData);
      m_magic_card_list_toc ->
	  v_msg_m_magic_card_list_toc(Msg, [MsgName], TrUserData);
      m_magic_card_puton_tos ->
	  v_msg_m_magic_card_puton_tos(Msg, [MsgName],
				       TrUserData);
      m_magic_card_puton_toc ->
	  v_msg_m_magic_card_puton_toc(Msg, [MsgName],
				       TrUserData);
      m_magic_card_upstar_tos ->
	  v_msg_m_magic_card_upstar_tos(Msg, [MsgName],
					TrUserData);
      m_magic_card_upstar_toc ->
	  v_msg_m_magic_card_upstar_toc(Msg, [MsgName],
					TrUserData);
      m_magic_card_strength_tos ->
	  v_msg_m_magic_card_strength_tos(Msg, [MsgName],
					  TrUserData);
      m_magic_card_strength_toc ->
	  v_msg_m_magic_card_strength_toc(Msg, [MsgName],
					  TrUserData);
      m_magic_card_decompose_tos ->
	  v_msg_m_magic_card_decompose_tos(Msg, [MsgName],
					   TrUserData);
      m_magic_card_decompose_toc ->
	  v_msg_m_magic_card_decompose_toc(Msg, [MsgName],
					   TrUserData);
      m_magic_card_suite_toc ->
	  v_msg_m_magic_card_suite_toc(Msg, [MsgName],
				       TrUserData);
      m_magic_card_combine_tos ->
	  v_msg_m_magic_card_combine_tos(Msg, [MsgName],
					 TrUserData);
      m_magic_card_combine_toc ->
	  v_msg_m_magic_card_combine_toc(Msg, [MsgName],
					 TrUserData);
      m_magic_card_get_set_tos ->
	  v_msg_m_magic_card_get_set_tos(Msg, [MsgName],
					 TrUserData);
      m_magic_card_get_set_toc ->
	  v_msg_m_magic_card_get_set_toc(Msg, [MsgName],
					 TrUserData);
      m_magic_card_decompose_set_tos ->
	  v_msg_m_magic_card_decompose_set_tos(Msg, [MsgName],
					       TrUserData);
      m_magic_card_decompose_set_toc ->
	  v_msg_m_magic_card_decompose_set_toc(Msg, [MsgName],
					       TrUserData);
      m_magic_card_bag_info_tos ->
	  v_msg_m_magic_card_bag_info_tos(Msg, [MsgName],
					  TrUserData);
      m_magic_card_bag_info_toc ->
	  v_msg_m_magic_card_bag_info_toc(Msg, [MsgName],
					  TrUserData);
      m_magic_card_putoff_toc ->
	  v_msg_m_magic_card_putoff_toc(Msg, [MsgName],
					TrUserData);
      m_magic_power_toc ->
	  v_msg_m_magic_power_toc(Msg, [MsgName], TrUserData);
      p_role_base ->
	  v_msg_p_role_base(Msg, [MsgName], TrUserData);
      p_aspect -> v_msg_p_aspect(Msg, [MsgName], TrUserData);
      p_attr -> v_msg_p_attr(Msg, [MsgName], TrUserData);
      p_item_base ->
	  v_msg_p_item_base(Msg, [MsgName], TrUserData);
      p_item -> v_msg_p_item(Msg, [MsgName], TrUserData);
      p_equip -> v_msg_p_equip(Msg, [MsgName], TrUserData);
      p_pet -> v_msg_p_pet(Msg, [MsgName], TrUserData);
      p_marriage ->
	  v_msg_p_marriage(Msg, [MsgName], TrUserData);
      p_refine -> v_msg_p_refine(Msg, [MsgName], TrUserData);
      p_actor -> v_msg_p_actor(Msg, [MsgName], TrUserData);
      p_role -> v_msg_p_role(Msg, [MsgName], TrUserData);
      p_creep -> v_msg_p_creep(Msg, [MsgName], TrUserData);
      p_npc -> v_msg_p_npc(Msg, [MsgName], TrUserData);
      p_drop -> v_msg_p_drop(Msg, [MsgName], TrUserData);
      p_buff -> v_msg_p_buff(Msg, [MsgName], TrUserData);
      p_coord -> v_msg_p_coord(Msg, [MsgName], TrUserData);
      p_icon -> v_msg_p_icon(Msg, [MsgName], TrUserData);
      p_ranking ->
	  v_msg_p_ranking(Msg, [MsgName], TrUserData);
      p_dropped ->
	  v_msg_p_dropped(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_magic_card_list_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_list_tos/3}).
v_msg_m_magic_card_list_tos(#m_magic_card_list_tos{},
			    _Path, _) ->
    ok;
v_msg_m_magic_card_list_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_list_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_list_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_list_toc/3}).
v_msg_m_magic_card_list_toc(#m_magic_card_list_toc{cards
						       = F1},
			    Path, TrUserData) ->
    'v_map<int32,p_item>'(F1, [cards | Path], TrUserData),
    ok;
v_msg_m_magic_card_list_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_list_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_puton_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_puton_tos/3}).
v_msg_m_magic_card_puton_tos(#m_magic_card_puton_tos{pos
							 = F1,
						     uid = F2},
			     Path, TrUserData) ->
    v_type_int32(F1, [pos | Path], TrUserData),
    v_type_int32(F2, [uid | Path], TrUserData),
    ok;
v_msg_m_magic_card_puton_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_puton_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_puton_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_puton_toc/3}).
v_msg_m_magic_card_puton_toc(#m_magic_card_puton_toc{},
			     _Path, _) ->
    ok;
v_msg_m_magic_card_puton_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_puton_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_upstar_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_upstar_tos/3}).
v_msg_m_magic_card_upstar_tos(#m_magic_card_upstar_tos{pos
							   = F1},
			      Path, TrUserData) ->
    v_type_int32(F1, [pos | Path], TrUserData), ok;
v_msg_m_magic_card_upstar_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_upstar_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_upstar_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_upstar_toc/3}).
v_msg_m_magic_card_upstar_toc(#m_magic_card_upstar_toc{pos
							   = F1},
			      Path, TrUserData) ->
    v_type_int32(F1, [pos | Path], TrUserData), ok;
v_msg_m_magic_card_upstar_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_upstar_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_strength_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_strength_tos/3}).
v_msg_m_magic_card_strength_tos(#m_magic_card_strength_tos{pos
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [pos | Path], TrUserData), ok;
v_msg_m_magic_card_strength_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_strength_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_strength_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_strength_toc/3}).
v_msg_m_magic_card_strength_toc(#m_magic_card_strength_toc{pos
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [pos | Path], TrUserData), ok;
v_msg_m_magic_card_strength_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_strength_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_decompose_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_decompose_tos/3}).
v_msg_m_magic_card_decompose_tos(#m_magic_card_decompose_tos{uid
								 = F1},
				 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [uid | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [uid | Path])
    end,
    ok;
v_msg_m_magic_card_decompose_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_magic_card_decompose_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_decompose_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_decompose_toc/3}).
v_msg_m_magic_card_decompose_toc(#m_magic_card_decompose_toc{},
				 _Path, _) ->
    ok;
v_msg_m_magic_card_decompose_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_magic_card_decompose_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_suite_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_suite_toc/3}).
v_msg_m_magic_card_suite_toc(#m_magic_card_suite_toc{suite_id
							 = F1},
			     Path, TrUserData) ->
    v_type_int32(F1, [suite_id | Path], TrUserData), ok;
v_msg_m_magic_card_suite_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_suite_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_combine_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_combine_tos/3}).
v_msg_m_magic_card_combine_tos(#m_magic_card_combine_tos{r_item_id
							     = F1},
			       Path, TrUserData) ->
    v_type_int32(F1, [r_item_id | Path], TrUserData), ok;
v_msg_m_magic_card_combine_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_combine_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_combine_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_combine_toc/3}).
v_msg_m_magic_card_combine_toc(#m_magic_card_combine_toc{},
			       _Path, _) ->
    ok;
v_msg_m_magic_card_combine_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_combine_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_get_set_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_get_set_tos/3}).
v_msg_m_magic_card_get_set_tos(#m_magic_card_get_set_tos{},
			       _Path, _) ->
    ok;
v_msg_m_magic_card_get_set_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_get_set_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_get_set_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_get_set_toc/3}).
v_msg_m_magic_card_get_set_toc(#m_magic_card_get_set_toc{auto
							     = F1,
							 color = F2},
			       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [auto | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_type_int32(Elem, [color | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F2,
			 [color | Path])
    end,
    ok;
v_msg_m_magic_card_get_set_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_get_set_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_decompose_set_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_decompose_set_tos/3}).
v_msg_m_magic_card_decompose_set_tos(#m_magic_card_decompose_set_tos{auto
									 = F1,
								     color =
									 F2},
				     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [auto | Path], TrUserData)
    end,
    if is_list(F2) ->
	   _ = [v_type_int32(Elem, [color | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F2,
			 [color | Path])
    end,
    ok;
v_msg_m_magic_card_decompose_set_tos(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_magic_card_decompose_set_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_decompose_set_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_decompose_set_toc/3}).
v_msg_m_magic_card_decompose_set_toc(#m_magic_card_decompose_set_toc{},
				     _Path, _) ->
    ok;
v_msg_m_magic_card_decompose_set_toc(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_magic_card_decompose_set_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_bag_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_bag_info_tos/3}).
v_msg_m_magic_card_bag_info_tos(#m_magic_card_bag_info_tos{},
				_Path, _) ->
    ok;
v_msg_m_magic_card_bag_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_bag_info_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_bag_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_bag_info_toc/3}).
v_msg_m_magic_card_bag_info_toc(#m_magic_card_bag_info_toc{items
							       = F1},
				Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [items | Path], TrUserData),
    ok;
v_msg_m_magic_card_bag_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_bag_info_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_card_putoff_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_card_putoff_toc/3}).
v_msg_m_magic_card_putoff_toc(#m_magic_card_putoff_toc{pos
							   = F1},
			      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [pos | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [pos | Path])
    end,
    ok;
v_msg_m_magic_card_putoff_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_card_putoff_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_magic_power_toc/3}).
-dialyzer({nowarn_function,v_msg_m_magic_power_toc/3}).
v_msg_m_magic_power_toc(#m_magic_power_toc{power = F1},
			Path, TrUserData) ->
    v_type_int32(F1, [power | Path], TrUserData), ok;
v_msg_m_magic_power_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_magic_power_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_role_base/3}).
-dialyzer({nowarn_function,v_msg_p_role_base/3}).
v_msg_p_role_base(#p_role_base{id = F1, name = F2,
			       career = F3, gender = F4, level = F5, viplv = F6,
			       power = F7, figure = F8, guild = F9, gname = F10,
			       charm = F11, wake = F12, gpost = F13,
			       marry = F14, mname = F15, mtype = F16,
			       icon = F17, suid = F18, zoneid = F19,
			       team = F20},
		  Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_int32(F3, [career | Path], TrUserData),
    v_type_int32(F4, [gender | Path], TrUserData),
    v_type_int32(F5, [level | Path], TrUserData),
    v_type_int32(F6, [viplv | Path], TrUserData),
    v_type_int32(F7, [power | Path], TrUserData),
    'v_map<string,p_aspect>'(F8, [figure | Path],
			     TrUserData),
    v_type_uint64(F9, [guild | Path], TrUserData),
    v_type_string(F10, [gname | Path], TrUserData),
    v_type_int32(F11, [charm | Path], TrUserData),
    v_type_int32(F12, [wake | Path], TrUserData),
    v_type_int32(F13, [gpost | Path], TrUserData),
    v_type_int32(F14, [marry | Path], TrUserData),
    v_type_string(F15, [mname | Path], TrUserData),
    v_type_int32(F16, [mtype | Path], TrUserData),
    if F17 == undefined -> ok;
       true -> v_msg_p_icon(F17, [icon | Path], TrUserData)
    end,
    v_type_int32(F18, [suid | Path], TrUserData),
    v_type_int32(F19, [zoneid | Path], TrUserData),
    v_type_fixed64(F20, [team | Path], TrUserData),
    ok;
v_msg_p_role_base(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_role_base}, X, Path).

-compile({nowarn_unused_function,v_msg_p_aspect/3}).
-dialyzer({nowarn_function,v_msg_p_aspect/3}).
v_msg_p_aspect(#p_aspect{model = F1, skin = F2,
			 show = F3},
	       Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [model | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [skin | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [show | Path], TrUserData)
    end,
    ok;
v_msg_p_aspect(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_aspect}, X, Path).

-compile({nowarn_unused_function,v_msg_p_attr/3}).
-dialyzer({nowarn_function,v_msg_p_attr/3}).
v_msg_p_attr(#p_attr{hp = F1, hpmax = F2, speed = F3,
		     att = F4, def = F5, wreck = F6, hit = F7, miss = F8,
		     crit = F9, tough = F10, holy_att = F11, holy_def = F12,
		     abs_att = F13, abs_miss = F14, dmg_amp = F15,
		     dmg_red = F16, hit_pro = F17, miss_pro = F18,
		     armor_pro = F19, armor_str = F20, block_pro = F21,
		     block_str = F22, crit_pro = F23, crit_res = F24,
		     heart_pro = F25, heart_res = F26, crit_dmg = F27,
		     crit_red = F28, heart_dmg = F29, heart_red = F30,
		     skill_amp = F31, skill_red = F32, thump_pro = F33,
		     weak_pro = F34, skill_att_power = F35,
		     skill_def_power = F36, hew_amp = F37, block_red = F38,
		     boss_amp = F39, creep_amp = F40, pvp_red = F41,
		     pvp_armor_pro = F42, pvp_armor_str = F43, exp_per = F44,
		     gold_drop = F45, item_drop = F46, equip_def = F47,
		     equip_hpmax = F48, equip_att = F49, power = F50,
		     all_gp = F51, hpmax_gp = F52, att_gp = F53,
		     def_gp = F54, wreck_gp = F55, hit_gp = F56,
		     miss_gp = F57, crit_gp = F58, tough_gp = F59,
		     holy_att_gp = F60, holy_def_gp = F61, hpmax_bp = F62,
		     att_bp = F63, def_bp = F64, wreck_bp = F65},
	     Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_int32(F1, [hp | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [hpmax | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [speed | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_int32(F4, [att | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_type_int32(F5, [def | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [wreck | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [hit | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [miss | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [crit | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_int32(F10, [tough | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_int32(F11, [holy_att | Path], TrUserData)
    end,
    if F12 == undefined -> ok;
       true -> v_type_int32(F12, [holy_def | Path], TrUserData)
    end,
    if F13 == undefined -> ok;
       true -> v_type_int32(F13, [abs_att | Path], TrUserData)
    end,
    if F14 == undefined -> ok;
       true -> v_type_int32(F14, [abs_miss | Path], TrUserData)
    end,
    if F15 == undefined -> ok;
       true -> v_type_int32(F15, [dmg_amp | Path], TrUserData)
    end,
    if F16 == undefined -> ok;
       true -> v_type_int32(F16, [dmg_red | Path], TrUserData)
    end,
    if F17 == undefined -> ok;
       true -> v_type_int32(F17, [hit_pro | Path], TrUserData)
    end,
    if F18 == undefined -> ok;
       true -> v_type_int32(F18, [miss_pro | Path], TrUserData)
    end,
    if F19 == undefined -> ok;
       true ->
	   v_type_int32(F19, [armor_pro | Path], TrUserData)
    end,
    if F20 == undefined -> ok;
       true ->
	   v_type_int32(F20, [armor_str | Path], TrUserData)
    end,
    if F21 == undefined -> ok;
       true ->
	   v_type_int32(F21, [block_pro | Path], TrUserData)
    end,
    if F22 == undefined -> ok;
       true ->
	   v_type_int32(F22, [block_str | Path], TrUserData)
    end,
    if F23 == undefined -> ok;
       true -> v_type_int32(F23, [crit_pro | Path], TrUserData)
    end,
    if F24 == undefined -> ok;
       true -> v_type_int32(F24, [crit_res | Path], TrUserData)
    end,
    if F25 == undefined -> ok;
       true ->
	   v_type_int32(F25, [heart_pro | Path], TrUserData)
    end,
    if F26 == undefined -> ok;
       true ->
	   v_type_int32(F26, [heart_res | Path], TrUserData)
    end,
    if F27 == undefined -> ok;
       true -> v_type_int32(F27, [crit_dmg | Path], TrUserData)
    end,
    if F28 == undefined -> ok;
       true -> v_type_int32(F28, [crit_red | Path], TrUserData)
    end,
    if F29 == undefined -> ok;
       true ->
	   v_type_int32(F29, [heart_dmg | Path], TrUserData)
    end,
    if F30 == undefined -> ok;
       true ->
	   v_type_int32(F30, [heart_red | Path], TrUserData)
    end,
    if F31 == undefined -> ok;
       true ->
	   v_type_int32(F31, [skill_amp | Path], TrUserData)
    end,
    if F32 == undefined -> ok;
       true ->
	   v_type_int32(F32, [skill_red | Path], TrUserData)
    end,
    if F33 == undefined -> ok;
       true ->
	   v_type_int32(F33, [thump_pro | Path], TrUserData)
    end,
    if F34 == undefined -> ok;
       true -> v_type_int32(F34, [weak_pro | Path], TrUserData)
    end,
    if F35 == undefined -> ok;
       true ->
	   v_type_int32(F35, [skill_att_power | Path], TrUserData)
    end,
    if F36 == undefined -> ok;
       true ->
	   v_type_int32(F36, [skill_def_power | Path], TrUserData)
    end,
    if F37 == undefined -> ok;
       true -> v_type_int32(F37, [hew_amp | Path], TrUserData)
    end,
    if F38 == undefined -> ok;
       true ->
	   v_type_int32(F38, [block_red | Path], TrUserData)
    end,
    if F39 == undefined -> ok;
       true -> v_type_int32(F39, [boss_amp | Path], TrUserData)
    end,
    if F40 == undefined -> ok;
       true ->
	   v_type_int32(F40, [creep_amp | Path], TrUserData)
    end,
    if F41 == undefined -> ok;
       true -> v_type_int32(F41, [pvp_red | Path], TrUserData)
    end,
    if F42 == undefined -> ok;
       true ->
	   v_type_int32(F42, [pvp_armor_pro | Path], TrUserData)
    end,
    if F43 == undefined -> ok;
       true ->
	   v_type_int32(F43, [pvp_armor_str | Path], TrUserData)
    end,
    if F44 == undefined -> ok;
       true -> v_type_int32(F44, [exp_per | Path], TrUserData)
    end,
    if F45 == undefined -> ok;
       true ->
	   v_type_int32(F45, [gold_drop | Path], TrUserData)
    end,
    if F46 == undefined -> ok;
       true ->
	   v_type_int32(F46, [item_drop | Path], TrUserData)
    end,
    if F47 == undefined -> ok;
       true ->
	   v_type_int32(F47, [equip_def | Path], TrUserData)
    end,
    if F48 == undefined -> ok;
       true ->
	   v_type_int32(F48, [equip_hpmax | Path], TrUserData)
    end,
    if F49 == undefined -> ok;
       true ->
	   v_type_int32(F49, [equip_att | Path], TrUserData)
    end,
    if F50 == undefined -> ok;
       true -> v_type_int32(F50, [power | Path], TrUserData)
    end,
    if F51 == undefined -> ok;
       true -> v_type_int32(F51, [all_gp | Path], TrUserData)
    end,
    if F52 == undefined -> ok;
       true -> v_type_int32(F52, [hpmax_gp | Path], TrUserData)
    end,
    if F53 == undefined -> ok;
       true -> v_type_int32(F53, [att_gp | Path], TrUserData)
    end,
    if F54 == undefined -> ok;
       true -> v_type_int32(F54, [def_gp | Path], TrUserData)
    end,
    if F55 == undefined -> ok;
       true -> v_type_int32(F55, [wreck_gp | Path], TrUserData)
    end,
    if F56 == undefined -> ok;
       true -> v_type_int32(F56, [hit_gp | Path], TrUserData)
    end,
    if F57 == undefined -> ok;
       true -> v_type_int32(F57, [miss_gp | Path], TrUserData)
    end,
    if F58 == undefined -> ok;
       true -> v_type_int32(F58, [crit_gp | Path], TrUserData)
    end,
    if F59 == undefined -> ok;
       true -> v_type_int32(F59, [tough_gp | Path], TrUserData)
    end,
    if F60 == undefined -> ok;
       true ->
	   v_type_int32(F60, [holy_att_gp | Path], TrUserData)
    end,
    if F61 == undefined -> ok;
       true ->
	   v_type_int32(F61, [holy_def_gp | Path], TrUserData)
    end,
    if F62 == undefined -> ok;
       true -> v_type_int32(F62, [hpmax_bp | Path], TrUserData)
    end,
    if F63 == undefined -> ok;
       true -> v_type_int32(F63, [att_bp | Path], TrUserData)
    end,
    if F64 == undefined -> ok;
       true -> v_type_int32(F64, [def_bp | Path], TrUserData)
    end,
    if F65 == undefined -> ok;
       true -> v_type_int32(F65, [wreck_bp | Path], TrUserData)
    end,
    ok;
v_msg_p_attr(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_attr}, X, Path).

-compile({nowarn_unused_function,v_msg_p_item_base/3}).
-dialyzer({nowarn_function,v_msg_p_item_base/3}).
v_msg_p_item_base(#p_item_base{uid = F1, id = F2,
			       num = F3, bag = F4, bind = F5, etime = F6,
			       gender = F7, score = F8, extra = F9, misc = F10},
		  Path, TrUserData) ->
    v_type_int32(F1, [uid | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    v_type_int32(F3, [num | Path], TrUserData),
    v_type_int32(F4, [bag | Path], TrUserData),
    v_type_bool(F5, [bind | Path], TrUserData),
    v_type_int32(F6, [etime | Path], TrUserData),
    v_type_int32(F7, [gender | Path], TrUserData),
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [score | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_int32(F9, [extra | Path], TrUserData)
    end,
    'v_map<string,int32>'(F10, [misc | Path], TrUserData),
    ok;
v_msg_p_item_base(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_item_base}, X, Path).

-compile({nowarn_unused_function,v_msg_p_item/3}).
-dialyzer({nowarn_function,v_msg_p_item/3}).
v_msg_p_item(#p_item{uid = F1, id = F2, num = F3,
		     bag = F4, bind = F5, etime = F6, gender = F7,
		     score = F8, equip = F9, pet = F10, extra = F11},
	     Path, TrUserData) ->
    v_type_int32(F1, [uid | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    v_type_int32(F3, [num | Path], TrUserData),
    v_type_int32(F4, [bag | Path], TrUserData),
    v_type_bool(F5, [bind | Path], TrUserData),
    v_type_int32(F6, [etime | Path], TrUserData),
    v_type_int32(F7, [gender | Path], TrUserData),
    if F8 == undefined -> ok;
       true -> v_type_int32(F8, [score | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_msg_p_equip(F9, [equip | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_msg_p_pet(F10, [pet | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_int32(F11, [extra | Path], TrUserData)
    end,
    ok;
v_msg_p_item(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_item}, X, Path).

-compile({nowarn_unused_function,v_msg_p_equip/3}).
-dialyzer({nowarn_function,v_msg_p_equip/3}).
v_msg_p_equip(#p_equip{base = F1, rare1 = F2,
		       rare2 = F3, rare3 = F4, marriage = F5, stren_phase = F6,
		       stren_lv = F7, stones = F8, power = F9, cast = F10,
		       refine = F11, suite = F12, combine = F13},
	      Path, TrUserData) ->
    v_msg_p_attr(F1, [base | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_p_attr(F2, [rare1 | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_p_attr(F3, [rare2 | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_p_attr(F4, [rare3 | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_msg_p_marriage(F5, [marriage | Path], TrUserData)
    end,
    v_type_int32(F6, [stren_phase | Path], TrUserData),
    v_type_int32(F7, [stren_lv | Path], TrUserData),
    'v_map<int32,int32>'(F8, [stones | Path], TrUserData),
    v_type_int32(F9, [power | Path], TrUserData),
    if F10 == undefined -> ok;
       true -> v_type_int32(F10, [cast | Path], TrUserData)
    end,
    if is_list(F11) ->
	   _ = [v_msg_p_refine(Elem, [refine | Path], TrUserData)
		|| Elem <- F11],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_refine}}, F11,
			 [refine | Path])
    end,
    'v_map<int32,int32>'(F12, [suite | Path], TrUserData),
    if is_list(F13) ->
	   _ = [v_msg_p_item(Elem, [combine | Path], TrUserData)
		|| Elem <- F13],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_item}}, F13,
			 [combine | Path])
    end,
    ok;
v_msg_p_equip(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_equip}, X, Path).

-compile({nowarn_unused_function,v_msg_p_pet/3}).
-dialyzer({nowarn_function,v_msg_p_pet/3}).
v_msg_p_pet(#p_pet{base = F1, rare1 = F2, rare2 = F3,
		   rare3 = F4, cross = F5, strong = F6, power = F7},
	    Path, TrUserData) ->
    v_msg_p_attr(F1, [base | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_msg_p_attr(F2, [rare1 | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_msg_p_attr(F3, [rare2 | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_msg_p_attr(F4, [rare3 | Path], TrUserData)
    end,
    v_type_int32(F5, [cross | Path], TrUserData),
    'v_map<int32,int32>'(F6, [strong | Path], TrUserData),
    v_type_int32(F7, [power | Path], TrUserData),
    ok;
v_msg_p_pet(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_pet}, X, Path).

-compile({nowarn_unused_function,v_msg_p_marriage/3}).
-dialyzer({nowarn_function,v_msg_p_marriage/3}).
v_msg_p_marriage(#p_marriage{husband_id = F1,
			     husband = F2, wife_id = F3, wife = F4, rare = F5},
		 Path, TrUserData) ->
    if F1 == undefined -> ok;
       true ->
	   v_type_fixed64(F1, [husband_id | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_string(F2, [husband | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_fixed64(F3, [wife_id | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_string(F4, [wife | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_p_attr(F5, [rare | Path], TrUserData)
    end,
    ok;
v_msg_p_marriage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_marriage}, X, Path).

-compile({nowarn_unused_function,v_msg_p_refine/3}).
-dialyzer({nowarn_function,v_msg_p_refine/3}).
v_msg_p_refine(#p_refine{attr = F1, value = F2,
			 min = F3, max = F4, color = F5},
	       Path, TrUserData) ->
    v_type_int32(F1, [attr | Path], TrUserData),
    v_type_int32(F2, [value | Path], TrUserData),
    v_type_int32(F3, [min | Path], TrUserData),
    v_type_int32(F4, [max | Path], TrUserData),
    v_type_int32(F5, [color | Path], TrUserData),
    ok;
v_msg_p_refine(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_refine}, X, Path).

-compile({nowarn_unused_function,v_msg_p_actor/3}).
-dialyzer({nowarn_function,v_msg_p_actor/3}).
v_msg_p_actor(#p_actor{uid = F1, name = F2, type = F3,
		       coord = F4, state = F5, stargs = F6, role = F7,
		       creep = F8, drop = F9},
	      Path, TrUserData) ->
    v_type_uint64(F1, [uid | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_int32(F3, [type | Path], TrUserData),
    v_msg_p_coord(F4, [coord | Path], TrUserData),
    v_type_int32(F5, [state | Path], TrUserData),
    'v_map<int32,string>'(F6, [stargs | Path], TrUserData),
    if F7 == undefined -> ok;
       true -> v_msg_p_role(F7, [role | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_msg_p_creep(F8, [creep | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_msg_p_drop(F9, [drop | Path], TrUserData)
    end,
    ok;
v_msg_p_actor(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_actor}, X, Path).

-compile({nowarn_unused_function,v_msg_p_role/3}).
-dialyzer({nowarn_function,v_msg_p_role/3}).
v_msg_p_role(#p_role{career = F1, gender = F2,
		     level = F3, viplv = F4, figure = F5, suid = F6,
		     guild = F7, gname = F8, hp = F9, hpmax = F10,
		     speed = F11, buffs = F12, power = F13, pkmode = F14,
		     crime = F15, dir = F16, dest = F17, group = F18,
		     team = F19, marry = F20, mname = F21, mtype = F22,
		     zoneid = F23, ext = F24, icon = F25},
	     Path, TrUserData) ->
    v_type_int32(F1, [career | Path], TrUserData),
    v_type_int32(F2, [gender | Path], TrUserData),
    v_type_int32(F3, [level | Path], TrUserData),
    v_type_int32(F4, [viplv | Path], TrUserData),
    'v_map<string,p_aspect>'(F5, [figure | Path],
			     TrUserData),
    v_type_int32(F6, [suid | Path], TrUserData),
    v_type_uint64(F7, [guild | Path], TrUserData),
    v_type_string(F8, [gname | Path], TrUserData),
    v_type_int32(F9, [hp | Path], TrUserData),
    v_type_int32(F10, [hpmax | Path], TrUserData),
    v_type_int32(F11, [speed | Path], TrUserData),
    if is_list(F12) ->
	   _ = [v_msg_p_buff(Elem, [buffs | Path], TrUserData)
		|| Elem <- F12],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_buff}}, F12,
			 [buffs | Path])
    end,
    v_type_int32(F13, [power | Path], TrUserData),
    v_type_int32(F14, [pkmode | Path], TrUserData),
    v_type_int32(F15, [crime | Path], TrUserData),
    v_type_double(F16, [dir | Path], TrUserData),
    v_msg_p_coord(F17, [dest | Path], TrUserData),
    v_type_int32(F18, [group | Path], TrUserData),
    v_type_fixed64(F19, [team | Path], TrUserData),
    v_type_int32(F20, [marry | Path], TrUserData),
    v_type_string(F21, [mname | Path], TrUserData),
    v_type_int32(F22, [mtype | Path], TrUserData),
    v_type_int32(F23, [zoneid | Path], TrUserData),
    'v_map<string,int32>'(F24, [ext | Path], TrUserData),
    if F25 == undefined -> ok;
       true -> v_msg_p_icon(F25, [icon | Path], TrUserData)
    end,
    ok;
v_msg_p_role(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_role}, X, Path).

-compile({nowarn_unused_function,v_msg_p_creep/3}).
-dialyzer({nowarn_function,v_msg_p_creep/3}).
v_msg_p_creep(#p_creep{id = F1, owner = F2, hp = F3,
		       hpmax = F4, speed = F5, buffs = F6, dir = F7, dest = F8,
		       group = F9, level = F10, ext = F11},
	      Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_fixed64(F2, [owner | Path], TrUserData),
    v_type_int32(F3, [hp | Path], TrUserData),
    v_type_int32(F4, [hpmax | Path], TrUserData),
    v_type_int32(F5, [speed | Path], TrUserData),
    if is_list(F6) ->
	   _ = [v_msg_p_buff(Elem, [buffs | Path], TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_buff}}, F6,
			 [buffs | Path])
    end,
    v_type_int32(F7, [dir | Path], TrUserData),
    v_msg_p_coord(F8, [dest | Path], TrUserData),
    v_type_int32(F9, [group | Path], TrUserData),
    v_type_int32(F10, [level | Path], TrUserData),
    'v_map<string,uint64>'(F11, [ext | Path], TrUserData),
    ok;
v_msg_p_creep(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_creep}, X, Path).

-compile({nowarn_unused_function,v_msg_p_npc/3}).
-dialyzer({nowarn_function,v_msg_p_npc/3}).
v_msg_p_npc(#p_npc{id = F1, coord = F2}, Path,
	    TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_msg_p_coord(F2, [coord | Path], TrUserData),
    ok;
v_msg_p_npc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_npc}, X, Path).

-compile({nowarn_unused_function,v_msg_p_drop/3}).
-dialyzer({nowarn_function,v_msg_p_drop/3}).
v_msg_p_drop(#p_drop{id = F1, num = F2, mode = F3,
		     from = F4, coord = F5, belong = F6, unlock = F7},
	     Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [num | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [mode | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_uint64(F4, [from | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_msg_p_coord(F5, [coord | Path], TrUserData)
    end,
    if is_list(F6) ->
	   _ = [v_type_fixed64(Elem, [belong | Path], TrUserData)
		|| Elem <- F6],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, fixed64}, F6,
			 [belong | Path])
    end,
    if F7 == undefined -> ok;
       true -> v_type_int32(F7, [unlock | Path], TrUserData)
    end,
    ok;
v_msg_p_drop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_drop}, X, Path).

-compile({nowarn_unused_function,v_msg_p_buff/3}).
-dialyzer({nowarn_function,v_msg_p_buff/3}).
v_msg_p_buff(#p_buff{id = F1, type = F2, origin = F3,
		     value = F4, eff = F5, etime = F6, group = F7,
		     attrs = F8},
	     Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [type | Path], TrUserData),
    v_type_int32(F3, [origin | Path], TrUserData),
    v_type_int32(F4, [value | Path], TrUserData),
    v_type_int32(F5, [eff | Path], TrUserData),
    v_type_int32(F6, [etime | Path], TrUserData),
    v_type_int32(F7, [group | Path], TrUserData),
    if is_list(F8) ->
	   _ = [v_type_int32(Elem, [attrs | Path], TrUserData)
		|| Elem <- F8],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F8,
			 [attrs | Path])
    end,
    ok;
v_msg_p_buff(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_buff}, X, Path).

-compile({nowarn_unused_function,v_msg_p_coord/3}).
-dialyzer({nowarn_function,v_msg_p_coord/3}).
v_msg_p_coord(#p_coord{x = F1, y = F2}, Path,
	      TrUserData) ->
    v_type_double(F1, [x | Path], TrUserData),
    v_type_double(F2, [y | Path], TrUserData),
    ok;
v_msg_p_coord(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_coord}, X, Path).

-compile({nowarn_unused_function,v_msg_p_icon/3}).
-dialyzer({nowarn_function,v_msg_p_icon/3}).
v_msg_p_icon(#p_icon{pic = F1, md5 = F2, frame = F3,
		     bubble = F4},
	     Path, TrUserData) ->
    v_type_string(F1, [pic | Path], TrUserData),
    v_type_string(F2, [md5 | Path], TrUserData),
    v_type_int32(F3, [frame | Path], TrUserData),
    v_type_int32(F4, [bubble | Path], TrUserData),
    ok;
v_msg_p_icon(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_icon}, X, Path).

-compile({nowarn_unused_function,v_msg_p_ranking/3}).
-dialyzer({nowarn_function,v_msg_p_ranking/3}).
v_msg_p_ranking(#p_ranking{base = F1, rank = F2,
			   sort = F3, data = F4},
		Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_p_role_base(F1, [base | Path], TrUserData)
    end,
    v_type_int32(F2, [rank | Path], TrUserData),
    v_type_int32(F3, [sort | Path], TrUserData),
    'v_map<string,int32>'(F4, [data | Path], TrUserData),
    ok;
v_msg_p_ranking(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_ranking}, X, Path).

-compile({nowarn_unused_function,v_msg_p_dropped/3}).
-dialyzer({nowarn_function,v_msg_p_dropped/3}).
v_msg_p_dropped(#p_dropped{time = F1, scene = F2,
			   picker_id = F3, picker_name = F4, boss = F5,
			   item_id = F6, cache_id = F7},
		Path, TrUserData) ->
    v_type_int32(F1, [time | Path], TrUserData),
    v_type_int32(F2, [scene | Path], TrUserData),
    v_type_fixed64(F3, [picker_id | Path], TrUserData),
    v_type_string(F4, [picker_name | Path], TrUserData),
    v_type_string(F5, [boss | Path], TrUserData),
    v_type_int32(F6, [item_id | Path], TrUserData),
    v_type_int32(F7, [cache_id | Path], TrUserData),
    ok;
v_msg_p_dropped(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_dropped}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,p_aspect>'/3}).
-dialyzer({nowarn_function,'v_map<string,p_aspect>'/3}).
'v_map<string,p_aspect>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_msg_p_aspect(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,p_aspect>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,string>'/3}).
-dialyzer({nowarn_function,'v_map<int32,string>'/3}).
'v_map<int32,string>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_string(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,uint64>'/3}).
-dialyzer({nowarn_function,'v_map<string,uint64>'/3}).
'v_map<string,uint64>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_type_uint64(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,uint64>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,p_item>'/3}).
-dialyzer({nowarn_function,'v_map<int32,p_item>'/3}).
'v_map<int32,p_item>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_msg_p_item(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,p_item>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,int32>'/3}).
-dialyzer({nowarn_function,'v_map<string,int32>'/3}).
'v_map<string,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_magic_card_list_toc.cards[x]'/2}).
'tr_encode_m_magic_card_list_toc.cards[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_magic_card_bag_info_toc.items[x]'/2}).
'tr_encode_m_magic_card_bag_info_toc.items[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_p_equip.suite'/2}).
'tr_decode_init_default_p_equip.suite'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_equip.suite'/3}).
'tr_merge_p_equip.suite'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_equip.suite'/2}).
'tr_decode_repeated_finalize_p_equip.suite'(L,
					    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_equip.suite'/2}).
'tr_encode_p_equip.suite'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_equip.suite'/3}).
'tr_decode_repeated_add_elem_p_equip.suite'(Elem, L,
					    _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_item_base.misc'/2}).
'tr_decode_init_default_p_item_base.misc'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_item_base.misc'/3}).
'tr_merge_p_item_base.misc'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_item_base.misc'/2}).
'tr_decode_repeated_finalize_p_item_base.misc'(L,
					       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_item_base.misc'/2}).
'tr_encode_p_item_base.misc'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_item_base.misc'/3}).
'tr_decode_repeated_add_elem_p_item_base.misc'(Elem, L,
					       _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_magic_card_list_toc.cards'/2}).
'tr_decode_init_default_m_magic_card_list_toc.cards'(_,
						     _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_magic_card_list_toc.cards'/3}).
'tr_merge_m_magic_card_list_toc.cards'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_magic_card_list_toc.cards'/2}).
'tr_decode_repeated_finalize_m_magic_card_list_toc.cards'(L,
							  TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_magic_card_list_toc.cards'/2}).
'tr_encode_m_magic_card_list_toc.cards'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_magic_card_list_toc.cards'/3}).
'tr_decode_repeated_add_elem_m_magic_card_list_toc.cards'(Elem,
							  L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_m_magic_card_bag_info_toc.items'/2}).
'tr_decode_init_default_m_magic_card_bag_info_toc.items'(_,
							 _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_magic_card_bag_info_toc.items'/3}).
'tr_merge_m_magic_card_bag_info_toc.items'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_magic_card_bag_info_toc.items'/2}).
'tr_decode_repeated_finalize_m_magic_card_bag_info_toc.items'(L,
							      TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_magic_card_bag_info_toc.items'/2}).
'tr_encode_m_magic_card_bag_info_toc.items'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_magic_card_bag_info_toc.items'/3}).
'tr_decode_repeated_add_elem_m_magic_card_bag_info_toc.items'(Elem,
							      L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_p_actor.stargs[x]'/2}).
'tr_encode_p_actor.stargs[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_p_actor.stargs'/2}).
'tr_decode_init_default_p_actor.stargs'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_actor.stargs'/3}).
'tr_merge_p_actor.stargs'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_actor.stargs'/2}).
'tr_decode_repeated_finalize_p_actor.stargs'(L,
					     TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_actor.stargs'/2}).
'tr_encode_p_actor.stargs'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_actor.stargs'/3}).
'tr_decode_repeated_add_elem_p_actor.stargs'(Elem, L,
					     _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_ranking.data'/2}).
'tr_decode_init_default_p_ranking.data'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_ranking.data'/3}).
'tr_merge_p_ranking.data'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_ranking.data'/2}).
'tr_decode_repeated_finalize_p_ranking.data'(L,
					     TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_ranking.data'/2}).
'tr_encode_p_ranking.data'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_ranking.data'/3}).
'tr_decode_repeated_add_elem_p_ranking.data'(Elem, L,
					     _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_equip.stones'/2}).
'tr_decode_init_default_p_equip.stones'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_equip.stones'/3}).
'tr_merge_p_equip.stones'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_equip.stones'/2}).
'tr_decode_repeated_finalize_p_equip.stones'(L,
					     TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_equip.stones'/2}).
'tr_encode_p_equip.stones'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_equip.stones'/3}).
'tr_decode_repeated_add_elem_p_equip.stones'(Elem, L,
					     _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_pet.strong'/2}).
'tr_decode_init_default_p_pet.strong'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_pet.strong'/3}).
'tr_merge_p_pet.strong'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_pet.strong'/2}).
'tr_decode_repeated_finalize_p_pet.strong'(L,
					   TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_pet.strong'/2}).
'tr_encode_p_pet.strong'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_pet.strong'/3}).
'tr_decode_repeated_add_elem_p_pet.strong'(Elem, L,
					   _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_role.ext'/2}).
'tr_decode_init_default_p_role.ext'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_role.ext'/3}).
'tr_merge_p_role.ext'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_role.ext'/2}).
'tr_decode_repeated_finalize_p_role.ext'(L,
					 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_role.ext'/2}).
'tr_encode_p_role.ext'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_role.ext'/3}).
'tr_decode_repeated_add_elem_p_role.ext'(Elem, L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_p_ranking.data[x]'/2}).
'tr_encode_p_ranking.data[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_equip.suite[x]'/2}).
'tr_encode_p_equip.suite[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_role_base.figure[x]'/2}).
'tr_encode_p_role_base.figure[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_role.figure[x]'/2}).
'tr_encode_p_role.figure[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_creep.ext[x]'/2}).
'tr_encode_p_creep.ext[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_equip.stones[x]'/2}).
'tr_encode_p_equip.stones[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_pet.strong[x]'/2}).
'tr_encode_p_pet.strong[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_role.ext[x]'/2}).
'tr_encode_p_role.ext[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_item_base.misc[x]'/2}).
'tr_encode_p_item_base.misc[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_p_role_base.figure'/2}).
'tr_decode_init_default_p_role_base.figure'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_role_base.figure'/3}).
'tr_merge_p_role_base.figure'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_role_base.figure'/2}).
'tr_decode_repeated_finalize_p_role_base.figure'(L,
						 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_role_base.figure'/2}).
'tr_encode_p_role_base.figure'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_role_base.figure'/3}).
'tr_decode_repeated_add_elem_p_role_base.figure'(Elem,
						 L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_p_role.figure'/2}).
'tr_decode_init_default_p_role.figure'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_role.figure'/3}).
'tr_merge_p_role.figure'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_role.figure'/2}).
'tr_decode_repeated_finalize_p_role.figure'(L,
					    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_role.figure'/2}).
'tr_encode_p_role.figure'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_role.figure'/3}).
'tr_decode_repeated_add_elem_p_role.figure'(Elem, L,
					    _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_p_creep.ext'/2}).
'tr_decode_init_default_p_creep.ext'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_creep.ext'/3}).
'tr_merge_p_creep.ext'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_creep.ext'/2}).
'tr_decode_repeated_finalize_p_creep.ext'(L,
					  TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_creep.ext'/2}).
'tr_encode_p_creep.ext'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_creep.ext'/3}).
'tr_decode_repeated_add_elem_p_creep.ext'(Elem, L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.

-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_magic_card_list_tos}, []},
     {{msg, m_magic_card_list_toc},
      [#field{name = cards, fnum = 1, rnum = 2,
	      type = {map, int32, {msg, p_item}},
	      occurrence = repeated, opts = []}]},
     {{msg, m_magic_card_puton_tos},
      [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = uid, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_magic_card_puton_toc}, []},
     {{msg, m_magic_card_upstar_tos},
      [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_magic_card_upstar_toc},
      [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_magic_card_strength_tos},
      [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_magic_card_strength_toc},
      [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_magic_card_decompose_tos},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, m_magic_card_decompose_toc}, []},
     {{msg, m_magic_card_suite_toc},
      [#field{name = suite_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_magic_card_combine_tos},
      [#field{name = r_item_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_magic_card_combine_toc}, []},
     {{msg, m_magic_card_get_set_tos}, []},
     {{msg, m_magic_card_get_set_toc},
      [#field{name = auto, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = color, fnum = 2, rnum = 3, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, m_magic_card_decompose_set_tos},
      [#field{name = auto, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = color, fnum = 2, rnum = 3, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, m_magic_card_decompose_set_toc}, []},
     {{msg, m_magic_card_bag_info_tos}, []},
     {{msg, m_magic_card_bag_info_toc},
      [#field{name = items, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_magic_card_putoff_toc},
      [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, m_magic_power_toc},
      [#field{name = power, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_role_base},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = career, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = viplv, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = power, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = figure, fnum = 8, rnum = 9,
	      type = {map, string, {msg, p_aspect}},
	      occurrence = repeated, opts = []},
       #field{name = guild, fnum = 9, rnum = 10, type = uint64,
	      occurrence = required, opts = []},
       #field{name = gname, fnum = 10, rnum = 11,
	      type = string, occurrence = required, opts = []},
       #field{name = charm, fnum = 11, rnum = 12, type = int32,
	      occurrence = required, opts = []},
       #field{name = wake, fnum = 12, rnum = 13, type = int32,
	      occurrence = required, opts = []},
       #field{name = gpost, fnum = 13, rnum = 14, type = int32,
	      occurrence = required, opts = []},
       #field{name = marry, fnum = 14, rnum = 15, type = int32,
	      occurrence = required, opts = []},
       #field{name = mname, fnum = 15, rnum = 16,
	      type = string, occurrence = required, opts = []},
       #field{name = mtype, fnum = 16, rnum = 17, type = int32,
	      occurrence = required, opts = []},
       #field{name = icon, fnum = 17, rnum = 18,
	      type = {msg, p_icon}, occurrence = optional, opts = []},
       #field{name = suid, fnum = 18, rnum = 19, type = int32,
	      occurrence = required, opts = []},
       #field{name = zoneid, fnum = 19, rnum = 20,
	      type = int32, occurrence = required, opts = []},
       #field{name = team, fnum = 20, rnum = 21,
	      type = fixed64, occurrence = required, opts = []}]},
     {{msg, p_aspect},
      [#field{name = model, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = []},
       #field{name = skin, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = show, fnum = 3, rnum = 4, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, p_attr},
      [#field{name = hp, fnum = 1, rnum = 2, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = hpmax, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = speed, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = att, fnum = 4, rnum = 5, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = def, fnum = 5, rnum = 6, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = wreck, fnum = 6, rnum = 7, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = hit, fnum = 7, rnum = 8, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = miss, fnum = 8, rnum = 9, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = crit, fnum = 9, rnum = 10, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = tough, fnum = 10, rnum = 11, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = holy_att, fnum = 11, rnum = 12,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = holy_def, fnum = 12, rnum = 13,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = abs_att, fnum = 13, rnum = 14,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = abs_miss, fnum = 14, rnum = 15,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = dmg_amp, fnum = 15, rnum = 16,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = dmg_red, fnum = 16, rnum = 17,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = hit_pro, fnum = 17, rnum = 18,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = miss_pro, fnum = 18, rnum = 19,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = armor_pro, fnum = 19, rnum = 20,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = armor_str, fnum = 20, rnum = 21,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = block_pro, fnum = 21, rnum = 22,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = block_str, fnum = 22, rnum = 23,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = crit_pro, fnum = 23, rnum = 24,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = crit_res, fnum = 24, rnum = 25,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = heart_pro, fnum = 25, rnum = 26,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = heart_res, fnum = 26, rnum = 27,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = crit_dmg, fnum = 27, rnum = 28,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = crit_red, fnum = 28, rnum = 29,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = heart_dmg, fnum = 29, rnum = 30,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = heart_red, fnum = 30, rnum = 31,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = skill_amp, fnum = 31, rnum = 32,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = skill_red, fnum = 32, rnum = 33,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = thump_pro, fnum = 33, rnum = 34,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = weak_pro, fnum = 34, rnum = 35,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = skill_att_power, fnum = 35, rnum = 36,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = skill_def_power, fnum = 36, rnum = 37,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = hew_amp, fnum = 37, rnum = 38,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = block_red, fnum = 38, rnum = 39,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = boss_amp, fnum = 39, rnum = 40,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = creep_amp, fnum = 40, rnum = 41,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = pvp_red, fnum = 41, rnum = 42,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = pvp_armor_pro, fnum = 42, rnum = 43,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = pvp_armor_str, fnum = 43, rnum = 44,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = exp_per, fnum = 44, rnum = 45,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = gold_drop, fnum = 45, rnum = 46,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = item_drop, fnum = 46, rnum = 47,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = equip_def, fnum = 47, rnum = 48,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = equip_hpmax, fnum = 48, rnum = 49,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = equip_att, fnum = 49, rnum = 50,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = power, fnum = 50, rnum = 51, type = int32,
	      occurrence = optional, opts = [{default, 0}]},
       #field{name = all_gp, fnum = 51, rnum = 52,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = hpmax_gp, fnum = 52, rnum = 53,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = att_gp, fnum = 53, rnum = 54,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = def_gp, fnum = 54, rnum = 55,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = wreck_gp, fnum = 55, rnum = 56,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = hit_gp, fnum = 56, rnum = 57,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = miss_gp, fnum = 57, rnum = 58,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = crit_gp, fnum = 58, rnum = 59,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = tough_gp, fnum = 59, rnum = 60,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = holy_att_gp, fnum = 60, rnum = 61,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = holy_def_gp, fnum = 61, rnum = 62,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = hpmax_bp, fnum = 62, rnum = 63,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = att_bp, fnum = 63, rnum = 64,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = def_bp, fnum = 64, rnum = 65,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]},
       #field{name = wreck_bp, fnum = 65, rnum = 66,
	      type = int32, occurrence = optional,
	      opts = [{default, 0}]}]},
     {{msg, p_item_base},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = bag, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = bind, fnum = 5, rnum = 6, type = bool,
	      occurrence = required, opts = []},
       #field{name = etime, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 8, rnum = 9, type = int32,
	      occurrence = optional, opts = []},
       #field{name = extra, fnum = 9, rnum = 10, type = int32,
	      occurrence = optional, opts = []},
       #field{name = misc, fnum = 10, rnum = 11,
	      type = {map, string, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_item},
      [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = bag, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = bind, fnum = 5, rnum = 6, type = bool,
	      occurrence = required, opts = []},
       #field{name = etime, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = score, fnum = 8, rnum = 9, type = int32,
	      occurrence = optional, opts = []},
       #field{name = equip, fnum = 9, rnum = 10,
	      type = {msg, p_equip}, occurrence = optional,
	      opts = []},
       #field{name = pet, fnum = 10, rnum = 11,
	      type = {msg, p_pet}, occurrence = optional, opts = []},
       #field{name = extra, fnum = 11, rnum = 12, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, p_equip},
      [#field{name = base, fnum = 1, rnum = 2,
	      type = {msg, p_attr}, occurrence = required, opts = []},
       #field{name = rare1, fnum = 2, rnum = 3,
	      type = {msg, p_attr}, occurrence = optional, opts = []},
       #field{name = rare2, fnum = 3, rnum = 4,
	      type = {msg, p_attr}, occurrence = optional, opts = []},
       #field{name = rare3, fnum = 4, rnum = 5,
	      type = {msg, p_attr}, occurrence = optional, opts = []},
       #field{name = marriage, fnum = 5, rnum = 6,
	      type = {msg, p_marriage}, occurrence = optional,
	      opts = []},
       #field{name = stren_phase, fnum = 6, rnum = 7,
	      type = int32, occurrence = required, opts = []},
       #field{name = stren_lv, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []},
       #field{name = stones, fnum = 8, rnum = 9,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = power, fnum = 9, rnum = 10, type = int32,
	      occurrence = required, opts = []},
       #field{name = cast, fnum = 10, rnum = 11, type = int32,
	      occurrence = optional, opts = []},
       #field{name = refine, fnum = 11, rnum = 12,
	      type = {msg, p_refine}, occurrence = repeated,
	      opts = []},
       #field{name = suite, fnum = 12, rnum = 13,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = combine, fnum = 13, rnum = 14,
	      type = {msg, p_item}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_pet},
      [#field{name = base, fnum = 1, rnum = 2,
	      type = {msg, p_attr}, occurrence = required, opts = []},
       #field{name = rare1, fnum = 2, rnum = 3,
	      type = {msg, p_attr}, occurrence = optional, opts = []},
       #field{name = rare2, fnum = 3, rnum = 4,
	      type = {msg, p_attr}, occurrence = optional, opts = []},
       #field{name = rare3, fnum = 4, rnum = 5,
	      type = {msg, p_attr}, occurrence = optional, opts = []},
       #field{name = cross, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = strong, fnum = 6, rnum = 7,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = power, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_marriage},
      [#field{name = husband_id, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = optional, opts = []},
       #field{name = husband, fnum = 2, rnum = 3,
	      type = string, occurrence = optional, opts = []},
       #field{name = wife_id, fnum = 3, rnum = 4,
	      type = fixed64, occurrence = optional, opts = []},
       #field{name = wife, fnum = 4, rnum = 5, type = string,
	      occurrence = optional, opts = []},
       #field{name = rare, fnum = 5, rnum = 6,
	      type = {msg, p_attr}, occurrence = optional,
	      opts = []}]},
     {{msg, p_refine},
      [#field{name = attr, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = min, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = max, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = color, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_actor},
      [#field{name = uid, fnum = 1, rnum = 2, type = uint64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = coord, fnum = 4, rnum = 5,
	      type = {msg, p_coord}, occurrence = required,
	      opts = []},
       #field{name = state, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = stargs, fnum = 6, rnum = 7,
	      type = {map, int32, string}, occurrence = repeated,
	      opts = []},
       #field{name = role, fnum = 7, rnum = 8,
	      type = {msg, p_role}, occurrence = optional, opts = []},
       #field{name = creep, fnum = 8, rnum = 9,
	      type = {msg, p_creep}, occurrence = optional,
	      opts = []},
       #field{name = drop, fnum = 9, rnum = 10,
	      type = {msg, p_drop}, occurrence = optional,
	      opts = []}]},
     {{msg, p_role},
      [#field{name = career, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = gender, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = viplv, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = figure, fnum = 5, rnum = 6,
	      type = {map, string, {msg, p_aspect}},
	      occurrence = repeated, opts = []},
       #field{name = suid, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = guild, fnum = 7, rnum = 8, type = uint64,
	      occurrence = required, opts = []},
       #field{name = gname, fnum = 8, rnum = 9, type = string,
	      occurrence = required, opts = []},
       #field{name = hp, fnum = 9, rnum = 10, type = int32,
	      occurrence = required, opts = []},
       #field{name = hpmax, fnum = 10, rnum = 11, type = int32,
	      occurrence = required, opts = []},
       #field{name = speed, fnum = 11, rnum = 12, type = int32,
	      occurrence = required, opts = []},
       #field{name = buffs, fnum = 12, rnum = 13,
	      type = {msg, p_buff}, occurrence = repeated, opts = []},
       #field{name = power, fnum = 13, rnum = 14, type = int32,
	      occurrence = required, opts = []},
       #field{name = pkmode, fnum = 14, rnum = 15,
	      type = int32, occurrence = required, opts = []},
       #field{name = crime, fnum = 15, rnum = 16, type = int32,
	      occurrence = required, opts = []},
       #field{name = dir, fnum = 16, rnum = 17, type = double,
	      occurrence = required, opts = []},
       #field{name = dest, fnum = 17, rnum = 18,
	      type = {msg, p_coord}, occurrence = required,
	      opts = []},
       #field{name = group, fnum = 18, rnum = 19, type = int32,
	      occurrence = required, opts = []},
       #field{name = team, fnum = 19, rnum = 20,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = marry, fnum = 20, rnum = 21, type = int32,
	      occurrence = required, opts = []},
       #field{name = mname, fnum = 21, rnum = 22,
	      type = string, occurrence = required, opts = []},
       #field{name = mtype, fnum = 22, rnum = 23, type = int32,
	      occurrence = required, opts = []},
       #field{name = zoneid, fnum = 23, rnum = 24,
	      type = int32, occurrence = required, opts = []},
       #field{name = ext, fnum = 24, rnum = 25,
	      type = {map, string, int32}, occurrence = repeated,
	      opts = []},
       #field{name = icon, fnum = 25, rnum = 26,
	      type = {msg, p_icon}, occurrence = optional,
	      opts = []}]},
     {{msg, p_creep},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = owner, fnum = 2, rnum = 3, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = hp, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = hpmax, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = speed, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = buffs, fnum = 6, rnum = 7,
	      type = {msg, p_buff}, occurrence = repeated, opts = []},
       #field{name = dir, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = dest, fnum = 8, rnum = 9,
	      type = {msg, p_coord}, occurrence = required,
	      opts = []},
       #field{name = group, fnum = 9, rnum = 10, type = int32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 10, rnum = 11, type = int32,
	      occurrence = required, opts = []},
       #field{name = ext, fnum = 11, rnum = 12,
	      type = {map, string, uint64}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_npc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = coord, fnum = 2, rnum = 3,
	      type = {msg, p_coord}, occurrence = required,
	      opts = []}]},
     {{msg, p_drop},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = mode, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = from, fnum = 4, rnum = 5, type = uint64,
	      occurrence = optional, opts = []},
       #field{name = coord, fnum = 5, rnum = 6,
	      type = {msg, p_coord}, occurrence = optional,
	      opts = []},
       #field{name = belong, fnum = 6, rnum = 7,
	      type = fixed64, occurrence = repeated, opts = []},
       #field{name = unlock, fnum = 7, rnum = 8, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, p_buff},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = origin, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = value, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = eff, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = etime, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = group, fnum = 7, rnum = 8, type = int32,
	      occurrence = required, opts = []},
       #field{name = attrs, fnum = 8, rnum = 9, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, p_coord},
      [#field{name = x, fnum = 1, rnum = 2, type = double,
	      occurrence = required, opts = []},
       #field{name = y, fnum = 2, rnum = 3, type = double,
	      occurrence = required, opts = []}]},
     {{msg, p_icon},
      [#field{name = pic, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []},
       #field{name = md5, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = frame, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = bubble, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_ranking},
      [#field{name = base, fnum = 1, rnum = 2,
	      type = {msg, p_role_base}, occurrence = optional,
	      opts = []},
       #field{name = rank, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = sort, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = data, fnum = 4, rnum = 5,
	      type = {map, string, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_dropped},
      [#field{name = time, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = scene, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = picker_id, fnum = 3, rnum = 4,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = picker_name, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = boss, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = item_id, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = cache_id, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_magic_card_list_tos, m_magic_card_list_toc,
     m_magic_card_puton_tos, m_magic_card_puton_toc,
     m_magic_card_upstar_tos, m_magic_card_upstar_toc,
     m_magic_card_strength_tos, m_magic_card_strength_toc,
     m_magic_card_decompose_tos, m_magic_card_decompose_toc,
     m_magic_card_suite_toc, m_magic_card_combine_tos,
     m_magic_card_combine_toc, m_magic_card_get_set_tos,
     m_magic_card_get_set_toc,
     m_magic_card_decompose_set_tos,
     m_magic_card_decompose_set_toc,
     m_magic_card_bag_info_tos, m_magic_card_bag_info_toc,
     m_magic_card_putoff_toc, m_magic_power_toc, p_role_base,
     p_aspect, p_attr, p_item_base, p_item, p_equip, p_pet,
     p_marriage, p_refine, p_actor, p_role, p_creep, p_npc,
     p_drop, p_buff, p_coord, p_icon, p_ranking, p_dropped].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_magic_card_list_tos, m_magic_card_list_toc,
     m_magic_card_puton_tos, m_magic_card_puton_toc,
     m_magic_card_upstar_tos, m_magic_card_upstar_toc,
     m_magic_card_strength_tos, m_magic_card_strength_toc,
     m_magic_card_decompose_tos, m_magic_card_decompose_toc,
     m_magic_card_suite_toc, m_magic_card_combine_tos,
     m_magic_card_combine_toc, m_magic_card_get_set_tos,
     m_magic_card_get_set_toc,
     m_magic_card_decompose_set_tos,
     m_magic_card_decompose_set_toc,
     m_magic_card_bag_info_tos, m_magic_card_bag_info_toc,
     m_magic_card_putoff_toc, m_magic_power_toc, p_role_base,
     p_aspect, p_attr, p_item_base, p_item, p_equip, p_pet,
     p_marriage, p_refine, p_actor, p_role, p_creep, p_npc,
     p_drop, p_buff, p_coord, p_icon, p_ranking, p_dropped].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_magic_card_list_tos) -> [];
find_msg_def(m_magic_card_list_toc) ->
    [#field{name = cards, fnum = 1, rnum = 2,
	    type = {map, int32, {msg, p_item}},
	    occurrence = repeated, opts = []}];
find_msg_def(m_magic_card_puton_tos) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = uid, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_magic_card_puton_toc) -> [];
find_msg_def(m_magic_card_upstar_tos) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_magic_card_upstar_toc) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_magic_card_strength_tos) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_magic_card_strength_toc) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_magic_card_decompose_tos) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(m_magic_card_decompose_toc) -> [];
find_msg_def(m_magic_card_suite_toc) ->
    [#field{name = suite_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_magic_card_combine_tos) ->
    [#field{name = r_item_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_magic_card_combine_toc) -> [];
find_msg_def(m_magic_card_get_set_tos) -> [];
find_msg_def(m_magic_card_get_set_toc) ->
    [#field{name = auto, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = color, fnum = 2, rnum = 3, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(m_magic_card_decompose_set_tos) ->
    [#field{name = auto, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = color, fnum = 2, rnum = 3, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(m_magic_card_decompose_set_toc) -> [];
find_msg_def(m_magic_card_bag_info_tos) -> [];
find_msg_def(m_magic_card_bag_info_toc) ->
    [#field{name = items, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_magic_card_putoff_toc) ->
    [#field{name = pos, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(m_magic_power_toc) ->
    [#field{name = power, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_role_base) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = career, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = viplv, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = power, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = figure, fnum = 8, rnum = 9,
	    type = {map, string, {msg, p_aspect}},
	    occurrence = repeated, opts = []},
     #field{name = guild, fnum = 9, rnum = 10, type = uint64,
	    occurrence = required, opts = []},
     #field{name = gname, fnum = 10, rnum = 11,
	    type = string, occurrence = required, opts = []},
     #field{name = charm, fnum = 11, rnum = 12, type = int32,
	    occurrence = required, opts = []},
     #field{name = wake, fnum = 12, rnum = 13, type = int32,
	    occurrence = required, opts = []},
     #field{name = gpost, fnum = 13, rnum = 14, type = int32,
	    occurrence = required, opts = []},
     #field{name = marry, fnum = 14, rnum = 15, type = int32,
	    occurrence = required, opts = []},
     #field{name = mname, fnum = 15, rnum = 16,
	    type = string, occurrence = required, opts = []},
     #field{name = mtype, fnum = 16, rnum = 17, type = int32,
	    occurrence = required, opts = []},
     #field{name = icon, fnum = 17, rnum = 18,
	    type = {msg, p_icon}, occurrence = optional, opts = []},
     #field{name = suid, fnum = 18, rnum = 19, type = int32,
	    occurrence = required, opts = []},
     #field{name = zoneid, fnum = 19, rnum = 20,
	    type = int32, occurrence = required, opts = []},
     #field{name = team, fnum = 20, rnum = 21,
	    type = fixed64, occurrence = required, opts = []}];
find_msg_def(p_aspect) ->
    [#field{name = model, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = []},
     #field{name = skin, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = show, fnum = 3, rnum = 4, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def(p_attr) ->
    [#field{name = hp, fnum = 1, rnum = 2, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = hpmax, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = speed, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = att, fnum = 4, rnum = 5, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = def, fnum = 5, rnum = 6, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = wreck, fnum = 6, rnum = 7, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = hit, fnum = 7, rnum = 8, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = miss, fnum = 8, rnum = 9, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = crit, fnum = 9, rnum = 10, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = tough, fnum = 10, rnum = 11, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = holy_att, fnum = 11, rnum = 12,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = holy_def, fnum = 12, rnum = 13,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = abs_att, fnum = 13, rnum = 14,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = abs_miss, fnum = 14, rnum = 15,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = dmg_amp, fnum = 15, rnum = 16,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = dmg_red, fnum = 16, rnum = 17,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = hit_pro, fnum = 17, rnum = 18,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = miss_pro, fnum = 18, rnum = 19,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = armor_pro, fnum = 19, rnum = 20,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = armor_str, fnum = 20, rnum = 21,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = block_pro, fnum = 21, rnum = 22,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = block_str, fnum = 22, rnum = 23,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = crit_pro, fnum = 23, rnum = 24,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = crit_res, fnum = 24, rnum = 25,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = heart_pro, fnum = 25, rnum = 26,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = heart_res, fnum = 26, rnum = 27,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = crit_dmg, fnum = 27, rnum = 28,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = crit_red, fnum = 28, rnum = 29,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = heart_dmg, fnum = 29, rnum = 30,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = heart_red, fnum = 30, rnum = 31,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = skill_amp, fnum = 31, rnum = 32,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = skill_red, fnum = 32, rnum = 33,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = thump_pro, fnum = 33, rnum = 34,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = weak_pro, fnum = 34, rnum = 35,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = skill_att_power, fnum = 35, rnum = 36,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = skill_def_power, fnum = 36, rnum = 37,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = hew_amp, fnum = 37, rnum = 38,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = block_red, fnum = 38, rnum = 39,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = boss_amp, fnum = 39, rnum = 40,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = creep_amp, fnum = 40, rnum = 41,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = pvp_red, fnum = 41, rnum = 42,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = pvp_armor_pro, fnum = 42, rnum = 43,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = pvp_armor_str, fnum = 43, rnum = 44,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = exp_per, fnum = 44, rnum = 45,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = gold_drop, fnum = 45, rnum = 46,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = item_drop, fnum = 46, rnum = 47,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = equip_def, fnum = 47, rnum = 48,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = equip_hpmax, fnum = 48, rnum = 49,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = equip_att, fnum = 49, rnum = 50,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = power, fnum = 50, rnum = 51, type = int32,
	    occurrence = optional, opts = [{default, 0}]},
     #field{name = all_gp, fnum = 51, rnum = 52,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = hpmax_gp, fnum = 52, rnum = 53,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = att_gp, fnum = 53, rnum = 54,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = def_gp, fnum = 54, rnum = 55,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = wreck_gp, fnum = 55, rnum = 56,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = hit_gp, fnum = 56, rnum = 57,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = miss_gp, fnum = 57, rnum = 58,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = crit_gp, fnum = 58, rnum = 59,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = tough_gp, fnum = 59, rnum = 60,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = holy_att_gp, fnum = 60, rnum = 61,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = holy_def_gp, fnum = 61, rnum = 62,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = hpmax_bp, fnum = 62, rnum = 63,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = att_bp, fnum = 63, rnum = 64,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = def_bp, fnum = 64, rnum = 65,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]},
     #field{name = wreck_bp, fnum = 65, rnum = 66,
	    type = int32, occurrence = optional,
	    opts = [{default, 0}]}];
find_msg_def(p_item_base) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = bag, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = bind, fnum = 5, rnum = 6, type = bool,
	    occurrence = required, opts = []},
     #field{name = etime, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 8, rnum = 9, type = int32,
	    occurrence = optional, opts = []},
     #field{name = extra, fnum = 9, rnum = 10, type = int32,
	    occurrence = optional, opts = []},
     #field{name = misc, fnum = 10, rnum = 11,
	    type = {map, string, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_item) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = bag, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = bind, fnum = 5, rnum = 6, type = bool,
	    occurrence = required, opts = []},
     #field{name = etime, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = score, fnum = 8, rnum = 9, type = int32,
	    occurrence = optional, opts = []},
     #field{name = equip, fnum = 9, rnum = 10,
	    type = {msg, p_equip}, occurrence = optional,
	    opts = []},
     #field{name = pet, fnum = 10, rnum = 11,
	    type = {msg, p_pet}, occurrence = optional, opts = []},
     #field{name = extra, fnum = 11, rnum = 12, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(p_equip) ->
    [#field{name = base, fnum = 1, rnum = 2,
	    type = {msg, p_attr}, occurrence = required, opts = []},
     #field{name = rare1, fnum = 2, rnum = 3,
	    type = {msg, p_attr}, occurrence = optional, opts = []},
     #field{name = rare2, fnum = 3, rnum = 4,
	    type = {msg, p_attr}, occurrence = optional, opts = []},
     #field{name = rare3, fnum = 4, rnum = 5,
	    type = {msg, p_attr}, occurrence = optional, opts = []},
     #field{name = marriage, fnum = 5, rnum = 6,
	    type = {msg, p_marriage}, occurrence = optional,
	    opts = []},
     #field{name = stren_phase, fnum = 6, rnum = 7,
	    type = int32, occurrence = required, opts = []},
     #field{name = stren_lv, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []},
     #field{name = stones, fnum = 8, rnum = 9,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = power, fnum = 9, rnum = 10, type = int32,
	    occurrence = required, opts = []},
     #field{name = cast, fnum = 10, rnum = 11, type = int32,
	    occurrence = optional, opts = []},
     #field{name = refine, fnum = 11, rnum = 12,
	    type = {msg, p_refine}, occurrence = repeated,
	    opts = []},
     #field{name = suite, fnum = 12, rnum = 13,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = combine, fnum = 13, rnum = 14,
	    type = {msg, p_item}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_pet) ->
    [#field{name = base, fnum = 1, rnum = 2,
	    type = {msg, p_attr}, occurrence = required, opts = []},
     #field{name = rare1, fnum = 2, rnum = 3,
	    type = {msg, p_attr}, occurrence = optional, opts = []},
     #field{name = rare2, fnum = 3, rnum = 4,
	    type = {msg, p_attr}, occurrence = optional, opts = []},
     #field{name = rare3, fnum = 4, rnum = 5,
	    type = {msg, p_attr}, occurrence = optional, opts = []},
     #field{name = cross, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = strong, fnum = 6, rnum = 7,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = power, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_marriage) ->
    [#field{name = husband_id, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = optional, opts = []},
     #field{name = husband, fnum = 2, rnum = 3,
	    type = string, occurrence = optional, opts = []},
     #field{name = wife_id, fnum = 3, rnum = 4,
	    type = fixed64, occurrence = optional, opts = []},
     #field{name = wife, fnum = 4, rnum = 5, type = string,
	    occurrence = optional, opts = []},
     #field{name = rare, fnum = 5, rnum = 6,
	    type = {msg, p_attr}, occurrence = optional,
	    opts = []}];
find_msg_def(p_refine) ->
    [#field{name = attr, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = min, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = max, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = color, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_actor) ->
    [#field{name = uid, fnum = 1, rnum = 2, type = uint64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = coord, fnum = 4, rnum = 5,
	    type = {msg, p_coord}, occurrence = required,
	    opts = []},
     #field{name = state, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = stargs, fnum = 6, rnum = 7,
	    type = {map, int32, string}, occurrence = repeated,
	    opts = []},
     #field{name = role, fnum = 7, rnum = 8,
	    type = {msg, p_role}, occurrence = optional, opts = []},
     #field{name = creep, fnum = 8, rnum = 9,
	    type = {msg, p_creep}, occurrence = optional,
	    opts = []},
     #field{name = drop, fnum = 9, rnum = 10,
	    type = {msg, p_drop}, occurrence = optional,
	    opts = []}];
find_msg_def(p_role) ->
    [#field{name = career, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = gender, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = viplv, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = figure, fnum = 5, rnum = 6,
	    type = {map, string, {msg, p_aspect}},
	    occurrence = repeated, opts = []},
     #field{name = suid, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = guild, fnum = 7, rnum = 8, type = uint64,
	    occurrence = required, opts = []},
     #field{name = gname, fnum = 8, rnum = 9, type = string,
	    occurrence = required, opts = []},
     #field{name = hp, fnum = 9, rnum = 10, type = int32,
	    occurrence = required, opts = []},
     #field{name = hpmax, fnum = 10, rnum = 11, type = int32,
	    occurrence = required, opts = []},
     #field{name = speed, fnum = 11, rnum = 12, type = int32,
	    occurrence = required, opts = []},
     #field{name = buffs, fnum = 12, rnum = 13,
	    type = {msg, p_buff}, occurrence = repeated, opts = []},
     #field{name = power, fnum = 13, rnum = 14, type = int32,
	    occurrence = required, opts = []},
     #field{name = pkmode, fnum = 14, rnum = 15,
	    type = int32, occurrence = required, opts = []},
     #field{name = crime, fnum = 15, rnum = 16, type = int32,
	    occurrence = required, opts = []},
     #field{name = dir, fnum = 16, rnum = 17, type = double,
	    occurrence = required, opts = []},
     #field{name = dest, fnum = 17, rnum = 18,
	    type = {msg, p_coord}, occurrence = required,
	    opts = []},
     #field{name = group, fnum = 18, rnum = 19, type = int32,
	    occurrence = required, opts = []},
     #field{name = team, fnum = 19, rnum = 20,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = marry, fnum = 20, rnum = 21, type = int32,
	    occurrence = required, opts = []},
     #field{name = mname, fnum = 21, rnum = 22,
	    type = string, occurrence = required, opts = []},
     #field{name = mtype, fnum = 22, rnum = 23, type = int32,
	    occurrence = required, opts = []},
     #field{name = zoneid, fnum = 23, rnum = 24,
	    type = int32, occurrence = required, opts = []},
     #field{name = ext, fnum = 24, rnum = 25,
	    type = {map, string, int32}, occurrence = repeated,
	    opts = []},
     #field{name = icon, fnum = 25, rnum = 26,
	    type = {msg, p_icon}, occurrence = optional,
	    opts = []}];
find_msg_def(p_creep) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = owner, fnum = 2, rnum = 3, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = hp, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = hpmax, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = speed, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = buffs, fnum = 6, rnum = 7,
	    type = {msg, p_buff}, occurrence = repeated, opts = []},
     #field{name = dir, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = dest, fnum = 8, rnum = 9,
	    type = {msg, p_coord}, occurrence = required,
	    opts = []},
     #field{name = group, fnum = 9, rnum = 10, type = int32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 10, rnum = 11, type = int32,
	    occurrence = required, opts = []},
     #field{name = ext, fnum = 11, rnum = 12,
	    type = {map, string, uint64}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_npc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = coord, fnum = 2, rnum = 3,
	    type = {msg, p_coord}, occurrence = required,
	    opts = []}];
find_msg_def(p_drop) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = mode, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = from, fnum = 4, rnum = 5, type = uint64,
	    occurrence = optional, opts = []},
     #field{name = coord, fnum = 5, rnum = 6,
	    type = {msg, p_coord}, occurrence = optional,
	    opts = []},
     #field{name = belong, fnum = 6, rnum = 7,
	    type = fixed64, occurrence = repeated, opts = []},
     #field{name = unlock, fnum = 7, rnum = 8, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(p_buff) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = origin, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = value, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = eff, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = etime, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = group, fnum = 7, rnum = 8, type = int32,
	    occurrence = required, opts = []},
     #field{name = attrs, fnum = 8, rnum = 9, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(p_coord) ->
    [#field{name = x, fnum = 1, rnum = 2, type = double,
	    occurrence = required, opts = []},
     #field{name = y, fnum = 2, rnum = 3, type = double,
	    occurrence = required, opts = []}];
find_msg_def(p_icon) ->
    [#field{name = pic, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []},
     #field{name = md5, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = frame, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = bubble, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_ranking) ->
    [#field{name = base, fnum = 1, rnum = 2,
	    type = {msg, p_role_base}, occurrence = optional,
	    opts = []},
     #field{name = rank, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = sort, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = data, fnum = 4, rnum = 5,
	    type = {map, string, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_dropped) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = scene, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = picker_id, fnum = 3, rnum = 4,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = picker_name, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = boss, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = item_id, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = cache_id, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
