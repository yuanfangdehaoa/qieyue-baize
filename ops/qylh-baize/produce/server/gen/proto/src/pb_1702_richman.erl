%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1702_richman).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1702_richman.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_richman_info_tos() :: #m_richman_info_tos{}.

-type m_richman_info_toc() :: #m_richman_info_toc{}.

-type m_richman_dice_tos() :: #m_richman_dice_tos{}.

-type m_richman_dice_toc() :: #m_richman_dice_toc{}.

-type m_richman_fetch_tos() :: #m_richman_fetch_tos{}.

-type m_richman_fetch_toc() :: #m_richman_fetch_toc{}.

-type m_richman_mend_tos() :: #m_richman_mend_tos{}.

-type m_richman_mend_toc() :: #m_richman_mend_toc{}.

-type m_richman_refrech_toc() :: #m_richman_refrech_toc{}.

-export_type(['m_richman_info_tos'/0, 'm_richman_info_toc'/0, 'm_richman_dice_tos'/0, 'm_richman_dice_toc'/0, 'm_richman_fetch_tos'/0, 'm_richman_fetch_toc'/0, 'm_richman_mend_tos'/0, 'm_richman_mend_toc'/0, 'm_richman_refrech_toc'/0]).

-spec encode_msg(#m_richman_info_tos{} | #m_richman_info_toc{} | #m_richman_dice_tos{} | #m_richman_dice_toc{} | #m_richman_fetch_tos{} | #m_richman_fetch_toc{} | #m_richman_mend_tos{} | #m_richman_mend_toc{} | #m_richman_refrech_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_richman_info_tos{} | #m_richman_info_toc{} | #m_richman_dice_tos{} | #m_richman_dice_toc{} | #m_richman_fetch_tos{} | #m_richman_fetch_toc{} | #m_richman_mend_tos{} | #m_richman_mend_toc{} | #m_richman_refrech_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_richman_info_tos{} | #m_richman_info_toc{} | #m_richman_dice_tos{} | #m_richman_dice_toc{} | #m_richman_fetch_tos{} | #m_richman_fetch_toc{} | #m_richman_mend_tos{} | #m_richman_mend_toc{} | #m_richman_refrech_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_richman_info_tos ->
	  encode_msg_m_richman_info_tos(id(Msg, TrUserData),
					TrUserData);
      m_richman_info_toc ->
	  encode_msg_m_richman_info_toc(id(Msg, TrUserData),
					TrUserData);
      m_richman_dice_tos ->
	  encode_msg_m_richman_dice_tos(id(Msg, TrUserData),
					TrUserData);
      m_richman_dice_toc ->
	  encode_msg_m_richman_dice_toc(id(Msg, TrUserData),
					TrUserData);
      m_richman_fetch_tos ->
	  encode_msg_m_richman_fetch_tos(id(Msg, TrUserData),
					 TrUserData);
      m_richman_fetch_toc ->
	  encode_msg_m_richman_fetch_toc(id(Msg, TrUserData),
					 TrUserData);
      m_richman_mend_tos ->
	  encode_msg_m_richman_mend_tos(id(Msg, TrUserData),
					TrUserData);
      m_richman_mend_toc ->
	  encode_msg_m_richman_mend_toc(id(Msg, TrUserData),
					TrUserData);
      m_richman_refrech_toc ->
	  encode_msg_m_richman_refrech_toc(id(Msg, TrUserData),
					   TrUserData)
    end.


encode_msg_m_richman_info_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_richman_info_toc(Msg, TrUserData) ->
    encode_msg_m_richman_info_toc(Msg, <<>>, TrUserData).


encode_msg_m_richman_info_toc(#m_richman_info_toc{curr_round
						      = F1,
						  curr_grid = F2,
						  lucky_fetch = F3,
						  round_fetch = F4,
						  lucky_round = F5,
						  dice_gain = F6,
						  dice_mend = F7, act_id = F8},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_m_richman_info_toc_lucky_fetch(TrF3, B2,
							 TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   if TrF4 == [] -> B3;
	      true ->
		  e_field_m_richman_info_toc_round_fetch(TrF4, B3,
							 TrUserData)
	   end
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = 'tr_encode_m_richman_info_toc.dice_gain'(F6,
							   TrUserData),
	   if TrF6 == [] -> B5;
	      true ->
		  e_field_m_richman_info_toc_dice_gain(TrF6, B5,
						       TrUserData)
	   end
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
	 end,
    begin
      TrF8 = id(F8, TrUserData),
      e_type_int32(TrF8, <<B7/binary, 64>>, TrUserData)
    end.

encode_msg_m_richman_dice_tos(Msg, TrUserData) ->
    encode_msg_m_richman_dice_tos(Msg, <<>>, TrUserData).


encode_msg_m_richman_dice_tos(#m_richman_dice_tos{type =
						      F1,
						  point = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	   end
    end.

encode_msg_m_richman_dice_toc(Msg, TrUserData) ->
    encode_msg_m_richman_dice_toc(Msg, <<>>, TrUserData).


encode_msg_m_richman_dice_toc(#m_richman_dice_toc{type =
						      F1,
						  point = F2, result = F3,
						  reward = F4},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = 'tr_encode_m_richman_dice_toc.reward'(F4,
						   TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_m_richman_dice_toc_reward(TrF4, B3, TrUserData)
      end
    end.

encode_msg_m_richman_fetch_tos(Msg, TrUserData) ->
    encode_msg_m_richman_fetch_tos(Msg, <<>>, TrUserData).


encode_msg_m_richman_fetch_tos(#m_richman_fetch_tos{round
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_richman_fetch_toc(Msg, TrUserData) ->
    encode_msg_m_richman_fetch_toc(Msg, <<>>, TrUserData).


encode_msg_m_richman_fetch_toc(#m_richman_fetch_toc{round
							= F1,
						    reward = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = 'tr_encode_m_richman_fetch_toc.reward'(F2,
						    TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_richman_fetch_toc_reward(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_richman_mend_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_richman_mend_toc(Msg, TrUserData) ->
    encode_msg_m_richman_mend_toc(Msg, <<>>, TrUserData).


encode_msg_m_richman_mend_toc(#m_richman_mend_toc{num =
						      F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_richman_refrech_toc(_Msg, _TrUserData) ->
    <<>>.

e_field_m_richman_info_toc_lucky_fetch([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 24>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_richman_info_toc_lucky_fetch(Rest, Bin3,
					   TrUserData);
e_field_m_richman_info_toc_lucky_fetch([], Bin,
				       _TrUserData) ->
    Bin.

e_field_m_richman_info_toc_round_fetch([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_richman_info_toc_round_fetch(Rest, Bin3,
					   TrUserData);
e_field_m_richman_info_toc_round_fetch([], Bin,
				       _TrUserData) ->
    Bin.

e_mfield_m_richman_info_toc_dice_gain(Msg, Bin,
				      TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_richman_info_toc_dice_gain([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 50>>,
    Bin3 =
	e_mfield_m_richman_info_toc_dice_gain('tr_encode_m_richman_info_toc.dice_gain[x]'(Elem,
											  TrUserData),
					      Bin2, TrUserData),
    e_field_m_richman_info_toc_dice_gain(Rest, Bin3,
					 TrUserData);
e_field_m_richman_info_toc_dice_gain([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_m_richman_dice_toc_reward(Msg, Bin,
				   TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_richman_dice_toc_reward([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_m_richman_dice_toc_reward('tr_encode_m_richman_dice_toc.reward[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_m_richman_dice_toc_reward(Rest, Bin3,
				      TrUserData);
e_field_m_richman_dice_toc_reward([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_m_richman_fetch_toc_reward(Msg, Bin,
				    TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_richman_fetch_toc_reward([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_richman_fetch_toc_reward('tr_encode_m_richman_fetch_toc.reward[x]'(Elem,
										      TrUserData),
					    Bin2, TrUserData),
    e_field_m_richman_fetch_toc_reward(Rest, Bin3,
				       TrUserData);
e_field_m_richman_fetch_toc_reward([], Bin,
				   _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_richman_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_info_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_info_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_dice_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_dice_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_dice_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_dice_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_fetch_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_fetch_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_fetch_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_fetch_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_mend_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_mend_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_mend_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_mend_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_richman_refrech_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_richman_refrech_toc(Bin, TrUserData),
       TrUserData).



decode_msg_m_richman_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_info_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_richman_info_tos(<<>>, 0, 0, _) ->
    #m_richman_info_tos{};
dfp_read_field_def_m_richman_info_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_richman_info_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_richman_info_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_info_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_richman_info_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_richman_info_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_richman_info_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_richman_info_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_richman_info_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_richman_info_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_richman_info_tos(<<>>, 0, 0, _) ->
    #m_richman_info_tos{}.

skip_varint_m_richman_info_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_richman_info_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_richman_info_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_richman_info_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_richman_info_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_info_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_richman_info_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_info_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_richman_info_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_info_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_richman_info_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_richman_info_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_richman_info_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_richman_info_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_richman_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_info_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id([], TrUserData),
					  id([], TrUserData),
					  id(undefined, TrUserData),
					  'tr_decode_init_default_m_richman_info_toc.dice_gain'([],
												TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_richman_info_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_curr_round(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_curr_grid(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_pfield_m_richman_info_toc_lucky_fetch(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_lucky_fetch(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_pfield_m_richman_info_toc_round_fetch(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					    F@_7, F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_round_fetch(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_lucky_round(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<50,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_dice_gain(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<56,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_dice_mend(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, TrUserData);
dfp_read_field_def_m_richman_info_toc(<<64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData) ->
    d_field_m_richman_info_toc_act_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      TrUserData);
dfp_read_field_def_m_richman_info_toc(<<>>, 0, 0, F@_1,
				      F@_2, R1, R2, F@_5, R3, F@_7, F@_8,
				      TrUserData) ->
    #m_richman_info_toc{curr_round = F@_1, curr_grid = F@_2,
			lucky_fetch = lists_reverse(R1, TrUserData),
			round_fetch = lists_reverse(R2, TrUserData),
			lucky_round = F@_5,
			dice_gain =
			    'tr_decode_repeated_finalize_m_richman_info_toc.dice_gain'(R3,
										       TrUserData),
			dice_mend = F@_7, act_id = F@_8};
dfp_read_field_def_m_richman_info_toc(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      F@_8, TrUserData) ->
    dg_read_field_def_m_richman_info_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, TrUserData).

dg_read_field_def_m_richman_info_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_info_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
dg_read_field_def_m_richman_info_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_richman_info_toc_curr_round(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						F@_7, F@_8, TrUserData);
      16 ->
	  d_field_m_richman_info_toc_curr_grid(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, TrUserData);
      26 ->
	  d_pfield_m_richman_info_toc_lucky_fetch(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, TrUserData);
      24 ->
	  d_field_m_richman_info_toc_lucky_fetch(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
      34 ->
	  d_pfield_m_richman_info_toc_round_fetch(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  F@_6, F@_7, F@_8, TrUserData);
      32 ->
	  d_field_m_richman_info_toc_round_fetch(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
      40 ->
	  d_field_m_richman_info_toc_lucky_round(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, F@_8, TrUserData);
      50 ->
	  d_field_m_richman_info_toc_dice_gain(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, TrUserData);
      56 ->
	  d_field_m_richman_info_toc_dice_mend(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, F@_8, TrUserData);
      64 ->
	  d_field_m_richman_info_toc_act_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_richman_info_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       F@_8, TrUserData);
	    1 ->
		skip_64_m_richman_info_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_richman_info_toc(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7, F@_8,
							 TrUserData);
	    3 ->
		skip_group_m_richman_info_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, TrUserData);
	    5 ->
		skip_32_m_richman_info_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_richman_info_toc(<<>>, 0, 0, F@_1,
				     F@_2, R1, R2, F@_5, R3, F@_7, F@_8,
				     TrUserData) ->
    #m_richman_info_toc{curr_round = F@_1, curr_grid = F@_2,
			lucky_fetch = lists_reverse(R1, TrUserData),
			round_fetch = lists_reverse(R2, TrUserData),
			lucky_round = F@_5,
			dice_gain =
			    'tr_decode_repeated_finalize_m_richman_info_toc.dice_gain'(R3,
										       TrUserData),
			dice_mend = F@_7, act_id = F@_8}.

d_field_m_richman_info_toc_curr_round(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_curr_round(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_m_richman_info_toc_curr_round(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				      F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, TrUserData).

d_field_m_richman_info_toc_curr_grid(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_curr_grid(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_m_richman_info_toc_curr_grid(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

d_field_m_richman_info_toc_lucky_fetch(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_lucky_fetch(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
d_field_m_richman_info_toc_lucky_fetch(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  F@_2,
					  cons(NewFValue, Prev, TrUserData),
					  F@_4, F@_5, F@_6, F@_7, F@_8,
					  TrUserData).

d_pfield_m_richman_info_toc_lucky_fetch(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_pfield_m_richman_info_toc_lucky_fetch(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
d_pfield_m_richman_info_toc_lucky_fetch(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, E, F@_4, F@_5, F@_6,
					F@_7, F@_8, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_richman_info_toc_lucky_fetch(PackedBytes,
						      0, 0, E, TrUserData),
    dfp_read_field_def_m_richman_info_toc(Rest2, 0, 0, F@_1,
					  F@_2, NewSeq, F@_4, F@_5, F@_6, F@_7,
					  F@_8, TrUserData).

d_packed_field_m_richman_info_toc_lucky_fetch(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_richman_info_toc_lucky_fetch(Rest,
						  N + 7, X bsl N + Acc, AccSeq,
						  TrUserData);
d_packed_field_m_richman_info_toc_lucky_fetch(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_richman_info_toc_lucky_fetch(RestF, 0,
						  0, [NewFValue | AccSeq],
						  TrUserData);
d_packed_field_m_richman_info_toc_lucky_fetch(<<>>, 0,
					      0, AccSeq, _) ->
    AccSeq.

d_field_m_richman_info_toc_round_fetch(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_round_fetch(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
d_field_m_richman_info_toc_round_fetch(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
				       F@_6, F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3,
					  cons(NewFValue, Prev, TrUserData),
					  F@_5, F@_6, F@_7, F@_8, TrUserData).

d_pfield_m_richman_info_toc_round_fetch(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_pfield_m_richman_info_toc_round_fetch(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8,
					    TrUserData);
d_pfield_m_richman_info_toc_round_fetch(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, E, F@_5, F@_6,
					F@_7, F@_8, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_richman_info_toc_round_fetch(PackedBytes,
						      0, 0, E, TrUserData),
    dfp_read_field_def_m_richman_info_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, NewSeq, F@_5, F@_6, F@_7,
					  F@_8, TrUserData).

d_packed_field_m_richman_info_toc_round_fetch(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_richman_info_toc_round_fetch(Rest,
						  N + 7, X bsl N + Acc, AccSeq,
						  TrUserData);
d_packed_field_m_richman_info_toc_round_fetch(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_richman_info_toc_round_fetch(RestF, 0,
						  0, [NewFValue | AccSeq],
						  TrUserData);
d_packed_field_m_richman_info_toc_round_fetch(<<>>, 0,
					      0, AccSeq, _) ->
    AccSeq.

d_field_m_richman_info_toc_lucky_round(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_lucky_round(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8,
					   TrUserData);
d_field_m_richman_info_toc_lucky_round(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				       F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue, F@_6,
					  F@_7, F@_8, TrUserData).

d_field_m_richman_info_toc_dice_gain(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_dice_gain(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_m_richman_info_toc_dice_gain(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev,
				     F@_7, F@_8, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5,
					  'tr_decode_repeated_add_elem_m_richman_info_toc.dice_gain'(NewFValue,
												     Prev,
												     TrUserData),
					  F@_7, F@_8, TrUserData).

d_field_m_richman_info_toc_dice_mend(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_dice_mend(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_m_richman_info_toc_dice_mend(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     _, F@_8, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  NewFValue, F@_8, TrUserData).

d_field_m_richman_info_toc_act_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, TrUserData)
    when N < 57 ->
    d_field_m_richman_info_toc_act_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, TrUserData);
d_field_m_richman_info_toc_act_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_info_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  NewFValue, TrUserData).

skip_varint_m_richman_info_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    skip_varint_m_richman_info_toc(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   TrUserData);
skip_varint_m_richman_info_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, TrUserData) ->
    dfp_read_field_def_m_richman_info_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

skip_length_delimited_m_richman_info_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_info_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8,
					     TrUserData);
skip_length_delimited_m_richman_info_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_info_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, TrUserData).

skip_group_m_richman_info_toc(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_info_toc(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  F@_8, TrUserData).

skip_32_m_richman_info_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData) ->
    dfp_read_field_def_m_richman_info_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

skip_64_m_richman_info_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   TrUserData) ->
    dfp_read_field_def_m_richman_info_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, F@_8, TrUserData).

decode_msg_m_richman_dice_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_dice_tos(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_richman_dice_tos(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_richman_dice_tos_type(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_m_richman_dice_tos(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_richman_dice_tos_point(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_m_richman_dice_tos(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #m_richman_dice_tos{type = F@_1, point = F@_2};
dfp_read_field_def_m_richman_dice_tos(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_richman_dice_tos(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_m_richman_dice_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_dice_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_richman_dice_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_richman_dice_tos_type(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  d_field_m_richman_dice_tos_point(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_richman_dice_tos(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_m_richman_dice_tos(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_richman_dice_tos(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_m_richman_dice_tos(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_m_richman_dice_tos(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_richman_dice_tos(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #m_richman_dice_tos{type = F@_1, point = F@_2}.

d_field_m_richman_dice_tos_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_richman_dice_tos_type(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_richman_dice_tos_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_dice_tos(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_m_richman_dice_tos_point(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_richman_dice_tos_point(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_richman_dice_tos_point(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_dice_tos(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_m_richman_dice_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_richman_dice_tos(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_m_richman_dice_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_richman_dice_tos(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_m_richman_dice_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_dice_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_m_richman_dice_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_dice_tos(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_m_richman_dice_tos(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_dice_tos(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_m_richman_dice_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_richman_dice_tos(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_m_richman_dice_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_richman_dice_tos(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_m_richman_dice_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_dice_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  'tr_decode_init_default_m_richman_dice_toc.reward'([],
											     TrUserData),
					  TrUserData).

dfp_read_field_def_m_richman_dice_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_richman_dice_toc_type(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_richman_dice_toc(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_richman_dice_toc_point(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_richman_dice_toc(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_richman_dice_toc_result(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_richman_dice_toc(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_richman_dice_toc_reward(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_richman_dice_toc(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, R1, TrUserData) ->
    #m_richman_dice_toc{type = F@_1, point = F@_2,
			result = F@_3,
			reward =
			    'tr_decode_repeated_finalize_m_richman_dice_toc.reward'(R1,
										    TrUserData)};
dfp_read_field_def_m_richman_dice_toc(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_m_richman_dice_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_m_richman_dice_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_dice_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
dg_read_field_def_m_richman_dice_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_richman_dice_toc_type(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, TrUserData);
      16 ->
	  d_field_m_richman_dice_toc_point(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      24 ->
	  d_field_m_richman_dice_toc_result(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_field_m_richman_dice_toc_reward(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_richman_dice_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_m_richman_dice_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    2 ->
		skip_length_delimited_m_richman_dice_toc(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
	    3 ->
		skip_group_m_richman_dice_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_m_richman_dice_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData)
	  end
    end;
dg_read_field_def_m_richman_dice_toc(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, R1, TrUserData) ->
    #m_richman_dice_toc{type = F@_1, point = F@_2,
			result = F@_3,
			reward =
			    'tr_decode_repeated_finalize_m_richman_dice_toc.reward'(R1,
										    TrUserData)}.

d_field_m_richman_dice_toc_type(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_richman_dice_toc_type(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
d_field_m_richman_dice_toc_type(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_dice_toc(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4,
					  TrUserData).

d_field_m_richman_dice_toc_point(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_richman_dice_toc_point(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_m_richman_dice_toc_point(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_dice_toc(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, TrUserData).

d_field_m_richman_dice_toc_result(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_richman_dice_toc_result(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_m_richman_dice_toc_result(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_dice_toc(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, TrUserData).

d_field_m_richman_dice_toc_reward(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_richman_dice_toc_reward(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData);
d_field_m_richman_dice_toc_reward(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_richman_dice_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3,
					  'tr_decode_repeated_add_elem_m_richman_dice_toc.reward'(NewFValue,
												  Prev,
												  TrUserData),
					  TrUserData).

skip_varint_m_richman_dice_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_m_richman_dice_toc(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
skip_varint_m_richman_dice_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_richman_dice_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_m_richman_dice_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_dice_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
skip_length_delimited_m_richman_dice_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_dice_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_group_m_richman_dice_toc(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_dice_toc(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_32_m_richman_dice_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_richman_dice_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_m_richman_dice_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_richman_dice_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_m_richman_fetch_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_richman_fetch_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_richman_fetch_tos_round(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_richman_fetch_tos(<<>>, 0, 0, F@_1,
				       _) ->
    #m_richman_fetch_tos{round = F@_1};
dfp_read_field_def_m_richman_fetch_tos(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_richman_fetch_tos(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_richman_fetch_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_fetch_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_richman_fetch_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_richman_fetch_tos_round(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_richman_fetch_tos(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_richman_fetch_tos(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_richman_fetch_tos(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_richman_fetch_tos(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_richman_fetch_tos(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_richman_fetch_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_richman_fetch_tos{round = F@_1}.

d_field_m_richman_fetch_tos_round(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_richman_fetch_tos_round(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_richman_fetch_tos_round(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_fetch_tos(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_richman_fetch_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_richman_fetch_tos(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_richman_fetch_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_richman_fetch_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_fetch_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_richman_fetch_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_fetch_tos(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_richman_fetch_tos(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_fetch_tos(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_richman_fetch_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_richman_fetch_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_richman_fetch_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   'tr_decode_init_default_m_richman_fetch_toc.reward'([],
											       TrUserData),
					   TrUserData).

dfp_read_field_def_m_richman_fetch_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_richman_fetch_toc_round(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_richman_fetch_toc(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_richman_fetch_toc_reward(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_richman_fetch_toc(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    #m_richman_fetch_toc{round = F@_1,
			 reward =
			     'tr_decode_repeated_finalize_m_richman_fetch_toc.reward'(R1,
										      TrUserData)};
dfp_read_field_def_m_richman_fetch_toc(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_richman_fetch_toc(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_m_richman_fetch_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_fetch_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_m_richman_fetch_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_richman_fetch_toc_round(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_m_richman_fetch_toc_reward(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_richman_fetch_toc(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_m_richman_fetch_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_richman_fetch_toc(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_m_richman_fetch_toc(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_m_richman_fetch_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_richman_fetch_toc(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    #m_richman_fetch_toc{round = F@_1,
			 reward =
			     'tr_decode_repeated_finalize_m_richman_fetch_toc.reward'(R1,
										      TrUserData)}.

d_field_m_richman_fetch_toc_round(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_richman_fetch_toc_round(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_richman_fetch_toc_round(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_fetch_toc(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

d_field_m_richman_fetch_toc_reward(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_richman_fetch_toc_reward(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_richman_fetch_toc_reward(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_richman_fetch_toc(RestF, 0, 0,
					   F@_1,
					   'tr_decode_repeated_add_elem_m_richman_fetch_toc.reward'(NewFValue,
												    Prev,
												    TrUserData),
					   TrUserData).

skip_varint_m_richman_fetch_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_richman_fetch_toc(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_m_richman_fetch_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_m_richman_fetch_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_fetch_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_m_richman_fetch_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_fetch_toc(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_m_richman_fetch_toc(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_fetch_toc(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_m_richman_fetch_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_m_richman_fetch_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_richman_fetch_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_m_richman_mend_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_mend_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_richman_mend_tos(<<>>, 0, 0, _) ->
    #m_richman_mend_tos{};
dfp_read_field_def_m_richman_mend_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_richman_mend_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_richman_mend_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_mend_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_richman_mend_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_richman_mend_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_richman_mend_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_richman_mend_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_richman_mend_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_richman_mend_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_richman_mend_tos(<<>>, 0, 0, _) ->
    #m_richman_mend_tos{}.

skip_varint_m_richman_mend_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_richman_mend_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_richman_mend_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_richman_mend_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_richman_mend_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_mend_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_richman_mend_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_mend_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_richman_mend_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_mend_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_richman_mend_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_richman_mend_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_richman_mend_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_richman_mend_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_richman_mend_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_mend_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_richman_mend_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_richman_mend_toc_num(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_m_richman_mend_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_richman_mend_toc{num = F@_1};
dfp_read_field_def_m_richman_mend_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_richman_mend_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_richman_mend_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_mend_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_richman_mend_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_richman_mend_toc_num(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_richman_mend_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_richman_mend_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_richman_mend_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_richman_mend_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_richman_mend_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_richman_mend_toc(<<>>, 0, 0, F@_1,
				     _) ->
    #m_richman_mend_toc{num = F@_1}.

d_field_m_richman_mend_toc_num(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_richman_mend_toc_num(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_m_richman_mend_toc_num(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_richman_mend_toc(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_richman_mend_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_richman_mend_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_richman_mend_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_richman_mend_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_richman_mend_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_mend_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_richman_mend_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_mend_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_richman_mend_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_mend_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_richman_mend_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_richman_mend_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_richman_mend_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_richman_mend_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_richman_refrech_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_richman_refrech_toc(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_m_richman_refrech_toc(<<>>, 0, 0,
					 _) ->
    #m_richman_refrech_toc{};
dfp_read_field_def_m_richman_refrech_toc(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_m_richman_refrech_toc(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_m_richman_refrech_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_richman_refrech_toc(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_m_richman_refrech_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_richman_refrech_toc(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_m_richman_refrech_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_richman_refrech_toc(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_m_richman_refrech_toc(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_m_richman_refrech_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_richman_refrech_toc(<<>>, 0, 0,
					_) ->
    #m_richman_refrech_toc{}.

skip_varint_m_richman_refrech_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_m_richman_refrech_toc(Rest, Z1, Z2,
				      TrUserData);
skip_varint_m_richman_refrech_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_richman_refrech_toc(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_m_richman_refrech_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_richman_refrech_toc(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_m_richman_refrech_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_richman_refrech_toc(Rest2, 0, 0,
					     TrUserData).

skip_group_m_richman_refrech_toc(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_richman_refrech_toc(Rest, 0, Z2,
					     TrUserData).

skip_32_m_richman_refrech_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_richman_refrech_toc(Rest, Z1, Z2,
					     TrUserData).

skip_64_m_richman_refrech_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_richman_refrech_toc(Rest, Z1, Z2,
					     TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_richman_info_tos ->
	  merge_msg_m_richman_info_tos(Prev, New, TrUserData);
      m_richman_info_toc ->
	  merge_msg_m_richman_info_toc(Prev, New, TrUserData);
      m_richman_dice_tos ->
	  merge_msg_m_richman_dice_tos(Prev, New, TrUserData);
      m_richman_dice_toc ->
	  merge_msg_m_richman_dice_toc(Prev, New, TrUserData);
      m_richman_fetch_tos ->
	  merge_msg_m_richman_fetch_tos(Prev, New, TrUserData);
      m_richman_fetch_toc ->
	  merge_msg_m_richman_fetch_toc(Prev, New, TrUserData);
      m_richman_mend_tos ->
	  merge_msg_m_richman_mend_tos(Prev, New, TrUserData);
      m_richman_mend_toc ->
	  merge_msg_m_richman_mend_toc(Prev, New, TrUserData);
      m_richman_refrech_toc ->
	  merge_msg_m_richman_refrech_toc(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_richman_info_tos/3}).
merge_msg_m_richman_info_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_richman_info_toc/3}).
merge_msg_m_richman_info_toc(#m_richman_info_toc{lucky_fetch
						     = PFlucky_fetch,
						 round_fetch = PFround_fetch,
						 dice_gain = PFdice_gain},
			     #m_richman_info_toc{curr_round = NFcurr_round,
						 curr_grid = NFcurr_grid,
						 lucky_fetch = NFlucky_fetch,
						 round_fetch = NFround_fetch,
						 lucky_round = NFlucky_round,
						 dice_gain = NFdice_gain,
						 dice_mend = NFdice_mend,
						 act_id = NFact_id},
			     TrUserData) ->
    #m_richman_info_toc{curr_round = NFcurr_round,
			curr_grid = NFcurr_grid,
			lucky_fetch =
			    if PFlucky_fetch /= undefined,
			       NFlucky_fetch /= undefined ->
				   'erlang_++'(PFlucky_fetch, NFlucky_fetch,
					       TrUserData);
			       PFlucky_fetch == undefined -> NFlucky_fetch;
			       NFlucky_fetch == undefined -> PFlucky_fetch
			    end,
			round_fetch =
			    if PFround_fetch /= undefined,
			       NFround_fetch /= undefined ->
				   'erlang_++'(PFround_fetch, NFround_fetch,
					       TrUserData);
			       PFround_fetch == undefined -> NFround_fetch;
			       NFround_fetch == undefined -> PFround_fetch
			    end,
			lucky_round = NFlucky_round,
			dice_gain =
			    if PFdice_gain /= undefined,
			       NFdice_gain /= undefined ->
				   'tr_merge_m_richman_info_toc.dice_gain'(PFdice_gain,
									   NFdice_gain,
									   TrUserData);
			       PFdice_gain == undefined -> NFdice_gain;
			       NFdice_gain == undefined -> PFdice_gain
			    end,
			dice_mend = NFdice_mend, act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_richman_dice_tos/3}).
merge_msg_m_richman_dice_tos(#m_richman_dice_tos{point =
						     PFpoint},
			     #m_richman_dice_tos{type = NFtype,
						 point = NFpoint},
			     _) ->
    #m_richman_dice_tos{type = NFtype,
			point =
			    if NFpoint =:= undefined -> PFpoint;
			       true -> NFpoint
			    end}.

-compile({nowarn_unused_function,merge_msg_m_richman_dice_toc/3}).
merge_msg_m_richman_dice_toc(#m_richman_dice_toc{reward
						     = PFreward},
			     #m_richman_dice_toc{type = NFtype, point = NFpoint,
						 result = NFresult,
						 reward = NFreward},
			     TrUserData) ->
    #m_richman_dice_toc{type = NFtype, point = NFpoint,
			result = NFresult,
			reward =
			    if PFreward /= undefined, NFreward /= undefined ->
				   'tr_merge_m_richman_dice_toc.reward'(PFreward,
									NFreward,
									TrUserData);
			       PFreward == undefined -> NFreward;
			       NFreward == undefined -> PFreward
			    end}.

-compile({nowarn_unused_function,merge_msg_m_richman_fetch_tos/3}).
merge_msg_m_richman_fetch_tos(#m_richman_fetch_tos{},
			      #m_richman_fetch_tos{round = NFround}, _) ->
    #m_richman_fetch_tos{round = NFround}.

-compile({nowarn_unused_function,merge_msg_m_richman_fetch_toc/3}).
merge_msg_m_richman_fetch_toc(#m_richman_fetch_toc{reward
						       = PFreward},
			      #m_richman_fetch_toc{round = NFround,
						   reward = NFreward},
			      TrUserData) ->
    #m_richman_fetch_toc{round = NFround,
			 reward =
			     if PFreward /= undefined, NFreward /= undefined ->
				    'tr_merge_m_richman_fetch_toc.reward'(PFreward,
									  NFreward,
									  TrUserData);
				PFreward == undefined -> NFreward;
				NFreward == undefined -> PFreward
			     end}.

-compile({nowarn_unused_function,merge_msg_m_richman_mend_tos/3}).
merge_msg_m_richman_mend_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_richman_mend_toc/3}).
merge_msg_m_richman_mend_toc(#m_richman_mend_toc{},
			     #m_richman_mend_toc{num = NFnum}, _) ->
    #m_richman_mend_toc{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_richman_refrech_toc/3}).
merge_msg_m_richman_refrech_toc(_Prev, New,
				_TrUserData) ->
    New.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_richman_info_tos ->
	  v_msg_m_richman_info_tos(Msg, [MsgName], TrUserData);
      m_richman_info_toc ->
	  v_msg_m_richman_info_toc(Msg, [MsgName], TrUserData);
      m_richman_dice_tos ->
	  v_msg_m_richman_dice_tos(Msg, [MsgName], TrUserData);
      m_richman_dice_toc ->
	  v_msg_m_richman_dice_toc(Msg, [MsgName], TrUserData);
      m_richman_fetch_tos ->
	  v_msg_m_richman_fetch_tos(Msg, [MsgName], TrUserData);
      m_richman_fetch_toc ->
	  v_msg_m_richman_fetch_toc(Msg, [MsgName], TrUserData);
      m_richman_mend_tos ->
	  v_msg_m_richman_mend_tos(Msg, [MsgName], TrUserData);
      m_richman_mend_toc ->
	  v_msg_m_richman_mend_toc(Msg, [MsgName], TrUserData);
      m_richman_refrech_toc ->
	  v_msg_m_richman_refrech_toc(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_richman_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_richman_info_tos/3}).
v_msg_m_richman_info_tos(#m_richman_info_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_richman_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_info_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_richman_info_toc/3}).
v_msg_m_richman_info_toc(#m_richman_info_toc{curr_round
						 = F1,
					     curr_grid = F2, lucky_fetch = F3,
					     round_fetch = F4, lucky_round = F5,
					     dice_gain = F6, dice_mend = F7,
					     act_id = F8},
			 Path, TrUserData) ->
    v_type_int32(F1, [curr_round | Path], TrUserData),
    v_type_int32(F2, [curr_grid | Path], TrUserData),
    if is_list(F3) ->
	   _ = [v_type_int32(Elem, [lucky_fetch | Path],
			     TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F3,
			 [lucky_fetch | Path])
    end,
    if is_list(F4) ->
	   _ = [v_type_int32(Elem, [round_fetch | Path],
			     TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F4,
			 [round_fetch | Path])
    end,
    v_type_int32(F5, [lucky_round | Path], TrUserData),
    'v_map<int32,int32>'(F6, [dice_gain | Path],
			 TrUserData),
    v_type_int32(F7, [dice_mend | Path], TrUserData),
    v_type_int32(F8, [act_id | Path], TrUserData),
    ok;
v_msg_m_richman_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_info_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_dice_tos/3}).
-dialyzer({nowarn_function,v_msg_m_richman_dice_tos/3}).
v_msg_m_richman_dice_tos(#m_richman_dice_tos{type = F1,
					     point = F2},
			 Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [point | Path], TrUserData)
    end,
    ok;
v_msg_m_richman_dice_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_dice_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_dice_toc/3}).
-dialyzer({nowarn_function,v_msg_m_richman_dice_toc/3}).
v_msg_m_richman_dice_toc(#m_richman_dice_toc{type = F1,
					     point = F2, result = F3,
					     reward = F4},
			 Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    v_type_int32(F2, [point | Path], TrUserData),
    v_type_int32(F3, [result | Path], TrUserData),
    'v_map<int32,int32>'(F4, [reward | Path], TrUserData),
    ok;
v_msg_m_richman_dice_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_dice_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_fetch_tos/3}).
-dialyzer({nowarn_function,v_msg_m_richman_fetch_tos/3}).
v_msg_m_richman_fetch_tos(#m_richman_fetch_tos{round =
						   F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [round | Path], TrUserData), ok;
v_msg_m_richman_fetch_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_fetch_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_fetch_toc/3}).
-dialyzer({nowarn_function,v_msg_m_richman_fetch_toc/3}).
v_msg_m_richman_fetch_toc(#m_richman_fetch_toc{round =
						   F1,
					       reward = F2},
			  Path, TrUserData) ->
    v_type_int32(F1, [round | Path], TrUserData),
    'v_map<int32,int32>'(F2, [reward | Path], TrUserData),
    ok;
v_msg_m_richman_fetch_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_fetch_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_mend_tos/3}).
-dialyzer({nowarn_function,v_msg_m_richman_mend_tos/3}).
v_msg_m_richman_mend_tos(#m_richman_mend_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_richman_mend_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_mend_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_mend_toc/3}).
-dialyzer({nowarn_function,v_msg_m_richman_mend_toc/3}).
v_msg_m_richman_mend_toc(#m_richman_mend_toc{num = F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_richman_mend_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_mend_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_richman_refrech_toc/3}).
-dialyzer({nowarn_function,v_msg_m_richman_refrech_toc/3}).
v_msg_m_richman_refrech_toc(#m_richman_refrech_toc{},
			    _Path, _) ->
    ok;
v_msg_m_richman_refrech_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_richman_refrech_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_richman_info_toc.dice_gain[x]'/2}).
'tr_encode_m_richman_info_toc.dice_gain[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_richman_dice_toc.reward'/2}).
'tr_decode_init_default_m_richman_dice_toc.reward'(_,
						   _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_richman_dice_toc.reward'/3}).
'tr_merge_m_richman_dice_toc.reward'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_richman_dice_toc.reward'/2}).
'tr_decode_repeated_finalize_m_richman_dice_toc.reward'(L,
							TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_richman_dice_toc.reward'/2}).
'tr_encode_m_richman_dice_toc.reward'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_richman_dice_toc.reward'/3}).
'tr_decode_repeated_add_elem_m_richman_dice_toc.reward'(Elem,
							L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_richman_fetch_toc.reward'/2}).
'tr_decode_init_default_m_richman_fetch_toc.reward'(_,
						    _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_richman_fetch_toc.reward'/3}).
'tr_merge_m_richman_fetch_toc.reward'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_richman_fetch_toc.reward'/2}).
'tr_decode_repeated_finalize_m_richman_fetch_toc.reward'(L,
							 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_richman_fetch_toc.reward'/2}).
'tr_encode_m_richman_fetch_toc.reward'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_richman_fetch_toc.reward'/3}).
'tr_decode_repeated_add_elem_m_richman_fetch_toc.reward'(Elem,
							 L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_richman_info_toc.dice_gain'/2}).
'tr_decode_init_default_m_richman_info_toc.dice_gain'(_,
						      _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_richman_info_toc.dice_gain'/3}).
'tr_merge_m_richman_info_toc.dice_gain'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_richman_info_toc.dice_gain'/2}).
'tr_decode_repeated_finalize_m_richman_info_toc.dice_gain'(L,
							   TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_richman_info_toc.dice_gain'/2}).
'tr_encode_m_richman_info_toc.dice_gain'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_richman_info_toc.dice_gain'/3}).
'tr_decode_repeated_add_elem_m_richman_info_toc.dice_gain'(Elem,
							   L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_richman_dice_toc.reward[x]'/2}).
'tr_encode_m_richman_dice_toc.reward[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_richman_fetch_toc.reward[x]'/2}).
'tr_encode_m_richman_fetch_toc.reward[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_richman_info_tos}, []},
     {{msg, m_richman_info_toc},
      [#field{name = curr_round, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = curr_grid, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = lucky_fetch, fnum = 3, rnum = 4,
	      type = int32, occurrence = repeated, opts = []},
       #field{name = round_fetch, fnum = 4, rnum = 5,
	      type = int32, occurrence = repeated, opts = []},
       #field{name = lucky_round, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []},
       #field{name = dice_gain, fnum = 6, rnum = 7,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = dice_mend, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []},
       #field{name = act_id, fnum = 8, rnum = 9, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_richman_dice_tos},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = point, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, m_richman_dice_toc},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = point, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = result, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 4, rnum = 5,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_richman_fetch_tos},
      [#field{name = round, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_richman_fetch_toc},
      [#field{name = round, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 2, rnum = 3,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_richman_mend_tos}, []},
     {{msg, m_richman_mend_toc},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_richman_refrech_toc}, []}].


get_msg_names() ->
    [m_richman_info_tos, m_richman_info_toc,
     m_richman_dice_tos, m_richman_dice_toc,
     m_richman_fetch_tos, m_richman_fetch_toc,
     m_richman_mend_tos, m_richman_mend_toc,
     m_richman_refrech_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_richman_info_tos, m_richman_info_toc,
     m_richman_dice_tos, m_richman_dice_toc,
     m_richman_fetch_tos, m_richman_fetch_toc,
     m_richman_mend_tos, m_richman_mend_toc,
     m_richman_refrech_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_richman_info_tos) -> [];
find_msg_def(m_richman_info_toc) ->
    [#field{name = curr_round, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = curr_grid, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = lucky_fetch, fnum = 3, rnum = 4,
	    type = int32, occurrence = repeated, opts = []},
     #field{name = round_fetch, fnum = 4, rnum = 5,
	    type = int32, occurrence = repeated, opts = []},
     #field{name = lucky_round, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []},
     #field{name = dice_gain, fnum = 6, rnum = 7,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = dice_mend, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []},
     #field{name = act_id, fnum = 8, rnum = 9, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_richman_dice_tos) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = point, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(m_richman_dice_toc) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = point, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = result, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 4, rnum = 5,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_richman_fetch_tos) ->
    [#field{name = round, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_richman_fetch_toc) ->
    [#field{name = round, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 2, rnum = 3,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_richman_mend_tos) -> [];
find_msg_def(m_richman_mend_toc) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_richman_refrech_toc) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
