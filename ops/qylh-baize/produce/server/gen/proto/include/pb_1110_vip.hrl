%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1

-ifndef(pb_1110_vip).
-define(pb_1110_vip, true).

-define(pb_1110_vip_gpb_version, "4.5.1").

-ifndef('M_VIP_INFO_TOS_PB_H').
-define('M_VIP_INFO_TOS_PB_H', true).
-record(m_vip_info_tos,
        {
        }).
-endif.

-ifndef('M_VIP_INFO_TOC_PB_H').
-define('M_VIP_INFO_TOC_PB_H', true).
-record(m_vip_info_toc,
        {daily_exp              :: boolean() | 0 | 1, % = 1
         lv_reward = []         :: [integer()] | undefined, % = 2, 32 bits
         weekly_gift            :: boolean() | 0 | 1, % = 3
         auto_fetch             :: boolean() | 0 | 1 % = 4
        }).
-endif.

-ifndef('M_VIP_FETCH_TOS_PB_H').
-define('M_VIP_FETCH_TOS_PB_H', true).
-record(m_vip_fetch_tos,
        {type                   :: integer(),       % = 1, 32 bits
         level                  :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_VIP_FETCH_TOC_PB_H').
-define('M_VIP_FETCH_TOC_PB_H', true).
-record(m_vip_fetch_toc,
        {type                   :: integer(),       % = 1, 32 bits
         level                  :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_VIP_ACTIVE_TOS_PB_H').
-define('M_VIP_ACTIVE_TOS_PB_H', true).
-record(m_vip_active_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VIP_ACTIVE_TOC_PB_H').
-define('M_VIP_ACTIVE_TOC_PB_H', true).
-record(m_vip_active_toc,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VIP_AUTO_FETCH_TOS_PB_H').
-define('M_VIP_AUTO_FETCH_TOS_PB_H', true).
-record(m_vip_auto_fetch_tos,
        {is_auto                :: boolean() | 0 | 1 % = 1
        }).
-endif.

-ifndef('M_VIP_AUTO_FETCH_TOC_PB_H').
-define('M_VIP_AUTO_FETCH_TOC_PB_H', true).
-record(m_vip_auto_fetch_toc,
        {is_auto                :: boolean() | 0 | 1 % = 1
        }).
-endif.

-ifndef('M_VIP_EXP_POOL_TOS_PB_H').
-define('M_VIP_EXP_POOL_TOS_PB_H', true).
-record(m_vip_exp_pool_tos,
        {
        }).
-endif.

-ifndef('M_VIP_EXP_POOL_TOC_PB_H').
-define('M_VIP_EXP_POOL_TOC_PB_H', true).
-record(m_vip_exp_pool_toc,
        {exp                    :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VIP_MCARD_TOS_PB_H').
-define('M_VIP_MCARD_TOS_PB_H', true).
-record(m_vip_mcard_tos,
        {
        }).
-endif.

-ifndef('M_VIP_MCARD_TOC_PB_H').
-define('M_VIP_MCARD_TOC_PB_H', true).
-record(m_vip_mcard_toc,
        {buy                    :: boolean() | 0 | 1, % = 1
         fetch = #{}            :: #{integer() := boolean() | 0 | 1} | undefined % = 3
        }).
-endif.

-ifndef('M_VIP_MCARD_BUY_TOS_PB_H').
-define('M_VIP_MCARD_BUY_TOS_PB_H', true).
-record(m_vip_mcard_buy_tos,
        {
        }).
-endif.

-ifndef('M_VIP_MCARD_FETCH_TOS_PB_H').
-define('M_VIP_MCARD_FETCH_TOS_PB_H', true).
-record(m_vip_mcard_fetch_tos,
        {day                    :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_VIP_INVEST_TOS_PB_H').
-define('M_VIP_INVEST_TOS_PB_H', true).
-record(m_vip_invest_tos,
        {
        }).
-endif.

-ifndef('M_VIP_INVEST_TOC_PB_H').
-define('M_VIP_INVEST_TOC_PB_H', true).
-record(m_vip_invest_toc,
        {type                   :: integer(),       % = 1, 32 bits
         grade                  :: integer(),       % = 2, 32 bits
         list = []              :: [pb_1110_vip:p_invest()] | undefined % = 3
        }).
-endif.

-ifndef('M_VIP_INVEST_BUY_TOS_PB_H').
-define('M_VIP_INVEST_BUY_TOS_PB_H', true).
-record(m_vip_invest_buy_tos,
        {type                   :: integer(),       % = 1, 32 bits
         grade                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_VIP_INVEST_BUY_TOC_PB_H').
-define('M_VIP_INVEST_BUY_TOC_PB_H', true).
-record(m_vip_invest_buy_toc,
        {
        }).
-endif.

-ifndef('M_VIP_INVEST_FETCH_TOS_PB_H').
-define('M_VIP_INVEST_FETCH_TOS_PB_H', true).
-record(m_vip_invest_fetch_tos,
        {type                   :: integer(),       % = 1, 32 bits
         id                     :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_VIP_INVEST_FETCH_TOC_PB_H').
-define('M_VIP_INVEST_FETCH_TOC_PB_H', true).
-record(m_vip_invest_fetch_toc,
        {item                   :: pb_1110_vip:p_invest() % = 1
        }).
-endif.

-ifndef('M_VIP_INVEST_NEXT_TOC_PB_H').
-define('M_VIP_INVEST_NEXT_TOC_PB_H', true).
-record(m_vip_invest_next_toc,
        {
        }).
-endif.

-ifndef('M_VIP_REBATE_INFO_TOS_PB_H').
-define('M_VIP_REBATE_INFO_TOS_PB_H', true).
-record(m_vip_rebate_info_tos,
        {
        }).
-endif.

-ifndef('M_VIP_REBATE_INFO_TOC_PB_H').
-define('M_VIP_REBATE_INFO_TOC_PB_H', true).
-record(m_vip_rebate_info_toc,
        {time                   :: integer(),       % = 1, 32 bits
         fetch                  :: boolean() | 0 | 1 % = 2
        }).
-endif.

-ifndef('M_VIP_REBATE_FETCH_TOS_PB_H').
-define('M_VIP_REBATE_FETCH_TOS_PB_H', true).
-record(m_vip_rebate_fetch_tos,
        {
        }).
-endif.

-ifndef('M_VIP_REBATE_FETCH_TOC_PB_H').
-define('M_VIP_REBATE_FETCH_TOC_PB_H', true).
-record(m_vip_rebate_fetch_toc,
        {
        }).
-endif.

-ifndef('M_VIP_TASTE_INFO_TOS_PB_H').
-define('M_VIP_TASTE_INFO_TOS_PB_H', true).
-record(m_vip_taste_info_tos,
        {
        }).
-endif.

-ifndef('M_VIP_TASTE_INFO_TOC_PB_H').
-define('M_VIP_TASTE_INFO_TOC_PB_H', true).
-record(m_vip_taste_info_toc,
        {stime                  :: integer(),       % = 1, 32 bits
         etime                  :: integer()        % = 2, 32 bits
        }).
-endif.

-ifndef('M_VIP_INVEST2_TOS_PB_H').
-define('M_VIP_INVEST2_TOS_PB_H', true).
-record(m_vip_invest2_tos,
        {type                   :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_VIP_INVEST2_TOC_PB_H').
-define('M_VIP_INVEST2_TOC_PB_H', true).
-record(m_vip_invest2_toc,
        {type                   :: integer(),       % = 1, 32 bits
         grade                  :: integer(),       % = 2, 32 bits
         list = []              :: [pb_1110_vip:p_invest()] | undefined % = 3
        }).
-endif.

-ifndef('P_INVEST_PB_H').
-define('P_INVEST_PB_H', true).
-record(p_invest,
        {id                     :: integer(),       % = 1, 32 bits
         state                  :: integer(),       % = 3, 32 bits
         bgold                  :: integer()        % = 4, 32 bits
        }).
-endif.

-endif.
