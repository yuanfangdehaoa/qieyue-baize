%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1123_welfare).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1123_welfare.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_welfare_level_tos() :: #m_welfare_level_tos{}.

-type m_welfare_level_toc() :: #m_welfare_level_toc{}.

-type m_welfare_level_reward_tos() :: #m_welfare_level_reward_tos{}.

-type m_welfare_level_reward_toc() :: #m_welfare_level_reward_toc{}.

-type m_welfare_power_tos() :: #m_welfare_power_tos{}.

-type m_welfare_power_toc() :: #m_welfare_power_toc{}.

-type m_welfare_power_reward_tos() :: #m_welfare_power_reward_tos{}.

-type m_welfare_power_reward_toc() :: #m_welfare_power_reward_toc{}.

-type m_welfare_online_tos() :: #m_welfare_online_tos{}.

-type m_welfare_online_toc() :: #m_welfare_online_toc{}.

-type m_welfare_online_reward_tos() :: #m_welfare_online_reward_tos{}.

-type m_welfare_online_reward_toc() :: #m_welfare_online_reward_toc{}.

-type m_welfare_sign_tos() :: #m_welfare_sign_tos{}.

-type m_welfare_sign_toc() :: #m_welfare_sign_toc{}.

-type m_welfare_sign_reward_tos() :: #m_welfare_sign_reward_tos{}.

-type m_welfare_sign_reward_toc() :: #m_welfare_sign_reward_toc{}.

-type m_welfare_grail_tos() :: #m_welfare_grail_tos{}.

-type m_welfare_grail_toc() :: #m_welfare_grail_toc{}.

-type m_welfare_grail_reward_tos() :: #m_welfare_grail_reward_tos{}.

-type m_welfare_grail_reward_toc() :: #m_welfare_grail_reward_toc{}.

-type m_welfare_notice_tos() :: #m_welfare_notice_tos{}.

-type m_welfare_notice_toc() :: #m_welfare_notice_toc{}.

-type m_welfare_notice_reward_tos() :: #m_welfare_notice_reward_tos{}.

-type m_welfare_notice_reward_toc() :: #m_welfare_notice_reward_toc{}.

-type m_welfare_res_tos() :: #m_welfare_res_tos{}.

-type m_welfare_res_toc() :: #m_welfare_res_toc{}.

-type m_welfare_res_reward_tos() :: #m_welfare_res_reward_tos{}.

-type m_welfare_res_reward_toc() :: #m_welfare_res_reward_toc{}.

-type m_welfare_giftcode_tos() :: #m_welfare_giftcode_tos{}.

-type m_welfare_giftcode_toc() :: #m_welfare_giftcode_toc{}.

-type m_welfare_misc_tos() :: #m_welfare_misc_tos{}.

-type m_welfare_misc_toc() :: #m_welfare_misc_toc{}.

-type m_welfare_misc_reward_tos() :: #m_welfare_misc_reward_tos{}.

-type m_welfare_misc_reward_toc() :: #m_welfare_misc_reward_toc{}.

-type m_welfare_online2_tos() :: #m_welfare_online2_tos{}.

-type m_welfare_online2_toc() :: #m_welfare_online2_toc{}.

-type m_welfare_online2_reward_tos() :: #m_welfare_online2_reward_tos{}.

-type m_welfare_online2_reward_toc() :: #m_welfare_online2_reward_toc{}.

-type p_welfare_misc() :: #p_welfare_misc{}.

-type m_welfare_login_reward_info_tos() :: #m_welfare_login_reward_info_tos{}.

-type m_welfare_login_reward_info_toc() :: #m_welfare_login_reward_info_toc{}.

-type m_welfare_get_login_reward_tos() :: #m_welfare_get_login_reward_tos{}.

-type m_welfare_get_login_reward_toc() :: #m_welfare_get_login_reward_toc{}.

-export_type(['m_welfare_level_tos'/0, 'm_welfare_level_toc'/0, 'm_welfare_level_reward_tos'/0, 'm_welfare_level_reward_toc'/0, 'm_welfare_power_tos'/0, 'm_welfare_power_toc'/0, 'm_welfare_power_reward_tos'/0, 'm_welfare_power_reward_toc'/0, 'm_welfare_online_tos'/0, 'm_welfare_online_toc'/0, 'm_welfare_online_reward_tos'/0, 'm_welfare_online_reward_toc'/0, 'm_welfare_sign_tos'/0, 'm_welfare_sign_toc'/0, 'm_welfare_sign_reward_tos'/0, 'm_welfare_sign_reward_toc'/0, 'm_welfare_grail_tos'/0, 'm_welfare_grail_toc'/0, 'm_welfare_grail_reward_tos'/0, 'm_welfare_grail_reward_toc'/0, 'm_welfare_notice_tos'/0, 'm_welfare_notice_toc'/0, 'm_welfare_notice_reward_tos'/0, 'm_welfare_notice_reward_toc'/0, 'm_welfare_res_tos'/0, 'm_welfare_res_toc'/0, 'm_welfare_res_reward_tos'/0, 'm_welfare_res_reward_toc'/0, 'm_welfare_giftcode_tos'/0, 'm_welfare_giftcode_toc'/0, 'm_welfare_misc_tos'/0, 'm_welfare_misc_toc'/0, 'm_welfare_misc_reward_tos'/0, 'm_welfare_misc_reward_toc'/0, 'm_welfare_online2_tos'/0, 'm_welfare_online2_toc'/0, 'm_welfare_online2_reward_tos'/0, 'm_welfare_online2_reward_toc'/0, 'p_welfare_misc'/0, 'm_welfare_login_reward_info_tos'/0, 'm_welfare_login_reward_info_toc'/0, 'm_welfare_get_login_reward_tos'/0, 'm_welfare_get_login_reward_toc'/0]).

-spec encode_msg(#m_welfare_level_tos{} | #m_welfare_level_toc{} | #m_welfare_level_reward_tos{} | #m_welfare_level_reward_toc{} | #m_welfare_power_tos{} | #m_welfare_power_toc{} | #m_welfare_power_reward_tos{} | #m_welfare_power_reward_toc{} | #m_welfare_online_tos{} | #m_welfare_online_toc{} | #m_welfare_online_reward_tos{} | #m_welfare_online_reward_toc{} | #m_welfare_sign_tos{} | #m_welfare_sign_toc{} | #m_welfare_sign_reward_tos{} | #m_welfare_sign_reward_toc{} | #m_welfare_grail_tos{} | #m_welfare_grail_toc{} | #m_welfare_grail_reward_tos{} | #m_welfare_grail_reward_toc{} | #m_welfare_notice_tos{} | #m_welfare_notice_toc{} | #m_welfare_notice_reward_tos{} | #m_welfare_notice_reward_toc{} | #m_welfare_res_tos{} | #m_welfare_res_toc{} | #m_welfare_res_reward_tos{} | #m_welfare_res_reward_toc{} | #m_welfare_giftcode_tos{} | #m_welfare_giftcode_toc{} | #m_welfare_misc_tos{} | #m_welfare_misc_toc{} | #m_welfare_misc_reward_tos{} | #m_welfare_misc_reward_toc{} | #m_welfare_online2_tos{} | #m_welfare_online2_toc{} | #m_welfare_online2_reward_tos{} | #m_welfare_online2_reward_toc{} | #p_welfare_misc{} | #m_welfare_login_reward_info_tos{} | #m_welfare_login_reward_info_toc{} | #m_welfare_get_login_reward_tos{} | #m_welfare_get_login_reward_toc{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_welfare_level_tos{} | #m_welfare_level_toc{} | #m_welfare_level_reward_tos{} | #m_welfare_level_reward_toc{} | #m_welfare_power_tos{} | #m_welfare_power_toc{} | #m_welfare_power_reward_tos{} | #m_welfare_power_reward_toc{} | #m_welfare_online_tos{} | #m_welfare_online_toc{} | #m_welfare_online_reward_tos{} | #m_welfare_online_reward_toc{} | #m_welfare_sign_tos{} | #m_welfare_sign_toc{} | #m_welfare_sign_reward_tos{} | #m_welfare_sign_reward_toc{} | #m_welfare_grail_tos{} | #m_welfare_grail_toc{} | #m_welfare_grail_reward_tos{} | #m_welfare_grail_reward_toc{} | #m_welfare_notice_tos{} | #m_welfare_notice_toc{} | #m_welfare_notice_reward_tos{} | #m_welfare_notice_reward_toc{} | #m_welfare_res_tos{} | #m_welfare_res_toc{} | #m_welfare_res_reward_tos{} | #m_welfare_res_reward_toc{} | #m_welfare_giftcode_tos{} | #m_welfare_giftcode_toc{} | #m_welfare_misc_tos{} | #m_welfare_misc_toc{} | #m_welfare_misc_reward_tos{} | #m_welfare_misc_reward_toc{} | #m_welfare_online2_tos{} | #m_welfare_online2_toc{} | #m_welfare_online2_reward_tos{} | #m_welfare_online2_reward_toc{} | #p_welfare_misc{} | #m_welfare_login_reward_info_tos{} | #m_welfare_login_reward_info_toc{} | #m_welfare_get_login_reward_tos{} | #m_welfare_get_login_reward_toc{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_welfare_level_tos{} | #m_welfare_level_toc{} | #m_welfare_level_reward_tos{} | #m_welfare_level_reward_toc{} | #m_welfare_power_tos{} | #m_welfare_power_toc{} | #m_welfare_power_reward_tos{} | #m_welfare_power_reward_toc{} | #m_welfare_online_tos{} | #m_welfare_online_toc{} | #m_welfare_online_reward_tos{} | #m_welfare_online_reward_toc{} | #m_welfare_sign_tos{} | #m_welfare_sign_toc{} | #m_welfare_sign_reward_tos{} | #m_welfare_sign_reward_toc{} | #m_welfare_grail_tos{} | #m_welfare_grail_toc{} | #m_welfare_grail_reward_tos{} | #m_welfare_grail_reward_toc{} | #m_welfare_notice_tos{} | #m_welfare_notice_toc{} | #m_welfare_notice_reward_tos{} | #m_welfare_notice_reward_toc{} | #m_welfare_res_tos{} | #m_welfare_res_toc{} | #m_welfare_res_reward_tos{} | #m_welfare_res_reward_toc{} | #m_welfare_giftcode_tos{} | #m_welfare_giftcode_toc{} | #m_welfare_misc_tos{} | #m_welfare_misc_toc{} | #m_welfare_misc_reward_tos{} | #m_welfare_misc_reward_toc{} | #m_welfare_online2_tos{} | #m_welfare_online2_toc{} | #m_welfare_online2_reward_tos{} | #m_welfare_online2_reward_toc{} | #p_welfare_misc{} | #m_welfare_login_reward_info_tos{} | #m_welfare_login_reward_info_toc{} | #m_welfare_get_login_reward_tos{} | #m_welfare_get_login_reward_toc{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_welfare_level_tos ->
	  encode_msg_m_welfare_level_tos(id(Msg, TrUserData),
					 TrUserData);
      m_welfare_level_toc ->
	  encode_msg_m_welfare_level_toc(id(Msg, TrUserData),
					 TrUserData);
      m_welfare_level_reward_tos ->
	  encode_msg_m_welfare_level_reward_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_welfare_level_reward_toc ->
	  encode_msg_m_welfare_level_reward_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_welfare_power_tos ->
	  encode_msg_m_welfare_power_tos(id(Msg, TrUserData),
					 TrUserData);
      m_welfare_power_toc ->
	  encode_msg_m_welfare_power_toc(id(Msg, TrUserData),
					 TrUserData);
      m_welfare_power_reward_tos ->
	  encode_msg_m_welfare_power_reward_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_welfare_power_reward_toc ->
	  encode_msg_m_welfare_power_reward_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_welfare_online_tos ->
	  encode_msg_m_welfare_online_tos(id(Msg, TrUserData),
					  TrUserData);
      m_welfare_online_toc ->
	  encode_msg_m_welfare_online_toc(id(Msg, TrUserData),
					  TrUserData);
      m_welfare_online_reward_tos ->
	  encode_msg_m_welfare_online_reward_tos(id(Msg,
						    TrUserData),
						 TrUserData);
      m_welfare_online_reward_toc ->
	  encode_msg_m_welfare_online_reward_toc(id(Msg,
						    TrUserData),
						 TrUserData);
      m_welfare_sign_tos ->
	  encode_msg_m_welfare_sign_tos(id(Msg, TrUserData),
					TrUserData);
      m_welfare_sign_toc ->
	  encode_msg_m_welfare_sign_toc(id(Msg, TrUserData),
					TrUserData);
      m_welfare_sign_reward_tos ->
	  encode_msg_m_welfare_sign_reward_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_welfare_sign_reward_toc ->
	  encode_msg_m_welfare_sign_reward_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_welfare_grail_tos ->
	  encode_msg_m_welfare_grail_tos(id(Msg, TrUserData),
					 TrUserData);
      m_welfare_grail_toc ->
	  encode_msg_m_welfare_grail_toc(id(Msg, TrUserData),
					 TrUserData);
      m_welfare_grail_reward_tos ->
	  encode_msg_m_welfare_grail_reward_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_welfare_grail_reward_toc ->
	  encode_msg_m_welfare_grail_reward_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_welfare_notice_tos ->
	  encode_msg_m_welfare_notice_tos(id(Msg, TrUserData),
					  TrUserData);
      m_welfare_notice_toc ->
	  encode_msg_m_welfare_notice_toc(id(Msg, TrUserData),
					  TrUserData);
      m_welfare_notice_reward_tos ->
	  encode_msg_m_welfare_notice_reward_tos(id(Msg,
						    TrUserData),
						 TrUserData);
      m_welfare_notice_reward_toc ->
	  encode_msg_m_welfare_notice_reward_toc(id(Msg,
						    TrUserData),
						 TrUserData);
      m_welfare_res_tos ->
	  encode_msg_m_welfare_res_tos(id(Msg, TrUserData),
				       TrUserData);
      m_welfare_res_toc ->
	  encode_msg_m_welfare_res_toc(id(Msg, TrUserData),
				       TrUserData);
      m_welfare_res_reward_tos ->
	  encode_msg_m_welfare_res_reward_tos(id(Msg, TrUserData),
					      TrUserData);
      m_welfare_res_reward_toc ->
	  encode_msg_m_welfare_res_reward_toc(id(Msg, TrUserData),
					      TrUserData);
      m_welfare_giftcode_tos ->
	  encode_msg_m_welfare_giftcode_tos(id(Msg, TrUserData),
					    TrUserData);
      m_welfare_giftcode_toc ->
	  encode_msg_m_welfare_giftcode_toc(id(Msg, TrUserData),
					    TrUserData);
      m_welfare_misc_tos ->
	  encode_msg_m_welfare_misc_tos(id(Msg, TrUserData),
					TrUserData);
      m_welfare_misc_toc ->
	  encode_msg_m_welfare_misc_toc(id(Msg, TrUserData),
					TrUserData);
      m_welfare_misc_reward_tos ->
	  encode_msg_m_welfare_misc_reward_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_welfare_misc_reward_toc ->
	  encode_msg_m_welfare_misc_reward_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_welfare_online2_tos ->
	  encode_msg_m_welfare_online2_tos(id(Msg, TrUserData),
					   TrUserData);
      m_welfare_online2_toc ->
	  encode_msg_m_welfare_online2_toc(id(Msg, TrUserData),
					   TrUserData);
      m_welfare_online2_reward_tos ->
	  encode_msg_m_welfare_online2_reward_tos(id(Msg,
						     TrUserData),
						  TrUserData);
      m_welfare_online2_reward_toc ->
	  encode_msg_m_welfare_online2_reward_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      p_welfare_misc ->
	  encode_msg_p_welfare_misc(id(Msg, TrUserData),
				    TrUserData);
      m_welfare_login_reward_info_tos ->
	  encode_msg_m_welfare_login_reward_info_tos(id(Msg,
							TrUserData),
						     TrUserData);
      m_welfare_login_reward_info_toc ->
	  encode_msg_m_welfare_login_reward_info_toc(id(Msg,
							TrUserData),
						     TrUserData);
      m_welfare_get_login_reward_tos ->
	  encode_msg_m_welfare_get_login_reward_tos(id(Msg,
						       TrUserData),
						    TrUserData);
      m_welfare_get_login_reward_toc ->
	  encode_msg_m_welfare_get_login_reward_toc(id(Msg,
						       TrUserData),
						    TrUserData)
    end.


encode_msg_m_welfare_level_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_level_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_level_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_level_toc(#m_welfare_level_toc{level
							= F1,
						    count = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_welfare_level_toc_level(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = 'tr_encode_m_welfare_level_toc.count'(F2,
						   TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_welfare_level_toc_count(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_welfare_level_reward_tos(Msg,
				      TrUserData) ->
    encode_msg_m_welfare_level_reward_tos(Msg, <<>>,
					  TrUserData).


encode_msg_m_welfare_level_reward_tos(#m_welfare_level_reward_tos{level
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_level_reward_toc(Msg,
				      TrUserData) ->
    encode_msg_m_welfare_level_reward_toc(Msg, <<>>,
					  TrUserData).


encode_msg_m_welfare_level_reward_toc(#m_welfare_level_reward_toc{level
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_power_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_power_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_power_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_power_toc(#m_welfare_power_toc{power
							= F1,
						    count = F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_welfare_power_toc_power(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = 'tr_encode_m_welfare_power_toc.count'(F2,
						   TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_welfare_power_toc_count(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_welfare_power_reward_tos(Msg,
				      TrUserData) ->
    encode_msg_m_welfare_power_reward_tos(Msg, <<>>,
					  TrUserData).


encode_msg_m_welfare_power_reward_tos(#m_welfare_power_reward_tos{power
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_power_reward_toc(Msg,
				      TrUserData) ->
    encode_msg_m_welfare_power_reward_toc(Msg, <<>>,
					  TrUserData).


encode_msg_m_welfare_power_reward_toc(#m_welfare_power_reward_toc{power
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_online_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_online_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_online_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_online_toc(#m_welfare_online_toc{ids
							  = F1,
						      online_time = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_welfare_online_toc_ids(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_welfare_online_reward_tos(Msg,
				       TrUserData) ->
    encode_msg_m_welfare_online_reward_tos(Msg, <<>>,
					   TrUserData).


encode_msg_m_welfare_online_reward_tos(#m_welfare_online_reward_tos{id
									= F1},
				       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_online_reward_toc(Msg,
				       TrUserData) ->
    encode_msg_m_welfare_online_reward_toc(Msg, <<>>,
					   TrUserData).


encode_msg_m_welfare_online_reward_toc(#m_welfare_online_reward_toc{id
									= F1},
				       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_sign_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_sign_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_sign_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_sign_toc(#m_welfare_sign_toc{signs
						      = F1,
						  max_days = F2, count = F3,
						  is_sign = F4},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		end
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_type_bool(TrF4, <<B3/binary, 32>>, TrUserData)
	   end
    end.

encode_msg_m_welfare_sign_reward_tos(_Msg,
				     _TrUserData) ->
    <<>>.

encode_msg_m_welfare_sign_reward_toc(_Msg,
				     _TrUserData) ->
    <<>>.

encode_msg_m_welfare_grail_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_grail_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_grail_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_grail_toc(#m_welfare_grail_toc{count
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_grail_reward_tos(_Msg,
				      _TrUserData) ->
    <<>>.

encode_msg_m_welfare_grail_reward_toc(_Msg,
				      _TrUserData) ->
    <<>>.

encode_msg_m_welfare_notice_tos(Msg, TrUserData) ->
    encode_msg_m_welfare_notice_tos(Msg, <<>>, TrUserData).


encode_msg_m_welfare_notice_tos(#m_welfare_notice_tos{id
							  = F1},
				Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_notice_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_notice_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_notice_toc(#m_welfare_notice_toc{id
							  = F1,
						      is_get = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_welfare_notice_reward_tos(Msg,
				       TrUserData) ->
    encode_msg_m_welfare_notice_reward_tos(Msg, <<>>,
					   TrUserData).


encode_msg_m_welfare_notice_reward_tos(#m_welfare_notice_reward_tos{id
									= F1},
				       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_notice_reward_toc(Msg,
				       TrUserData) ->
    encode_msg_m_welfare_notice_reward_toc(Msg, <<>>,
					   TrUserData).


encode_msg_m_welfare_notice_reward_toc(#m_welfare_notice_reward_toc{id
									= F1},
				       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_res_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_welfare_res_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_res_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_res_toc(#m_welfare_res_toc{is_get =
						    F1},
			     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_res_reward_tos(_Msg,
				    _TrUserData) ->
    <<>>.

encode_msg_m_welfare_res_reward_toc(_Msg,
				    _TrUserData) ->
    <<>>.

encode_msg_m_welfare_giftcode_tos(Msg, TrUserData) ->
    encode_msg_m_welfare_giftcode_tos(Msg, <<>>,
				      TrUserData).


encode_msg_m_welfare_giftcode_tos(#m_welfare_giftcode_tos{code
							      = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_welfare_giftcode_toc(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_misc_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_misc_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_misc_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_misc_toc(#m_welfare_misc_toc{welfares
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_welfare_misc_toc_welfares(TrF1, Bin,
						 TrUserData)
      end
    end.

encode_msg_m_welfare_misc_reward_tos(Msg, TrUserData) ->
    encode_msg_m_welfare_misc_reward_tos(Msg, <<>>,
					 TrUserData).


encode_msg_m_welfare_misc_reward_tos(#m_welfare_misc_reward_tos{type
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_misc_reward_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_misc_reward_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_welfare_misc_reward_toc(#m_welfare_misc_reward_toc{type
								    = F1,
								reward = F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = 'tr_encode_m_welfare_misc_reward_toc.reward'(F2,
							  TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_welfare_misc_reward_toc_reward(TrF2, B1,
						      TrUserData)
      end
    end.

encode_msg_m_welfare_online2_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_welfare_online2_toc(Msg, TrUserData) ->
    encode_msg_m_welfare_online2_toc(Msg, <<>>, TrUserData).


encode_msg_m_welfare_online2_toc(#m_welfare_online2_toc{ids
							    = F1,
							online_time = F2},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_welfare_online2_toc_ids(TrF1, Bin, TrUserData)
	   end
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_welfare_online2_reward_tos(Msg,
					TrUserData) ->
    encode_msg_m_welfare_online2_reward_tos(Msg, <<>>,
					    TrUserData).


encode_msg_m_welfare_online2_reward_tos(#m_welfare_online2_reward_tos{id
									  = F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_welfare_online2_reward_toc(Msg,
					TrUserData) ->
    encode_msg_m_welfare_online2_reward_toc(Msg, <<>>,
					    TrUserData).


encode_msg_m_welfare_online2_reward_toc(#m_welfare_online2_reward_toc{id
									  = F1},
					Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_p_welfare_misc(Msg, TrUserData) ->
    encode_msg_p_welfare_misc(Msg, <<>>, TrUserData).


encode_msg_p_welfare_misc(#p_welfare_misc{type = F1,
					  is_open = F2, is_get = F3},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_welfare_login_reward_info_tos(_Msg,
					   _TrUserData) ->
    <<>>.

encode_msg_m_welfare_login_reward_info_toc(Msg,
					   TrUserData) ->
    encode_msg_m_welfare_login_reward_info_toc(Msg, <<>>,
					       TrUserData).


encode_msg_m_welfare_login_reward_info_toc(#m_welfare_login_reward_info_toc{reward_list
										=
										F1},
					   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_welfare_login_reward_info_toc_reward_list(TrF1,
								 Bin,
								 TrUserData)
      end
    end.

encode_msg_m_welfare_get_login_reward_tos(Msg,
					  TrUserData) ->
    encode_msg_m_welfare_get_login_reward_tos(Msg, <<>>,
					      TrUserData).


encode_msg_m_welfare_get_login_reward_tos(#m_welfare_get_login_reward_tos{reward_list
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_welfare_get_login_reward_tos_reward_list(TrF1,
								Bin, TrUserData)
      end
    end.

encode_msg_m_welfare_get_login_reward_toc(Msg,
					  TrUserData) ->
    encode_msg_m_welfare_get_login_reward_toc(Msg, <<>>,
					      TrUserData).


encode_msg_m_welfare_get_login_reward_toc(#m_welfare_get_login_reward_toc{res
									      =
									      F1},
					  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

e_field_m_welfare_level_toc_level([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_welfare_level_toc_level(Rest, Bin3,
				      TrUserData);
e_field_m_welfare_level_toc_level([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_m_welfare_level_toc_count(Msg, Bin,
				   TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_welfare_level_toc_count([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_welfare_level_toc_count('tr_encode_m_welfare_level_toc.count[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_m_welfare_level_toc_count(Rest, Bin3,
				      TrUserData);
e_field_m_welfare_level_toc_count([], Bin,
				  _TrUserData) ->
    Bin.

e_field_m_welfare_power_toc_power([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_welfare_power_toc_power(Rest, Bin3,
				      TrUserData);
e_field_m_welfare_power_toc_power([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_m_welfare_power_toc_count(Msg, Bin,
				   TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_welfare_power_toc_count([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_welfare_power_toc_count('tr_encode_m_welfare_power_toc.count[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_m_welfare_power_toc_count(Rest, Bin3,
				      TrUserData);
e_field_m_welfare_power_toc_count([], Bin,
				  _TrUserData) ->
    Bin.

e_field_m_welfare_online_toc_ids([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_welfare_online_toc_ids(Rest, Bin3,
				     TrUserData);
e_field_m_welfare_online_toc_ids([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_m_welfare_misc_toc_welfares(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_p_welfare_misc(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_welfare_misc_toc_welfares([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_welfare_misc_toc_welfares(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_m_welfare_misc_toc_welfares(Rest, Bin3,
					TrUserData);
e_field_m_welfare_misc_toc_welfares([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_m_welfare_misc_reward_toc_reward(Msg, Bin,
					  TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_welfare_misc_reward_toc_reward([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_welfare_misc_reward_toc_reward('tr_encode_m_welfare_misc_reward_toc.reward[x]'(Elem,
												  TrUserData),
						  Bin2, TrUserData),
    e_field_m_welfare_misc_reward_toc_reward(Rest, Bin3,
					     TrUserData);
e_field_m_welfare_misc_reward_toc_reward([], Bin,
					 _TrUserData) ->
    Bin.

e_field_m_welfare_online2_toc_ids([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_welfare_online2_toc_ids(Rest, Bin3,
				      TrUserData);
e_field_m_welfare_online2_toc_ids([], Bin,
				  _TrUserData) ->
    Bin.

e_field_m_welfare_login_reward_info_toc_reward_list([Elem
						     | Rest],
						    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_welfare_login_reward_info_toc_reward_list(Rest,
							Bin3, TrUserData);
e_field_m_welfare_login_reward_info_toc_reward_list([],
						    Bin, _TrUserData) ->
    Bin.

e_field_m_welfare_get_login_reward_tos_reward_list([Elem
						    | Rest],
						   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_welfare_get_login_reward_tos_reward_list(Rest,
						       Bin3, TrUserData);
e_field_m_welfare_get_login_reward_tos_reward_list([],
						   Bin, _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_welfare_level_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_level_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_level_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_level_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_level_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_level_reward_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_level_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_level_reward_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_power_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_power_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_power_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_power_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_power_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_power_reward_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_power_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_power_reward_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online_reward_tos(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online_reward_toc(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_sign_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_sign_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_sign_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_sign_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_sign_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_sign_reward_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_sign_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_sign_reward_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_grail_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_grail_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_grail_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_grail_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_grail_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_grail_reward_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_grail_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_grail_reward_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_notice_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_notice_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_notice_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_notice_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_notice_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_notice_reward_tos(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_notice_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_notice_reward_toc(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_res_tos, Bin, TrUserData) ->
    id(decode_msg_m_welfare_res_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_res_toc, Bin, TrUserData) ->
    id(decode_msg_m_welfare_res_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_res_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_res_reward_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_res_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_res_reward_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_giftcode_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_giftcode_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_giftcode_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_giftcode_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_misc_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_misc_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_misc_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_misc_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_misc_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_misc_reward_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_misc_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_misc_reward_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online2_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online2_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online2_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online2_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online2_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online2_reward_tos(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_online2_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_online2_reward_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(p_welfare_misc, Bin, TrUserData) ->
    id(decode_msg_p_welfare_misc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_login_reward_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_login_reward_info_tos(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_login_reward_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_login_reward_info_toc(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_get_login_reward_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_get_login_reward_tos(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(m_welfare_get_login_reward_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_welfare_get_login_reward_toc(Bin,
						 TrUserData),
       TrUserData).



decode_msg_m_welfare_level_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_level_tos(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_welfare_level_tos(<<>>, 0, 0, _) ->
    #m_welfare_level_tos{};
dfp_read_field_def_m_welfare_level_tos(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_welfare_level_tos(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_welfare_level_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_level_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_level_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_level_tos(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_welfare_level_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_level_tos(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_welfare_level_tos(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_welfare_level_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_level_tos(<<>>, 0, 0, _) ->
    #m_welfare_level_tos{}.

skip_varint_m_welfare_level_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_level_tos(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_welfare_level_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_level_tos(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_welfare_level_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_level_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_level_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_level_tos(Rest2, 0, 0,
					   TrUserData).

skip_group_m_welfare_level_tos(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_level_tos(Rest, 0, Z2,
					   TrUserData).

skip_32_m_welfare_level_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_level_tos(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_welfare_level_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_level_tos(Rest, Z1, Z2,
					   TrUserData).

decode_msg_m_welfare_level_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_level_toc(Bin, 0, 0,
					   id([], TrUserData),
					   'tr_decode_init_default_m_welfare_level_toc.count'([],
											      TrUserData),
					   TrUserData).

dfp_read_field_def_m_welfare_level_toc(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_m_welfare_level_toc_level(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_welfare_level_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_level_toc_level(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_welfare_level_toc(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_level_toc_count(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_welfare_level_toc(<<>>, 0, 0, R1,
				       R2, TrUserData) ->
    #m_welfare_level_toc{level =
			     lists_reverse(R1, TrUserData),
			 count =
			     'tr_decode_repeated_finalize_m_welfare_level_toc.count'(R2,
										     TrUserData)};
dfp_read_field_def_m_welfare_level_toc(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_welfare_level_toc(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_m_welfare_level_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_level_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_m_welfare_level_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_welfare_level_toc_level(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      8 ->
	  d_field_m_welfare_level_toc_level(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_m_welfare_level_toc_count(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_level_toc(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_m_welfare_level_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_level_toc(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_m_welfare_level_toc(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_m_welfare_level_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_level_toc(<<>>, 0, 0, R1,
				      R2, TrUserData) ->
    #m_welfare_level_toc{level =
			     lists_reverse(R1, TrUserData),
			 count =
			     'tr_decode_repeated_finalize_m_welfare_level_toc.count'(R2,
										     TrUserData)}.

d_field_m_welfare_level_toc_level(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_level_toc_level(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_level_toc_level(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_level_toc(RestF, 0, 0,
					   cons(NewFValue, Prev, TrUserData),
					   F@_2, TrUserData).

d_pfield_m_welfare_level_toc_level(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_welfare_level_toc_level(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_pfield_m_welfare_level_toc_level(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_welfare_level_toc_level(PackedBytes, 0,
						 0, E, TrUserData),
    dfp_read_field_def_m_welfare_level_toc(Rest2, 0, 0,
					   NewSeq, F@_2, TrUserData).

d_packed_field_m_welfare_level_toc_level(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_welfare_level_toc_level(Rest, N + 7,
					     X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_m_welfare_level_toc_level(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_welfare_level_toc_level(RestF, 0, 0,
					     [NewFValue | AccSeq], TrUserData);
d_packed_field_m_welfare_level_toc_level(<<>>, 0, 0,
					 AccSeq, _) ->
    AccSeq.

d_field_m_welfare_level_toc_count(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_level_toc_count(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_level_toc_count(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_welfare_level_toc(RestF, 0, 0,
					   F@_1,
					   'tr_decode_repeated_add_elem_m_welfare_level_toc.count'(NewFValue,
												   Prev,
												   TrUserData),
					   TrUserData).

skip_varint_m_welfare_level_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_welfare_level_toc(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_m_welfare_level_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_level_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_m_welfare_level_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_level_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_m_welfare_level_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_level_toc(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_m_welfare_level_toc(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_level_toc(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_m_welfare_level_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_level_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_m_welfare_level_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_level_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_m_welfare_level_reward_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_tos(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_welfare_level_reward_tos(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_level_reward_tos_level(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_m_welfare_level_reward_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_level_reward_tos{level = F@_1};
dfp_read_field_def_m_welfare_level_reward_tos(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_level_reward_tos(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_level_reward_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_level_reward_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_welfare_level_reward_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_level_reward_tos_level(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_level_reward_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_welfare_level_reward_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_level_reward_tos(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_welfare_level_reward_tos(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_level_reward_tos(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_level_reward_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_welfare_level_reward_tos{level = F@_1}.

d_field_m_welfare_level_reward_tos_level(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_level_reward_tos_level(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_level_reward_tos_level(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_level_reward_tos(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_welfare_level_reward_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_level_reward_tos(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_welfare_level_reward_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_level_reward_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_level_reward_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_welfare_level_reward_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_level_reward_tos(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_welfare_level_reward_tos(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_level_reward_tos(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_welfare_level_reward_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_welfare_level_reward_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_welfare_level_reward_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_toc(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_welfare_level_reward_toc(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_level_reward_toc_level(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_m_welfare_level_reward_toc(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_level_reward_toc{level = F@_1};
dfp_read_field_def_m_welfare_level_reward_toc(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_level_reward_toc(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_level_reward_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_level_reward_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_welfare_level_reward_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_level_reward_toc_level(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_level_reward_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_welfare_level_reward_toc(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_level_reward_toc(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_welfare_level_reward_toc(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_level_reward_toc(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_level_reward_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_welfare_level_reward_toc{level = F@_1}.

d_field_m_welfare_level_reward_toc_level(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_level_reward_toc_level(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_level_reward_toc_level(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_level_reward_toc(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_welfare_level_reward_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_level_reward_toc(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_welfare_level_reward_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_level_reward_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_level_reward_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_welfare_level_reward_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_level_reward_toc(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_welfare_level_reward_toc(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_level_reward_toc(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_welfare_level_reward_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_welfare_level_reward_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_level_reward_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_welfare_power_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_power_tos(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_welfare_power_tos(<<>>, 0, 0, _) ->
    #m_welfare_power_tos{};
dfp_read_field_def_m_welfare_power_tos(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_welfare_power_tos(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_welfare_power_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_power_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_power_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_power_tos(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_welfare_power_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_power_tos(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_welfare_power_tos(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_welfare_power_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_power_tos(<<>>, 0, 0, _) ->
    #m_welfare_power_tos{}.

skip_varint_m_welfare_power_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_power_tos(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_welfare_power_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_power_tos(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_welfare_power_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_power_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_power_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_power_tos(Rest2, 0, 0,
					   TrUserData).

skip_group_m_welfare_power_tos(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_power_tos(Rest, 0, Z2,
					   TrUserData).

skip_32_m_welfare_power_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_power_tos(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_welfare_power_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_power_tos(Rest, Z1, Z2,
					   TrUserData).

decode_msg_m_welfare_power_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_power_toc(Bin, 0, 0,
					   id([], TrUserData),
					   'tr_decode_init_default_m_welfare_power_toc.count'([],
											      TrUserData),
					   TrUserData).

dfp_read_field_def_m_welfare_power_toc(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_m_welfare_power_toc_power(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_welfare_power_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_power_toc_power(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_welfare_power_toc(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_power_toc_count(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_welfare_power_toc(<<>>, 0, 0, R1,
				       R2, TrUserData) ->
    #m_welfare_power_toc{power =
			     lists_reverse(R1, TrUserData),
			 count =
			     'tr_decode_repeated_finalize_m_welfare_power_toc.count'(R2,
										     TrUserData)};
dfp_read_field_def_m_welfare_power_toc(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_welfare_power_toc(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_m_welfare_power_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_power_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_m_welfare_power_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_welfare_power_toc_power(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      8 ->
	  d_field_m_welfare_power_toc_power(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_m_welfare_power_toc_count(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_power_toc(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_m_welfare_power_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_power_toc(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_m_welfare_power_toc(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_m_welfare_power_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_power_toc(<<>>, 0, 0, R1,
				      R2, TrUserData) ->
    #m_welfare_power_toc{power =
			     lists_reverse(R1, TrUserData),
			 count =
			     'tr_decode_repeated_finalize_m_welfare_power_toc.count'(R2,
										     TrUserData)}.

d_field_m_welfare_power_toc_power(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_power_toc_power(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_power_toc_power(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_power_toc(RestF, 0, 0,
					   cons(NewFValue, Prev, TrUserData),
					   F@_2, TrUserData).

d_pfield_m_welfare_power_toc_power(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_welfare_power_toc_power(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_pfield_m_welfare_power_toc_power(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_welfare_power_toc_power(PackedBytes, 0,
						 0, E, TrUserData),
    dfp_read_field_def_m_welfare_power_toc(Rest2, 0, 0,
					   NewSeq, F@_2, TrUserData).

d_packed_field_m_welfare_power_toc_power(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_welfare_power_toc_power(Rest, N + 7,
					     X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_m_welfare_power_toc_power(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_welfare_power_toc_power(RestF, 0, 0,
					     [NewFValue | AccSeq], TrUserData);
d_packed_field_m_welfare_power_toc_power(<<>>, 0, 0,
					 AccSeq, _) ->
    AccSeq.

d_field_m_welfare_power_toc_count(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_power_toc_count(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_power_toc_count(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_welfare_power_toc(RestF, 0, 0,
					   F@_1,
					   'tr_decode_repeated_add_elem_m_welfare_power_toc.count'(NewFValue,
												   Prev,
												   TrUserData),
					   TrUserData).

skip_varint_m_welfare_power_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_welfare_power_toc(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_m_welfare_power_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_power_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_m_welfare_power_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_power_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_m_welfare_power_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_power_toc(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_m_welfare_power_toc(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_power_toc(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_m_welfare_power_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_power_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_m_welfare_power_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_power_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_m_welfare_power_reward_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_tos(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_welfare_power_reward_tos(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_power_reward_tos_power(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_m_welfare_power_reward_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_power_reward_tos{power = F@_1};
dfp_read_field_def_m_welfare_power_reward_tos(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_power_reward_tos(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_power_reward_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_power_reward_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_welfare_power_reward_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_power_reward_tos_power(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_power_reward_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_welfare_power_reward_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_power_reward_tos(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_welfare_power_reward_tos(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_power_reward_tos(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_power_reward_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_welfare_power_reward_tos{power = F@_1}.

d_field_m_welfare_power_reward_tos_power(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_power_reward_tos_power(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_power_reward_tos_power(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_power_reward_tos(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_welfare_power_reward_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_power_reward_tos(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_welfare_power_reward_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_power_reward_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_power_reward_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_welfare_power_reward_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_power_reward_tos(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_welfare_power_reward_tos(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_power_reward_tos(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_welfare_power_reward_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_welfare_power_reward_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_welfare_power_reward_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_toc(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_welfare_power_reward_toc(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_power_reward_toc_power(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_m_welfare_power_reward_toc(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_power_reward_toc{power = F@_1};
dfp_read_field_def_m_welfare_power_reward_toc(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_power_reward_toc(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_power_reward_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_power_reward_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_welfare_power_reward_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_power_reward_toc_power(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_power_reward_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_welfare_power_reward_toc(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_power_reward_toc(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_welfare_power_reward_toc(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_power_reward_toc(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_power_reward_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_welfare_power_reward_toc{power = F@_1}.

d_field_m_welfare_power_reward_toc_power(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_power_reward_toc_power(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_power_reward_toc_power(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_power_reward_toc(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_welfare_power_reward_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_power_reward_toc(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_welfare_power_reward_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_power_reward_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_power_reward_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_welfare_power_reward_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_power_reward_toc(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_welfare_power_reward_toc(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_power_reward_toc(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_welfare_power_reward_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_welfare_power_reward_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_power_reward_toc(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_welfare_online_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_online_tos(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_m_welfare_online_tos(<<>>, 0, 0,
					_) ->
    #m_welfare_online_tos{};
dfp_read_field_def_m_welfare_online_tos(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_m_welfare_online_tos(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_m_welfare_online_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_online_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_online_tos(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_m_welfare_online_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_online_tos(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_m_welfare_online_tos(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_m_welfare_online_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_online_tos(<<>>, 0, 0, _) ->
    #m_welfare_online_tos{}.

skip_varint_m_welfare_online_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_online_tos(Rest, Z1, Z2,
				     TrUserData);
skip_varint_m_welfare_online_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_online_tos(Rest, Z1, Z2,
					    TrUserData).

skip_length_delimited_m_welfare_online_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online_tos(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_online_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online_tos(Rest2, 0, 0,
					    TrUserData).

skip_group_m_welfare_online_tos(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online_tos(Rest, 0, Z2,
					    TrUserData).

skip_32_m_welfare_online_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_online_tos(Rest, Z1, Z2,
					    TrUserData).

skip_64_m_welfare_online_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_online_tos(Rest, Z1, Z2,
					    TrUserData).

decode_msg_m_welfare_online_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_online_toc(Bin, 0, 0,
					    id([], TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_welfare_online_toc(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_m_welfare_online_toc_ids(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_welfare_online_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_online_toc_ids(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_m_welfare_online_toc(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_online_toc_online_time(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_m_welfare_online_toc(<<>>, 0, 0, R1,
					F@_2, TrUserData) ->
    #m_welfare_online_toc{ids =
			      lists_reverse(R1, TrUserData),
			  online_time = F@_2};
dfp_read_field_def_m_welfare_online_toc(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_welfare_online_toc(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_m_welfare_online_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_m_welfare_online_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_welfare_online_toc_ids(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      8 ->
	  d_field_m_welfare_online_toc_ids(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_m_welfare_online_toc_online_time(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_online_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_m_welfare_online_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_online_toc(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_m_welfare_online_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_welfare_online_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_online_toc(<<>>, 0, 0, R1,
				       F@_2, TrUserData) ->
    #m_welfare_online_toc{ids =
			      lists_reverse(R1, TrUserData),
			  online_time = F@_2}.

d_field_m_welfare_online_toc_ids(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online_toc_ids(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_online_toc_ids(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online_toc(RestF, 0, 0,
					    cons(NewFValue, Prev, TrUserData),
					    F@_2, TrUserData).

d_pfield_m_welfare_online_toc_ids(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_welfare_online_toc_ids(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_pfield_m_welfare_online_toc_ids(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_welfare_online_toc_ids(PackedBytes, 0,
						0, E, TrUserData),
    dfp_read_field_def_m_welfare_online_toc(Rest2, 0, 0,
					    NewSeq, F@_2, TrUserData).

d_packed_field_m_welfare_online_toc_ids(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_welfare_online_toc_ids(Rest, N + 7,
					    X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_m_welfare_online_toc_ids(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_welfare_online_toc_ids(RestF, 0, 0,
					    [NewFValue | AccSeq], TrUserData);
d_packed_field_m_welfare_online_toc_ids(<<>>, 0, 0,
					AccSeq, _) ->
    AccSeq.

d_field_m_welfare_online_toc_online_time(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online_toc_online_time(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_m_welfare_online_toc_online_time(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online_toc(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_m_welfare_online_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_welfare_online_toc(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_m_welfare_online_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_online_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_m_welfare_online_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_m_welfare_online_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online_toc(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_m_welfare_online_toc(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online_toc(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_m_welfare_online_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_online_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_m_welfare_online_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_online_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_m_welfare_online_reward_tos(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_tos(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_welfare_online_reward_tos(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_online_reward_tos_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_welfare_online_reward_tos(<<>>, 0,
					       0, F@_1, _) ->
    #m_welfare_online_reward_tos{id = F@_1};
dfp_read_field_def_m_welfare_online_reward_tos(Other,
					       Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_online_reward_tos(Other, Z1,
						  Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_online_reward_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online_reward_tos(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
dg_read_field_def_m_welfare_online_reward_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_online_reward_tos_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_online_reward_tos(Rest, 0, 0,
							F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_online_reward_tos(Rest, 0, 0, F@_1,
						    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_online_reward_tos(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    3 ->
		skip_group_m_welfare_online_reward_tos(Rest, Key bsr 3,
						       0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_online_reward_tos(Rest, 0, 0, F@_1,
						    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_online_reward_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_online_reward_tos{id = F@_1}.

d_field_m_welfare_online_reward_tos_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online_reward_tos_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_online_reward_tos_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online_reward_tos(RestF, 0,
						   0, NewFValue, TrUserData).

skip_varint_m_welfare_online_reward_tos(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_online_reward_tos(Rest, Z1, Z2,
					    F@_1, TrUserData);
skip_varint_m_welfare_online_reward_tos(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_online_reward_tos(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online_reward_tos(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
skip_length_delimited_m_welfare_online_reward_tos(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online_reward_tos(Rest2, 0,
						   0, F@_1, TrUserData).

skip_group_m_welfare_online_reward_tos(Bin, FNum, Z2,
				       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online_reward_tos(Rest, 0,
						   Z2, F@_1, TrUserData).

skip_32_m_welfare_online_reward_tos(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_64_m_welfare_online_reward_tos(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

decode_msg_m_welfare_online_reward_toc(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_toc(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_welfare_online_reward_toc(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_online_reward_toc_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_welfare_online_reward_toc(<<>>, 0,
					       0, F@_1, _) ->
    #m_welfare_online_reward_toc{id = F@_1};
dfp_read_field_def_m_welfare_online_reward_toc(Other,
					       Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_online_reward_toc(Other, Z1,
						  Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_online_reward_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online_reward_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
dg_read_field_def_m_welfare_online_reward_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_online_reward_toc_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_online_reward_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_online_reward_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_online_reward_toc(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    3 ->
		skip_group_m_welfare_online_reward_toc(Rest, Key bsr 3,
						       0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_online_reward_toc(Rest, 0, 0, F@_1,
						    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_online_reward_toc(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_online_reward_toc{id = F@_1}.

d_field_m_welfare_online_reward_toc_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online_reward_toc_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_online_reward_toc_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online_reward_toc(RestF, 0,
						   0, NewFValue, TrUserData).

skip_varint_m_welfare_online_reward_toc(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_online_reward_toc(Rest, Z1, Z2,
					    F@_1, TrUserData);
skip_varint_m_welfare_online_reward_toc(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_online_reward_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online_reward_toc(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
skip_length_delimited_m_welfare_online_reward_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online_reward_toc(Rest2, 0,
						   0, F@_1, TrUserData).

skip_group_m_welfare_online_reward_toc(Bin, FNum, Z2,
				       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online_reward_toc(Rest, 0,
						   Z2, F@_1, TrUserData).

skip_32_m_welfare_online_reward_toc(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_64_m_welfare_online_reward_toc(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

decode_msg_m_welfare_sign_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_welfare_sign_tos(<<>>, 0, 0, _) ->
    #m_welfare_sign_tos{};
dfp_read_field_def_m_welfare_sign_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_welfare_sign_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_welfare_sign_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_sign_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_sign_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_sign_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_welfare_sign_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_sign_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_welfare_sign_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_welfare_sign_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_sign_tos(<<>>, 0, 0, _) ->
    #m_welfare_sign_tos{}.

skip_varint_m_welfare_sign_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_sign_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_welfare_sign_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_welfare_sign_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_sign_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_sign_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_sign_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_welfare_sign_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_sign_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_welfare_sign_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_welfare_sign_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_welfare_sign_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_welfare_sign_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_welfare_sign_toc_signs(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_welfare_sign_toc(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_welfare_sign_toc_max_days(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_welfare_sign_toc(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_welfare_sign_toc_count(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_welfare_sign_toc(<<32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				      TrUserData) ->
    d_field_m_welfare_sign_toc_is_sign(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_welfare_sign_toc(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, _) ->
    #m_welfare_sign_toc{signs = F@_1, max_days = F@_2,
			count = F@_3, is_sign = F@_4};
dfp_read_field_def_m_welfare_sign_toc(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_m_welfare_sign_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_m_welfare_sign_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_sign_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
dg_read_field_def_m_welfare_sign_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_sign_toc_signs(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      16 ->
	  d_field_m_welfare_sign_toc_max_days(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      24 ->
	  d_field_m_welfare_sign_toc_count(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      32 ->
	  d_field_m_welfare_sign_toc_is_sign(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_sign_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_m_welfare_sign_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_sign_toc(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 TrUserData);
	    3 ->
		skip_group_m_welfare_sign_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_m_welfare_sign_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_sign_toc(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, _) ->
    #m_welfare_sign_toc{signs = F@_1, max_days = F@_2,
			count = F@_3, is_sign = F@_4}.

d_field_m_welfare_sign_toc_signs(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_welfare_sign_toc_signs(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_m_welfare_sign_toc_signs(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_sign_toc(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4,
					  TrUserData).

d_field_m_welfare_sign_toc_max_days(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_welfare_sign_toc_max_days(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_m_welfare_sign_toc_max_days(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_sign_toc(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, TrUserData).

d_field_m_welfare_sign_toc_count(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_welfare_sign_toc_count(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_m_welfare_sign_toc_count(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_sign_toc(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, F@_4, TrUserData).

d_field_m_welfare_sign_toc_is_sign(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_welfare_sign_toc_is_sign(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_m_welfare_sign_toc_is_sign(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_welfare_sign_toc(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, TrUserData).

skip_varint_m_welfare_sign_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_m_welfare_sign_toc(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, TrUserData);
skip_varint_m_welfare_sign_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_m_welfare_sign_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_sign_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
skip_length_delimited_m_welfare_sign_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_sign_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_group_m_welfare_sign_toc(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_sign_toc(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, TrUserData).

skip_32_m_welfare_sign_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_m_welfare_sign_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_m_welfare_sign_reward_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_tos(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_m_welfare_sign_reward_tos(<<>>, 0, 0,
					     _) ->
    #m_welfare_sign_reward_tos{};
dfp_read_field_def_m_welfare_sign_reward_tos(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_m_welfare_sign_reward_tos(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_m_welfare_sign_reward_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_sign_reward_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_sign_reward_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_sign_reward_tos(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_m_welfare_sign_reward_tos(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_sign_reward_tos(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_m_welfare_sign_reward_tos(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_m_welfare_sign_reward_tos(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_m_welfare_sign_reward_tos(<<>>, 0, 0,
					    _) ->
    #m_welfare_sign_reward_tos{}.

skip_varint_m_welfare_sign_reward_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_sign_reward_tos(Rest, Z1, Z2,
					  TrUserData);
skip_varint_m_welfare_sign_reward_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_tos(Rest, Z1,
						 Z2, TrUserData).

skip_length_delimited_m_welfare_sign_reward_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_sign_reward_tos(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_m_welfare_sign_reward_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_sign_reward_tos(Rest2, 0,
						 0, TrUserData).

skip_group_m_welfare_sign_reward_tos(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_sign_reward_tos(Rest, 0,
						 Z2, TrUserData).

skip_32_m_welfare_sign_reward_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_tos(Rest, Z1,
						 Z2, TrUserData).

skip_64_m_welfare_sign_reward_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_tos(Rest, Z1,
						 Z2, TrUserData).

decode_msg_m_welfare_sign_reward_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_toc(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_m_welfare_sign_reward_toc(<<>>, 0, 0,
					     _) ->
    #m_welfare_sign_reward_toc{};
dfp_read_field_def_m_welfare_sign_reward_toc(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_m_welfare_sign_reward_toc(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_m_welfare_sign_reward_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_sign_reward_toc(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_sign_reward_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_sign_reward_toc(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_m_welfare_sign_reward_toc(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_sign_reward_toc(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_m_welfare_sign_reward_toc(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_m_welfare_sign_reward_toc(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_m_welfare_sign_reward_toc(<<>>, 0, 0,
					    _) ->
    #m_welfare_sign_reward_toc{}.

skip_varint_m_welfare_sign_reward_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_sign_reward_toc(Rest, Z1, Z2,
					  TrUserData);
skip_varint_m_welfare_sign_reward_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_toc(Rest, Z1,
						 Z2, TrUserData).

skip_length_delimited_m_welfare_sign_reward_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_sign_reward_toc(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_m_welfare_sign_reward_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_sign_reward_toc(Rest2, 0,
						 0, TrUserData).

skip_group_m_welfare_sign_reward_toc(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_sign_reward_toc(Rest, 0,
						 Z2, TrUserData).

skip_32_m_welfare_sign_reward_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_toc(Rest, Z1,
						 Z2, TrUserData).

skip_64_m_welfare_sign_reward_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_sign_reward_toc(Rest, Z1,
						 Z2, TrUserData).

decode_msg_m_welfare_grail_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_tos(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_welfare_grail_tos(<<>>, 0, 0, _) ->
    #m_welfare_grail_tos{};
dfp_read_field_def_m_welfare_grail_tos(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_welfare_grail_tos(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_welfare_grail_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_grail_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_grail_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_grail_tos(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_welfare_grail_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_grail_tos(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_welfare_grail_tos(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_welfare_grail_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_grail_tos(<<>>, 0, 0, _) ->
    #m_welfare_grail_tos{}.

skip_varint_m_welfare_grail_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_grail_tos(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_welfare_grail_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_tos(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_welfare_grail_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_grail_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_grail_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_grail_tos(Rest2, 0, 0,
					   TrUserData).

skip_group_m_welfare_grail_tos(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_grail_tos(Rest, 0, Z2,
					   TrUserData).

skip_32_m_welfare_grail_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_tos(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_welfare_grail_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_tos(Rest, Z1, Z2,
					   TrUserData).

decode_msg_m_welfare_grail_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_welfare_grail_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_grail_toc_count(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_welfare_grail_toc(<<>>, 0, 0, F@_1,
				       _) ->
    #m_welfare_grail_toc{count = F@_1};
dfp_read_field_def_m_welfare_grail_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_grail_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_welfare_grail_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_grail_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_welfare_grail_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_grail_toc_count(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_grail_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_welfare_grail_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_grail_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_welfare_grail_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_welfare_grail_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_grail_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_welfare_grail_toc{count = F@_1}.

d_field_m_welfare_grail_toc_count(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_grail_toc_count(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_grail_toc_count(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_grail_toc(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_welfare_grail_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_grail_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_welfare_grail_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_welfare_grail_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_grail_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_welfare_grail_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_grail_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_welfare_grail_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_grail_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_welfare_grail_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_welfare_grail_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_welfare_grail_reward_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_tos(Bin, 0, 0,
						  TrUserData).

dfp_read_field_def_m_welfare_grail_reward_tos(<<>>, 0,
					      0, _) ->
    #m_welfare_grail_reward_tos{};
dfp_read_field_def_m_welfare_grail_reward_tos(Other, Z1,
					      Z2, TrUserData) ->
    dg_read_field_def_m_welfare_grail_reward_tos(Other, Z1,
						 Z2, TrUserData).

dg_read_field_def_m_welfare_grail_reward_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_grail_reward_tos(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
dg_read_field_def_m_welfare_grail_reward_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_grail_reward_tos(Rest, 0, 0,
						 TrUserData);
      1 ->
	  skip_64_m_welfare_grail_reward_tos(Rest, 0, 0,
					     TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_grail_reward_tos(Rest,
							   0, 0, TrUserData);
      3 ->
	  skip_group_m_welfare_grail_reward_tos(Rest, Key bsr 3,
						0, TrUserData);
      5 ->
	  skip_32_m_welfare_grail_reward_tos(Rest, 0, 0,
					     TrUserData)
    end;
dg_read_field_def_m_welfare_grail_reward_tos(<<>>, 0, 0,
					     _) ->
    #m_welfare_grail_reward_tos{}.

skip_varint_m_welfare_grail_reward_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_grail_reward_tos(Rest, Z1, Z2,
					   TrUserData);
skip_varint_m_welfare_grail_reward_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_tos(Rest, Z1,
						  Z2, TrUserData).

skip_length_delimited_m_welfare_grail_reward_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_grail_reward_tos(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
skip_length_delimited_m_welfare_grail_reward_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_grail_reward_tos(Rest2, 0,
						  0, TrUserData).

skip_group_m_welfare_grail_reward_tos(Bin, FNum, Z2,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_grail_reward_tos(Rest, 0,
						  Z2, TrUserData).

skip_32_m_welfare_grail_reward_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_tos(Rest, Z1,
						  Z2, TrUserData).

skip_64_m_welfare_grail_reward_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_tos(Rest, Z1,
						  Z2, TrUserData).

decode_msg_m_welfare_grail_reward_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_toc(Bin, 0, 0,
						  TrUserData).

dfp_read_field_def_m_welfare_grail_reward_toc(<<>>, 0,
					      0, _) ->
    #m_welfare_grail_reward_toc{};
dfp_read_field_def_m_welfare_grail_reward_toc(Other, Z1,
					      Z2, TrUserData) ->
    dg_read_field_def_m_welfare_grail_reward_toc(Other, Z1,
						 Z2, TrUserData).

dg_read_field_def_m_welfare_grail_reward_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_grail_reward_toc(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
dg_read_field_def_m_welfare_grail_reward_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_grail_reward_toc(Rest, 0, 0,
						 TrUserData);
      1 ->
	  skip_64_m_welfare_grail_reward_toc(Rest, 0, 0,
					     TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_grail_reward_toc(Rest,
							   0, 0, TrUserData);
      3 ->
	  skip_group_m_welfare_grail_reward_toc(Rest, Key bsr 3,
						0, TrUserData);
      5 ->
	  skip_32_m_welfare_grail_reward_toc(Rest, 0, 0,
					     TrUserData)
    end;
dg_read_field_def_m_welfare_grail_reward_toc(<<>>, 0, 0,
					     _) ->
    #m_welfare_grail_reward_toc{}.

skip_varint_m_welfare_grail_reward_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_grail_reward_toc(Rest, Z1, Z2,
					   TrUserData);
skip_varint_m_welfare_grail_reward_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_toc(Rest, Z1,
						  Z2, TrUserData).

skip_length_delimited_m_welfare_grail_reward_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_grail_reward_toc(Rest,
						     N + 7, X bsl N + Acc,
						     TrUserData);
skip_length_delimited_m_welfare_grail_reward_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_grail_reward_toc(Rest2, 0,
						  0, TrUserData).

skip_group_m_welfare_grail_reward_toc(Bin, FNum, Z2,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_grail_reward_toc(Rest, 0,
						  Z2, TrUserData).

skip_32_m_welfare_grail_reward_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_toc(Rest, Z1,
						  Z2, TrUserData).

skip_64_m_welfare_grail_reward_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_grail_reward_toc(Rest, Z1,
						  Z2, TrUserData).

decode_msg_m_welfare_notice_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_tos(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_welfare_notice_tos(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_notice_tos_id(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_welfare_notice_tos(<<>>, 0, 0,
					F@_1, _) ->
    #m_welfare_notice_tos{id = F@_1};
dfp_read_field_def_m_welfare_notice_tos(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_notice_tos(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_m_welfare_notice_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_notice_tos(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_welfare_notice_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_notice_tos_id(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_notice_tos(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_m_welfare_notice_tos(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_notice_tos(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_m_welfare_notice_tos(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_notice_tos(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_notice_tos(<<>>, 0, 0, F@_1,
				       _) ->
    #m_welfare_notice_tos{id = F@_1}.

d_field_m_welfare_notice_tos_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_notice_tos_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_notice_tos_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_notice_tos(RestF, 0, 0,
					    NewFValue, TrUserData).

skip_varint_m_welfare_notice_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_notice_tos(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_m_welfare_notice_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_m_welfare_notice_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_notice_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_welfare_notice_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_notice_tos(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_m_welfare_notice_tos(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_notice_tos(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_m_welfare_notice_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_m_welfare_notice_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_m_welfare_notice_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_welfare_notice_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_notice_toc_id(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_m_welfare_notice_toc(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_notice_toc_is_get(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_m_welfare_notice_toc(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #m_welfare_notice_toc{id = F@_1, is_get = F@_2};
dfp_read_field_def_m_welfare_notice_toc(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_welfare_notice_toc(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_m_welfare_notice_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_notice_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_m_welfare_notice_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_notice_toc_id(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  d_field_m_welfare_notice_toc_is_get(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_notice_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_m_welfare_notice_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_notice_toc(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_m_welfare_notice_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_welfare_notice_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_notice_toc(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #m_welfare_notice_toc{id = F@_1, is_get = F@_2}.

d_field_m_welfare_notice_toc_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_notice_toc_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_notice_toc_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_notice_toc(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_m_welfare_notice_toc_is_get(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_notice_toc_is_get(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_notice_toc_is_get(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_welfare_notice_toc(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_m_welfare_notice_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_welfare_notice_toc(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_m_welfare_notice_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_m_welfare_notice_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_notice_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_m_welfare_notice_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_notice_toc(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_m_welfare_notice_toc(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_notice_toc(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_m_welfare_notice_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_m_welfare_notice_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_m_welfare_notice_reward_tos(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_tos(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_welfare_notice_reward_tos(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_notice_reward_tos_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_welfare_notice_reward_tos(<<>>, 0,
					       0, F@_1, _) ->
    #m_welfare_notice_reward_tos{id = F@_1};
dfp_read_field_def_m_welfare_notice_reward_tos(Other,
					       Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_notice_reward_tos(Other, Z1,
						  Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_notice_reward_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_notice_reward_tos(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
dg_read_field_def_m_welfare_notice_reward_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_notice_reward_tos_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_notice_reward_tos(Rest, 0, 0,
							F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_notice_reward_tos(Rest, 0, 0, F@_1,
						    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_notice_reward_tos(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    3 ->
		skip_group_m_welfare_notice_reward_tos(Rest, Key bsr 3,
						       0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_notice_reward_tos(Rest, 0, 0, F@_1,
						    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_notice_reward_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_notice_reward_tos{id = F@_1}.

d_field_m_welfare_notice_reward_tos_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_notice_reward_tos_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_notice_reward_tos_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_notice_reward_tos(RestF, 0,
						   0, NewFValue, TrUserData).

skip_varint_m_welfare_notice_reward_tos(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_notice_reward_tos(Rest, Z1, Z2,
					    F@_1, TrUserData);
skip_varint_m_welfare_notice_reward_tos(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_notice_reward_tos(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_notice_reward_tos(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
skip_length_delimited_m_welfare_notice_reward_tos(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_notice_reward_tos(Rest2, 0,
						   0, F@_1, TrUserData).

skip_group_m_welfare_notice_reward_tos(Bin, FNum, Z2,
				       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_notice_reward_tos(Rest, 0,
						   Z2, F@_1, TrUserData).

skip_32_m_welfare_notice_reward_tos(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_64_m_welfare_notice_reward_tos(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_tos(Rest, Z1,
						   Z2, F@_1, TrUserData).

decode_msg_m_welfare_notice_reward_toc(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_toc(Bin, 0,
						   0, id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_welfare_notice_reward_toc(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_notice_reward_toc_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_welfare_notice_reward_toc(<<>>, 0,
					       0, F@_1, _) ->
    #m_welfare_notice_reward_toc{id = F@_1};
dfp_read_field_def_m_welfare_notice_reward_toc(Other,
					       Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_notice_reward_toc(Other, Z1,
						  Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_notice_reward_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_notice_reward_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
dg_read_field_def_m_welfare_notice_reward_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_notice_reward_toc_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_notice_reward_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_notice_reward_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_notice_reward_toc(Rest,
								  0, 0, F@_1,
								  TrUserData);
	    3 ->
		skip_group_m_welfare_notice_reward_toc(Rest, Key bsr 3,
						       0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_notice_reward_toc(Rest, 0, 0, F@_1,
						    TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_notice_reward_toc(<<>>, 0,
					      0, F@_1, _) ->
    #m_welfare_notice_reward_toc{id = F@_1}.

d_field_m_welfare_notice_reward_toc_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_notice_reward_toc_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_notice_reward_toc_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_notice_reward_toc(RestF, 0,
						   0, NewFValue, TrUserData).

skip_varint_m_welfare_notice_reward_toc(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_notice_reward_toc(Rest, Z1, Z2,
					    F@_1, TrUserData);
skip_varint_m_welfare_notice_reward_toc(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_notice_reward_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_notice_reward_toc(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
skip_length_delimited_m_welfare_notice_reward_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_notice_reward_toc(Rest2, 0,
						   0, F@_1, TrUserData).

skip_group_m_welfare_notice_reward_toc(Bin, FNum, Z2,
				       F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_notice_reward_toc(Rest, 0,
						   Z2, F@_1, TrUserData).

skip_32_m_welfare_notice_reward_toc(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

skip_64_m_welfare_notice_reward_toc(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_notice_reward_toc(Rest, Z1,
						   Z2, F@_1, TrUserData).

decode_msg_m_welfare_res_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_res_tos(Bin, 0, 0,
					 TrUserData).

dfp_read_field_def_m_welfare_res_tos(<<>>, 0, 0, _) ->
    #m_welfare_res_tos{};
dfp_read_field_def_m_welfare_res_tos(Other, Z1, Z2,
				     TrUserData) ->
    dg_read_field_def_m_welfare_res_tos(Other, Z1, Z2,
					TrUserData).

dg_read_field_def_m_welfare_res_tos(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_res_tos(Rest, N + 7,
					X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_res_tos(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_res_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_welfare_res_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_res_tos(Rest, 0, 0,
						  TrUserData);
      3 ->
	  skip_group_m_welfare_res_tos(Rest, Key bsr 3, 0,
				       TrUserData);
      5 -> skip_32_m_welfare_res_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_res_tos(<<>>, 0, 0, _) ->
    #m_welfare_res_tos{}.

skip_varint_m_welfare_res_tos(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_res_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_welfare_res_tos(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_tos(Rest, Z1, Z2,
					 TrUserData).

skip_length_delimited_m_welfare_res_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_res_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_res_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_res_tos(Rest2, 0, 0,
					 TrUserData).

skip_group_m_welfare_res_tos(Bin, FNum, Z2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_res_tos(Rest, 0, Z2,
					 TrUserData).

skip_32_m_welfare_res_tos(<<_:32, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_welfare_res_tos(Rest, Z1, Z2,
					 TrUserData).

skip_64_m_welfare_res_tos(<<_:64, Rest/binary>>, Z1, Z2,
			  TrUserData) ->
    dfp_read_field_def_m_welfare_res_tos(Rest, Z1, Z2,
					 TrUserData).

decode_msg_m_welfare_res_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_res_toc(Bin, 0, 0,
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_welfare_res_toc(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_res_toc_is_get(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_welfare_res_toc(<<>>, 0, 0, F@_1,
				     _) ->
    #m_welfare_res_toc{is_get = F@_1};
dfp_read_field_def_m_welfare_res_toc(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_res_toc(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_m_welfare_res_toc(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_res_toc(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_welfare_res_toc(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_res_toc_is_get(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_res_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_m_welfare_res_toc(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_res_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_m_welfare_res_toc(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_m_welfare_res_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_res_toc(<<>>, 0, 0, F@_1,
				    _) ->
    #m_welfare_res_toc{is_get = F@_1}.

d_field_m_welfare_res_toc_is_get(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_res_toc_is_get(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_res_toc_is_get(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_welfare_res_toc(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_m_welfare_res_toc(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_res_toc(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_m_welfare_res_toc(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_res_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_m_welfare_res_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_res_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_welfare_res_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_res_toc(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_m_welfare_res_toc(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_res_toc(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_m_welfare_res_toc(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_res_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_m_welfare_res_toc(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_res_toc(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_m_welfare_res_reward_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_tos(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_m_welfare_res_reward_tos(<<>>, 0, 0,
					    _) ->
    #m_welfare_res_reward_tos{};
dfp_read_field_def_m_welfare_res_reward_tos(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_m_welfare_res_reward_tos(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_m_welfare_res_reward_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_res_reward_tos(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_res_reward_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_res_reward_tos(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_m_welfare_res_reward_tos(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_res_reward_tos(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_m_welfare_res_reward_tos(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_m_welfare_res_reward_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_res_reward_tos(<<>>, 0, 0,
					   _) ->
    #m_welfare_res_reward_tos{}.

skip_varint_m_welfare_res_reward_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_res_reward_tos(Rest, Z1, Z2,
					 TrUserData);
skip_varint_m_welfare_res_reward_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_tos(Rest, Z1,
						Z2, TrUserData).

skip_length_delimited_m_welfare_res_reward_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_res_reward_tos(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_m_welfare_res_reward_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_res_reward_tos(Rest2, 0, 0,
						TrUserData).

skip_group_m_welfare_res_reward_tos(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_res_reward_tos(Rest, 0, Z2,
						TrUserData).

skip_32_m_welfare_res_reward_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_tos(Rest, Z1,
						Z2, TrUserData).

skip_64_m_welfare_res_reward_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_tos(Rest, Z1,
						Z2, TrUserData).

decode_msg_m_welfare_res_reward_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_toc(Bin, 0, 0,
						TrUserData).

dfp_read_field_def_m_welfare_res_reward_toc(<<>>, 0, 0,
					    _) ->
    #m_welfare_res_reward_toc{};
dfp_read_field_def_m_welfare_res_reward_toc(Other, Z1,
					    Z2, TrUserData) ->
    dg_read_field_def_m_welfare_res_reward_toc(Other, Z1,
					       Z2, TrUserData).

dg_read_field_def_m_welfare_res_reward_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_res_reward_toc(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_res_reward_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_res_reward_toc(Rest, 0, 0,
					       TrUserData);
      1 ->
	  skip_64_m_welfare_res_reward_toc(Rest, 0, 0,
					   TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_res_reward_toc(Rest, 0,
							 0, TrUserData);
      3 ->
	  skip_group_m_welfare_res_reward_toc(Rest, Key bsr 3, 0,
					      TrUserData);
      5 ->
	  skip_32_m_welfare_res_reward_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_res_reward_toc(<<>>, 0, 0,
					   _) ->
    #m_welfare_res_reward_toc{}.

skip_varint_m_welfare_res_reward_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_res_reward_toc(Rest, Z1, Z2,
					 TrUserData);
skip_varint_m_welfare_res_reward_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_toc(Rest, Z1,
						Z2, TrUserData).

skip_length_delimited_m_welfare_res_reward_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_res_reward_toc(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
skip_length_delimited_m_welfare_res_reward_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_res_reward_toc(Rest2, 0, 0,
						TrUserData).

skip_group_m_welfare_res_reward_toc(Bin, FNum, Z2,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_res_reward_toc(Rest, 0, Z2,
						TrUserData).

skip_32_m_welfare_res_reward_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_toc(Rest, Z1,
						Z2, TrUserData).

skip_64_m_welfare_res_reward_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_res_reward_toc(Rest, Z1,
						Z2, TrUserData).

decode_msg_m_welfare_giftcode_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_tos(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_welfare_giftcode_tos(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_giftcode_tos_code(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_welfare_giftcode_tos(<<>>, 0, 0,
					  F@_1, _) ->
    #m_welfare_giftcode_tos{code = F@_1};
dfp_read_field_def_m_welfare_giftcode_tos(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_giftcode_tos(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_m_welfare_giftcode_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_giftcode_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_welfare_giftcode_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_welfare_giftcode_tos_code(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_giftcode_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_m_welfare_giftcode_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_giftcode_tos(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_m_welfare_giftcode_tos(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_giftcode_tos(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_giftcode_tos(<<>>, 0, 0,
					 F@_1, _) ->
    #m_welfare_giftcode_tos{code = F@_1}.

d_field_m_welfare_giftcode_tos_code(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_giftcode_tos_code(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_giftcode_tos_code(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_welfare_giftcode_tos(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_m_welfare_giftcode_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_giftcode_tos(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_m_welfare_giftcode_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_m_welfare_giftcode_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_giftcode_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_m_welfare_giftcode_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_giftcode_tos(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_m_welfare_giftcode_tos(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_giftcode_tos(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_m_welfare_giftcode_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_m_welfare_giftcode_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_m_welfare_giftcode_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_toc(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_m_welfare_giftcode_toc(<<>>, 0, 0,
					  _) ->
    #m_welfare_giftcode_toc{};
dfp_read_field_def_m_welfare_giftcode_toc(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_m_welfare_giftcode_toc(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_m_welfare_giftcode_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_giftcode_toc(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_giftcode_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_giftcode_toc(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_m_welfare_giftcode_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_giftcode_toc(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_m_welfare_giftcode_toc(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_m_welfare_giftcode_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_giftcode_toc(<<>>, 0, 0,
					 _) ->
    #m_welfare_giftcode_toc{}.

skip_varint_m_welfare_giftcode_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_giftcode_toc(Rest, Z1, Z2,
				       TrUserData);
skip_varint_m_welfare_giftcode_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_toc(Rest, Z1, Z2,
					      TrUserData).

skip_length_delimited_m_welfare_giftcode_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_giftcode_toc(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_m_welfare_giftcode_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_giftcode_toc(Rest2, 0, 0,
					      TrUserData).

skip_group_m_welfare_giftcode_toc(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_giftcode_toc(Rest, 0, Z2,
					      TrUserData).

skip_32_m_welfare_giftcode_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_toc(Rest, Z1, Z2,
					      TrUserData).

skip_64_m_welfare_giftcode_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_giftcode_toc(Rest, Z1, Z2,
					      TrUserData).

decode_msg_m_welfare_misc_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_welfare_misc_tos(<<>>, 0, 0, _) ->
    #m_welfare_misc_tos{};
dfp_read_field_def_m_welfare_misc_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_welfare_misc_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_welfare_misc_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_misc_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_misc_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_misc_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_welfare_misc_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_misc_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_welfare_misc_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_welfare_misc_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_misc_tos(<<>>, 0, 0, _) ->
    #m_welfare_misc_tos{}.

skip_varint_m_welfare_misc_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_misc_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_welfare_misc_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_welfare_misc_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_misc_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_misc_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_misc_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_welfare_misc_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_misc_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_welfare_misc_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_welfare_misc_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_welfare_misc_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_toc(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_welfare_misc_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_misc_toc_welfares(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_welfare_misc_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_welfare_misc_toc{welfares =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_welfare_misc_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_misc_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_welfare_misc_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_misc_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_welfare_misc_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_welfare_misc_toc_welfares(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_misc_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_welfare_misc_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_misc_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_welfare_misc_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_welfare_misc_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_misc_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_welfare_misc_toc{welfares =
			    lists_reverse(R1, TrUserData)}.

d_field_m_welfare_misc_toc_welfares(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_misc_toc_welfares(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_misc_toc_welfares(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_welfare_misc(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_welfare_misc_toc(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_welfare_misc_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_misc_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_welfare_misc_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_welfare_misc_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_misc_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_welfare_misc_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_misc_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_welfare_misc_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_misc_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_welfare_misc_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_welfare_misc_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_welfare_misc_reward_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_tos(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_welfare_misc_reward_tos(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_misc_reward_tos_type(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_welfare_misc_reward_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_welfare_misc_reward_tos{type = F@_1};
dfp_read_field_def_m_welfare_misc_reward_tos(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_misc_reward_tos(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_misc_reward_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_misc_reward_tos(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_welfare_misc_reward_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_misc_reward_tos_type(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_misc_reward_tos(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_welfare_misc_reward_tos(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_misc_reward_tos(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_welfare_misc_reward_tos(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_misc_reward_tos(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_misc_reward_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_welfare_misc_reward_tos{type = F@_1}.

d_field_m_welfare_misc_reward_tos_type(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_misc_reward_tos_type(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_misc_reward_tos_type(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_misc_reward_tos(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_welfare_misc_reward_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_misc_reward_tos(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_welfare_misc_reward_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_misc_reward_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_misc_reward_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_welfare_misc_reward_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_misc_reward_tos(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_welfare_misc_reward_tos(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_misc_reward_tos(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_welfare_misc_reward_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_welfare_misc_reward_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_tos(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_welfare_misc_reward_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 'tr_decode_init_default_m_welfare_misc_reward_toc.reward'([],
													   TrUserData),
						 TrUserData).

dfp_read_field_def_m_welfare_misc_reward_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_misc_reward_toc_type(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_m_welfare_misc_reward_toc(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_misc_reward_toc_reward(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_m_welfare_misc_reward_toc(<<>>, 0, 0,
					     F@_1, R1, TrUserData) ->
    #m_welfare_misc_reward_toc{type = F@_1,
			       reward =
				   'tr_decode_repeated_finalize_m_welfare_misc_reward_toc.reward'(R1,
												  TrUserData)};
dfp_read_field_def_m_welfare_misc_reward_toc(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_welfare_misc_reward_toc(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_welfare_misc_reward_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_misc_reward_toc(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_m_welfare_misc_reward_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_misc_reward_toc_type(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      18 ->
	  d_field_m_welfare_misc_reward_toc_reward(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_misc_reward_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_m_welfare_misc_reward_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_misc_reward_toc(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_m_welfare_misc_reward_toc(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_welfare_misc_reward_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_misc_reward_toc(<<>>, 0, 0,
					    F@_1, R1, TrUserData) ->
    #m_welfare_misc_reward_toc{type = F@_1,
			       reward =
				   'tr_decode_repeated_finalize_m_welfare_misc_reward_toc.reward'(R1,
												  TrUserData)}.

d_field_m_welfare_misc_reward_toc_type(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_misc_reward_toc_type(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_m_welfare_misc_reward_toc_type(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_misc_reward_toc(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

d_field_m_welfare_misc_reward_toc_reward(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_misc_reward_toc_reward(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_m_welfare_misc_reward_toc_reward(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_welfare_misc_reward_toc(RestF, 0,
						 0, F@_1,
						 'tr_decode_repeated_add_elem_m_welfare_misc_reward_toc.reward'(NewFValue,
														Prev,
														TrUserData),
						 TrUserData).

skip_varint_m_welfare_misc_reward_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_welfare_misc_reward_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_m_welfare_misc_reward_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_welfare_misc_reward_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_misc_reward_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_m_welfare_misc_reward_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_misc_reward_toc(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_m_welfare_misc_reward_toc(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_misc_reward_toc(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_m_welfare_misc_reward_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_m_welfare_misc_reward_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_misc_reward_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_m_welfare_online2_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_tos(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_m_welfare_online2_tos(<<>>, 0, 0,
					 _) ->
    #m_welfare_online2_tos{};
dfp_read_field_def_m_welfare_online2_tos(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_m_welfare_online2_tos(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_m_welfare_online2_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online2_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_m_welfare_online2_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_online2_tos(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_m_welfare_online2_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_online2_tos(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_m_welfare_online2_tos(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_m_welfare_online2_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_welfare_online2_tos(<<>>, 0, 0,
					_) ->
    #m_welfare_online2_tos{}.

skip_varint_m_welfare_online2_tos(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_online2_tos(Rest, Z1, Z2,
				      TrUserData);
skip_varint_m_welfare_online2_tos(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_tos(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_m_welfare_online2_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online2_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_m_welfare_online2_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online2_tos(Rest2, 0, 0,
					     TrUserData).

skip_group_m_welfare_online2_tos(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online2_tos(Rest, 0, Z2,
					     TrUserData).

skip_32_m_welfare_online2_tos(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_tos(Rest, Z1, Z2,
					     TrUserData).

skip_64_m_welfare_online2_tos(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_tos(Rest, Z1, Z2,
					     TrUserData).

decode_msg_m_welfare_online2_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_toc(Bin, 0, 0,
					     id([], TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_m_welfare_online2_toc(<<10,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_m_welfare_online2_toc_ids(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_m_welfare_online2_toc(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_online2_toc_ids(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_welfare_online2_toc(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_welfare_online2_toc_online_time(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_m_welfare_online2_toc(<<>>, 0, 0, R1,
					 F@_2, TrUserData) ->
    #m_welfare_online2_toc{ids =
			       lists_reverse(R1, TrUserData),
			   online_time = F@_2};
dfp_read_field_def_m_welfare_online2_toc(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_welfare_online2_toc(Other, Z1, Z2,
					    F@_1, F@_2, TrUserData).

dg_read_field_def_m_welfare_online2_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online2_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
dg_read_field_def_m_welfare_online2_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_welfare_online2_toc_ids(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      8 ->
	  d_field_m_welfare_online2_toc_ids(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_m_welfare_online2_toc_online_time(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_online2_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    1 ->
		skip_64_m_welfare_online2_toc(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_online2_toc(Rest, 0, 0,
							    F@_1, F@_2,
							    TrUserData);
	    3 ->
		skip_group_m_welfare_online2_toc(Rest, Key bsr 3, 0,
						 F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_welfare_online2_toc(Rest, 0, 0, F@_1, F@_2,
					      TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_online2_toc(<<>>, 0, 0, R1,
					F@_2, TrUserData) ->
    #m_welfare_online2_toc{ids =
			       lists_reverse(R1, TrUserData),
			   online_time = F@_2}.

d_field_m_welfare_online2_toc_ids(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online2_toc_ids(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_welfare_online2_toc_ids(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online2_toc(RestF, 0, 0,
					     cons(NewFValue, Prev, TrUserData),
					     F@_2, TrUserData).

d_pfield_m_welfare_online2_toc_ids(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_welfare_online2_toc_ids(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_pfield_m_welfare_online2_toc_ids(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, E, F@_2, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_welfare_online2_toc_ids(PackedBytes, 0,
						 0, E, TrUserData),
    dfp_read_field_def_m_welfare_online2_toc(Rest2, 0, 0,
					     NewSeq, F@_2, TrUserData).

d_packed_field_m_welfare_online2_toc_ids(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_welfare_online2_toc_ids(Rest, N + 7,
					     X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_m_welfare_online2_toc_ids(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_welfare_online2_toc_ids(RestF, 0, 0,
					     [NewFValue | AccSeq], TrUserData);
d_packed_field_m_welfare_online2_toc_ids(<<>>, 0, 0,
					 AccSeq, _) ->
    AccSeq.

d_field_m_welfare_online2_toc_online_time(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online2_toc_online_time(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_m_welfare_online2_toc_online_time(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online2_toc(RestF, 0, 0,
					     F@_1, NewFValue, TrUserData).

skip_varint_m_welfare_online2_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_welfare_online2_toc(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
skip_varint_m_welfare_online2_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_toc(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

skip_length_delimited_m_welfare_online2_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online2_toc(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
skip_length_delimited_m_welfare_online2_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online2_toc(Rest2, 0, 0,
					     F@_1, F@_2, TrUserData).

skip_group_m_welfare_online2_toc(Bin, FNum, Z2, F@_1,
				 F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online2_toc(Rest, 0, Z2,
					     F@_1, F@_2, TrUserData).

skip_32_m_welfare_online2_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_toc(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

skip_64_m_welfare_online2_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_toc(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData).

decode_msg_m_welfare_online2_reward_tos(Bin,
					TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_tos(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_welfare_online2_reward_tos(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_online2_reward_tos_id(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_welfare_online2_reward_tos(<<>>, 0,
						0, F@_1, _) ->
    #m_welfare_online2_reward_tos{id = F@_1};
dfp_read_field_def_m_welfare_online2_reward_tos(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_online2_reward_tos(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_online2_reward_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online2_reward_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_m_welfare_online2_reward_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_online2_reward_tos_id(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_online2_reward_tos(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_online2_reward_tos(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_online2_reward_tos(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_m_welfare_online2_reward_tos(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_online2_reward_tos(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_online2_reward_tos(<<>>, 0,
					       0, F@_1, _) ->
    #m_welfare_online2_reward_tos{id = F@_1}.

d_field_m_welfare_online2_reward_tos_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online2_reward_tos_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_online2_reward_tos_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online2_reward_tos(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_m_welfare_online2_reward_tos(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_online2_reward_tos(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_m_welfare_online2_reward_tos(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_tos(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_online2_reward_tos(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online2_reward_tos(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_m_welfare_online2_reward_tos(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online2_reward_tos(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_m_welfare_online2_reward_tos(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online2_reward_tos(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_m_welfare_online2_reward_tos(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_tos(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_m_welfare_online2_reward_tos(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_tos(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_m_welfare_online2_reward_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_toc(Bin, 0,
						    0,
						    id(undefined, TrUserData),
						    TrUserData).

dfp_read_field_def_m_welfare_online2_reward_toc(<<8,
						  Rest/binary>>,
						Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_online2_reward_toc_id(Rest, Z1, Z2,
					    F@_1, TrUserData);
dfp_read_field_def_m_welfare_online2_reward_toc(<<>>, 0,
						0, F@_1, _) ->
    #m_welfare_online2_reward_toc{id = F@_1};
dfp_read_field_def_m_welfare_online2_reward_toc(Other,
						Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_online2_reward_toc(Other,
						   Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_online2_reward_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_online2_reward_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
dg_read_field_def_m_welfare_online2_reward_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_online2_reward_toc_id(Rest, 0, 0,
						  F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_online2_reward_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_online2_reward_toc(Rest, 0, 0, F@_1,
						     TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_online2_reward_toc(Rest,
								   0, 0, F@_1,
								   TrUserData);
	    3 ->
		skip_group_m_welfare_online2_reward_toc(Rest, Key bsr 3,
							0, F@_1, TrUserData);
	    5 ->
		skip_32_m_welfare_online2_reward_toc(Rest, 0, 0, F@_1,
						     TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_online2_reward_toc(<<>>, 0,
					       0, F@_1, _) ->
    #m_welfare_online2_reward_toc{id = F@_1}.

d_field_m_welfare_online2_reward_toc_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_online2_reward_toc_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_online2_reward_toc_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_online2_reward_toc(RestF,
						    0, 0, NewFValue,
						    TrUserData).

skip_varint_m_welfare_online2_reward_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_online2_reward_toc(Rest, Z1, Z2,
					     F@_1, TrUserData);
skip_varint_m_welfare_online2_reward_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_online2_reward_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_online2_reward_toc(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
skip_length_delimited_m_welfare_online2_reward_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_online2_reward_toc(Rest2,
						    0, 0, F@_1, TrUserData).

skip_group_m_welfare_online2_reward_toc(Bin, FNum, Z2,
					F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_online2_reward_toc(Rest, 0,
						    Z2, F@_1, TrUserData).

skip_32_m_welfare_online2_reward_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

skip_64_m_welfare_online2_reward_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_online2_reward_toc(Rest,
						    Z1, Z2, F@_1, TrUserData).

decode_msg_p_welfare_misc(Bin, TrUserData) ->
    dfp_read_field_def_p_welfare_misc(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_welfare_misc(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_welfare_misc_type(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_p_welfare_misc(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_welfare_misc_is_open(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_p_welfare_misc(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_welfare_misc_is_get(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_p_welfare_misc(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    #p_welfare_misc{type = F@_1, is_open = F@_2,
		    is_get = F@_3};
dfp_read_field_def_p_welfare_misc(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_p_welfare_misc(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_p_welfare_misc(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_welfare_misc(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_p_welfare_misc(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_welfare_misc_type(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      16 ->
	  d_field_p_welfare_misc_is_open(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      24 ->
	  d_field_p_welfare_misc_is_get(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_welfare_misc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_p_welfare_misc(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_p_welfare_misc(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_p_welfare_misc(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_p_welfare_misc(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_p_welfare_misc(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    #p_welfare_misc{type = F@_1, is_open = F@_2,
		    is_get = F@_3}.

d_field_p_welfare_misc_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_welfare_misc_type(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_p_welfare_misc_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_welfare_misc(RestF, 0, 0,
				      NewFValue, F@_2, F@_3, TrUserData).

d_field_p_welfare_misc_is_open(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_welfare_misc_is_open(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_p_welfare_misc_is_open(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_welfare_misc(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

d_field_p_welfare_misc_is_get(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_welfare_misc_is_get(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_p_welfare_misc_is_get(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_welfare_misc(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, TrUserData).

skip_varint_p_welfare_misc(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_welfare_misc(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_p_welfare_misc(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_welfare_misc(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_p_welfare_misc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_welfare_misc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_p_welfare_misc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_welfare_misc(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_p_welfare_misc(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_welfare_misc(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_p_welfare_misc(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_welfare_misc(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_p_welfare_misc(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_welfare_misc(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

decode_msg_m_welfare_login_reward_info_tos(Bin,
					   TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_tos(Bin,
						       0, 0, TrUserData).

dfp_read_field_def_m_welfare_login_reward_info_tos(<<>>,
						   0, 0, _) ->
    #m_welfare_login_reward_info_tos{};
dfp_read_field_def_m_welfare_login_reward_info_tos(Other,
						   Z1, Z2, TrUserData) ->
    dg_read_field_def_m_welfare_login_reward_info_tos(Other,
						      Z1, Z2, TrUserData).

dg_read_field_def_m_welfare_login_reward_info_tos(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_login_reward_info_tos(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
dg_read_field_def_m_welfare_login_reward_info_tos(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_welfare_login_reward_info_tos(Rest, 0, 0,
						      TrUserData);
      1 ->
	  skip_64_m_welfare_login_reward_info_tos(Rest, 0, 0,
						  TrUserData);
      2 ->
	  skip_length_delimited_m_welfare_login_reward_info_tos(Rest,
								0, 0,
								TrUserData);
      3 ->
	  skip_group_m_welfare_login_reward_info_tos(Rest,
						     Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_m_welfare_login_reward_info_tos(Rest, 0, 0,
						  TrUserData)
    end;
dg_read_field_def_m_welfare_login_reward_info_tos(<<>>,
						  0, 0, _) ->
    #m_welfare_login_reward_info_tos{}.

skip_varint_m_welfare_login_reward_info_tos(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, TrUserData) ->
    skip_varint_m_welfare_login_reward_info_tos(Rest, Z1,
						Z2, TrUserData);
skip_varint_m_welfare_login_reward_info_tos(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_tos(Rest,
						       Z1, Z2, TrUserData).

skip_length_delimited_m_welfare_login_reward_info_tos(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_login_reward_info_tos(Rest,
							  N + 7, X bsl N + Acc,
							  TrUserData);
skip_length_delimited_m_welfare_login_reward_info_tos(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_login_reward_info_tos(Rest2,
						       0, 0, TrUserData).

skip_group_m_welfare_login_reward_info_tos(Bin, FNum,
					   Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_login_reward_info_tos(Rest,
						       0, Z2, TrUserData).

skip_32_m_welfare_login_reward_info_tos(<<_:32,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_tos(Rest,
						       Z1, Z2, TrUserData).

skip_64_m_welfare_login_reward_info_tos(<<_:64,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_tos(Rest,
						       Z1, Z2, TrUserData).

decode_msg_m_welfare_login_reward_info_toc(Bin,
					   TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_toc(Bin,
						       0, 0, id([], TrUserData),
						       TrUserData).

dfp_read_field_def_m_welfare_login_reward_info_toc(<<10,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    d_pfield_m_welfare_login_reward_info_toc_reward_list(Rest,
							 Z1, Z2, F@_1,
							 TrUserData);
dfp_read_field_def_m_welfare_login_reward_info_toc(<<8,
						     Rest/binary>>,
						   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_login_reward_info_toc_reward_list(Rest,
							Z1, Z2, F@_1,
							TrUserData);
dfp_read_field_def_m_welfare_login_reward_info_toc(<<>>,
						   0, 0, R1, TrUserData) ->
    #m_welfare_login_reward_info_toc{reward_list =
					 lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_welfare_login_reward_info_toc(Other,
						   Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_login_reward_info_toc(Other,
						      Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_login_reward_info_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_login_reward_info_toc(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, TrUserData);
dg_read_field_def_m_welfare_login_reward_info_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_welfare_login_reward_info_toc_reward_list(Rest,
							       0, 0, F@_1,
							       TrUserData);
      8 ->
	  d_field_m_welfare_login_reward_info_toc_reward_list(Rest,
							      0, 0, F@_1,
							      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_login_reward_info_toc(Rest, 0, 0,
							    F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_login_reward_info_toc(Rest, 0, 0,
							F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_login_reward_info_toc(Rest,
								      0, 0,
								      F@_1,
								      TrUserData);
	    3 ->
		skip_group_m_welfare_login_reward_info_toc(Rest,
							   Key bsr 3, 0, F@_1,
							   TrUserData);
	    5 ->
		skip_32_m_welfare_login_reward_info_toc(Rest, 0, 0,
							F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_login_reward_info_toc(<<>>,
						  0, 0, R1, TrUserData) ->
    #m_welfare_login_reward_info_toc{reward_list =
					 lists_reverse(R1, TrUserData)}.

d_field_m_welfare_login_reward_info_toc_reward_list(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_login_reward_info_toc_reward_list(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
d_field_m_welfare_login_reward_info_toc_reward_list(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_login_reward_info_toc(RestF,
						       0, 0,
						       cons(NewFValue, Prev,
							    TrUserData),
						       TrUserData).

d_pfield_m_welfare_login_reward_info_toc_reward_list(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_m_welfare_login_reward_info_toc_reward_list(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
d_pfield_m_welfare_login_reward_info_toc_reward_list(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_welfare_login_reward_info_toc_reward_list(PackedBytes,
								   0, 0, E,
								   TrUserData),
    dfp_read_field_def_m_welfare_login_reward_info_toc(Rest2,
						       0, 0, NewSeq,
						       TrUserData).

d_packed_field_m_welfare_login_reward_info_toc_reward_list(<<1:1,
							     X:7, Rest/binary>>,
							   N, Acc, AccSeq,
							   TrUserData)
    when N < 57 ->
    d_packed_field_m_welfare_login_reward_info_toc_reward_list(Rest,
							       N + 7,
							       X bsl N + Acc,
							       AccSeq,
							       TrUserData);
d_packed_field_m_welfare_login_reward_info_toc_reward_list(<<0:1,
							     X:7, Rest/binary>>,
							   N, Acc, AccSeq,
							   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_welfare_login_reward_info_toc_reward_list(RestF,
							       0, 0,
							       [NewFValue
								| AccSeq],
							       TrUserData);
d_packed_field_m_welfare_login_reward_info_toc_reward_list(<<>>,
							   0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_m_welfare_login_reward_info_toc(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_login_reward_info_toc(Rest, Z1,
						Z2, F@_1, TrUserData);
skip_varint_m_welfare_login_reward_info_toc(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_toc(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

skip_length_delimited_m_welfare_login_reward_info_toc(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_login_reward_info_toc(Rest,
							  N + 7, X bsl N + Acc,
							  F@_1, TrUserData);
skip_length_delimited_m_welfare_login_reward_info_toc(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, F@_1,
						      TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_login_reward_info_toc(Rest2,
						       0, 0, F@_1, TrUserData).

skip_group_m_welfare_login_reward_info_toc(Bin, FNum,
					   Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_login_reward_info_toc(Rest,
						       0, Z2, F@_1, TrUserData).

skip_32_m_welfare_login_reward_info_toc(<<_:32,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_toc(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

skip_64_m_welfare_login_reward_info_toc(<<_:64,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_login_reward_info_toc(Rest,
						       Z1, Z2, F@_1,
						       TrUserData).

decode_msg_m_welfare_get_login_reward_tos(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_tos(Bin,
						      0, 0, id([], TrUserData),
						      TrUserData).

dfp_read_field_def_m_welfare_get_login_reward_tos(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_pfield_m_welfare_get_login_reward_tos_reward_list(Rest,
							Z1, Z2, F@_1,
							TrUserData);
dfp_read_field_def_m_welfare_get_login_reward_tos(<<8,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_get_login_reward_tos_reward_list(Rest,
						       Z1, Z2, F@_1,
						       TrUserData);
dfp_read_field_def_m_welfare_get_login_reward_tos(<<>>,
						  0, 0, R1, TrUserData) ->
    #m_welfare_get_login_reward_tos{reward_list =
					lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_welfare_get_login_reward_tos(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_get_login_reward_tos(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_get_login_reward_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_get_login_reward_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_m_welfare_get_login_reward_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_welfare_get_login_reward_tos_reward_list(Rest,
							      0, 0, F@_1,
							      TrUserData);
      8 ->
	  d_field_m_welfare_get_login_reward_tos_reward_list(Rest,
							     0, 0, F@_1,
							     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_get_login_reward_tos(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_get_login_reward_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_get_login_reward_tos(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_m_welfare_get_login_reward_tos(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_m_welfare_get_login_reward_tos(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_get_login_reward_tos(<<>>,
						 0, 0, R1, TrUserData) ->
    #m_welfare_get_login_reward_tos{reward_list =
					lists_reverse(R1, TrUserData)}.

d_field_m_welfare_get_login_reward_tos_reward_list(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_get_login_reward_tos_reward_list(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, TrUserData);
d_field_m_welfare_get_login_reward_tos_reward_list(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_get_login_reward_tos(RestF,
						      0, 0,
						      cons(NewFValue, Prev,
							   TrUserData),
						      TrUserData).

d_pfield_m_welfare_get_login_reward_tos_reward_list(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_m_welfare_get_login_reward_tos_reward_list(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
d_pfield_m_welfare_get_login_reward_tos_reward_list(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_welfare_get_login_reward_tos_reward_list(PackedBytes,
								  0, 0, E,
								  TrUserData),
    dfp_read_field_def_m_welfare_get_login_reward_tos(Rest2,
						      0, 0, NewSeq, TrUserData).

d_packed_field_m_welfare_get_login_reward_tos_reward_list(<<1:1,
							    X:7, Rest/binary>>,
							  N, Acc, AccSeq,
							  TrUserData)
    when N < 57 ->
    d_packed_field_m_welfare_get_login_reward_tos_reward_list(Rest,
							      N + 7,
							      X bsl N + Acc,
							      AccSeq,
							      TrUserData);
d_packed_field_m_welfare_get_login_reward_tos_reward_list(<<0:1,
							    X:7, Rest/binary>>,
							  N, Acc, AccSeq,
							  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_welfare_get_login_reward_tos_reward_list(RestF,
							      0, 0,
							      [NewFValue
							       | AccSeq],
							      TrUserData);
d_packed_field_m_welfare_get_login_reward_tos_reward_list(<<>>,
							  0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_m_welfare_get_login_reward_tos(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_get_login_reward_tos(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_m_welfare_get_login_reward_tos(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_tos(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_get_login_reward_tos(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_get_login_reward_tos(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_m_welfare_get_login_reward_tos(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_get_login_reward_tos(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_m_welfare_get_login_reward_tos(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_get_login_reward_tos(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_m_welfare_get_login_reward_tos(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_tos(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_m_welfare_get_login_reward_tos(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_tos(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_m_welfare_get_login_reward_toc(Bin,
					  TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_toc(Bin,
						      0, 0,
						      id(undefined, TrUserData),
						      TrUserData).

dfp_read_field_def_m_welfare_get_login_reward_toc(<<8,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_welfare_get_login_reward_toc_res(Rest, Z1, Z2,
					       F@_1, TrUserData);
dfp_read_field_def_m_welfare_get_login_reward_toc(<<>>,
						  0, 0, F@_1, _) ->
    #m_welfare_get_login_reward_toc{res = F@_1};
dfp_read_field_def_m_welfare_get_login_reward_toc(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_welfare_get_login_reward_toc(Other,
						     Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_welfare_get_login_reward_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_welfare_get_login_reward_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
dg_read_field_def_m_welfare_get_login_reward_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_welfare_get_login_reward_toc_res(Rest, 0, 0,
						     F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_welfare_get_login_reward_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		skip_64_m_welfare_get_login_reward_toc(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		skip_length_delimited_m_welfare_get_login_reward_toc(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		skip_group_m_welfare_get_login_reward_toc(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		skip_32_m_welfare_get_login_reward_toc(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
dg_read_field_def_m_welfare_get_login_reward_toc(<<>>,
						 0, 0, F@_1, _) ->
    #m_welfare_get_login_reward_toc{res = F@_1}.

d_field_m_welfare_get_login_reward_toc_res(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_welfare_get_login_reward_toc_res(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
d_field_m_welfare_get_login_reward_toc_res(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_welfare_get_login_reward_toc(RestF,
						      0, 0, NewFValue,
						      TrUserData).

skip_varint_m_welfare_get_login_reward_toc(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_welfare_get_login_reward_toc(Rest, Z1, Z2,
					       F@_1, TrUserData);
skip_varint_m_welfare_get_login_reward_toc(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_welfare_get_login_reward_toc(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_welfare_get_login_reward_toc(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
skip_length_delimited_m_welfare_get_login_reward_toc(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_welfare_get_login_reward_toc(Rest2,
						      0, 0, F@_1, TrUserData).

skip_group_m_welfare_get_login_reward_toc(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_welfare_get_login_reward_toc(Rest,
						      0, Z2, F@_1, TrUserData).

skip_32_m_welfare_get_login_reward_toc(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

skip_64_m_welfare_get_login_reward_toc(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_welfare_get_login_reward_toc(Rest,
						      Z1, Z2, F@_1, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_welfare_level_tos ->
	  merge_msg_m_welfare_level_tos(Prev, New, TrUserData);
      m_welfare_level_toc ->
	  merge_msg_m_welfare_level_toc(Prev, New, TrUserData);
      m_welfare_level_reward_tos ->
	  merge_msg_m_welfare_level_reward_tos(Prev, New,
					       TrUserData);
      m_welfare_level_reward_toc ->
	  merge_msg_m_welfare_level_reward_toc(Prev, New,
					       TrUserData);
      m_welfare_power_tos ->
	  merge_msg_m_welfare_power_tos(Prev, New, TrUserData);
      m_welfare_power_toc ->
	  merge_msg_m_welfare_power_toc(Prev, New, TrUserData);
      m_welfare_power_reward_tos ->
	  merge_msg_m_welfare_power_reward_tos(Prev, New,
					       TrUserData);
      m_welfare_power_reward_toc ->
	  merge_msg_m_welfare_power_reward_toc(Prev, New,
					       TrUserData);
      m_welfare_online_tos ->
	  merge_msg_m_welfare_online_tos(Prev, New, TrUserData);
      m_welfare_online_toc ->
	  merge_msg_m_welfare_online_toc(Prev, New, TrUserData);
      m_welfare_online_reward_tos ->
	  merge_msg_m_welfare_online_reward_tos(Prev, New,
						TrUserData);
      m_welfare_online_reward_toc ->
	  merge_msg_m_welfare_online_reward_toc(Prev, New,
						TrUserData);
      m_welfare_sign_tos ->
	  merge_msg_m_welfare_sign_tos(Prev, New, TrUserData);
      m_welfare_sign_toc ->
	  merge_msg_m_welfare_sign_toc(Prev, New, TrUserData);
      m_welfare_sign_reward_tos ->
	  merge_msg_m_welfare_sign_reward_tos(Prev, New,
					      TrUserData);
      m_welfare_sign_reward_toc ->
	  merge_msg_m_welfare_sign_reward_toc(Prev, New,
					      TrUserData);
      m_welfare_grail_tos ->
	  merge_msg_m_welfare_grail_tos(Prev, New, TrUserData);
      m_welfare_grail_toc ->
	  merge_msg_m_welfare_grail_toc(Prev, New, TrUserData);
      m_welfare_grail_reward_tos ->
	  merge_msg_m_welfare_grail_reward_tos(Prev, New,
					       TrUserData);
      m_welfare_grail_reward_toc ->
	  merge_msg_m_welfare_grail_reward_toc(Prev, New,
					       TrUserData);
      m_welfare_notice_tos ->
	  merge_msg_m_welfare_notice_tos(Prev, New, TrUserData);
      m_welfare_notice_toc ->
	  merge_msg_m_welfare_notice_toc(Prev, New, TrUserData);
      m_welfare_notice_reward_tos ->
	  merge_msg_m_welfare_notice_reward_tos(Prev, New,
						TrUserData);
      m_welfare_notice_reward_toc ->
	  merge_msg_m_welfare_notice_reward_toc(Prev, New,
						TrUserData);
      m_welfare_res_tos ->
	  merge_msg_m_welfare_res_tos(Prev, New, TrUserData);
      m_welfare_res_toc ->
	  merge_msg_m_welfare_res_toc(Prev, New, TrUserData);
      m_welfare_res_reward_tos ->
	  merge_msg_m_welfare_res_reward_tos(Prev, New,
					     TrUserData);
      m_welfare_res_reward_toc ->
	  merge_msg_m_welfare_res_reward_toc(Prev, New,
					     TrUserData);
      m_welfare_giftcode_tos ->
	  merge_msg_m_welfare_giftcode_tos(Prev, New, TrUserData);
      m_welfare_giftcode_toc ->
	  merge_msg_m_welfare_giftcode_toc(Prev, New, TrUserData);
      m_welfare_misc_tos ->
	  merge_msg_m_welfare_misc_tos(Prev, New, TrUserData);
      m_welfare_misc_toc ->
	  merge_msg_m_welfare_misc_toc(Prev, New, TrUserData);
      m_welfare_misc_reward_tos ->
	  merge_msg_m_welfare_misc_reward_tos(Prev, New,
					      TrUserData);
      m_welfare_misc_reward_toc ->
	  merge_msg_m_welfare_misc_reward_toc(Prev, New,
					      TrUserData);
      m_welfare_online2_tos ->
	  merge_msg_m_welfare_online2_tos(Prev, New, TrUserData);
      m_welfare_online2_toc ->
	  merge_msg_m_welfare_online2_toc(Prev, New, TrUserData);
      m_welfare_online2_reward_tos ->
	  merge_msg_m_welfare_online2_reward_tos(Prev, New,
						 TrUserData);
      m_welfare_online2_reward_toc ->
	  merge_msg_m_welfare_online2_reward_toc(Prev, New,
						 TrUserData);
      p_welfare_misc ->
	  merge_msg_p_welfare_misc(Prev, New, TrUserData);
      m_welfare_login_reward_info_tos ->
	  merge_msg_m_welfare_login_reward_info_tos(Prev, New,
						    TrUserData);
      m_welfare_login_reward_info_toc ->
	  merge_msg_m_welfare_login_reward_info_toc(Prev, New,
						    TrUserData);
      m_welfare_get_login_reward_tos ->
	  merge_msg_m_welfare_get_login_reward_tos(Prev, New,
						   TrUserData);
      m_welfare_get_login_reward_toc ->
	  merge_msg_m_welfare_get_login_reward_toc(Prev, New,
						   TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_welfare_level_tos/3}).
merge_msg_m_welfare_level_tos(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_level_toc/3}).
merge_msg_m_welfare_level_toc(#m_welfare_level_toc{level
						       = PFlevel,
						   count = PFcount},
			      #m_welfare_level_toc{level = NFlevel,
						   count = NFcount},
			      TrUserData) ->
    #m_welfare_level_toc{level =
			     if PFlevel /= undefined, NFlevel /= undefined ->
				    'erlang_++'(PFlevel, NFlevel, TrUserData);
				PFlevel == undefined -> NFlevel;
				NFlevel == undefined -> PFlevel
			     end,
			 count =
			     if PFcount /= undefined, NFcount /= undefined ->
				    'tr_merge_m_welfare_level_toc.count'(PFcount,
									 NFcount,
									 TrUserData);
				PFcount == undefined -> NFcount;
				NFcount == undefined -> PFcount
			     end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_level_reward_tos/3}).
merge_msg_m_welfare_level_reward_tos(#m_welfare_level_reward_tos{},
				     #m_welfare_level_reward_tos{level =
								     NFlevel},
				     _) ->
    #m_welfare_level_reward_tos{level = NFlevel}.

-compile({nowarn_unused_function,merge_msg_m_welfare_level_reward_toc/3}).
merge_msg_m_welfare_level_reward_toc(#m_welfare_level_reward_toc{},
				     #m_welfare_level_reward_toc{level =
								     NFlevel},
				     _) ->
    #m_welfare_level_reward_toc{level = NFlevel}.

-compile({nowarn_unused_function,merge_msg_m_welfare_power_tos/3}).
merge_msg_m_welfare_power_tos(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_power_toc/3}).
merge_msg_m_welfare_power_toc(#m_welfare_power_toc{power
						       = PFpower,
						   count = PFcount},
			      #m_welfare_power_toc{power = NFpower,
						   count = NFcount},
			      TrUserData) ->
    #m_welfare_power_toc{power =
			     if PFpower /= undefined, NFpower /= undefined ->
				    'erlang_++'(PFpower, NFpower, TrUserData);
				PFpower == undefined -> NFpower;
				NFpower == undefined -> PFpower
			     end,
			 count =
			     if PFcount /= undefined, NFcount /= undefined ->
				    'tr_merge_m_welfare_power_toc.count'(PFcount,
									 NFcount,
									 TrUserData);
				PFcount == undefined -> NFcount;
				NFcount == undefined -> PFcount
			     end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_power_reward_tos/3}).
merge_msg_m_welfare_power_reward_tos(#m_welfare_power_reward_tos{},
				     #m_welfare_power_reward_tos{power =
								     NFpower},
				     _) ->
    #m_welfare_power_reward_tos{power = NFpower}.

-compile({nowarn_unused_function,merge_msg_m_welfare_power_reward_toc/3}).
merge_msg_m_welfare_power_reward_toc(#m_welfare_power_reward_toc{},
				     #m_welfare_power_reward_toc{power =
								     NFpower},
				     _) ->
    #m_welfare_power_reward_toc{power = NFpower}.

-compile({nowarn_unused_function,merge_msg_m_welfare_online_tos/3}).
merge_msg_m_welfare_online_tos(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_online_toc/3}).
merge_msg_m_welfare_online_toc(#m_welfare_online_toc{ids
							 = PFids},
			       #m_welfare_online_toc{ids = NFids,
						     online_time =
							 NFonline_time},
			       TrUserData) ->
    #m_welfare_online_toc{ids =
			      if PFids /= undefined, NFids /= undefined ->
				     'erlang_++'(PFids, NFids, TrUserData);
				 PFids == undefined -> NFids;
				 NFids == undefined -> PFids
			      end,
			  online_time = NFonline_time}.

-compile({nowarn_unused_function,merge_msg_m_welfare_online_reward_tos/3}).
merge_msg_m_welfare_online_reward_tos(#m_welfare_online_reward_tos{},
				      #m_welfare_online_reward_tos{id = NFid},
				      _) ->
    #m_welfare_online_reward_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_welfare_online_reward_toc/3}).
merge_msg_m_welfare_online_reward_toc(#m_welfare_online_reward_toc{},
				      #m_welfare_online_reward_toc{id = NFid},
				      _) ->
    #m_welfare_online_reward_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_welfare_sign_tos/3}).
merge_msg_m_welfare_sign_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_sign_toc/3}).
merge_msg_m_welfare_sign_toc(#m_welfare_sign_toc{max_days
						     = PFmax_days,
						 count = PFcount,
						 is_sign = PFis_sign},
			     #m_welfare_sign_toc{signs = NFsigns,
						 max_days = NFmax_days,
						 count = NFcount,
						 is_sign = NFis_sign},
			     _) ->
    #m_welfare_sign_toc{signs = NFsigns,
			max_days =
			    if NFmax_days =:= undefined -> PFmax_days;
			       true -> NFmax_days
			    end,
			count =
			    if NFcount =:= undefined -> PFcount;
			       true -> NFcount
			    end,
			is_sign =
			    if NFis_sign =:= undefined -> PFis_sign;
			       true -> NFis_sign
			    end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_sign_reward_tos/3}).
merge_msg_m_welfare_sign_reward_tos(_Prev, New,
				    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_sign_reward_toc/3}).
merge_msg_m_welfare_sign_reward_toc(_Prev, New,
				    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_grail_tos/3}).
merge_msg_m_welfare_grail_tos(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_grail_toc/3}).
merge_msg_m_welfare_grail_toc(#m_welfare_grail_toc{},
			      #m_welfare_grail_toc{count = NFcount}, _) ->
    #m_welfare_grail_toc{count = NFcount}.

-compile({nowarn_unused_function,merge_msg_m_welfare_grail_reward_tos/3}).
merge_msg_m_welfare_grail_reward_tos(_Prev, New,
				     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_grail_reward_toc/3}).
merge_msg_m_welfare_grail_reward_toc(_Prev, New,
				     _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_notice_tos/3}).
merge_msg_m_welfare_notice_tos(#m_welfare_notice_tos{},
			       #m_welfare_notice_tos{id = NFid}, _) ->
    #m_welfare_notice_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_welfare_notice_toc/3}).
merge_msg_m_welfare_notice_toc(#m_welfare_notice_toc{},
			       #m_welfare_notice_toc{id = NFid,
						     is_get = NFis_get},
			       _) ->
    #m_welfare_notice_toc{id = NFid, is_get = NFis_get}.

-compile({nowarn_unused_function,merge_msg_m_welfare_notice_reward_tos/3}).
merge_msg_m_welfare_notice_reward_tos(#m_welfare_notice_reward_tos{},
				      #m_welfare_notice_reward_tos{id = NFid},
				      _) ->
    #m_welfare_notice_reward_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_welfare_notice_reward_toc/3}).
merge_msg_m_welfare_notice_reward_toc(#m_welfare_notice_reward_toc{},
				      #m_welfare_notice_reward_toc{id = NFid},
				      _) ->
    #m_welfare_notice_reward_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_welfare_res_tos/3}).
merge_msg_m_welfare_res_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_res_toc/3}).
merge_msg_m_welfare_res_toc(#m_welfare_res_toc{},
			    #m_welfare_res_toc{is_get = NFis_get}, _) ->
    #m_welfare_res_toc{is_get = NFis_get}.

-compile({nowarn_unused_function,merge_msg_m_welfare_res_reward_tos/3}).
merge_msg_m_welfare_res_reward_tos(_Prev, New,
				   _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_res_reward_toc/3}).
merge_msg_m_welfare_res_reward_toc(_Prev, New,
				   _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_giftcode_tos/3}).
merge_msg_m_welfare_giftcode_tos(#m_welfare_giftcode_tos{},
				 #m_welfare_giftcode_tos{code = NFcode}, _) ->
    #m_welfare_giftcode_tos{code = NFcode}.

-compile({nowarn_unused_function,merge_msg_m_welfare_giftcode_toc/3}).
merge_msg_m_welfare_giftcode_toc(_Prev, New,
				 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_misc_tos/3}).
merge_msg_m_welfare_misc_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_misc_toc/3}).
merge_msg_m_welfare_misc_toc(#m_welfare_misc_toc{welfares
						     = PFwelfares},
			     #m_welfare_misc_toc{welfares = NFwelfares},
			     TrUserData) ->
    #m_welfare_misc_toc{welfares =
			    if PFwelfares /= undefined,
			       NFwelfares /= undefined ->
				   'erlang_++'(PFwelfares, NFwelfares,
					       TrUserData);
			       PFwelfares == undefined -> NFwelfares;
			       NFwelfares == undefined -> PFwelfares
			    end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_misc_reward_tos/3}).
merge_msg_m_welfare_misc_reward_tos(#m_welfare_misc_reward_tos{},
				    #m_welfare_misc_reward_tos{type = NFtype},
				    _) ->
    #m_welfare_misc_reward_tos{type = NFtype}.

-compile({nowarn_unused_function,merge_msg_m_welfare_misc_reward_toc/3}).
merge_msg_m_welfare_misc_reward_toc(#m_welfare_misc_reward_toc{reward
								   = PFreward},
				    #m_welfare_misc_reward_toc{type = NFtype,
							       reward =
								   NFreward},
				    TrUserData) ->
    #m_welfare_misc_reward_toc{type = NFtype,
			       reward =
				   if PFreward /= undefined,
				      NFreward /= undefined ->
					  'tr_merge_m_welfare_misc_reward_toc.reward'(PFreward,
										      NFreward,
										      TrUserData);
				      PFreward == undefined -> NFreward;
				      NFreward == undefined -> PFreward
				   end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_online2_tos/3}).
merge_msg_m_welfare_online2_tos(_Prev, New,
				_TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_online2_toc/3}).
merge_msg_m_welfare_online2_toc(#m_welfare_online2_toc{ids
							   = PFids},
				#m_welfare_online2_toc{ids = NFids,
						       online_time =
							   NFonline_time},
				TrUserData) ->
    #m_welfare_online2_toc{ids =
			       if PFids /= undefined, NFids /= undefined ->
				      'erlang_++'(PFids, NFids, TrUserData);
				  PFids == undefined -> NFids;
				  NFids == undefined -> PFids
			       end,
			   online_time = NFonline_time}.

-compile({nowarn_unused_function,merge_msg_m_welfare_online2_reward_tos/3}).
merge_msg_m_welfare_online2_reward_tos(#m_welfare_online2_reward_tos{},
				       #m_welfare_online2_reward_tos{id = NFid},
				       _) ->
    #m_welfare_online2_reward_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_welfare_online2_reward_toc/3}).
merge_msg_m_welfare_online2_reward_toc(#m_welfare_online2_reward_toc{},
				       #m_welfare_online2_reward_toc{id = NFid},
				       _) ->
    #m_welfare_online2_reward_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_p_welfare_misc/3}).
merge_msg_p_welfare_misc(#p_welfare_misc{},
			 #p_welfare_misc{type = NFtype, is_open = NFis_open,
					 is_get = NFis_get},
			 _) ->
    #p_welfare_misc{type = NFtype, is_open = NFis_open,
		    is_get = NFis_get}.

-compile({nowarn_unused_function,merge_msg_m_welfare_login_reward_info_tos/3}).
merge_msg_m_welfare_login_reward_info_tos(_Prev, New,
					  _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_welfare_login_reward_info_toc/3}).
merge_msg_m_welfare_login_reward_info_toc(#m_welfare_login_reward_info_toc{reward_list
									       =
									       PFreward_list},
					  #m_welfare_login_reward_info_toc{reward_list
									       =
									       NFreward_list},
					  TrUserData) ->
    #m_welfare_login_reward_info_toc{reward_list =
					 if PFreward_list /= undefined,
					    NFreward_list /= undefined ->
						'erlang_++'(PFreward_list,
							    NFreward_list,
							    TrUserData);
					    PFreward_list == undefined ->
						NFreward_list;
					    NFreward_list == undefined ->
						PFreward_list
					 end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_get_login_reward_tos/3}).
merge_msg_m_welfare_get_login_reward_tos(#m_welfare_get_login_reward_tos{reward_list
									     =
									     PFreward_list},
					 #m_welfare_get_login_reward_tos{reward_list
									     =
									     NFreward_list},
					 TrUserData) ->
    #m_welfare_get_login_reward_tos{reward_list =
					if PFreward_list /= undefined,
					   NFreward_list /= undefined ->
					       'erlang_++'(PFreward_list,
							   NFreward_list,
							   TrUserData);
					   PFreward_list == undefined ->
					       NFreward_list;
					   NFreward_list == undefined ->
					       PFreward_list
					end}.

-compile({nowarn_unused_function,merge_msg_m_welfare_get_login_reward_toc/3}).
merge_msg_m_welfare_get_login_reward_toc(#m_welfare_get_login_reward_toc{},
					 #m_welfare_get_login_reward_toc{res =
									     NFres},
					 _) ->
    #m_welfare_get_login_reward_toc{res = NFres}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_welfare_level_tos ->
	  v_msg_m_welfare_level_tos(Msg, [MsgName], TrUserData);
      m_welfare_level_toc ->
	  v_msg_m_welfare_level_toc(Msg, [MsgName], TrUserData);
      m_welfare_level_reward_tos ->
	  v_msg_m_welfare_level_reward_tos(Msg, [MsgName],
					   TrUserData);
      m_welfare_level_reward_toc ->
	  v_msg_m_welfare_level_reward_toc(Msg, [MsgName],
					   TrUserData);
      m_welfare_power_tos ->
	  v_msg_m_welfare_power_tos(Msg, [MsgName], TrUserData);
      m_welfare_power_toc ->
	  v_msg_m_welfare_power_toc(Msg, [MsgName], TrUserData);
      m_welfare_power_reward_tos ->
	  v_msg_m_welfare_power_reward_tos(Msg, [MsgName],
					   TrUserData);
      m_welfare_power_reward_toc ->
	  v_msg_m_welfare_power_reward_toc(Msg, [MsgName],
					   TrUserData);
      m_welfare_online_tos ->
	  v_msg_m_welfare_online_tos(Msg, [MsgName], TrUserData);
      m_welfare_online_toc ->
	  v_msg_m_welfare_online_toc(Msg, [MsgName], TrUserData);
      m_welfare_online_reward_tos ->
	  v_msg_m_welfare_online_reward_tos(Msg, [MsgName],
					    TrUserData);
      m_welfare_online_reward_toc ->
	  v_msg_m_welfare_online_reward_toc(Msg, [MsgName],
					    TrUserData);
      m_welfare_sign_tos ->
	  v_msg_m_welfare_sign_tos(Msg, [MsgName], TrUserData);
      m_welfare_sign_toc ->
	  v_msg_m_welfare_sign_toc(Msg, [MsgName], TrUserData);
      m_welfare_sign_reward_tos ->
	  v_msg_m_welfare_sign_reward_tos(Msg, [MsgName],
					  TrUserData);
      m_welfare_sign_reward_toc ->
	  v_msg_m_welfare_sign_reward_toc(Msg, [MsgName],
					  TrUserData);
      m_welfare_grail_tos ->
	  v_msg_m_welfare_grail_tos(Msg, [MsgName], TrUserData);
      m_welfare_grail_toc ->
	  v_msg_m_welfare_grail_toc(Msg, [MsgName], TrUserData);
      m_welfare_grail_reward_tos ->
	  v_msg_m_welfare_grail_reward_tos(Msg, [MsgName],
					   TrUserData);
      m_welfare_grail_reward_toc ->
	  v_msg_m_welfare_grail_reward_toc(Msg, [MsgName],
					   TrUserData);
      m_welfare_notice_tos ->
	  v_msg_m_welfare_notice_tos(Msg, [MsgName], TrUserData);
      m_welfare_notice_toc ->
	  v_msg_m_welfare_notice_toc(Msg, [MsgName], TrUserData);
      m_welfare_notice_reward_tos ->
	  v_msg_m_welfare_notice_reward_tos(Msg, [MsgName],
					    TrUserData);
      m_welfare_notice_reward_toc ->
	  v_msg_m_welfare_notice_reward_toc(Msg, [MsgName],
					    TrUserData);
      m_welfare_res_tos ->
	  v_msg_m_welfare_res_tos(Msg, [MsgName], TrUserData);
      m_welfare_res_toc ->
	  v_msg_m_welfare_res_toc(Msg, [MsgName], TrUserData);
      m_welfare_res_reward_tos ->
	  v_msg_m_welfare_res_reward_tos(Msg, [MsgName],
					 TrUserData);
      m_welfare_res_reward_toc ->
	  v_msg_m_welfare_res_reward_toc(Msg, [MsgName],
					 TrUserData);
      m_welfare_giftcode_tos ->
	  v_msg_m_welfare_giftcode_tos(Msg, [MsgName],
				       TrUserData);
      m_welfare_giftcode_toc ->
	  v_msg_m_welfare_giftcode_toc(Msg, [MsgName],
				       TrUserData);
      m_welfare_misc_tos ->
	  v_msg_m_welfare_misc_tos(Msg, [MsgName], TrUserData);
      m_welfare_misc_toc ->
	  v_msg_m_welfare_misc_toc(Msg, [MsgName], TrUserData);
      m_welfare_misc_reward_tos ->
	  v_msg_m_welfare_misc_reward_tos(Msg, [MsgName],
					  TrUserData);
      m_welfare_misc_reward_toc ->
	  v_msg_m_welfare_misc_reward_toc(Msg, [MsgName],
					  TrUserData);
      m_welfare_online2_tos ->
	  v_msg_m_welfare_online2_tos(Msg, [MsgName], TrUserData);
      m_welfare_online2_toc ->
	  v_msg_m_welfare_online2_toc(Msg, [MsgName], TrUserData);
      m_welfare_online2_reward_tos ->
	  v_msg_m_welfare_online2_reward_tos(Msg, [MsgName],
					     TrUserData);
      m_welfare_online2_reward_toc ->
	  v_msg_m_welfare_online2_reward_toc(Msg, [MsgName],
					     TrUserData);
      p_welfare_misc ->
	  v_msg_p_welfare_misc(Msg, [MsgName], TrUserData);
      m_welfare_login_reward_info_tos ->
	  v_msg_m_welfare_login_reward_info_tos(Msg, [MsgName],
						TrUserData);
      m_welfare_login_reward_info_toc ->
	  v_msg_m_welfare_login_reward_info_toc(Msg, [MsgName],
						TrUserData);
      m_welfare_get_login_reward_tos ->
	  v_msg_m_welfare_get_login_reward_tos(Msg, [MsgName],
					       TrUserData);
      m_welfare_get_login_reward_toc ->
	  v_msg_m_welfare_get_login_reward_toc(Msg, [MsgName],
					       TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_welfare_level_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_level_tos/3}).
v_msg_m_welfare_level_tos(#m_welfare_level_tos{}, _Path,
			  _) ->
    ok;
v_msg_m_welfare_level_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_level_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_level_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_level_toc/3}).
v_msg_m_welfare_level_toc(#m_welfare_level_toc{level =
						   F1,
					       count = F2},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [level | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [level | Path])
    end,
    'v_map<int32,int32>'(F2, [count | Path], TrUserData),
    ok;
v_msg_m_welfare_level_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_level_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_level_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_level_reward_tos/3}).
v_msg_m_welfare_level_reward_tos(#m_welfare_level_reward_tos{level
								 = F1},
				 Path, TrUserData) ->
    v_type_int32(F1, [level | Path], TrUserData), ok;
v_msg_m_welfare_level_reward_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_level_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_level_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_level_reward_toc/3}).
v_msg_m_welfare_level_reward_toc(#m_welfare_level_reward_toc{level
								 = F1},
				 Path, TrUserData) ->
    v_type_int32(F1, [level | Path], TrUserData), ok;
v_msg_m_welfare_level_reward_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_level_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_power_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_power_tos/3}).
v_msg_m_welfare_power_tos(#m_welfare_power_tos{}, _Path,
			  _) ->
    ok;
v_msg_m_welfare_power_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_power_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_power_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_power_toc/3}).
v_msg_m_welfare_power_toc(#m_welfare_power_toc{power =
						   F1,
					       count = F2},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [power | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [power | Path])
    end,
    'v_map<int32,int32>'(F2, [count | Path], TrUserData),
    ok;
v_msg_m_welfare_power_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_power_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_power_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_power_reward_tos/3}).
v_msg_m_welfare_power_reward_tos(#m_welfare_power_reward_tos{power
								 = F1},
				 Path, TrUserData) ->
    v_type_int32(F1, [power | Path], TrUserData), ok;
v_msg_m_welfare_power_reward_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_power_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_power_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_power_reward_toc/3}).
v_msg_m_welfare_power_reward_toc(#m_welfare_power_reward_toc{power
								 = F1},
				 Path, TrUserData) ->
    v_type_int32(F1, [power | Path], TrUserData), ok;
v_msg_m_welfare_power_reward_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_power_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online_tos/3}).
v_msg_m_welfare_online_tos(#m_welfare_online_tos{},
			   _Path, _) ->
    ok;
v_msg_m_welfare_online_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_online_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online_toc/3}).
v_msg_m_welfare_online_toc(#m_welfare_online_toc{ids =
						     F1,
						 online_time = F2},
			   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [ids | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [ids | Path])
    end,
    v_type_int32(F2, [online_time | Path], TrUserData),
    ok;
v_msg_m_welfare_online_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_online_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online_reward_tos/3}).
v_msg_m_welfare_online_reward_tos(#m_welfare_online_reward_tos{id
								   = F1},
				  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_online_reward_tos(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_online_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online_reward_toc/3}).
v_msg_m_welfare_online_reward_toc(#m_welfare_online_reward_toc{id
								   = F1},
				  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_online_reward_toc(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_online_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_sign_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_sign_tos/3}).
v_msg_m_welfare_sign_tos(#m_welfare_sign_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_welfare_sign_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_sign_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_sign_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_sign_toc/3}).
v_msg_m_welfare_sign_toc(#m_welfare_sign_toc{signs = F1,
					     max_days = F2, count = F3,
					     is_sign = F4},
			 Path, TrUserData) ->
    v_type_int32(F1, [signs | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [max_days | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [count | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true -> v_type_bool(F4, [is_sign | Path], TrUserData)
    end,
    ok;
v_msg_m_welfare_sign_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_sign_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_sign_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_sign_reward_tos/3}).
v_msg_m_welfare_sign_reward_tos(#m_welfare_sign_reward_tos{},
				_Path, _) ->
    ok;
v_msg_m_welfare_sign_reward_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_sign_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_sign_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_sign_reward_toc/3}).
v_msg_m_welfare_sign_reward_toc(#m_welfare_sign_reward_toc{},
				_Path, _) ->
    ok;
v_msg_m_welfare_sign_reward_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_sign_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_grail_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_grail_tos/3}).
v_msg_m_welfare_grail_tos(#m_welfare_grail_tos{}, _Path,
			  _) ->
    ok;
v_msg_m_welfare_grail_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_grail_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_grail_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_grail_toc/3}).
v_msg_m_welfare_grail_toc(#m_welfare_grail_toc{count =
						   F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [count | Path], TrUserData), ok;
v_msg_m_welfare_grail_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_grail_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_grail_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_grail_reward_tos/3}).
v_msg_m_welfare_grail_reward_tos(#m_welfare_grail_reward_tos{},
				 _Path, _) ->
    ok;
v_msg_m_welfare_grail_reward_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_grail_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_grail_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_grail_reward_toc/3}).
v_msg_m_welfare_grail_reward_toc(#m_welfare_grail_reward_toc{},
				 _Path, _) ->
    ok;
v_msg_m_welfare_grail_reward_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_grail_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_notice_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_notice_tos/3}).
v_msg_m_welfare_notice_tos(#m_welfare_notice_tos{id =
						     F1},
			   Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_notice_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_notice_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_notice_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_notice_toc/3}).
v_msg_m_welfare_notice_toc(#m_welfare_notice_toc{id =
						     F1,
						 is_get = F2},
			   Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_bool(F2, [is_get | Path], TrUserData),
    ok;
v_msg_m_welfare_notice_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_notice_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_notice_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_notice_reward_tos/3}).
v_msg_m_welfare_notice_reward_tos(#m_welfare_notice_reward_tos{id
								   = F1},
				  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_notice_reward_tos(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_notice_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_notice_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_notice_reward_toc/3}).
v_msg_m_welfare_notice_reward_toc(#m_welfare_notice_reward_toc{id
								   = F1},
				  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_notice_reward_toc(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_notice_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_res_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_res_tos/3}).
v_msg_m_welfare_res_tos(#m_welfare_res_tos{}, _Path,
			_) ->
    ok;
v_msg_m_welfare_res_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_res_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_res_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_res_toc/3}).
v_msg_m_welfare_res_toc(#m_welfare_res_toc{is_get = F1},
			Path, TrUserData) ->
    v_type_bool(F1, [is_get | Path], TrUserData), ok;
v_msg_m_welfare_res_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_res_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_res_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_res_reward_tos/3}).
v_msg_m_welfare_res_reward_tos(#m_welfare_res_reward_tos{},
			       _Path, _) ->
    ok;
v_msg_m_welfare_res_reward_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_res_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_res_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_res_reward_toc/3}).
v_msg_m_welfare_res_reward_toc(#m_welfare_res_reward_toc{},
			       _Path, _) ->
    ok;
v_msg_m_welfare_res_reward_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_res_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_giftcode_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_giftcode_tos/3}).
v_msg_m_welfare_giftcode_tos(#m_welfare_giftcode_tos{code
							 = F1},
			     Path, TrUserData) ->
    v_type_string(F1, [code | Path], TrUserData), ok;
v_msg_m_welfare_giftcode_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_giftcode_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_giftcode_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_giftcode_toc/3}).
v_msg_m_welfare_giftcode_toc(#m_welfare_giftcode_toc{},
			     _Path, _) ->
    ok;
v_msg_m_welfare_giftcode_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_giftcode_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_misc_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_misc_tos/3}).
v_msg_m_welfare_misc_tos(#m_welfare_misc_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_welfare_misc_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_misc_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_misc_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_misc_toc/3}).
v_msg_m_welfare_misc_toc(#m_welfare_misc_toc{welfares =
						 F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_welfare_misc(Elem, [welfares | Path],
				     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_welfare_misc}},
			 F1, [welfares | Path])
    end,
    ok;
v_msg_m_welfare_misc_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_misc_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_misc_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_misc_reward_tos/3}).
v_msg_m_welfare_misc_reward_tos(#m_welfare_misc_reward_tos{type
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData), ok;
v_msg_m_welfare_misc_reward_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_misc_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_misc_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_misc_reward_toc/3}).
v_msg_m_welfare_misc_reward_toc(#m_welfare_misc_reward_toc{type
							       = F1,
							   reward = F2},
				Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    'v_map<int32,int32>'(F2, [reward | Path], TrUserData),
    ok;
v_msg_m_welfare_misc_reward_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_misc_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online2_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online2_tos/3}).
v_msg_m_welfare_online2_tos(#m_welfare_online2_tos{},
			    _Path, _) ->
    ok;
v_msg_m_welfare_online2_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_online2_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online2_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online2_toc/3}).
v_msg_m_welfare_online2_toc(#m_welfare_online2_toc{ids =
						       F1,
						   online_time = F2},
			    Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [ids | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [ids | Path])
    end,
    v_type_int32(F2, [online_time | Path], TrUserData),
    ok;
v_msg_m_welfare_online2_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_welfare_online2_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online2_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online2_reward_tos/3}).
v_msg_m_welfare_online2_reward_tos(#m_welfare_online2_reward_tos{id
								     = F1},
				   Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_online2_reward_tos(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_online2_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_online2_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_online2_reward_toc/3}).
v_msg_m_welfare_online2_reward_toc(#m_welfare_online2_reward_toc{id
								     = F1},
				   Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_welfare_online2_reward_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_online2_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_p_welfare_misc/3}).
-dialyzer({nowarn_function,v_msg_p_welfare_misc/3}).
v_msg_p_welfare_misc(#p_welfare_misc{type = F1,
				     is_open = F2, is_get = F3},
		     Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    v_type_bool(F2, [is_open | Path], TrUserData),
    v_type_bool(F3, [is_get | Path], TrUserData),
    ok;
v_msg_p_welfare_misc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_welfare_misc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_login_reward_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_login_reward_info_tos/3}).
v_msg_m_welfare_login_reward_info_tos(#m_welfare_login_reward_info_tos{},
				      _Path, _) ->
    ok;
v_msg_m_welfare_login_reward_info_tos(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_login_reward_info_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_login_reward_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_login_reward_info_toc/3}).
v_msg_m_welfare_login_reward_info_toc(#m_welfare_login_reward_info_toc{reward_list
									   =
									   F1},
				      Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [reward_list | Path],
			     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [reward_list | Path])
    end,
    ok;
v_msg_m_welfare_login_reward_info_toc(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_login_reward_info_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_get_login_reward_tos/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_get_login_reward_tos/3}).
v_msg_m_welfare_get_login_reward_tos(#m_welfare_get_login_reward_tos{reward_list
									 = F1},
				     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [reward_list | Path],
			     TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [reward_list | Path])
    end,
    ok;
v_msg_m_welfare_get_login_reward_tos(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_get_login_reward_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_welfare_get_login_reward_toc/3}).
-dialyzer({nowarn_function,v_msg_m_welfare_get_login_reward_toc/3}).
v_msg_m_welfare_get_login_reward_toc(#m_welfare_get_login_reward_toc{res
									 = F1},
				     Path, TrUserData) ->
    v_type_int32(F1, [res | Path], TrUserData), ok;
v_msg_m_welfare_get_login_reward_toc(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   m_welfare_get_login_reward_toc},
		  X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_m_welfare_level_toc.count'/2}).
'tr_decode_init_default_m_welfare_level_toc.count'(_,
						   _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_welfare_level_toc.count'/3}).
'tr_merge_m_welfare_level_toc.count'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_welfare_level_toc.count'/2}).
'tr_decode_repeated_finalize_m_welfare_level_toc.count'(L,
							TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_welfare_level_toc.count'/2}).
'tr_encode_m_welfare_level_toc.count'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_welfare_level_toc.count'/3}).
'tr_decode_repeated_add_elem_m_welfare_level_toc.count'(Elem,
							L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_welfare_power_toc.count'/2}).
'tr_decode_init_default_m_welfare_power_toc.count'(_,
						   _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_welfare_power_toc.count'/3}).
'tr_merge_m_welfare_power_toc.count'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_welfare_power_toc.count'/2}).
'tr_decode_repeated_finalize_m_welfare_power_toc.count'(L,
							TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_welfare_power_toc.count'/2}).
'tr_encode_m_welfare_power_toc.count'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_welfare_power_toc.count'/3}).
'tr_decode_repeated_add_elem_m_welfare_power_toc.count'(Elem,
							L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_welfare_misc_reward_toc.reward'/2}).
'tr_decode_init_default_m_welfare_misc_reward_toc.reward'(_,
							  _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_welfare_misc_reward_toc.reward'/3}).
'tr_merge_m_welfare_misc_reward_toc.reward'(X1, X2,
					    _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_welfare_misc_reward_toc.reward'/2}).
'tr_decode_repeated_finalize_m_welfare_misc_reward_toc.reward'(L,
							       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_welfare_misc_reward_toc.reward'/2}).
'tr_encode_m_welfare_misc_reward_toc.reward'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_welfare_misc_reward_toc.reward'/3}).
'tr_decode_repeated_add_elem_m_welfare_misc_reward_toc.reward'(Elem,
							       L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_welfare_level_toc.count[x]'/2}).
'tr_encode_m_welfare_level_toc.count[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_welfare_power_toc.count[x]'/2}).
'tr_encode_m_welfare_power_toc.count[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_welfare_misc_reward_toc.reward[x]'/2}).
'tr_encode_m_welfare_misc_reward_toc.reward[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_welfare_level_tos}, []},
     {{msg, m_welfare_level_toc},
      [#field{name = level, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []},
       #field{name = count, fnum = 2, rnum = 3,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_welfare_level_reward_tos},
      [#field{name = level, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_level_reward_toc},
      [#field{name = level, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_power_tos}, []},
     {{msg, m_welfare_power_toc},
      [#field{name = power, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []},
       #field{name = count, fnum = 2, rnum = 3,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_welfare_power_reward_tos},
      [#field{name = power, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_power_reward_toc},
      [#field{name = power, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_online_tos}, []},
     {{msg, m_welfare_online_toc},
      [#field{name = ids, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []},
       #field{name = online_time, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_welfare_online_reward_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_online_reward_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_sign_tos}, []},
     {{msg, m_welfare_sign_toc},
      [#field{name = signs, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = max_days, fnum = 2, rnum = 3,
	      type = int32, occurrence = optional, opts = []},
       #field{name = count, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = is_sign, fnum = 4, rnum = 5, type = bool,
	      occurrence = optional, opts = []}]},
     {{msg, m_welfare_sign_reward_tos}, []},
     {{msg, m_welfare_sign_reward_toc}, []},
     {{msg, m_welfare_grail_tos}, []},
     {{msg, m_welfare_grail_toc},
      [#field{name = count, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_grail_reward_tos}, []},
     {{msg, m_welfare_grail_reward_toc}, []},
     {{msg, m_welfare_notice_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_notice_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = is_get, fnum = 2, rnum = 3, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_notice_reward_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_notice_reward_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_res_tos}, []},
     {{msg, m_welfare_res_toc},
      [#field{name = is_get, fnum = 1, rnum = 2, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_res_reward_tos}, []},
     {{msg, m_welfare_res_reward_toc}, []},
     {{msg, m_welfare_giftcode_tos},
      [#field{name = code, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_giftcode_toc}, []},
     {{msg, m_welfare_misc_tos}, []},
     {{msg, m_welfare_misc_toc},
      [#field{name = welfares, fnum = 1, rnum = 2,
	      type = {msg, p_welfare_misc}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_welfare_misc_reward_tos},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_misc_reward_toc},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 2, rnum = 3,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_welfare_online2_tos}, []},
     {{msg, m_welfare_online2_toc},
      [#field{name = ids, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []},
       #field{name = online_time, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_welfare_online2_reward_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_online2_reward_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_welfare_misc},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = is_open, fnum = 2, rnum = 3, type = bool,
	      occurrence = required, opts = []},
       #field{name = is_get, fnum = 3, rnum = 4, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, m_welfare_login_reward_info_tos}, []},
     {{msg, m_welfare_login_reward_info_toc},
      [#field{name = reward_list, fnum = 1, rnum = 2,
	      type = int32, occurrence = repeated, opts = []}]},
     {{msg, m_welfare_get_login_reward_tos},
      [#field{name = reward_list, fnum = 1, rnum = 2,
	      type = int32, occurrence = repeated, opts = []}]},
     {{msg, m_welfare_get_login_reward_toc},
      [#field{name = res, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_welfare_level_tos, m_welfare_level_toc,
     m_welfare_level_reward_tos, m_welfare_level_reward_toc,
     m_welfare_power_tos, m_welfare_power_toc,
     m_welfare_power_reward_tos, m_welfare_power_reward_toc,
     m_welfare_online_tos, m_welfare_online_toc,
     m_welfare_online_reward_tos,
     m_welfare_online_reward_toc, m_welfare_sign_tos,
     m_welfare_sign_toc, m_welfare_sign_reward_tos,
     m_welfare_sign_reward_toc, m_welfare_grail_tos,
     m_welfare_grail_toc, m_welfare_grail_reward_tos,
     m_welfare_grail_reward_toc, m_welfare_notice_tos,
     m_welfare_notice_toc, m_welfare_notice_reward_tos,
     m_welfare_notice_reward_toc, m_welfare_res_tos,
     m_welfare_res_toc, m_welfare_res_reward_tos,
     m_welfare_res_reward_toc, m_welfare_giftcode_tos,
     m_welfare_giftcode_toc, m_welfare_misc_tos,
     m_welfare_misc_toc, m_welfare_misc_reward_tos,
     m_welfare_misc_reward_toc, m_welfare_online2_tos,
     m_welfare_online2_toc, m_welfare_online2_reward_tos,
     m_welfare_online2_reward_toc, p_welfare_misc,
     m_welfare_login_reward_info_tos,
     m_welfare_login_reward_info_toc,
     m_welfare_get_login_reward_tos,
     m_welfare_get_login_reward_toc].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_welfare_level_tos, m_welfare_level_toc,
     m_welfare_level_reward_tos, m_welfare_level_reward_toc,
     m_welfare_power_tos, m_welfare_power_toc,
     m_welfare_power_reward_tos, m_welfare_power_reward_toc,
     m_welfare_online_tos, m_welfare_online_toc,
     m_welfare_online_reward_tos,
     m_welfare_online_reward_toc, m_welfare_sign_tos,
     m_welfare_sign_toc, m_welfare_sign_reward_tos,
     m_welfare_sign_reward_toc, m_welfare_grail_tos,
     m_welfare_grail_toc, m_welfare_grail_reward_tos,
     m_welfare_grail_reward_toc, m_welfare_notice_tos,
     m_welfare_notice_toc, m_welfare_notice_reward_tos,
     m_welfare_notice_reward_toc, m_welfare_res_tos,
     m_welfare_res_toc, m_welfare_res_reward_tos,
     m_welfare_res_reward_toc, m_welfare_giftcode_tos,
     m_welfare_giftcode_toc, m_welfare_misc_tos,
     m_welfare_misc_toc, m_welfare_misc_reward_tos,
     m_welfare_misc_reward_toc, m_welfare_online2_tos,
     m_welfare_online2_toc, m_welfare_online2_reward_tos,
     m_welfare_online2_reward_toc, p_welfare_misc,
     m_welfare_login_reward_info_tos,
     m_welfare_login_reward_info_toc,
     m_welfare_get_login_reward_tos,
     m_welfare_get_login_reward_toc].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_welfare_level_tos) -> [];
find_msg_def(m_welfare_level_toc) ->
    [#field{name = level, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []},
     #field{name = count, fnum = 2, rnum = 3,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_welfare_level_reward_tos) ->
    [#field{name = level, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_level_reward_toc) ->
    [#field{name = level, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_power_tos) -> [];
find_msg_def(m_welfare_power_toc) ->
    [#field{name = power, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []},
     #field{name = count, fnum = 2, rnum = 3,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_welfare_power_reward_tos) ->
    [#field{name = power, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_power_reward_toc) ->
    [#field{name = power, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_online_tos) -> [];
find_msg_def(m_welfare_online_toc) ->
    [#field{name = ids, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []},
     #field{name = online_time, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_welfare_online_reward_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_online_reward_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_sign_tos) -> [];
find_msg_def(m_welfare_sign_toc) ->
    [#field{name = signs, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = max_days, fnum = 2, rnum = 3,
	    type = int32, occurrence = optional, opts = []},
     #field{name = count, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = is_sign, fnum = 4, rnum = 5, type = bool,
	    occurrence = optional, opts = []}];
find_msg_def(m_welfare_sign_reward_tos) -> [];
find_msg_def(m_welfare_sign_reward_toc) -> [];
find_msg_def(m_welfare_grail_tos) -> [];
find_msg_def(m_welfare_grail_toc) ->
    [#field{name = count, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_grail_reward_tos) -> [];
find_msg_def(m_welfare_grail_reward_toc) -> [];
find_msg_def(m_welfare_notice_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_notice_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = is_get, fnum = 2, rnum = 3, type = bool,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_notice_reward_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_notice_reward_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_res_tos) -> [];
find_msg_def(m_welfare_res_toc) ->
    [#field{name = is_get, fnum = 1, rnum = 2, type = bool,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_res_reward_tos) -> [];
find_msg_def(m_welfare_res_reward_toc) -> [];
find_msg_def(m_welfare_giftcode_tos) ->
    [#field{name = code, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_giftcode_toc) -> [];
find_msg_def(m_welfare_misc_tos) -> [];
find_msg_def(m_welfare_misc_toc) ->
    [#field{name = welfares, fnum = 1, rnum = 2,
	    type = {msg, p_welfare_misc}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_welfare_misc_reward_tos) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_misc_reward_toc) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 2, rnum = 3,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_welfare_online2_tos) -> [];
find_msg_def(m_welfare_online2_toc) ->
    [#field{name = ids, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []},
     #field{name = online_time, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_welfare_online2_reward_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_online2_reward_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_welfare_misc) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = is_open, fnum = 2, rnum = 3, type = bool,
	    occurrence = required, opts = []},
     #field{name = is_get, fnum = 3, rnum = 4, type = bool,
	    occurrence = required, opts = []}];
find_msg_def(m_welfare_login_reward_info_tos) -> [];
find_msg_def(m_welfare_login_reward_info_toc) ->
    [#field{name = reward_list, fnum = 1, rnum = 2,
	    type = int32, occurrence = repeated, opts = []}];
find_msg_def(m_welfare_get_login_reward_tos) ->
    [#field{name = reward_list, fnum = 1, rnum = 2,
	    type = int32, occurrence = repeated, opts = []}];
find_msg_def(m_welfare_get_login_reward_toc) ->
    [#field{name = res, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
