%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1604_candyroom).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1604_candyroom.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_candyroom_info_tos() :: #m_candyroom_info_tos{}.

-type m_candyroom_info_toc() :: #m_candyroom_info_toc{}.

-type m_candyroom_rank_tos() :: #m_candyroom_rank_tos{}.

-type m_candyroom_rank_toc() :: #m_candyroom_rank_toc{}.

-type m_candyroom_gift_info_tos() :: #m_candyroom_gift_info_tos{}.

-type m_candyroom_gift_info_toc() :: #m_candyroom_gift_info_toc{}.

-type m_candyroom_send_gift_tos() :: #m_candyroom_send_gift_tos{}.

-type m_candyroom_send_gift_toc() :: #m_candyroom_send_gift_toc{}.

-type m_candyroom_receive_gift_toc() :: #m_candyroom_receive_gift_toc{}.

-type m_candyroom_buy_tos() :: #m_candyroom_buy_tos{}.

-type m_candyroom_buy_toc() :: #m_candyroom_buy_toc{}.

-type m_candyroom_gift_log_tos() :: #m_candyroom_gift_log_tos{}.

-type m_candyroom_gift_log_toc() :: #m_candyroom_gift_log_toc{}.

-type m_candyroom_over_toc() :: #m_candyroom_over_toc{}.

-type p_candyroom_rank() :: #p_candyroom_rank{}.

-type p_candyroom_log() :: #p_candyroom_log{}.

-export_type(['m_candyroom_info_tos'/0, 'm_candyroom_info_toc'/0, 'm_candyroom_rank_tos'/0, 'm_candyroom_rank_toc'/0, 'm_candyroom_gift_info_tos'/0, 'm_candyroom_gift_info_toc'/0, 'm_candyroom_send_gift_tos'/0, 'm_candyroom_send_gift_toc'/0, 'm_candyroom_receive_gift_toc'/0, 'm_candyroom_buy_tos'/0, 'm_candyroom_buy_toc'/0, 'm_candyroom_gift_log_tos'/0, 'm_candyroom_gift_log_toc'/0, 'm_candyroom_over_toc'/0, 'p_candyroom_rank'/0, 'p_candyroom_log'/0]).

-spec encode_msg(#m_candyroom_info_tos{} | #m_candyroom_info_toc{} | #m_candyroom_rank_tos{} | #m_candyroom_rank_toc{} | #m_candyroom_gift_info_tos{} | #m_candyroom_gift_info_toc{} | #m_candyroom_send_gift_tos{} | #m_candyroom_send_gift_toc{} | #m_candyroom_receive_gift_toc{} | #m_candyroom_buy_tos{} | #m_candyroom_buy_toc{} | #m_candyroom_gift_log_tos{} | #m_candyroom_gift_log_toc{} | #m_candyroom_over_toc{} | #p_candyroom_rank{} | #p_candyroom_log{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_candyroom_info_tos{} | #m_candyroom_info_toc{} | #m_candyroom_rank_tos{} | #m_candyroom_rank_toc{} | #m_candyroom_gift_info_tos{} | #m_candyroom_gift_info_toc{} | #m_candyroom_send_gift_tos{} | #m_candyroom_send_gift_toc{} | #m_candyroom_receive_gift_toc{} | #m_candyroom_buy_tos{} | #m_candyroom_buy_toc{} | #m_candyroom_gift_log_tos{} | #m_candyroom_gift_log_toc{} | #m_candyroom_over_toc{} | #p_candyroom_rank{} | #p_candyroom_log{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_candyroom_info_tos{} | #m_candyroom_info_toc{} | #m_candyroom_rank_tos{} | #m_candyroom_rank_toc{} | #m_candyroom_gift_info_tos{} | #m_candyroom_gift_info_toc{} | #m_candyroom_send_gift_tos{} | #m_candyroom_send_gift_toc{} | #m_candyroom_receive_gift_toc{} | #m_candyroom_buy_tos{} | #m_candyroom_buy_toc{} | #m_candyroom_gift_log_tos{} | #m_candyroom_gift_log_toc{} | #m_candyroom_over_toc{} | #p_candyroom_rank{} | #p_candyroom_log{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_candyroom_info_tos ->
	  encode_msg_m_candyroom_info_tos(id(Msg, TrUserData),
					  TrUserData);
      m_candyroom_info_toc ->
	  encode_msg_m_candyroom_info_toc(id(Msg, TrUserData),
					  TrUserData);
      m_candyroom_rank_tos ->
	  encode_msg_m_candyroom_rank_tos(id(Msg, TrUserData),
					  TrUserData);
      m_candyroom_rank_toc ->
	  encode_msg_m_candyroom_rank_toc(id(Msg, TrUserData),
					  TrUserData);
      m_candyroom_gift_info_tos ->
	  encode_msg_m_candyroom_gift_info_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_candyroom_gift_info_toc ->
	  encode_msg_m_candyroom_gift_info_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_candyroom_send_gift_tos ->
	  encode_msg_m_candyroom_send_gift_tos(id(Msg,
						  TrUserData),
					       TrUserData);
      m_candyroom_send_gift_toc ->
	  encode_msg_m_candyroom_send_gift_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_candyroom_receive_gift_toc ->
	  encode_msg_m_candyroom_receive_gift_toc(id(Msg,
						     TrUserData),
						  TrUserData);
      m_candyroom_buy_tos ->
	  encode_msg_m_candyroom_buy_tos(id(Msg, TrUserData),
					 TrUserData);
      m_candyroom_buy_toc ->
	  encode_msg_m_candyroom_buy_toc(id(Msg, TrUserData),
					 TrUserData);
      m_candyroom_gift_log_tos ->
	  encode_msg_m_candyroom_gift_log_tos(id(Msg, TrUserData),
					      TrUserData);
      m_candyroom_gift_log_toc ->
	  encode_msg_m_candyroom_gift_log_toc(id(Msg, TrUserData),
					      TrUserData);
      m_candyroom_over_toc ->
	  encode_msg_m_candyroom_over_toc(id(Msg, TrUserData),
					  TrUserData);
      p_candyroom_rank ->
	  encode_msg_p_candyroom_rank(id(Msg, TrUserData),
				      TrUserData);
      p_candyroom_log ->
	  encode_msg_p_candyroom_log(id(Msg, TrUserData),
				     TrUserData)
    end.


encode_msg_m_candyroom_info_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_candyroom_info_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_info_toc(Msg, <<>>, TrUserData).


encode_msg_m_candyroom_info_toc(#m_candyroom_info_toc{activity_id
							  = F1,
						      etime = F2, exp = F3,
						      top = F4},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_fixed64(TrF3, <<B2/binary, 25>>, TrUserData)
	 end,
    if F4 == undefined -> B3;
       true ->
	   begin
	     TrF4 = id(F4, TrUserData),
	     e_mfield_m_candyroom_info_toc_top(TrF4,
					       <<B3/binary, 34>>, TrUserData)
	   end
    end.

encode_msg_m_candyroom_rank_tos(Msg, TrUserData) ->
    encode_msg_m_candyroom_rank_tos(Msg, <<>>, TrUserData).


encode_msg_m_candyroom_rank_tos(#m_candyroom_rank_tos{num
							  = F1},
				Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_candyroom_rank_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_rank_toc(Msg, <<>>, TrUserData).


encode_msg_m_candyroom_rank_toc(#m_candyroom_rank_toc{ranks
							  = F1},
				Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_candyroom_rank_toc_ranks(TrF1, Bin,
						TrUserData)
      end
    end.

encode_msg_m_candyroom_gift_info_tos(_Msg,
				     _TrUserData) ->
    <<>>.

encode_msg_m_candyroom_gift_info_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_gift_info_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_candyroom_gift_info_toc(#m_candyroom_gift_info_toc{num
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_candyroom_send_gift_tos(Msg, TrUserData) ->
    encode_msg_m_candyroom_send_gift_tos(Msg, <<>>,
					 TrUserData).


encode_msg_m_candyroom_send_gift_tos(#m_candyroom_send_gift_tos{id
								    = F1,
								gift_id = F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_candyroom_send_gift_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_send_gift_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_candyroom_send_gift_toc(#m_candyroom_send_gift_toc{num
								    = F1},
				     Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_candyroom_receive_gift_toc(_Msg,
					_TrUserData) ->
    <<>>.

encode_msg_m_candyroom_buy_tos(Msg, TrUserData) ->
    encode_msg_m_candyroom_buy_tos(Msg, <<>>, TrUserData).


encode_msg_m_candyroom_buy_tos(#m_candyroom_buy_tos{num
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_candyroom_buy_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_buy_toc(Msg, <<>>, TrUserData).


encode_msg_m_candyroom_buy_toc(#m_candyroom_buy_toc{num
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_candyroom_gift_log_tos(Msg, TrUserData) ->
    encode_msg_m_candyroom_gift_log_tos(Msg, <<>>,
					TrUserData).


encode_msg_m_candyroom_gift_log_tos(#m_candyroom_gift_log_tos{type
								  = F1},
				    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_candyroom_gift_log_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_gift_log_toc(Msg, <<>>,
					TrUserData).


encode_msg_m_candyroom_gift_log_toc(#m_candyroom_gift_log_toc{type
								  = F1,
							      logs = F2},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_candyroom_gift_log_toc_logs(TrF2, B1,
						   TrUserData)
      end
    end.

encode_msg_m_candyroom_over_toc(Msg, TrUserData) ->
    encode_msg_m_candyroom_over_toc(Msg, <<>>, TrUserData).


encode_msg_m_candyroom_over_toc(#m_candyroom_over_toc{rank
							  = F1,
						      exp = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_p_candyroom_rank(Msg, TrUserData) ->
    encode_msg_p_candyroom_rank(Msg, <<>>, TrUserData).


encode_msg_p_candyroom_rank(#p_candyroom_rank{rank = F1,
					      id = F2, name = F3, pop = F4},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_fixed64(TrF2, <<B1/binary, 17>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_p_candyroom_log(Msg, TrUserData) ->
    encode_msg_p_candyroom_log(Msg, <<>>, TrUserData).


encode_msg_p_candyroom_log(#p_candyroom_log{id = F1,
					    name = F2, num = F3},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

e_mfield_m_candyroom_info_toc_top(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_p_candyroom_rank(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_m_candyroom_rank_toc_ranks(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_p_candyroom_rank(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_candyroom_rank_toc_ranks([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_candyroom_rank_toc_ranks(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_m_candyroom_rank_toc_ranks(Rest, Bin3,
				       TrUserData);
e_field_m_candyroom_rank_toc_ranks([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_m_candyroom_gift_log_toc_logs(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_p_candyroom_log(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_candyroom_gift_log_toc_logs([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_candyroom_gift_log_toc_logs(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_m_candyroom_gift_log_toc_logs(Rest, Bin3,
					  TrUserData);
e_field_m_candyroom_gift_log_toc_logs([], Bin,
				      _TrUserData) ->
    Bin.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_candyroom_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_info_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_info_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_rank_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_rank_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_rank_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_rank_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_gift_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_gift_info_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_gift_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_gift_info_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_send_gift_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_send_gift_tos(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_send_gift_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_send_gift_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_receive_gift_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_receive_gift_toc(Bin,
					       TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_buy_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_buy_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_buy_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_buy_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_gift_log_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_gift_log_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_gift_log_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_gift_log_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_candyroom_over_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_candyroom_over_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_candyroom_rank, Bin, TrUserData) ->
    id(decode_msg_p_candyroom_rank(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_candyroom_log, Bin, TrUserData) ->
    id(decode_msg_p_candyroom_log(Bin, TrUserData),
       TrUserData).



decode_msg_m_candyroom_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_tos(Bin, 0, 0,
					    TrUserData).

dfp_read_field_def_m_candyroom_info_tos(<<>>, 0, 0,
					_) ->
    #m_candyroom_info_tos{};
dfp_read_field_def_m_candyroom_info_tos(Other, Z1, Z2,
					TrUserData) ->
    dg_read_field_def_m_candyroom_info_tos(Other, Z1, Z2,
					   TrUserData).

dg_read_field_def_m_candyroom_info_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_info_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
dg_read_field_def_m_candyroom_info_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_candyroom_info_tos(Rest, 0, 0,
					   TrUserData);
      1 ->
	  skip_64_m_candyroom_info_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_candyroom_info_tos(Rest, 0, 0,
						     TrUserData);
      3 ->
	  skip_group_m_candyroom_info_tos(Rest, Key bsr 3, 0,
					  TrUserData);
      5 ->
	  skip_32_m_candyroom_info_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_candyroom_info_tos(<<>>, 0, 0, _) ->
    #m_candyroom_info_tos{}.

skip_varint_m_candyroom_info_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    skip_varint_m_candyroom_info_tos(Rest, Z1, Z2,
				     TrUserData);
skip_varint_m_candyroom_info_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_tos(Rest, Z1, Z2,
					    TrUserData).

skip_length_delimited_m_candyroom_info_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_info_tos(Rest, N + 7,
					       X bsl N + Acc, TrUserData);
skip_length_delimited_m_candyroom_info_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_info_tos(Rest2, 0, 0,
					    TrUserData).

skip_group_m_candyroom_info_tos(Bin, FNum, Z2,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_info_tos(Rest, 0, Z2,
					    TrUserData).

skip_32_m_candyroom_info_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_tos(Rest, Z1, Z2,
					    TrUserData).

skip_64_m_candyroom_info_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_tos(Rest, Z1, Z2,
					    TrUserData).

decode_msg_m_candyroom_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_candyroom_info_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_m_candyroom_info_toc_activity_id(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData);
dfp_read_field_def_m_candyroom_info_toc(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_m_candyroom_info_toc_etime(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_candyroom_info_toc(<<25,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_m_candyroom_info_toc_exp(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_candyroom_info_toc(<<34,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					TrUserData) ->
    d_field_m_candyroom_info_toc_top(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_candyroom_info_toc(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, _) ->
    #m_candyroom_info_toc{activity_id = F@_1, etime = F@_2,
			  exp = F@_3, top = F@_4};
dfp_read_field_def_m_candyroom_info_toc(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_m_candyroom_info_toc(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_m_candyroom_info_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_info_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
dg_read_field_def_m_candyroom_info_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_info_toc_activity_id(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4,
						   TrUserData);
      16 ->
	  d_field_m_candyroom_info_toc_etime(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, TrUserData);
      25 ->
	  d_field_m_candyroom_info_toc_exp(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      34 ->
	  d_field_m_candyroom_info_toc_top(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_info_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_m_candyroom_info_toc(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_info_toc(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, TrUserData);
	    3 ->
		skip_group_m_candyroom_info_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4,
						TrUserData);
	    5 ->
		skip_32_m_candyroom_info_toc(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_info_toc(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, _) ->
    #m_candyroom_info_toc{activity_id = F@_1, etime = F@_2,
			  exp = F@_3, top = F@_4}.

d_field_m_candyroom_info_toc_activity_id(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 57 ->
    d_field_m_candyroom_info_toc_activity_id(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
d_field_m_candyroom_info_toc_activity_id(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, F@_3, F@_4,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_info_toc(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, F@_4,
					    TrUserData).

d_field_m_candyroom_info_toc_etime(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_info_toc_etime(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
d_field_m_candyroom_info_toc_etime(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_info_toc(RestF, 0, 0,
					    F@_1, NewFValue, F@_3, F@_4,
					    TrUserData).

d_field_m_candyroom_info_toc_exp(<<Value:64/little,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, _, F@_4, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, id(Value, TrUserData),
					    F@_4, TrUserData).

d_field_m_candyroom_info_toc_top(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_info_toc_top(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
d_field_m_candyroom_info_toc_top(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_candyroom_rank(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_candyroom_info_toc(RestF, 0, 0,
					    F@_1, F@_2, F@_3,
					    if Prev == undefined -> NewFValue;
					       true ->
						   merge_msg_p_candyroom_rank(Prev,
									      NewFValue,
									      TrUserData)
					    end,
					    TrUserData).

skip_varint_m_candyroom_info_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_m_candyroom_info_toc(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData);
skip_varint_m_candyroom_info_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_m_candyroom_info_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_info_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, TrUserData);
skip_length_delimited_m_candyroom_info_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_info_toc(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_group_m_candyroom_info_toc(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_info_toc(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_32_m_candyroom_info_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

skip_64_m_candyroom_info_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_candyroom_info_toc(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData).

decode_msg_m_candyroom_rank_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_tos(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_candyroom_rank_tos(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_rank_tos_num(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_candyroom_rank_tos(<<>>, 0, 0,
					F@_1, _) ->
    #m_candyroom_rank_tos{num = F@_1};
dfp_read_field_def_m_candyroom_rank_tos(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_rank_tos(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_m_candyroom_rank_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_rank_tos(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_candyroom_rank_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_rank_tos_num(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_rank_tos(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_m_candyroom_rank_tos(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_rank_tos(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_m_candyroom_rank_tos(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_m_candyroom_rank_tos(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_rank_tos(<<>>, 0, 0, F@_1,
				       _) ->
    #m_candyroom_rank_tos{num = F@_1}.

d_field_m_candyroom_rank_tos_num(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_rank_tos_num(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_rank_tos_num(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_rank_tos(RestF, 0, 0,
					    NewFValue, TrUserData).

skip_varint_m_candyroom_rank_tos(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_rank_tos(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_m_candyroom_rank_tos(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_m_candyroom_rank_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_rank_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_candyroom_rank_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_rank_tos(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_m_candyroom_rank_tos(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_rank_tos(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_m_candyroom_rank_tos(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_m_candyroom_rank_tos(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_tos(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_m_candyroom_rank_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_toc(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_m_candyroom_rank_toc(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_rank_toc_ranks(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_candyroom_rank_toc(<<>>, 0, 0, R1,
					TrUserData) ->
    #m_candyroom_rank_toc{ranks =
			      lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_candyroom_rank_toc(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_rank_toc(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_m_candyroom_rank_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_rank_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_candyroom_rank_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_candyroom_rank_toc_ranks(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_rank_toc(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_m_candyroom_rank_toc(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_rank_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_m_candyroom_rank_toc(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_m_candyroom_rank_toc(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_rank_toc(<<>>, 0, 0, R1,
				       TrUserData) ->
    #m_candyroom_rank_toc{ranks =
			      lists_reverse(R1, TrUserData)}.

d_field_m_candyroom_rank_toc_ranks(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_rank_toc_ranks(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_rank_toc_ranks(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_candyroom_rank(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_candyroom_rank_toc(RestF, 0, 0,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_m_candyroom_rank_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_rank_toc(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_m_candyroom_rank_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_m_candyroom_rank_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_rank_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_candyroom_rank_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_rank_toc(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_m_candyroom_rank_toc(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_rank_toc(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_m_candyroom_rank_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_m_candyroom_rank_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_rank_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_m_candyroom_gift_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_tos(Bin, 0, 0,
						 TrUserData).

dfp_read_field_def_m_candyroom_gift_info_tos(<<>>, 0, 0,
					     _) ->
    #m_candyroom_gift_info_tos{};
dfp_read_field_def_m_candyroom_gift_info_tos(Other, Z1,
					     Z2, TrUserData) ->
    dg_read_field_def_m_candyroom_gift_info_tos(Other, Z1,
						Z2, TrUserData).

dg_read_field_def_m_candyroom_gift_info_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_gift_info_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
dg_read_field_def_m_candyroom_gift_info_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_candyroom_gift_info_tos(Rest, 0, 0,
						TrUserData);
      1 ->
	  skip_64_m_candyroom_gift_info_tos(Rest, 0, 0,
					    TrUserData);
      2 ->
	  skip_length_delimited_m_candyroom_gift_info_tos(Rest, 0,
							  0, TrUserData);
      3 ->
	  skip_group_m_candyroom_gift_info_tos(Rest, Key bsr 3, 0,
					       TrUserData);
      5 ->
	  skip_32_m_candyroom_gift_info_tos(Rest, 0, 0,
					    TrUserData)
    end;
dg_read_field_def_m_candyroom_gift_info_tos(<<>>, 0, 0,
					    _) ->
    #m_candyroom_gift_info_tos{}.

skip_varint_m_candyroom_gift_info_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    skip_varint_m_candyroom_gift_info_tos(Rest, Z1, Z2,
					  TrUserData);
skip_varint_m_candyroom_gift_info_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_tos(Rest, Z1,
						 Z2, TrUserData).

skip_length_delimited_m_candyroom_gift_info_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_gift_info_tos(Rest,
						    N + 7, X bsl N + Acc,
						    TrUserData);
skip_length_delimited_m_candyroom_gift_info_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_gift_info_tos(Rest2, 0,
						 0, TrUserData).

skip_group_m_candyroom_gift_info_tos(Bin, FNum, Z2,
				     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_gift_info_tos(Rest, 0,
						 Z2, TrUserData).

skip_32_m_candyroom_gift_info_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_tos(Rest, Z1,
						 Z2, TrUserData).

skip_64_m_candyroom_gift_info_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_tos(Rest, Z1,
						 Z2, TrUserData).

decode_msg_m_candyroom_gift_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_candyroom_gift_info_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_gift_info_toc_num(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_candyroom_gift_info_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_candyroom_gift_info_toc{num = F@_1};
dfp_read_field_def_m_candyroom_gift_info_toc(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_gift_info_toc(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_candyroom_gift_info_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_gift_info_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_candyroom_gift_info_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_gift_info_toc_num(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_gift_info_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_candyroom_gift_info_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_gift_info_toc(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_candyroom_gift_info_toc(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_candyroom_gift_info_toc(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_gift_info_toc(<<>>, 0, 0,
					    F@_1, _) ->
    #m_candyroom_gift_info_toc{num = F@_1}.

d_field_m_candyroom_gift_info_toc_num(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_gift_info_toc_num(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_gift_info_toc_num(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_gift_info_toc(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_candyroom_gift_info_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_gift_info_toc(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_candyroom_gift_info_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_candyroom_gift_info_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_gift_info_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_candyroom_gift_info_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_gift_info_toc(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_candyroom_gift_info_toc(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_gift_info_toc(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_candyroom_gift_info_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_candyroom_gift_info_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_info_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_candyroom_send_gift_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_tos(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_candyroom_send_gift_tos(<<9,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_candyroom_send_gift_tos_id(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_m_candyroom_send_gift_tos(<<16,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_candyroom_send_gift_tos_gift_id(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_m_candyroom_send_gift_tos(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #m_candyroom_send_gift_tos{id = F@_1, gift_id = F@_2};
dfp_read_field_def_m_candyroom_send_gift_tos(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_candyroom_send_gift_tos(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_candyroom_send_gift_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_send_gift_tos(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_m_candyroom_send_gift_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_m_candyroom_send_gift_tos_id(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      16 ->
	  d_field_m_candyroom_send_gift_tos_gift_id(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_send_gift_tos(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_m_candyroom_send_gift_tos(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_send_gift_tos(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_m_candyroom_send_gift_tos(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_candyroom_send_gift_tos(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_send_gift_tos(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_candyroom_send_gift_tos{id = F@_1, gift_id = F@_2}.

d_field_m_candyroom_send_gift_tos_id(<<Value:64/little,
				       Rest/binary>>,
				     Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_tos(Rest, Z1,
						 Z2, id(Value, TrUserData),
						 F@_2, TrUserData).

d_field_m_candyroom_send_gift_tos_gift_id(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_send_gift_tos_gift_id(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_m_candyroom_send_gift_tos_gift_id(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_send_gift_tos(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_m_candyroom_send_gift_tos(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_candyroom_send_gift_tos(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_m_candyroom_send_gift_tos(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_tos(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_candyroom_send_gift_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_send_gift_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_m_candyroom_send_gift_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_send_gift_tos(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_m_candyroom_send_gift_tos(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_send_gift_tos(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_m_candyroom_send_gift_tos(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_tos(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_m_candyroom_send_gift_tos(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_tos(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_m_candyroom_send_gift_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_candyroom_send_gift_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_send_gift_toc_num(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_candyroom_send_gift_toc(<<>>, 0, 0,
					     F@_1, _) ->
    #m_candyroom_send_gift_toc{num = F@_1};
dfp_read_field_def_m_candyroom_send_gift_toc(Other, Z1,
					     Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_send_gift_toc(Other, Z1,
						Z2, F@_1, TrUserData).

dg_read_field_def_m_candyroom_send_gift_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_send_gift_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
dg_read_field_def_m_candyroom_send_gift_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_send_gift_toc_num(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_send_gift_toc(Rest, 0, 0, F@_1,
						      TrUserData);
	    1 ->
		skip_64_m_candyroom_send_gift_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_send_gift_toc(Rest, 0,
								0, F@_1,
								TrUserData);
	    3 ->
		skip_group_m_candyroom_send_gift_toc(Rest, Key bsr 3, 0,
						     F@_1, TrUserData);
	    5 ->
		skip_32_m_candyroom_send_gift_toc(Rest, 0, 0, F@_1,
						  TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_send_gift_toc(<<>>, 0, 0,
					    F@_1, _) ->
    #m_candyroom_send_gift_toc{num = F@_1}.

d_field_m_candyroom_send_gift_toc_num(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_send_gift_toc_num(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_send_gift_toc_num(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_send_gift_toc(RestF, 0,
						 0, NewFValue, TrUserData).

skip_varint_m_candyroom_send_gift_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_send_gift_toc(Rest, Z1, Z2,
					  F@_1, TrUserData);
skip_varint_m_candyroom_send_gift_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_length_delimited_m_candyroom_send_gift_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_send_gift_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
skip_length_delimited_m_candyroom_send_gift_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_send_gift_toc(Rest2, 0,
						 0, F@_1, TrUserData).

skip_group_m_candyroom_send_gift_toc(Bin, FNum, Z2,
				     F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_send_gift_toc(Rest, 0,
						 Z2, F@_1, TrUserData).

skip_32_m_candyroom_send_gift_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

skip_64_m_candyroom_send_gift_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_send_gift_toc(Rest, Z1,
						 Z2, F@_1, TrUserData).

decode_msg_m_candyroom_receive_gift_toc(Bin,
					TrUserData) ->
    dfp_read_field_def_m_candyroom_receive_gift_toc(Bin, 0,
						    0, TrUserData).

dfp_read_field_def_m_candyroom_receive_gift_toc(<<>>, 0,
						0, _) ->
    #m_candyroom_receive_gift_toc{};
dfp_read_field_def_m_candyroom_receive_gift_toc(Other,
						Z1, Z2, TrUserData) ->
    dg_read_field_def_m_candyroom_receive_gift_toc(Other,
						   Z1, Z2, TrUserData).

dg_read_field_def_m_candyroom_receive_gift_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_receive_gift_toc(Rest,
						   N + 7, X bsl N + Acc,
						   TrUserData);
dg_read_field_def_m_candyroom_receive_gift_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_candyroom_receive_gift_toc(Rest, 0, 0,
						   TrUserData);
      1 ->
	  skip_64_m_candyroom_receive_gift_toc(Rest, 0, 0,
					       TrUserData);
      2 ->
	  skip_length_delimited_m_candyroom_receive_gift_toc(Rest,
							     0, 0, TrUserData);
      3 ->
	  skip_group_m_candyroom_receive_gift_toc(Rest, Key bsr 3,
						  0, TrUserData);
      5 ->
	  skip_32_m_candyroom_receive_gift_toc(Rest, 0, 0,
					       TrUserData)
    end;
dg_read_field_def_m_candyroom_receive_gift_toc(<<>>, 0,
					       0, _) ->
    #m_candyroom_receive_gift_toc{}.

skip_varint_m_candyroom_receive_gift_toc(<<1:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    skip_varint_m_candyroom_receive_gift_toc(Rest, Z1, Z2,
					     TrUserData);
skip_varint_m_candyroom_receive_gift_toc(<<0:1, _:7,
					   Rest/binary>>,
					 Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_receive_gift_toc(Rest,
						    Z1, Z2, TrUserData).

skip_length_delimited_m_candyroom_receive_gift_toc(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_receive_gift_toc(Rest,
						       N + 7, X bsl N + Acc,
						       TrUserData);
skip_length_delimited_m_candyroom_receive_gift_toc(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_receive_gift_toc(Rest2,
						    0, 0, TrUserData).

skip_group_m_candyroom_receive_gift_toc(Bin, FNum, Z2,
					TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_receive_gift_toc(Rest, 0,
						    Z2, TrUserData).

skip_32_m_candyroom_receive_gift_toc(<<_:32,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_receive_gift_toc(Rest,
						    Z1, Z2, TrUserData).

skip_64_m_candyroom_receive_gift_toc(<<_:64,
				       Rest/binary>>,
				     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_candyroom_receive_gift_toc(Rest,
						    Z1, Z2, TrUserData).

decode_msg_m_candyroom_buy_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_candyroom_buy_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_buy_tos_num(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_candyroom_buy_tos(<<>>, 0, 0, F@_1,
				       _) ->
    #m_candyroom_buy_tos{num = F@_1};
dfp_read_field_def_m_candyroom_buy_tos(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_buy_tos(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_candyroom_buy_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_buy_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_candyroom_buy_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_buy_tos_num(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_buy_tos(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_candyroom_buy_tos(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_buy_tos(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_candyroom_buy_tos(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_candyroom_buy_tos(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_buy_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_candyroom_buy_tos{num = F@_1}.

d_field_m_candyroom_buy_tos_num(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_buy_tos_num(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_buy_tos_num(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_buy_tos(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_candyroom_buy_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_buy_tos(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_candyroom_buy_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_candyroom_buy_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_buy_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_candyroom_buy_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_buy_tos(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_candyroom_buy_tos(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_buy_tos(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_candyroom_buy_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_candyroom_buy_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_tos(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_candyroom_buy_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_candyroom_buy_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_buy_toc_num(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_candyroom_buy_toc(<<>>, 0, 0, F@_1,
				       _) ->
    #m_candyroom_buy_toc{num = F@_1};
dfp_read_field_def_m_candyroom_buy_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_buy_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_candyroom_buy_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_buy_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_candyroom_buy_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_buy_toc_num(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_buy_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_candyroom_buy_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_buy_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_candyroom_buy_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_candyroom_buy_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_buy_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_candyroom_buy_toc{num = F@_1}.

d_field_m_candyroom_buy_toc_num(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_buy_toc_num(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_buy_toc_num(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_buy_toc(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_candyroom_buy_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_buy_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_candyroom_buy_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_candyroom_buy_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_buy_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_candyroom_buy_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_buy_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_candyroom_buy_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_buy_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_candyroom_buy_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_candyroom_buy_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_buy_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_candyroom_gift_log_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_tos(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_candyroom_gift_log_tos(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_candyroom_gift_log_tos_type(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_candyroom_gift_log_tos(<<>>, 0, 0,
					    F@_1, _) ->
    #m_candyroom_gift_log_tos{type = F@_1};
dfp_read_field_def_m_candyroom_gift_log_tos(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_candyroom_gift_log_tos(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_m_candyroom_gift_log_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_gift_log_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_candyroom_gift_log_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_gift_log_tos_type(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_gift_log_tos(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_m_candyroom_gift_log_tos(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_gift_log_tos(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_m_candyroom_gift_log_tos(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_m_candyroom_gift_log_tos(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_gift_log_tos(<<>>, 0, 0,
					   F@_1, _) ->
    #m_candyroom_gift_log_tos{type = F@_1}.

d_field_m_candyroom_gift_log_tos_type(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_gift_log_tos_type(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_candyroom_gift_log_tos_type(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_gift_log_tos(RestF, 0, 0,
						NewFValue, TrUserData).

skip_varint_m_candyroom_gift_log_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_candyroom_gift_log_tos(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_m_candyroom_gift_log_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_m_candyroom_gift_log_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_gift_log_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_m_candyroom_gift_log_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_gift_log_tos(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_m_candyroom_gift_log_tos(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_gift_log_tos(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_m_candyroom_gift_log_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_m_candyroom_gift_log_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_tos(Rest, Z1,
						Z2, F@_1, TrUserData).

decode_msg_m_candyroom_gift_log_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_toc(Bin, 0, 0,
						id(undefined, TrUserData),
						id([], TrUserData), TrUserData).

dfp_read_field_def_m_candyroom_gift_log_toc(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_candyroom_gift_log_toc_type(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_candyroom_gift_log_toc(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_candyroom_gift_log_toc_logs(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_candyroom_gift_log_toc(<<>>, 0, 0,
					    F@_1, R1, TrUserData) ->
    #m_candyroom_gift_log_toc{type = F@_1,
			      logs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_candyroom_gift_log_toc(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_candyroom_gift_log_toc(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_candyroom_gift_log_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_gift_log_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_m_candyroom_gift_log_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_gift_log_toc_type(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  d_field_m_candyroom_gift_log_toc_logs(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_gift_log_toc(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_m_candyroom_gift_log_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_gift_log_toc(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_m_candyroom_gift_log_toc(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_candyroom_gift_log_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_gift_log_toc(<<>>, 0, 0,
					   F@_1, R1, TrUserData) ->
    #m_candyroom_gift_log_toc{type = F@_1,
			      logs = lists_reverse(R1, TrUserData)}.

d_field_m_candyroom_gift_log_toc_type(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_gift_log_toc_type(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_candyroom_gift_log_toc_type(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_gift_log_toc(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_m_candyroom_gift_log_toc_logs(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_gift_log_toc_logs(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_candyroom_gift_log_toc_logs(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_candyroom_log(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_candyroom_gift_log_toc(RestF, 0, 0,
						F@_1,
						cons(NewFValue, Prev,
						     TrUserData),
						TrUserData).

skip_varint_m_candyroom_gift_log_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_candyroom_gift_log_toc(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_m_candyroom_gift_log_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_candyroom_gift_log_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_gift_log_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_m_candyroom_gift_log_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_gift_log_toc(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_m_candyroom_gift_log_toc(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_gift_log_toc(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_m_candyroom_gift_log_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_m_candyroom_gift_log_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_gift_log_toc(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_m_candyroom_over_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_candyroom_over_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_candyroom_over_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_candyroom_over_toc_rank(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_candyroom_over_toc(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_candyroom_over_toc_exp(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_m_candyroom_over_toc(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #m_candyroom_over_toc{rank = F@_1, exp = F@_2};
dfp_read_field_def_m_candyroom_over_toc(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_candyroom_over_toc(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_m_candyroom_over_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_candyroom_over_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_m_candyroom_over_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_candyroom_over_toc_rank(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_m_candyroom_over_toc_exp(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_candyroom_over_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_m_candyroom_over_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_candyroom_over_toc(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_m_candyroom_over_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_candyroom_over_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_candyroom_over_toc(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #m_candyroom_over_toc{rank = F@_1, exp = F@_2}.

d_field_m_candyroom_over_toc_rank(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_over_toc_rank(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_candyroom_over_toc_rank(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_over_toc(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_m_candyroom_over_toc_exp(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_candyroom_over_toc_exp(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_candyroom_over_toc_exp(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_candyroom_over_toc(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_m_candyroom_over_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_candyroom_over_toc(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_m_candyroom_over_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_over_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_m_candyroom_over_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_candyroom_over_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_m_candyroom_over_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_candyroom_over_toc(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_m_candyroom_over_toc(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_candyroom_over_toc(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_m_candyroom_over_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_over_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_m_candyroom_over_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_candyroom_over_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_p_candyroom_rank(Bin, TrUserData) ->
    dfp_read_field_def_p_candyroom_rank(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_candyroom_rank(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_p_candyroom_rank_rank(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_p_candyroom_rank(<<17, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_p_candyroom_rank_id(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData);
dfp_read_field_def_p_candyroom_rank(<<26, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_p_candyroom_rank_name(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, TrUserData);
dfp_read_field_def_p_candyroom_rank(<<32, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    d_field_p_candyroom_rank_pop(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
dfp_read_field_def_p_candyroom_rank(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, _) ->
    #p_candyroom_rank{rank = F@_1, id = F@_2, name = F@_3,
		      pop = F@_4};
dfp_read_field_def_p_candyroom_rank(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_candyroom_rank(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_p_candyroom_rank(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_candyroom_rank(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData);
dg_read_field_def_p_candyroom_rank(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_candyroom_rank_rank(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      17 ->
	  d_field_p_candyroom_rank_id(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, TrUserData);
      26 ->
	  d_field_p_candyroom_rank_name(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, TrUserData);
      32 ->
	  d_field_p_candyroom_rank_pop(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_candyroom_rank(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, TrUserData);
	    1 ->
		skip_64_p_candyroom_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData);
	    2 ->
		skip_length_delimited_p_candyroom_rank(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4,
						       TrUserData);
	    3 ->
		skip_group_p_candyroom_rank(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_p_candyroom_rank(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, TrUserData)
	  end
    end;
dg_read_field_def_p_candyroom_rank(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, _) ->
    #p_candyroom_rank{rank = F@_1, id = F@_2, name = F@_3,
		      pop = F@_4}.

d_field_p_candyroom_rank_rank(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_candyroom_rank_rank(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_p_candyroom_rank_rank(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_candyroom_rank(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4,
					TrUserData).

d_field_p_candyroom_rank_id(<<Value:64/little,
			      Rest/binary>>,
			    Z1, Z2, F@_1, _, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_candyroom_rank(Rest, Z1, Z2, F@_1,
					id(Value, TrUserData), F@_3, F@_4,
					TrUserData).

d_field_p_candyroom_rank_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_candyroom_rank_name(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
d_field_p_candyroom_rank_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_candyroom_rank(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, TrUserData).

d_field_p_candyroom_rank_pop(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_candyroom_rank_pop(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_candyroom_rank_pop(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_candyroom_rank(RestF, 0, 0, F@_1,
					F@_2, F@_3, NewFValue, TrUserData).

skip_varint_p_candyroom_rank(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_candyroom_rank(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData);
skip_varint_p_candyroom_rank(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_candyroom_rank(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_p_candyroom_rank(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData)
    when N < 57 ->
    skip_length_delimited_p_candyroom_rank(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
skip_length_delimited_p_candyroom_rank(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4,
				       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_candyroom_rank(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_group_p_candyroom_rank(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_candyroom_rank(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_32_p_candyroom_rank(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_candyroom_rank(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

skip_64_p_candyroom_rank(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_candyroom_rank(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData).

decode_msg_p_candyroom_log(Bin, TrUserData) ->
    dfp_read_field_def_p_candyroom_log(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_candyroom_log(<<9, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_candyroom_log_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_p_candyroom_log(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_candyroom_log_name(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_p_candyroom_log(<<24, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_candyroom_log_num(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_p_candyroom_log(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, _) ->
    #p_candyroom_log{id = F@_1, name = F@_2, num = F@_3};
dfp_read_field_def_p_candyroom_log(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData) ->
    dg_read_field_def_p_candyroom_log(Other, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

dg_read_field_def_p_candyroom_log(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_candyroom_log(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
dg_read_field_def_p_candyroom_log(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_candyroom_log_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      18 ->
	  d_field_p_candyroom_log_name(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      24 ->
	  d_field_p_candyroom_log_num(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_candyroom_log(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    1 ->
		skip_64_p_candyroom_log(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    2 ->
		skip_length_delimited_p_candyroom_log(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_p_candyroom_log(Rest, Key bsr 3, 0, F@_1,
					   F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_p_candyroom_log(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData)
	  end
    end;
dg_read_field_def_p_candyroom_log(<<>>, 0, 0, F@_1,
				  F@_2, F@_3, _) ->
    #p_candyroom_log{id = F@_1, name = F@_2, num = F@_3}.

d_field_p_candyroom_log_id(<<Value:64/little,
			     Rest/binary>>,
			   Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_candyroom_log(Rest, Z1, Z2,
				       id(Value, TrUserData), F@_2, F@_3,
				       TrUserData).

d_field_p_candyroom_log_name(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_candyroom_log_name(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_p_candyroom_log_name(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_candyroom_log(RestF, 0, 0, F@_1,
				       NewFValue, F@_3, TrUserData).

d_field_p_candyroom_log_num(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_candyroom_log_num(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_p_candyroom_log_num(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_candyroom_log(RestF, 0, 0, F@_1,
				       F@_2, NewFValue, TrUserData).

skip_varint_p_candyroom_log(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_candyroom_log(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
skip_varint_p_candyroom_log(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_candyroom_log(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_length_delimited_p_candyroom_log(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_candyroom_log(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
skip_length_delimited_p_candyroom_log(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_candyroom_log(Rest2, 0, 0, F@_1,
				       F@_2, F@_3, TrUserData).

skip_group_p_candyroom_log(Bin, FNum, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_candyroom_log(Rest, 0, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_32_p_candyroom_log(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_candyroom_log(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

skip_64_p_candyroom_log(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_candyroom_log(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_candyroom_info_tos ->
	  merge_msg_m_candyroom_info_tos(Prev, New, TrUserData);
      m_candyroom_info_toc ->
	  merge_msg_m_candyroom_info_toc(Prev, New, TrUserData);
      m_candyroom_rank_tos ->
	  merge_msg_m_candyroom_rank_tos(Prev, New, TrUserData);
      m_candyroom_rank_toc ->
	  merge_msg_m_candyroom_rank_toc(Prev, New, TrUserData);
      m_candyroom_gift_info_tos ->
	  merge_msg_m_candyroom_gift_info_tos(Prev, New,
					      TrUserData);
      m_candyroom_gift_info_toc ->
	  merge_msg_m_candyroom_gift_info_toc(Prev, New,
					      TrUserData);
      m_candyroom_send_gift_tos ->
	  merge_msg_m_candyroom_send_gift_tos(Prev, New,
					      TrUserData);
      m_candyroom_send_gift_toc ->
	  merge_msg_m_candyroom_send_gift_toc(Prev, New,
					      TrUserData);
      m_candyroom_receive_gift_toc ->
	  merge_msg_m_candyroom_receive_gift_toc(Prev, New,
						 TrUserData);
      m_candyroom_buy_tos ->
	  merge_msg_m_candyroom_buy_tos(Prev, New, TrUserData);
      m_candyroom_buy_toc ->
	  merge_msg_m_candyroom_buy_toc(Prev, New, TrUserData);
      m_candyroom_gift_log_tos ->
	  merge_msg_m_candyroom_gift_log_tos(Prev, New,
					     TrUserData);
      m_candyroom_gift_log_toc ->
	  merge_msg_m_candyroom_gift_log_toc(Prev, New,
					     TrUserData);
      m_candyroom_over_toc ->
	  merge_msg_m_candyroom_over_toc(Prev, New, TrUserData);
      p_candyroom_rank ->
	  merge_msg_p_candyroom_rank(Prev, New, TrUserData);
      p_candyroom_log ->
	  merge_msg_p_candyroom_log(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_candyroom_info_tos/3}).
merge_msg_m_candyroom_info_tos(_Prev, New,
			       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_candyroom_info_toc/3}).
merge_msg_m_candyroom_info_toc(#m_candyroom_info_toc{top
							 = PFtop},
			       #m_candyroom_info_toc{activity_id =
							 NFactivity_id,
						     etime = NFetime,
						     exp = NFexp, top = NFtop},
			       TrUserData) ->
    #m_candyroom_info_toc{activity_id = NFactivity_id,
			  etime = NFetime, exp = NFexp,
			  top =
			      if PFtop /= undefined, NFtop /= undefined ->
				     merge_msg_p_candyroom_rank(PFtop, NFtop,
								TrUserData);
				 PFtop == undefined -> NFtop;
				 NFtop == undefined -> PFtop
			      end}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_rank_tos/3}).
merge_msg_m_candyroom_rank_tos(#m_candyroom_rank_tos{},
			       #m_candyroom_rank_tos{num = NFnum}, _) ->
    #m_candyroom_rank_tos{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_rank_toc/3}).
merge_msg_m_candyroom_rank_toc(#m_candyroom_rank_toc{ranks
							 = PFranks},
			       #m_candyroom_rank_toc{ranks = NFranks},
			       TrUserData) ->
    #m_candyroom_rank_toc{ranks =
			      if PFranks /= undefined, NFranks /= undefined ->
				     'erlang_++'(PFranks, NFranks, TrUserData);
				 PFranks == undefined -> NFranks;
				 NFranks == undefined -> PFranks
			      end}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_gift_info_tos/3}).
merge_msg_m_candyroom_gift_info_tos(_Prev, New,
				    _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_candyroom_gift_info_toc/3}).
merge_msg_m_candyroom_gift_info_toc(#m_candyroom_gift_info_toc{},
				    #m_candyroom_gift_info_toc{num = NFnum},
				    _) ->
    #m_candyroom_gift_info_toc{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_send_gift_tos/3}).
merge_msg_m_candyroom_send_gift_tos(#m_candyroom_send_gift_tos{},
				    #m_candyroom_send_gift_tos{id = NFid,
							       gift_id =
								   NFgift_id},
				    _) ->
    #m_candyroom_send_gift_tos{id = NFid,
			       gift_id = NFgift_id}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_send_gift_toc/3}).
merge_msg_m_candyroom_send_gift_toc(#m_candyroom_send_gift_toc{},
				    #m_candyroom_send_gift_toc{num = NFnum},
				    _) ->
    #m_candyroom_send_gift_toc{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_receive_gift_toc/3}).
merge_msg_m_candyroom_receive_gift_toc(_Prev, New,
				       _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_candyroom_buy_tos/3}).
merge_msg_m_candyroom_buy_tos(#m_candyroom_buy_tos{},
			      #m_candyroom_buy_tos{num = NFnum}, _) ->
    #m_candyroom_buy_tos{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_buy_toc/3}).
merge_msg_m_candyroom_buy_toc(#m_candyroom_buy_toc{},
			      #m_candyroom_buy_toc{num = NFnum}, _) ->
    #m_candyroom_buy_toc{num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_gift_log_tos/3}).
merge_msg_m_candyroom_gift_log_tos(#m_candyroom_gift_log_tos{},
				   #m_candyroom_gift_log_tos{type = NFtype},
				   _) ->
    #m_candyroom_gift_log_tos{type = NFtype}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_gift_log_toc/3}).
merge_msg_m_candyroom_gift_log_toc(#m_candyroom_gift_log_toc{logs
								 = PFlogs},
				   #m_candyroom_gift_log_toc{type = NFtype,
							     logs = NFlogs},
				   TrUserData) ->
    #m_candyroom_gift_log_toc{type = NFtype,
			      logs =
				  if PFlogs /= undefined, NFlogs /= undefined ->
					 'erlang_++'(PFlogs, NFlogs,
						     TrUserData);
				     PFlogs == undefined -> NFlogs;
				     NFlogs == undefined -> PFlogs
				  end}.

-compile({nowarn_unused_function,merge_msg_m_candyroom_over_toc/3}).
merge_msg_m_candyroom_over_toc(#m_candyroom_over_toc{},
			       #m_candyroom_over_toc{rank = NFrank,
						     exp = NFexp},
			       _) ->
    #m_candyroom_over_toc{rank = NFrank, exp = NFexp}.

-compile({nowarn_unused_function,merge_msg_p_candyroom_rank/3}).
merge_msg_p_candyroom_rank(#p_candyroom_rank{},
			   #p_candyroom_rank{rank = NFrank, id = NFid,
					     name = NFname, pop = NFpop},
			   _) ->
    #p_candyroom_rank{rank = NFrank, id = NFid,
		      name = NFname, pop = NFpop}.

-compile({nowarn_unused_function,merge_msg_p_candyroom_log/3}).
merge_msg_p_candyroom_log(#p_candyroom_log{},
			  #p_candyroom_log{id = NFid, name = NFname,
					   num = NFnum},
			  _) ->
    #p_candyroom_log{id = NFid, name = NFname, num = NFnum}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_candyroom_info_tos ->
	  v_msg_m_candyroom_info_tos(Msg, [MsgName], TrUserData);
      m_candyroom_info_toc ->
	  v_msg_m_candyroom_info_toc(Msg, [MsgName], TrUserData);
      m_candyroom_rank_tos ->
	  v_msg_m_candyroom_rank_tos(Msg, [MsgName], TrUserData);
      m_candyroom_rank_toc ->
	  v_msg_m_candyroom_rank_toc(Msg, [MsgName], TrUserData);
      m_candyroom_gift_info_tos ->
	  v_msg_m_candyroom_gift_info_tos(Msg, [MsgName],
					  TrUserData);
      m_candyroom_gift_info_toc ->
	  v_msg_m_candyroom_gift_info_toc(Msg, [MsgName],
					  TrUserData);
      m_candyroom_send_gift_tos ->
	  v_msg_m_candyroom_send_gift_tos(Msg, [MsgName],
					  TrUserData);
      m_candyroom_send_gift_toc ->
	  v_msg_m_candyroom_send_gift_toc(Msg, [MsgName],
					  TrUserData);
      m_candyroom_receive_gift_toc ->
	  v_msg_m_candyroom_receive_gift_toc(Msg, [MsgName],
					     TrUserData);
      m_candyroom_buy_tos ->
	  v_msg_m_candyroom_buy_tos(Msg, [MsgName], TrUserData);
      m_candyroom_buy_toc ->
	  v_msg_m_candyroom_buy_toc(Msg, [MsgName], TrUserData);
      m_candyroom_gift_log_tos ->
	  v_msg_m_candyroom_gift_log_tos(Msg, [MsgName],
					 TrUserData);
      m_candyroom_gift_log_toc ->
	  v_msg_m_candyroom_gift_log_toc(Msg, [MsgName],
					 TrUserData);
      m_candyroom_over_toc ->
	  v_msg_m_candyroom_over_toc(Msg, [MsgName], TrUserData);
      p_candyroom_rank ->
	  v_msg_p_candyroom_rank(Msg, [MsgName], TrUserData);
      p_candyroom_log ->
	  v_msg_p_candyroom_log(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_candyroom_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_info_tos/3}).
v_msg_m_candyroom_info_tos(#m_candyroom_info_tos{},
			   _Path, _) ->
    ok;
v_msg_m_candyroom_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_info_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_info_toc/3}).
v_msg_m_candyroom_info_toc(#m_candyroom_info_toc{activity_id
						     = F1,
						 etime = F2, exp = F3,
						 top = F4},
			   Path, TrUserData) ->
    v_type_int32(F1, [activity_id | Path], TrUserData),
    v_type_int32(F2, [etime | Path], TrUserData),
    v_type_fixed64(F3, [exp | Path], TrUserData),
    if F4 == undefined -> ok;
       true ->
	   v_msg_p_candyroom_rank(F4, [top | Path], TrUserData)
    end,
    ok;
v_msg_m_candyroom_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_info_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_rank_tos/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_rank_tos/3}).
v_msg_m_candyroom_rank_tos(#m_candyroom_rank_tos{num =
						     F1},
			   Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_candyroom_rank_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_rank_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_rank_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_rank_toc/3}).
v_msg_m_candyroom_rank_toc(#m_candyroom_rank_toc{ranks =
						     F1},
			   Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_candyroom_rank(Elem, [ranks | Path],
				       TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_candyroom_rank}},
			 F1, [ranks | Path])
    end,
    ok;
v_msg_m_candyroom_rank_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_rank_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_gift_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_gift_info_tos/3}).
v_msg_m_candyroom_gift_info_tos(#m_candyroom_gift_info_tos{},
				_Path, _) ->
    ok;
v_msg_m_candyroom_gift_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_gift_info_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_gift_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_gift_info_toc/3}).
v_msg_m_candyroom_gift_info_toc(#m_candyroom_gift_info_toc{num
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_candyroom_gift_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_gift_info_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_send_gift_tos/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_send_gift_tos/3}).
v_msg_m_candyroom_send_gift_tos(#m_candyroom_send_gift_tos{id
							       = F1,
							   gift_id = F2},
				Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_int32(F2, [gift_id | Path], TrUserData),
    ok;
v_msg_m_candyroom_send_gift_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_send_gift_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_send_gift_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_send_gift_toc/3}).
v_msg_m_candyroom_send_gift_toc(#m_candyroom_send_gift_toc{num
							       = F1},
				Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_candyroom_send_gift_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_send_gift_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_receive_gift_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_receive_gift_toc/3}).
v_msg_m_candyroom_receive_gift_toc(#m_candyroom_receive_gift_toc{},
				   _Path, _) ->
    ok;
v_msg_m_candyroom_receive_gift_toc(X, Path,
				   _TrUserData) ->
    mk_type_error({expected_msg,
		   m_candyroom_receive_gift_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_buy_tos/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_buy_tos/3}).
v_msg_m_candyroom_buy_tos(#m_candyroom_buy_tos{num =
						   F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_candyroom_buy_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_buy_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_buy_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_buy_toc/3}).
v_msg_m_candyroom_buy_toc(#m_candyroom_buy_toc{num =
						   F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [num | Path], TrUserData), ok;
v_msg_m_candyroom_buy_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_buy_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_gift_log_tos/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_gift_log_tos/3}).
v_msg_m_candyroom_gift_log_tos(#m_candyroom_gift_log_tos{type
							     = F1},
			       Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData), ok;
v_msg_m_candyroom_gift_log_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_gift_log_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_gift_log_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_gift_log_toc/3}).
v_msg_m_candyroom_gift_log_toc(#m_candyroom_gift_log_toc{type
							     = F1,
							 logs = F2},
			       Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_candyroom_log(Elem, [logs | Path],
				      TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_candyroom_log}},
			 F2, [logs | Path])
    end,
    ok;
v_msg_m_candyroom_gift_log_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_gift_log_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_candyroom_over_toc/3}).
-dialyzer({nowarn_function,v_msg_m_candyroom_over_toc/3}).
v_msg_m_candyroom_over_toc(#m_candyroom_over_toc{rank =
						     F1,
						 exp = F2},
			   Path, TrUserData) ->
    v_type_int32(F1, [rank | Path], TrUserData),
    v_type_int32(F2, [exp | Path], TrUserData),
    ok;
v_msg_m_candyroom_over_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_candyroom_over_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_candyroom_rank/3}).
-dialyzer({nowarn_function,v_msg_p_candyroom_rank/3}).
v_msg_p_candyroom_rank(#p_candyroom_rank{rank = F1,
					 id = F2, name = F3, pop = F4},
		       Path, TrUserData) ->
    v_type_int32(F1, [rank | Path], TrUserData),
    v_type_fixed64(F2, [id | Path], TrUserData),
    v_type_string(F3, [name | Path], TrUserData),
    v_type_int32(F4, [pop | Path], TrUserData),
    ok;
v_msg_p_candyroom_rank(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_candyroom_rank}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_candyroom_log/3}).
-dialyzer({nowarn_function,v_msg_p_candyroom_log/3}).
v_msg_p_candyroom_log(#p_candyroom_log{id = F1,
				       name = F2, num = F3},
		      Path, TrUserData) ->
    v_type_fixed64(F1, [id | Path], TrUserData),
    v_type_string(F2, [name | Path], TrUserData),
    v_type_int32(F3, [num | Path], TrUserData),
    ok;
v_msg_p_candyroom_log(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_candyroom_log}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{msg, m_candyroom_info_tos}, []},
     {{msg, m_candyroom_info_toc},
      [#field{name = activity_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = etime, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = exp, fnum = 3, rnum = 4, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = top, fnum = 4, rnum = 5,
	      type = {msg, p_candyroom_rank}, occurrence = optional,
	      opts = []}]},
     {{msg, m_candyroom_rank_tos},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_rank_toc},
      [#field{name = ranks, fnum = 1, rnum = 2,
	      type = {msg, p_candyroom_rank}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_candyroom_gift_info_tos}, []},
     {{msg, m_candyroom_gift_info_toc},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_send_gift_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = gift_id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_send_gift_toc},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_receive_gift_toc}, []},
     {{msg, m_candyroom_buy_tos},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_buy_toc},
      [#field{name = num, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_gift_log_tos},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_candyroom_gift_log_toc},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = logs, fnum = 2, rnum = 3,
	      type = {msg, p_candyroom_log}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_candyroom_over_toc},
      [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = exp, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_candyroom_rank},
      [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []},
       #field{name = pop, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_candyroom_log},
      [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 2, rnum = 3, type = string,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_candyroom_info_tos, m_candyroom_info_toc,
     m_candyroom_rank_tos, m_candyroom_rank_toc,
     m_candyroom_gift_info_tos, m_candyroom_gift_info_toc,
     m_candyroom_send_gift_tos, m_candyroom_send_gift_toc,
     m_candyroom_receive_gift_toc, m_candyroom_buy_tos,
     m_candyroom_buy_toc, m_candyroom_gift_log_tos,
     m_candyroom_gift_log_toc, m_candyroom_over_toc,
     p_candyroom_rank, p_candyroom_log].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_candyroom_info_tos, m_candyroom_info_toc,
     m_candyroom_rank_tos, m_candyroom_rank_toc,
     m_candyroom_gift_info_tos, m_candyroom_gift_info_toc,
     m_candyroom_send_gift_tos, m_candyroom_send_gift_toc,
     m_candyroom_receive_gift_toc, m_candyroom_buy_tos,
     m_candyroom_buy_toc, m_candyroom_gift_log_tos,
     m_candyroom_gift_log_toc, m_candyroom_over_toc,
     p_candyroom_rank, p_candyroom_log].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_candyroom_info_tos) -> [];
find_msg_def(m_candyroom_info_toc) ->
    [#field{name = activity_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = etime, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = exp, fnum = 3, rnum = 4, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = top, fnum = 4, rnum = 5,
	    type = {msg, p_candyroom_rank}, occurrence = optional,
	    opts = []}];
find_msg_def(m_candyroom_rank_tos) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_rank_toc) ->
    [#field{name = ranks, fnum = 1, rnum = 2,
	    type = {msg, p_candyroom_rank}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_candyroom_gift_info_tos) -> [];
find_msg_def(m_candyroom_gift_info_toc) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_send_gift_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = gift_id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_send_gift_toc) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_receive_gift_toc) -> [];
find_msg_def(m_candyroom_buy_tos) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_buy_toc) ->
    [#field{name = num, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_gift_log_tos) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_candyroom_gift_log_toc) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = logs, fnum = 2, rnum = 3,
	    type = {msg, p_candyroom_log}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_candyroom_over_toc) ->
    [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = exp, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_candyroom_rank) ->
    [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []},
     #field{name = pop, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_candyroom_log) ->
    [#field{name = id, fnum = 1, rnum = 2, type = fixed64,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 2, rnum = 3, type = string,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
