%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1

-ifndef(pb_1702_richman).
-define(pb_1702_richman, true).

-define(pb_1702_richman_gpb_version, "4.5.1").

-ifndef('M_RICHMAN_INFO_TOS_PB_H').
-define('M_RICHMAN_INFO_TOS_PB_H', true).
-record(m_richman_info_tos,
        {
        }).
-endif.

-ifndef('M_RICHMAN_INFO_TOC_PB_H').
-define('M_RICHMAN_INFO_TOC_PB_H', true).
-record(m_richman_info_toc,
        {curr_round             :: integer(),       % = 1, 32 bits
         curr_grid              :: integer(),       % = 2, 32 bits
         lucky_fetch = []       :: [integer()] | undefined, % = 3, 32 bits
         round_fetch = []       :: [integer()] | undefined, % = 4, 32 bits
         lucky_round            :: integer(),       % = 5, 32 bits
         dice_gain = #{}        :: #{integer() := integer()} | undefined, % = 6
         dice_mend              :: integer(),       % = 7, 32 bits
         act_id                 :: integer()        % = 8, 32 bits
        }).
-endif.

-ifndef('M_RICHMAN_DICE_TOS_PB_H').
-define('M_RICHMAN_DICE_TOS_PB_H', true).
-record(m_richman_dice_tos,
        {type                   :: integer(),       % = 1, 32 bits
         point                  :: integer() | undefined % = 2, 32 bits
        }).
-endif.

-ifndef('M_RICHMAN_DICE_TOC_PB_H').
-define('M_RICHMAN_DICE_TOC_PB_H', true).
-record(m_richman_dice_toc,
        {type                   :: integer(),       % = 1, 32 bits
         point                  :: integer(),       % = 2, 32 bits
         result                 :: integer(),       % = 3, 32 bits
         reward = #{}           :: #{integer() := integer()} | undefined % = 4
        }).
-endif.

-ifndef('M_RICHMAN_FETCH_TOS_PB_H').
-define('M_RICHMAN_FETCH_TOS_PB_H', true).
-record(m_richman_fetch_tos,
        {round                  :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_RICHMAN_FETCH_TOC_PB_H').
-define('M_RICHMAN_FETCH_TOC_PB_H', true).
-record(m_richman_fetch_toc,
        {round                  :: integer(),       % = 1, 32 bits
         reward = #{}           :: #{integer() := integer()} | undefined % = 2
        }).
-endif.

-ifndef('M_RICHMAN_MEND_TOS_PB_H').
-define('M_RICHMAN_MEND_TOS_PB_H', true).
-record(m_richman_mend_tos,
        {
        }).
-endif.

-ifndef('M_RICHMAN_MEND_TOC_PB_H').
-define('M_RICHMAN_MEND_TOC_PB_H', true).
-record(m_richman_mend_toc,
        {num                    :: integer()        % = 1, 32 bits
        }).
-endif.

-ifndef('M_RICHMAN_REFRECH_TOC_PB_H').
-define('M_RICHMAN_REFRECH_TOC_PB_H', true).
-record(m_richman_refrech_toc,
        {
        }).
-endif.

-endif.
