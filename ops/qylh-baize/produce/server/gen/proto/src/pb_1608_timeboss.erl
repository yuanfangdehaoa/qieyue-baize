%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1608_timeboss).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1608_timeboss.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_timeboss_list_tos() :: #m_timeboss_list_tos{}.

-type m_timeboss_list_toc() :: #m_timeboss_list_toc{}.

-type m_timeboss_ranking_tos() :: #m_timeboss_ranking_tos{}.

-type m_timeboss_ranking_toc() :: #m_timeboss_ranking_toc{}.

-type m_timeboss_dice_toc() :: #m_timeboss_dice_toc{}.

-type m_timeboss_dicing_tos() :: #m_timeboss_dicing_tos{}.

-type m_timeboss_dicing_toc() :: #m_timeboss_dicing_toc{}.

-type m_timeboss_boxinfo_tos() :: #m_timeboss_boxinfo_tos{}.

-type m_timeboss_boxinfo_toc() :: #m_timeboss_boxinfo_toc{}.

-type m_timeboss_boxopen_tos() :: #m_timeboss_boxopen_tos{}.

-type m_timeboss_boxopen_toc() :: #m_timeboss_boxopen_toc{}.

-type m_timeboss_care_tos() :: #m_timeboss_care_tos{}.

-type m_timeboss_care_toc() :: #m_timeboss_care_toc{}.

-type m_timeboss_remind_toc() :: #m_timeboss_remind_toc{}.

-type m_timeboss_dropped_tos() :: #m_timeboss_dropped_tos{}.

-type m_timeboss_dropped_toc() :: #m_timeboss_dropped_toc{}.

-type p_timeboss() :: #p_timeboss{}.

-type p_timeboss_ranking() :: #p_timeboss_ranking{}.

-type p_timeboss_dropped() :: #p_timeboss_dropped{}.

-export_type(['m_timeboss_list_tos'/0, 'm_timeboss_list_toc'/0, 'm_timeboss_ranking_tos'/0, 'm_timeboss_ranking_toc'/0, 'm_timeboss_dice_toc'/0, 'm_timeboss_dicing_tos'/0, 'm_timeboss_dicing_toc'/0, 'm_timeboss_boxinfo_tos'/0, 'm_timeboss_boxinfo_toc'/0, 'm_timeboss_boxopen_tos'/0, 'm_timeboss_boxopen_toc'/0, 'm_timeboss_care_tos'/0, 'm_timeboss_care_toc'/0, 'm_timeboss_remind_toc'/0, 'm_timeboss_dropped_tos'/0, 'm_timeboss_dropped_toc'/0, 'p_timeboss'/0, 'p_timeboss_ranking'/0, 'p_timeboss_dropped'/0]).

-spec encode_msg(#m_timeboss_list_tos{} | #m_timeboss_list_toc{} | #m_timeboss_ranking_tos{} | #m_timeboss_ranking_toc{} | #m_timeboss_dice_toc{} | #m_timeboss_dicing_tos{} | #m_timeboss_dicing_toc{} | #m_timeboss_boxinfo_tos{} | #m_timeboss_boxinfo_toc{} | #m_timeboss_boxopen_tos{} | #m_timeboss_boxopen_toc{} | #m_timeboss_care_tos{} | #m_timeboss_care_toc{} | #m_timeboss_remind_toc{} | #m_timeboss_dropped_tos{} | #m_timeboss_dropped_toc{} | #p_timeboss{} | #p_timeboss_ranking{} | #p_timeboss_dropped{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_timeboss_list_tos{} | #m_timeboss_list_toc{} | #m_timeboss_ranking_tos{} | #m_timeboss_ranking_toc{} | #m_timeboss_dice_toc{} | #m_timeboss_dicing_tos{} | #m_timeboss_dicing_toc{} | #m_timeboss_boxinfo_tos{} | #m_timeboss_boxinfo_toc{} | #m_timeboss_boxopen_tos{} | #m_timeboss_boxopen_toc{} | #m_timeboss_care_tos{} | #m_timeboss_care_toc{} | #m_timeboss_remind_toc{} | #m_timeboss_dropped_tos{} | #m_timeboss_dropped_toc{} | #p_timeboss{} | #p_timeboss_ranking{} | #p_timeboss_dropped{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_timeboss_list_tos{} | #m_timeboss_list_toc{} | #m_timeboss_ranking_tos{} | #m_timeboss_ranking_toc{} | #m_timeboss_dice_toc{} | #m_timeboss_dicing_tos{} | #m_timeboss_dicing_toc{} | #m_timeboss_boxinfo_tos{} | #m_timeboss_boxinfo_toc{} | #m_timeboss_boxopen_tos{} | #m_timeboss_boxopen_toc{} | #m_timeboss_care_tos{} | #m_timeboss_care_toc{} | #m_timeboss_remind_toc{} | #m_timeboss_dropped_tos{} | #m_timeboss_dropped_toc{} | #p_timeboss{} | #p_timeboss_ranking{} | #p_timeboss_dropped{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_timeboss_list_tos ->
	  encode_msg_m_timeboss_list_tos(id(Msg, TrUserData),
					 TrUserData);
      m_timeboss_list_toc ->
	  encode_msg_m_timeboss_list_toc(id(Msg, TrUserData),
					 TrUserData);
      m_timeboss_ranking_tos ->
	  encode_msg_m_timeboss_ranking_tos(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_ranking_toc ->
	  encode_msg_m_timeboss_ranking_toc(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_dice_toc ->
	  encode_msg_m_timeboss_dice_toc(id(Msg, TrUserData),
					 TrUserData);
      m_timeboss_dicing_tos ->
	  encode_msg_m_timeboss_dicing_tos(id(Msg, TrUserData),
					   TrUserData);
      m_timeboss_dicing_toc ->
	  encode_msg_m_timeboss_dicing_toc(id(Msg, TrUserData),
					   TrUserData);
      m_timeboss_boxinfo_tos ->
	  encode_msg_m_timeboss_boxinfo_tos(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_boxinfo_toc ->
	  encode_msg_m_timeboss_boxinfo_toc(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_boxopen_tos ->
	  encode_msg_m_timeboss_boxopen_tos(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_boxopen_toc ->
	  encode_msg_m_timeboss_boxopen_toc(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_care_tos ->
	  encode_msg_m_timeboss_care_tos(id(Msg, TrUserData),
					 TrUserData);
      m_timeboss_care_toc ->
	  encode_msg_m_timeboss_care_toc(id(Msg, TrUserData),
					 TrUserData);
      m_timeboss_remind_toc ->
	  encode_msg_m_timeboss_remind_toc(id(Msg, TrUserData),
					   TrUserData);
      m_timeboss_dropped_tos ->
	  encode_msg_m_timeboss_dropped_tos(id(Msg, TrUserData),
					    TrUserData);
      m_timeboss_dropped_toc ->
	  encode_msg_m_timeboss_dropped_toc(id(Msg, TrUserData),
					    TrUserData);
      p_timeboss ->
	  encode_msg_p_timeboss(id(Msg, TrUserData), TrUserData);
      p_timeboss_ranking ->
	  encode_msg_p_timeboss_ranking(id(Msg, TrUserData),
					TrUserData);
      p_timeboss_dropped ->
	  encode_msg_p_timeboss_dropped(id(Msg, TrUserData),
					TrUserData)
    end.


encode_msg_m_timeboss_list_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_timeboss_list_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_list_toc(Msg, <<>>, TrUserData).


encode_msg_m_timeboss_list_toc(#m_timeboss_list_toc{bosses
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_timeboss_list_toc_bosses(TrF1, Bin,
						TrUserData)
      end
    end.

encode_msg_m_timeboss_ranking_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_timeboss_ranking_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_ranking_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_timeboss_ranking_toc(#m_timeboss_ranking_toc{ranking
							      = F1,
							  my_rank = F2,
							  my_dmg = F3},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_timeboss_ranking_toc_ranking(TrF1, Bin,
							 TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_timeboss_dice_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_dice_toc(Msg, <<>>, TrUserData).


encode_msg_m_timeboss_dice_toc(#m_timeboss_dice_toc{etime
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_timeboss_dicing_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_timeboss_dicing_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_dicing_toc(Msg, <<>>, TrUserData).


encode_msg_m_timeboss_dicing_toc(#m_timeboss_dicing_toc{score
							    = F1,
							highest = F2,
							owner = F3},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_m_timeboss_boxinfo_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_timeboss_boxinfo_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_boxinfo_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_timeboss_boxinfo_toc(#m_timeboss_boxinfo_toc{summoner
							      = F1,
							  suids = F2,
							  can_open = F3,
							  remain = F4,
							  boss_id = F5},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_timeboss_boxinfo_toc_summoner(TrF1, Bin,
							  TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_m_timeboss_boxinfo_toc_suids(TrF2, B1,
						       TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_m_timeboss_boxopen_tos(Msg, TrUserData) ->
    encode_msg_m_timeboss_boxopen_tos(Msg, <<>>,
				      TrUserData).


encode_msg_m_timeboss_boxopen_tos(#m_timeboss_boxopen_tos{type
							      = F1,
							  boss = F2,
							  times = F3},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_timeboss_boxopen_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_boxopen_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_timeboss_boxopen_toc(#m_timeboss_boxopen_toc{type
							      = F1,
							  reward = F2},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = 'tr_encode_m_timeboss_boxopen_toc.reward'(F2,
						       TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_timeboss_boxopen_toc_reward(TrF2, B1,
						   TrUserData)
      end
    end.

encode_msg_m_timeboss_care_tos(Msg, TrUserData) ->
    encode_msg_m_timeboss_care_tos(Msg, <<>>, TrUserData).


encode_msg_m_timeboss_care_tos(#m_timeboss_care_tos{id =
							F1,
						    op = F2, type = F3},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_timeboss_care_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_care_toc(Msg, <<>>, TrUserData).


encode_msg_m_timeboss_care_toc(#m_timeboss_care_toc{id =
							F1,
						    op = F2, type = F3},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_timeboss_remind_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_remind_toc(Msg, <<>>, TrUserData).


encode_msg_m_timeboss_remind_toc(#m_timeboss_remind_toc{id
							    = F1},
				 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_timeboss_dropped_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_timeboss_dropped_toc(Msg, TrUserData) ->
    encode_msg_m_timeboss_dropped_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_timeboss_dropped_toc(#m_timeboss_dropped_toc{logs
							      = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_timeboss_dropped_toc_logs(TrF1, Bin,
						 TrUserData)
      end
    end.

encode_msg_p_timeboss(Msg, TrUserData) ->
    encode_msg_p_timeboss(Msg, <<>>, TrUserData).


encode_msg_p_timeboss(#p_timeboss{id = F1, born = F2,
				  floor = F3, role = F4, box = F5, care = F6},
		      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_bool(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_bool(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_p_timeboss_ranking(Msg, TrUserData) ->
    encode_msg_p_timeboss_ranking(Msg, <<>>, TrUserData).


encode_msg_p_timeboss_ranking(#p_timeboss_ranking{rank =
						      F1,
						  is_team = F2, captain = F3,
						  name = F4, damage = F5,
						  team = F6},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_fixed64(TrF3, <<B2/binary, 25>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    if F6 == undefined -> B5;
       true ->
	   begin
	     TrF6 = id(F6, TrUserData),
	     e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	   end
    end.

encode_msg_p_timeboss_dropped(Msg, TrUserData) ->
    encode_msg_p_timeboss_dropped(Msg, <<>>, TrUserData).


encode_msg_p_timeboss_dropped(#p_timeboss_dropped{time =
						      F1,
						  scene = F2, picker_id = F3,
						  picker_name = F4, boss = F5,
						  item_id = F6, cache_id = F7},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_fixed64(TrF3, <<B2/binary, 25>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    begin
      TrF7 = id(F7, TrUserData),
      e_type_int32(TrF7, <<B6/binary, 56>>, TrUserData)
    end.

e_mfield_m_timeboss_list_toc_bosses(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_p_timeboss(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_timeboss_list_toc_bosses([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_timeboss_list_toc_bosses(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_m_timeboss_list_toc_bosses(Rest, Bin3,
				       TrUserData);
e_field_m_timeboss_list_toc_bosses([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_m_timeboss_ranking_toc_ranking(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_p_timeboss_ranking(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_timeboss_ranking_toc_ranking([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_timeboss_ranking_toc_ranking(id(Elem,
						      TrUserData),
						   Bin2, TrUserData),
    e_field_m_timeboss_ranking_toc_ranking(Rest, Bin3,
					   TrUserData);
e_field_m_timeboss_ranking_toc_ranking([], Bin,
				       _TrUserData) ->
    Bin.

e_field_m_timeboss_boxinfo_toc_summoner([Elem | Rest],
					Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_m_timeboss_boxinfo_toc_summoner(Rest, Bin3,
					    TrUserData);
e_field_m_timeboss_boxinfo_toc_summoner([], Bin,
					_TrUserData) ->
    Bin.

e_field_m_timeboss_boxinfo_toc_suids([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_timeboss_boxinfo_toc_suids(Rest, Bin3,
					 TrUserData);
e_field_m_timeboss_boxinfo_toc_suids([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_m_timeboss_boxopen_toc_reward(Msg, Bin,
				       TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_timeboss_boxopen_toc_reward([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_timeboss_boxopen_toc_reward('tr_encode_m_timeboss_boxopen_toc.reward[x]'(Elem,
											    TrUserData),
					       Bin2, TrUserData),
    e_field_m_timeboss_boxopen_toc_reward(Rest, Bin3,
					  TrUserData);
e_field_m_timeboss_boxopen_toc_reward([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_m_timeboss_dropped_toc_logs(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_p_timeboss_dropped(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_timeboss_dropped_toc_logs([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_timeboss_dropped_toc_logs(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_m_timeboss_dropped_toc_logs(Rest, Bin3,
					TrUserData);
e_field_m_timeboss_dropped_toc_logs([], Bin,
				    _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_timeboss_list_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_list_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_list_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_list_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_ranking_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_ranking_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_ranking_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_ranking_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_dice_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_dice_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_dicing_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_dicing_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_dicing_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_dicing_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_boxinfo_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_boxinfo_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_boxinfo_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_boxinfo_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_boxopen_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_boxopen_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_boxopen_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_boxopen_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_care_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_care_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_care_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_care_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_remind_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_remind_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_dropped_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_dropped_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_timeboss_dropped_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_timeboss_dropped_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_timeboss, Bin, TrUserData) ->
    id(decode_msg_p_timeboss(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_timeboss_ranking, Bin,
		  TrUserData) ->
    id(decode_msg_p_timeboss_ranking(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_timeboss_dropped, Bin,
		  TrUserData) ->
    id(decode_msg_p_timeboss_dropped(Bin, TrUserData),
       TrUserData).



decode_msg_m_timeboss_list_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_tos(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_timeboss_list_tos(<<>>, 0, 0, _) ->
    #m_timeboss_list_tos{};
dfp_read_field_def_m_timeboss_list_tos(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_timeboss_list_tos(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_timeboss_list_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_list_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_timeboss_list_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_timeboss_list_tos(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_timeboss_list_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_timeboss_list_tos(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_timeboss_list_tos(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_timeboss_list_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_timeboss_list_tos(<<>>, 0, 0, _) ->
    #m_timeboss_list_tos{}.

skip_varint_m_timeboss_list_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_timeboss_list_tos(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_timeboss_list_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_tos(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_timeboss_list_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_list_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_timeboss_list_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_list_tos(Rest2, 0, 0,
					   TrUserData).

skip_group_m_timeboss_list_tos(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_list_tos(Rest, 0, Z2,
					   TrUserData).

skip_32_m_timeboss_list_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_tos(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_timeboss_list_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_tos(Rest, Z1, Z2,
					   TrUserData).

decode_msg_m_timeboss_list_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_toc(Bin, 0, 0,
					   id([], TrUserData), TrUserData).

dfp_read_field_def_m_timeboss_list_toc(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_timeboss_list_toc_bosses(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_timeboss_list_toc(<<>>, 0, 0, R1,
				       TrUserData) ->
    #m_timeboss_list_toc{bosses =
			     lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_timeboss_list_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_timeboss_list_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_timeboss_list_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_list_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_timeboss_list_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_timeboss_list_toc_bosses(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_list_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_timeboss_list_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_list_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_timeboss_list_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_timeboss_list_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_list_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_timeboss_list_toc{bosses =
			     lists_reverse(R1, TrUserData)}.

d_field_m_timeboss_list_toc_bosses(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_list_toc_bosses(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_timeboss_list_toc_bosses(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_timeboss(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_timeboss_list_toc(RestF, 0, 0,
					   cons(NewFValue, Prev, TrUserData),
					   TrUserData).

skip_varint_m_timeboss_list_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_timeboss_list_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_timeboss_list_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_timeboss_list_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_list_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_timeboss_list_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_list_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_timeboss_list_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_list_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_timeboss_list_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_timeboss_list_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_list_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_timeboss_ranking_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_tos(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_m_timeboss_ranking_tos(<<>>, 0, 0,
					  _) ->
    #m_timeboss_ranking_tos{};
dfp_read_field_def_m_timeboss_ranking_tos(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_m_timeboss_ranking_tos(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_m_timeboss_ranking_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_ranking_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_m_timeboss_ranking_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_timeboss_ranking_tos(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_m_timeboss_ranking_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_timeboss_ranking_tos(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_m_timeboss_ranking_tos(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_m_timeboss_ranking_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_timeboss_ranking_tos(<<>>, 0, 0,
					 _) ->
    #m_timeboss_ranking_tos{}.

skip_varint_m_timeboss_ranking_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_m_timeboss_ranking_tos(Rest, Z1, Z2,
				       TrUserData);
skip_varint_m_timeboss_ranking_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_tos(Rest, Z1, Z2,
					      TrUserData).

skip_length_delimited_m_timeboss_ranking_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_ranking_tos(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_m_timeboss_ranking_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_ranking_tos(Rest2, 0, 0,
					      TrUserData).

skip_group_m_timeboss_ranking_tos(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_ranking_tos(Rest, 0, Z2,
					      TrUserData).

skip_32_m_timeboss_ranking_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_tos(Rest, Z1, Z2,
					      TrUserData).

skip_64_m_timeboss_ranking_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_tos(Rest, Z1, Z2,
					      TrUserData).

decode_msg_m_timeboss_ranking_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_toc(Bin, 0, 0,
					      id([], TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_timeboss_ranking_toc(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_timeboss_ranking_toc_ranking(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_ranking_toc(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_timeboss_ranking_toc_my_rank(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_ranking_toc(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_timeboss_ranking_toc_my_dmg(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_ranking_toc(<<>>, 0, 0,
					  R1, F@_2, F@_3, TrUserData) ->
    #m_timeboss_ranking_toc{ranking =
				lists_reverse(R1, TrUserData),
			    my_rank = F@_2, my_dmg = F@_3};
dfp_read_field_def_m_timeboss_ranking_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_timeboss_ranking_toc(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_timeboss_ranking_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_ranking_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
dg_read_field_def_m_timeboss_ranking_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_timeboss_ranking_toc_ranking(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_timeboss_ranking_toc_my_rank(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      24 ->
	  d_field_m_timeboss_ranking_toc_my_dmg(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_ranking_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_m_timeboss_ranking_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_ranking_toc(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    3 ->
		skip_group_m_timeboss_ranking_toc(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_timeboss_ranking_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_ranking_toc(<<>>, 0, 0, R1,
					 F@_2, F@_3, TrUserData) ->
    #m_timeboss_ranking_toc{ranking =
				lists_reverse(R1, TrUserData),
			    my_rank = F@_2, my_dmg = F@_3}.

d_field_m_timeboss_ranking_toc_ranking(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_ranking_toc_ranking(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_m_timeboss_ranking_toc_ranking(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_timeboss_ranking(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_timeboss_ranking_toc(RestF, 0, 0,
					      cons(NewFValue, Prev, TrUserData),
					      F@_2, F@_3, TrUserData).

d_field_m_timeboss_ranking_toc_my_rank(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_ranking_toc_my_rank(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_m_timeboss_ranking_toc_my_rank(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_ranking_toc(RestF, 0, 0,
					      F@_1, NewFValue, F@_3,
					      TrUserData).

d_field_m_timeboss_ranking_toc_my_dmg(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_ranking_toc_my_dmg(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_m_timeboss_ranking_toc_my_dmg(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_ranking_toc(RestF, 0, 0,
					      F@_1, F@_2, NewFValue,
					      TrUserData).

skip_varint_m_timeboss_ranking_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_timeboss_ranking_toc(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
skip_varint_m_timeboss_ranking_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_timeboss_ranking_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_ranking_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
skip_length_delimited_m_timeboss_ranking_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_ranking_toc(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, TrUserData).

skip_group_m_timeboss_ranking_toc(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_ranking_toc(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_32_m_timeboss_ranking_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_64_m_timeboss_ranking_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_ranking_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_timeboss_dice_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_dice_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_timeboss_dice_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_timeboss_dice_toc_etime(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_timeboss_dice_toc(<<>>, 0, 0, F@_1,
				       _) ->
    #m_timeboss_dice_toc{etime = F@_1};
dfp_read_field_def_m_timeboss_dice_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_timeboss_dice_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_timeboss_dice_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_dice_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_timeboss_dice_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_dice_toc_etime(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_dice_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_timeboss_dice_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_dice_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_timeboss_dice_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_timeboss_dice_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_dice_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_timeboss_dice_toc{etime = F@_1}.

d_field_m_timeboss_dice_toc_etime(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_dice_toc_etime(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_timeboss_dice_toc_etime(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_dice_toc(RestF, 0, 0,
					   NewFValue, TrUserData).

skip_varint_m_timeboss_dice_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_timeboss_dice_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_timeboss_dice_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_dice_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_timeboss_dice_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_dice_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_timeboss_dice_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_dice_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_timeboss_dice_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_dice_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_timeboss_dice_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_dice_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_timeboss_dice_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_dice_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_timeboss_dicing_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_tos(Bin, 0, 0,
					     TrUserData).

dfp_read_field_def_m_timeboss_dicing_tos(<<>>, 0, 0,
					 _) ->
    #m_timeboss_dicing_tos{};
dfp_read_field_def_m_timeboss_dicing_tos(Other, Z1, Z2,
					 TrUserData) ->
    dg_read_field_def_m_timeboss_dicing_tos(Other, Z1, Z2,
					    TrUserData).

dg_read_field_def_m_timeboss_dicing_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_dicing_tos(Rest, N + 7,
					    X bsl N + Acc, TrUserData);
dg_read_field_def_m_timeboss_dicing_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_timeboss_dicing_tos(Rest, 0, 0,
					    TrUserData);
      1 ->
	  skip_64_m_timeboss_dicing_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_timeboss_dicing_tos(Rest, 0, 0,
						      TrUserData);
      3 ->
	  skip_group_m_timeboss_dicing_tos(Rest, Key bsr 3, 0,
					   TrUserData);
      5 ->
	  skip_32_m_timeboss_dicing_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_timeboss_dicing_tos(<<>>, 0, 0,
					_) ->
    #m_timeboss_dicing_tos{}.

skip_varint_m_timeboss_dicing_tos(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    skip_varint_m_timeboss_dicing_tos(Rest, Z1, Z2,
				      TrUserData);
skip_varint_m_timeboss_dicing_tos(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_tos(Rest, Z1, Z2,
					     TrUserData).

skip_length_delimited_m_timeboss_dicing_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_dicing_tos(Rest, N + 7,
						X bsl N + Acc, TrUserData);
skip_length_delimited_m_timeboss_dicing_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_dicing_tos(Rest2, 0, 0,
					     TrUserData).

skip_group_m_timeboss_dicing_tos(Bin, FNum, Z2,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_dicing_tos(Rest, 0, Z2,
					     TrUserData).

skip_32_m_timeboss_dicing_tos(<<_:32, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_tos(Rest, Z1, Z2,
					     TrUserData).

skip_64_m_timeboss_dicing_tos(<<_:64, Rest/binary>>, Z1,
			      Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_tos(Rest, Z1, Z2,
					     TrUserData).

decode_msg_m_timeboss_dicing_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_toc(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_m_timeboss_dicing_toc(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_m_timeboss_dicing_toc_score(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_dicing_toc(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_m_timeboss_dicing_toc_highest(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_dicing_toc(<<26,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3,
					 TrUserData) ->
    d_field_m_timeboss_dicing_toc_owner(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_dicing_toc(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, _) ->
    #m_timeboss_dicing_toc{score = F@_1, highest = F@_2,
			   owner = F@_3};
dfp_read_field_def_m_timeboss_dicing_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_timeboss_dicing_toc(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_timeboss_dicing_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_dicing_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    TrUserData);
dg_read_field_def_m_timeboss_dicing_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_dicing_toc_score(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_timeboss_dicing_toc_highest(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      26 ->
	  d_field_m_timeboss_dicing_toc_owner(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_dicing_toc(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_m_timeboss_dicing_toc(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_dicing_toc(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    TrUserData);
	    3 ->
		skip_group_m_timeboss_dicing_toc(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_timeboss_dicing_toc(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_dicing_toc(<<>>, 0, 0,
					F@_1, F@_2, F@_3, _) ->
    #m_timeboss_dicing_toc{score = F@_1, highest = F@_2,
			   owner = F@_3}.

d_field_m_timeboss_dicing_toc_score(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_dicing_toc_score(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_timeboss_dicing_toc_score(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_dicing_toc(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, TrUserData).

d_field_m_timeboss_dicing_toc_highest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_dicing_toc_highest(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_m_timeboss_dicing_toc_highest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_dicing_toc(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, TrUserData).

d_field_m_timeboss_dicing_toc_owner(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_dicing_toc_owner(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_timeboss_dicing_toc_owner(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_timeboss_dicing_toc(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, TrUserData).

skip_varint_m_timeboss_dicing_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_timeboss_dicing_toc(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
skip_varint_m_timeboss_dicing_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_toc(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_timeboss_dicing_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_dicing_toc(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
skip_length_delimited_m_timeboss_dicing_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_dicing_toc(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, TrUserData).

skip_group_m_timeboss_dicing_toc(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_dicing_toc(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_32_m_timeboss_dicing_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_toc(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

skip_64_m_timeboss_dicing_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_dicing_toc(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_timeboss_boxinfo_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_tos(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_m_timeboss_boxinfo_tos(<<>>, 0, 0,
					  _) ->
    #m_timeboss_boxinfo_tos{};
dfp_read_field_def_m_timeboss_boxinfo_tos(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_m_timeboss_boxinfo_tos(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_m_timeboss_boxinfo_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_boxinfo_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_m_timeboss_boxinfo_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_timeboss_boxinfo_tos(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_m_timeboss_boxinfo_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_timeboss_boxinfo_tos(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_m_timeboss_boxinfo_tos(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_m_timeboss_boxinfo_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_timeboss_boxinfo_tos(<<>>, 0, 0,
					 _) ->
    #m_timeboss_boxinfo_tos{}.

skip_varint_m_timeboss_boxinfo_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_m_timeboss_boxinfo_tos(Rest, Z1, Z2,
				       TrUserData);
skip_varint_m_timeboss_boxinfo_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_tos(Rest, Z1, Z2,
					      TrUserData).

skip_length_delimited_m_timeboss_boxinfo_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_boxinfo_tos(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_m_timeboss_boxinfo_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_boxinfo_tos(Rest2, 0, 0,
					      TrUserData).

skip_group_m_timeboss_boxinfo_tos(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_boxinfo_tos(Rest, 0, Z2,
					      TrUserData).

skip_32_m_timeboss_boxinfo_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_tos(Rest, Z1, Z2,
					      TrUserData).

skip_64_m_timeboss_boxinfo_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_tos(Rest, Z1, Z2,
					      TrUserData).

decode_msg_m_timeboss_boxinfo_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_toc(Bin, 0, 0,
					      id([], TrUserData),
					      id([], TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_timeboss_boxinfo_toc(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    d_field_m_timeboss_boxinfo_toc_summoner(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
dfp_read_field_def_m_timeboss_boxinfo_toc(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    d_pfield_m_timeboss_boxinfo_toc_suids(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData);
dfp_read_field_def_m_timeboss_boxinfo_toc(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    d_field_m_timeboss_boxinfo_toc_suids(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_timeboss_boxinfo_toc(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    d_field_m_timeboss_boxinfo_toc_can_open(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
dfp_read_field_def_m_timeboss_boxinfo_toc(<<32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    d_field_m_timeboss_boxinfo_toc_remain(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData);
dfp_read_field_def_m_timeboss_boxinfo_toc(<<40,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    d_field_m_timeboss_boxinfo_toc_boss_id(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_m_timeboss_boxinfo_toc(<<>>, 0, 0,
					  R1, R2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    #m_timeboss_boxinfo_toc{summoner =
				lists_reverse(R1, TrUserData),
			    suids = lists_reverse(R2, TrUserData),
			    can_open = F@_3, remain = F@_4, boss_id = F@_5};
dfp_read_field_def_m_timeboss_boxinfo_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    dg_read_field_def_m_timeboss_boxinfo_toc(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

dg_read_field_def_m_timeboss_boxinfo_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_boxinfo_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
dg_read_field_def_m_timeboss_boxinfo_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_timeboss_boxinfo_toc_summoner(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
      18 ->
	  d_pfield_m_timeboss_boxinfo_toc_suids(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5,
						TrUserData);
      16 ->
	  d_field_m_timeboss_boxinfo_toc_suids(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      24 ->
	  d_field_m_timeboss_boxinfo_toc_can_open(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
      32 ->
	  d_field_m_timeboss_boxinfo_toc_remain(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5,
						TrUserData);
      40 ->
	  d_field_m_timeboss_boxinfo_toc_boss_id(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_boxinfo_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
	    1 ->
		skip_64_m_timeboss_boxinfo_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_boxinfo_toc(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, F@_5,
							     TrUserData);
	    3 ->
		skip_group_m_timeboss_boxinfo_toc(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    5 ->
		skip_32_m_timeboss_boxinfo_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_boxinfo_toc(<<>>, 0, 0, R1,
					 R2, F@_3, F@_4, F@_5, TrUserData) ->
    #m_timeboss_boxinfo_toc{summoner =
				lists_reverse(R1, TrUserData),
			    suids = lists_reverse(R2, TrUserData),
			    can_open = F@_3, remain = F@_4, boss_id = F@_5}.

d_field_m_timeboss_boxinfo_toc_summoner(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxinfo_toc_summoner(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
d_field_m_timeboss_boxinfo_toc_summoner(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, Prev, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_timeboss_boxinfo_toc(RestF, 0, 0,
					      cons(NewFValue, Prev, TrUserData),
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

d_field_m_timeboss_boxinfo_toc_suids(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxinfo_toc_suids(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_m_timeboss_boxinfo_toc_suids(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxinfo_toc(RestF, 0, 0,
					      F@_1,
					      cons(NewFValue, Prev, TrUserData),
					      F@_3, F@_4, F@_5, TrUserData).

d_pfield_m_timeboss_boxinfo_toc_suids(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 57 ->
    d_pfield_m_timeboss_boxinfo_toc_suids(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
d_pfield_m_timeboss_boxinfo_toc_suids(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, E, F@_3, F@_4, F@_5,
				      TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_timeboss_boxinfo_toc_suids(PackedBytes,
						    0, 0, E, TrUserData),
    dfp_read_field_def_m_timeboss_boxinfo_toc(Rest2, 0, 0,
					      F@_1, NewSeq, F@_3, F@_4, F@_5,
					      TrUserData).

d_packed_field_m_timeboss_boxinfo_toc_suids(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_timeboss_boxinfo_toc_suids(Rest, N + 7,
						X bsl N + Acc, AccSeq,
						TrUserData);
d_packed_field_m_timeboss_boxinfo_toc_suids(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_timeboss_boxinfo_toc_suids(RestF, 0, 0,
						[NewFValue | AccSeq],
						TrUserData);
d_packed_field_m_timeboss_boxinfo_toc_suids(<<>>, 0, 0,
					    AccSeq, _) ->
    AccSeq.

d_field_m_timeboss_boxinfo_toc_can_open(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxinfo_toc_can_open(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
d_field_m_timeboss_boxinfo_toc_can_open(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_m_timeboss_boxinfo_toc(RestF, 0, 0,
					      F@_1, F@_2, NewFValue, F@_4, F@_5,
					      TrUserData).

d_field_m_timeboss_boxinfo_toc_remain(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxinfo_toc_remain(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
d_field_m_timeboss_boxinfo_toc_remain(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxinfo_toc(RestF, 0, 0,
					      F@_1, F@_2, F@_3, NewFValue, F@_5,
					      TrUserData).

d_field_m_timeboss_boxinfo_toc_boss_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxinfo_toc_boss_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_m_timeboss_boxinfo_toc_boss_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxinfo_toc(RestF, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, NewFValue,
					      TrUserData).

skip_varint_m_timeboss_boxinfo_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    skip_varint_m_timeboss_boxinfo_toc(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_m_timeboss_boxinfo_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

skip_length_delimited_m_timeboss_boxinfo_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_boxinfo_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
skip_length_delimited_m_timeboss_boxinfo_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_boxinfo_toc(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

skip_group_m_timeboss_boxinfo_toc(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_boxinfo_toc(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

skip_32_m_timeboss_boxinfo_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

skip_64_m_timeboss_boxinfo_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_m_timeboss_boxinfo_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

decode_msg_m_timeboss_boxopen_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_tos(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_timeboss_boxopen_tos(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_timeboss_boxopen_tos_type(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_boxopen_tos(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_timeboss_boxopen_tos_boss(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_boxopen_tos(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_timeboss_boxopen_tos_times(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_boxopen_tos(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, _) ->
    #m_timeboss_boxopen_tos{type = F@_1, boss = F@_2,
			    times = F@_3};
dfp_read_field_def_m_timeboss_boxopen_tos(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_timeboss_boxopen_tos(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_timeboss_boxopen_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_boxopen_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
dg_read_field_def_m_timeboss_boxopen_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_boxopen_tos_type(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_timeboss_boxopen_tos_boss(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      24 ->
	  d_field_m_timeboss_boxopen_tos_times(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_boxopen_tos(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_m_timeboss_boxopen_tos(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_boxopen_tos(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    3 ->
		skip_group_m_timeboss_boxopen_tos(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_timeboss_boxopen_tos(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_boxopen_tos(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, _) ->
    #m_timeboss_boxopen_tos{type = F@_1, boss = F@_2,
			    times = F@_3}.

d_field_m_timeboss_boxopen_tos_type(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxopen_tos_type(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_timeboss_boxopen_tos_type(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxopen_tos(RestF, 0, 0,
					      NewFValue, F@_2, F@_3,
					      TrUserData).

d_field_m_timeboss_boxopen_tos_boss(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxopen_tos_boss(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_timeboss_boxopen_tos_boss(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxopen_tos(RestF, 0, 0,
					      F@_1, NewFValue, F@_3,
					      TrUserData).

d_field_m_timeboss_boxopen_tos_times(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxopen_tos_times(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_m_timeboss_boxopen_tos_times(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxopen_tos(RestF, 0, 0,
					      F@_1, F@_2, NewFValue,
					      TrUserData).

skip_varint_m_timeboss_boxopen_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_timeboss_boxopen_tos(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
skip_varint_m_timeboss_boxopen_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_tos(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_timeboss_boxopen_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_boxopen_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
skip_length_delimited_m_timeboss_boxopen_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_boxopen_tos(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, TrUserData).

skip_group_m_timeboss_boxopen_tos(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_boxopen_tos(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_32_m_timeboss_boxopen_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_tos(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_64_m_timeboss_boxopen_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_tos(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_timeboss_boxopen_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_toc(Bin, 0, 0,
					      id(undefined, TrUserData),
					      'tr_decode_init_default_m_timeboss_boxopen_toc.reward'([],
												     TrUserData),
					      TrUserData).

dfp_read_field_def_m_timeboss_boxopen_toc(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_timeboss_boxopen_toc_type(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_m_timeboss_boxopen_toc(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_timeboss_boxopen_toc_reward(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_timeboss_boxopen_toc(<<>>, 0, 0,
					  F@_1, R1, TrUserData) ->
    #m_timeboss_boxopen_toc{type = F@_1,
			    reward =
				'tr_decode_repeated_finalize_m_timeboss_boxopen_toc.reward'(R1,
											    TrUserData)};
dfp_read_field_def_m_timeboss_boxopen_toc(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_timeboss_boxopen_toc(Other, Z1, Z2,
					     F@_1, F@_2, TrUserData).

dg_read_field_def_m_timeboss_boxopen_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_boxopen_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
dg_read_field_def_m_timeboss_boxopen_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_boxopen_toc_type(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      18 ->
	  d_field_m_timeboss_boxopen_toc_reward(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_boxopen_toc(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    1 ->
		skip_64_m_timeboss_boxopen_toc(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_boxopen_toc(Rest, 0, 0,
							     F@_1, F@_2,
							     TrUserData);
	    3 ->
		skip_group_m_timeboss_boxopen_toc(Rest, Key bsr 3, 0,
						  F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_timeboss_boxopen_toc(Rest, 0, 0, F@_1, F@_2,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_boxopen_toc(<<>>, 0, 0,
					 F@_1, R1, TrUserData) ->
    #m_timeboss_boxopen_toc{type = F@_1,
			    reward =
				'tr_decode_repeated_finalize_m_timeboss_boxopen_toc.reward'(R1,
											    TrUserData)}.

d_field_m_timeboss_boxopen_toc_type(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxopen_toc_type(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_timeboss_boxopen_toc_type(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_boxopen_toc(RestF, 0, 0,
					      NewFValue, F@_2, TrUserData).

d_field_m_timeboss_boxopen_toc_reward(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_boxopen_toc_reward(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_timeboss_boxopen_toc_reward(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_timeboss_boxopen_toc(RestF, 0, 0,
					      F@_1,
					      'tr_decode_repeated_add_elem_m_timeboss_boxopen_toc.reward'(NewFValue,
													  Prev,
													  TrUserData),
					      TrUserData).

skip_varint_m_timeboss_boxopen_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_timeboss_boxopen_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
skip_varint_m_timeboss_boxopen_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_toc(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_length_delimited_m_timeboss_boxopen_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_boxopen_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
skip_length_delimited_m_timeboss_boxopen_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_boxopen_toc(Rest2, 0, 0,
					      F@_1, F@_2, TrUserData).

skip_group_m_timeboss_boxopen_toc(Bin, FNum, Z2, F@_1,
				  F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_boxopen_toc(Rest, 0, Z2,
					      F@_1, F@_2, TrUserData).

skip_32_m_timeboss_boxopen_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_toc(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

skip_64_m_timeboss_boxopen_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_timeboss_boxopen_toc(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData).

decode_msg_m_timeboss_care_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_timeboss_care_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_timeboss_care_tos_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_timeboss_care_tos(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_timeboss_care_tos_op(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_timeboss_care_tos(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_timeboss_care_tos_type(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_care_tos(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, _) ->
    #m_timeboss_care_tos{id = F@_1, op = F@_2, type = F@_3};
dfp_read_field_def_m_timeboss_care_tos(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_timeboss_care_tos(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_timeboss_care_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_care_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_m_timeboss_care_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_care_tos_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      16 ->
	  d_field_m_timeboss_care_tos_op(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      24 ->
	  d_field_m_timeboss_care_tos_type(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_care_tos(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_m_timeboss_care_tos(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_care_tos(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_m_timeboss_care_tos(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_timeboss_care_tos(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_care_tos(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #m_timeboss_care_tos{id = F@_1, op = F@_2, type = F@_3}.

d_field_m_timeboss_care_tos_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_care_tos_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_timeboss_care_tos_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_care_tos(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, TrUserData).

d_field_m_timeboss_care_tos_op(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_care_tos_op(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_timeboss_care_tos_op(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_care_tos(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_m_timeboss_care_tos_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_care_tos_type(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_m_timeboss_care_tos_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_care_tos(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, TrUserData).

skip_varint_m_timeboss_care_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_timeboss_care_tos(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_m_timeboss_care_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_timeboss_care_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_care_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_m_timeboss_care_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_care_tos(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_m_timeboss_care_tos(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_care_tos(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_m_timeboss_care_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_m_timeboss_care_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_timeboss_care_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_timeboss_care_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_timeboss_care_toc_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_timeboss_care_toc(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_timeboss_care_toc_op(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_timeboss_care_toc(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_timeboss_care_toc_type(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_m_timeboss_care_toc(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, _) ->
    #m_timeboss_care_toc{id = F@_1, op = F@_2, type = F@_3};
dfp_read_field_def_m_timeboss_care_toc(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_timeboss_care_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_timeboss_care_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_care_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_m_timeboss_care_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_care_toc_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      16 ->
	  d_field_m_timeboss_care_toc_op(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      24 ->
	  d_field_m_timeboss_care_toc_type(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_care_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_m_timeboss_care_toc(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_care_toc(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_m_timeboss_care_toc(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_timeboss_care_toc(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_care_toc(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #m_timeboss_care_toc{id = F@_1, op = F@_2, type = F@_3}.

d_field_m_timeboss_care_toc_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_care_toc_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_timeboss_care_toc_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_care_toc(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, TrUserData).

d_field_m_timeboss_care_toc_op(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_care_toc_op(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_timeboss_care_toc_op(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_care_toc(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_m_timeboss_care_toc_type(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_care_toc_type(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_m_timeboss_care_toc_type(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_care_toc(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, TrUserData).

skip_varint_m_timeboss_care_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_timeboss_care_toc(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_m_timeboss_care_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_timeboss_care_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_care_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_m_timeboss_care_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_care_toc(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_m_timeboss_care_toc(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_care_toc(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_m_timeboss_care_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_m_timeboss_care_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_timeboss_care_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_timeboss_remind_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_remind_toc(Bin, 0, 0,
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_m_timeboss_remind_toc(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_timeboss_remind_toc_id(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_timeboss_remind_toc(<<>>, 0, 0,
					 F@_1, _) ->
    #m_timeboss_remind_toc{id = F@_1};
dfp_read_field_def_m_timeboss_remind_toc(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_m_timeboss_remind_toc(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_m_timeboss_remind_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_remind_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_timeboss_remind_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_timeboss_remind_toc_id(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_remind_toc(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_m_timeboss_remind_toc(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_remind_toc(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_m_timeboss_remind_toc(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_m_timeboss_remind_toc(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_remind_toc(<<>>, 0, 0,
					F@_1, _) ->
    #m_timeboss_remind_toc{id = F@_1}.

d_field_m_timeboss_remind_toc_id(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_remind_toc_id(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_m_timeboss_remind_toc_id(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_timeboss_remind_toc(RestF, 0, 0,
					     NewFValue, TrUserData).

skip_varint_m_timeboss_remind_toc(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_timeboss_remind_toc(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_m_timeboss_remind_toc(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_remind_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_m_timeboss_remind_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_remind_toc(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_m_timeboss_remind_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_remind_toc(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_m_timeboss_remind_toc(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_remind_toc(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_m_timeboss_remind_toc(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_remind_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_m_timeboss_remind_toc(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_remind_toc(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_m_timeboss_dropped_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_tos(Bin, 0, 0,
					      TrUserData).

dfp_read_field_def_m_timeboss_dropped_tos(<<>>, 0, 0,
					  _) ->
    #m_timeboss_dropped_tos{};
dfp_read_field_def_m_timeboss_dropped_tos(Other, Z1, Z2,
					  TrUserData) ->
    dg_read_field_def_m_timeboss_dropped_tos(Other, Z1, Z2,
					     TrUserData).

dg_read_field_def_m_timeboss_dropped_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_dropped_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
dg_read_field_def_m_timeboss_dropped_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_timeboss_dropped_tos(Rest, 0, 0,
					     TrUserData);
      1 ->
	  skip_64_m_timeboss_dropped_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_timeboss_dropped_tos(Rest, 0, 0,
						       TrUserData);
      3 ->
	  skip_group_m_timeboss_dropped_tos(Rest, Key bsr 3, 0,
					    TrUserData);
      5 ->
	  skip_32_m_timeboss_dropped_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_timeboss_dropped_tos(<<>>, 0, 0,
					 _) ->
    #m_timeboss_dropped_tos{}.

skip_varint_m_timeboss_dropped_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    skip_varint_m_timeboss_dropped_tos(Rest, Z1, Z2,
				       TrUserData);
skip_varint_m_timeboss_dropped_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_tos(Rest, Z1, Z2,
					      TrUserData).

skip_length_delimited_m_timeboss_dropped_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_dropped_tos(Rest,
						 N + 7, X bsl N + Acc,
						 TrUserData);
skip_length_delimited_m_timeboss_dropped_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_dropped_tos(Rest2, 0, 0,
					      TrUserData).

skip_group_m_timeboss_dropped_tos(Bin, FNum, Z2,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_dropped_tos(Rest, 0, Z2,
					      TrUserData).

skip_32_m_timeboss_dropped_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_tos(Rest, Z1, Z2,
					      TrUserData).

skip_64_m_timeboss_dropped_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_tos(Rest, Z1, Z2,
					      TrUserData).

decode_msg_m_timeboss_dropped_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_toc(Bin, 0, 0,
					      id([], TrUserData), TrUserData).

dfp_read_field_def_m_timeboss_dropped_toc(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_timeboss_dropped_toc_logs(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_timeboss_dropped_toc(<<>>, 0, 0,
					  R1, TrUserData) ->
    #m_timeboss_dropped_toc{logs =
				lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_timeboss_dropped_toc(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_m_timeboss_dropped_toc(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_m_timeboss_dropped_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_timeboss_dropped_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_timeboss_dropped_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_timeboss_dropped_toc_logs(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_timeboss_dropped_toc(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_m_timeboss_dropped_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_timeboss_dropped_toc(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_m_timeboss_dropped_toc(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_m_timeboss_dropped_toc(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_timeboss_dropped_toc(<<>>, 0, 0, R1,
					 TrUserData) ->
    #m_timeboss_dropped_toc{logs =
				lists_reverse(R1, TrUserData)}.

d_field_m_timeboss_dropped_toc_logs(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_timeboss_dropped_toc_logs(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_timeboss_dropped_toc_logs(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_timeboss_dropped(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_timeboss_dropped_toc(RestF, 0, 0,
					      cons(NewFValue, Prev, TrUserData),
					      TrUserData).

skip_varint_m_timeboss_dropped_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_timeboss_dropped_toc(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_m_timeboss_dropped_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_m_timeboss_dropped_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_timeboss_dropped_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_m_timeboss_dropped_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_timeboss_dropped_toc(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_m_timeboss_dropped_toc(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_timeboss_dropped_toc(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_m_timeboss_dropped_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_m_timeboss_dropped_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_timeboss_dropped_toc(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_p_timeboss(Bin, TrUserData) ->
    dfp_read_field_def_p_timeboss(Bin, 0, 0,
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData),
				  id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_timeboss(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_p_timeboss_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_p_timeboss_born(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss(<<24, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_p_timeboss_floor(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss(<<32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_p_timeboss_role(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss(<<40, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_p_timeboss_box(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss(<<48, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			      TrUserData) ->
    d_field_p_timeboss_care(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, _) ->
    #p_timeboss{id = F@_1, born = F@_2, floor = F@_3,
		role = F@_4, box = F@_5, care = F@_6};
dfp_read_field_def_p_timeboss(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_p_timeboss(Other, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData).

dg_read_field_def_p_timeboss(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_timeboss(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData);
dg_read_field_def_p_timeboss(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_timeboss_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_p_timeboss_born(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, TrUserData);
      24 ->
	  d_field_p_timeboss_floor(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, TrUserData);
      32 ->
	  d_field_p_timeboss_role(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, TrUserData);
      40 ->
	  d_field_p_timeboss_box(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, TrUserData);
      48 ->
	  d_field_p_timeboss_care(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_timeboss(Rest, 0, 0, F@_1, F@_2, F@_3,
				       F@_4, F@_5, F@_6, TrUserData);
	    1 ->
		skip_64_p_timeboss(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_p_timeboss(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
	    3 ->
		skip_group_p_timeboss(Rest, Key bsr 3, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, TrUserData);
	    5 ->
		skip_32_p_timeboss(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				   F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_p_timeboss(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, _) ->
    #p_timeboss{id = F@_1, born = F@_2, floor = F@_3,
		role = F@_4, box = F@_5, care = F@_6}.

d_field_p_timeboss_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_p_timeboss_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss(RestF, 0, 0, NewFValue,
				  F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData).

d_field_p_timeboss_born(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_born(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_p_timeboss_born(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss(RestF, 0, 0, F@_1,
				  NewFValue, F@_3, F@_4, F@_5, F@_6,
				  TrUserData).

d_field_p_timeboss_floor(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_floor(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_p_timeboss_floor(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss(RestF, 0, 0, F@_1, F@_2,
				  NewFValue, F@_4, F@_5, F@_6, TrUserData).

d_field_p_timeboss_role(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_role(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_p_timeboss_role(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss(RestF, 0, 0, F@_1, F@_2,
				  F@_3, NewFValue, F@_5, F@_6, TrUserData).

d_field_p_timeboss_box(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_box(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_p_timeboss_box(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_timeboss(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, NewFValue, F@_6, TrUserData).

d_field_p_timeboss_care(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_care(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
d_field_p_timeboss_care(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_timeboss(RestF, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, NewFValue, TrUserData).

skip_varint_p_timeboss(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    skip_varint_p_timeboss(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, TrUserData);
skip_varint_p_timeboss(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_p_timeboss(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_length_delimited_p_timeboss(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData)
    when N < 57 ->
    skip_length_delimited_p_timeboss(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, TrUserData);
skip_length_delimited_p_timeboss(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_timeboss(Rest2, 0, 0, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_group_p_timeboss(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		      F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_timeboss(Rest, 0, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_32_p_timeboss(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_p_timeboss(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

skip_64_p_timeboss(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_p_timeboss(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, TrUserData).

decode_msg_p_timeboss_ranking(Bin, TrUserData) ->
    dfp_read_field_def_p_timeboss_ranking(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_p_timeboss_ranking(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_p_timeboss_ranking_rank(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss_ranking(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_p_timeboss_ranking_is_team(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_p_timeboss_ranking(<<25,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_p_timeboss_ranking_captain(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData);
dfp_read_field_def_p_timeboss_ranking(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_p_timeboss_ranking_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss_ranking(<<40,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_p_timeboss_ranking_damage(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss_ranking(<<48,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData) ->
    d_field_p_timeboss_ranking_team(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData);
dfp_read_field_def_p_timeboss_ranking(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #p_timeboss_ranking{rank = F@_1, is_team = F@_2,
			captain = F@_3, name = F@_4, damage = F@_5,
			team = F@_6};
dfp_read_field_def_p_timeboss_ranking(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				      TrUserData) ->
    dg_read_field_def_p_timeboss_ranking(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 TrUserData).

dg_read_field_def_p_timeboss_ranking(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_timeboss_ranking(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, TrUserData);
dg_read_field_def_p_timeboss_ranking(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_timeboss_ranking_rank(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      16 ->
	  d_field_p_timeboss_ranking_is_team(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      25 ->
	  d_field_p_timeboss_ranking_captain(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
      34 ->
	  d_field_p_timeboss_ranking_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      40 ->
	  d_field_p_timeboss_ranking_damage(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
      48 ->
	  d_field_p_timeboss_ranking_team(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_timeboss_ranking(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6,
					       TrUserData);
	    1 ->
		skip_64_p_timeboss_ranking(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_p_timeboss_ranking(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6,
							 TrUserData);
	    3 ->
		skip_group_p_timeboss_ranking(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      TrUserData);
	    5 ->
		skip_32_p_timeboss_ranking(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_p_timeboss_ranking(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #p_timeboss_ranking{rank = F@_1, is_team = F@_2,
			captain = F@_3, name = F@_4, damage = F@_5,
			team = F@_6}.

d_field_p_timeboss_ranking_rank(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_p_timeboss_ranking_rank(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_p_timeboss_ranking_rank(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_ranking(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData).

d_field_p_timeboss_ranking_is_team(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 57 ->
    d_field_p_timeboss_ranking_is_team(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
d_field_p_timeboss_ranking_is_team(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_p_timeboss_ranking(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

d_field_p_timeboss_ranking_captain(<<Value:64/little,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				   TrUserData) ->
    dfp_read_field_def_p_timeboss_ranking(Rest, Z1, Z2,
					  F@_1, F@_2, id(Value, TrUserData),
					  F@_4, F@_5, F@_6, TrUserData).

d_field_p_timeboss_ranking_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_p_timeboss_ranking_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_p_timeboss_ranking_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_timeboss_ranking(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5, F@_6,
					  TrUserData).

d_field_p_timeboss_ranking_damage(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  TrUserData)
    when N < 57 ->
    d_field_p_timeboss_ranking_damage(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, TrUserData);
d_field_p_timeboss_ranking_damage(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_ranking(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue, F@_6,
					  TrUserData).

d_field_p_timeboss_ranking_team(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				TrUserData)
    when N < 57 ->
    d_field_p_timeboss_ranking_team(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, TrUserData);
d_field_p_timeboss_ranking_team(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_ranking(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, NewFValue,
					  TrUserData).

skip_varint_p_timeboss_ranking(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    skip_varint_p_timeboss_ranking(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_p_timeboss_ranking(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			       TrUserData) ->
    dfp_read_field_def_p_timeboss_ranking(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_length_delimited_p_timeboss_ranking(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_timeboss_ranking(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_p_timeboss_ranking(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_timeboss_ranking(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_group_p_timeboss_ranking(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_timeboss_ranking(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_32_p_timeboss_ranking(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_p_timeboss_ranking(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

skip_64_p_timeboss_ranking(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			   TrUserData) ->
    dfp_read_field_def_p_timeboss_ranking(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData).

decode_msg_p_timeboss_dropped(Bin, TrUserData) ->
    dfp_read_field_def_p_timeboss_dropped(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_p_timeboss_dropped(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_time(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_scene(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<25,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_picker_id(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_picker_name(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   F@_7, TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<42,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_boss(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<48,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_item_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<56,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, F@_7, TrUserData) ->
    d_field_p_timeboss_dropped_cache_id(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
dfp_read_field_def_p_timeboss_dropped(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #p_timeboss_dropped{time = F@_1, scene = F@_2,
			picker_id = F@_3, picker_name = F@_4, boss = F@_5,
			item_id = F@_6, cache_id = F@_7};
dfp_read_field_def_p_timeboss_dropped(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData) ->
    dg_read_field_def_p_timeboss_dropped(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					 F@_7, TrUserData).

dg_read_field_def_p_timeboss_dropped(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_timeboss_dropped(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, F@_6, F@_7, TrUserData);
dg_read_field_def_p_timeboss_dropped(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_timeboss_dropped_time(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      16 ->
	  d_field_p_timeboss_dropped_scene(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, F@_6, F@_7,
					   TrUserData);
      25 ->
	  d_field_p_timeboss_dropped_picker_id(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5, F@_6,
					       F@_7, TrUserData);
      34 ->
	  d_field_p_timeboss_dropped_picker_name(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 F@_7, TrUserData);
      42 ->
	  d_field_p_timeboss_dropped_boss(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      48 ->
	  d_field_p_timeboss_dropped_item_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
      56 ->
	  d_field_p_timeboss_dropped_cache_id(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_timeboss_dropped(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, F@_6, F@_7,
					       TrUserData);
	    1 ->
		skip_64_p_timeboss_dropped(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_timeboss_dropped(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, F@_6, F@_7,
							 TrUserData);
	    3 ->
		skip_group_p_timeboss_dropped(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, TrUserData);
	    5 ->
		skip_32_p_timeboss_dropped(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_timeboss_dropped(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    #p_timeboss_dropped{time = F@_1, scene = F@_2,
			picker_id = F@_3, picker_name = F@_4, boss = F@_5,
			item_id = F@_6, cache_id = F@_7}.

d_field_p_timeboss_dropped_time(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_dropped_time(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_p_timeboss_dropped_time(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_dropped(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, TrUserData).

d_field_p_timeboss_dropped_scene(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				 F@_7, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_dropped_scene(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, F@_6, F@_7, TrUserData);
d_field_p_timeboss_dropped_scene(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_dropped(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, F@_4, F@_5, F@_6,
					  F@_7, TrUserData).

d_field_p_timeboss_dropped_picker_id(<<Value:64/little,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				     F@_7, TrUserData) ->
    dfp_read_field_def_p_timeboss_dropped(Rest, Z1, Z2,
					  F@_1, F@_2, id(Value, TrUserData),
					  F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_timeboss_dropped_picker_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_dropped_picker_name(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_timeboss_dropped_picker_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				       F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_timeboss_dropped(RestF, 0, 0, F@_1,
					  F@_2, F@_3, NewFValue, F@_5, F@_6,
					  F@_7, TrUserData).

d_field_p_timeboss_dropped_boss(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_dropped_boss(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_p_timeboss_dropped_boss(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_timeboss_dropped(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, NewFValue, F@_6,
					  F@_7, TrUserData).

d_field_p_timeboss_dropped_item_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_dropped_item_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
d_field_p_timeboss_dropped_item_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				   F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_dropped(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, NewFValue,
					  F@_7, TrUserData).

d_field_p_timeboss_dropped_cache_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, TrUserData)
    when N < 57 ->
    d_field_p_timeboss_dropped_cache_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, TrUserData);
d_field_p_timeboss_dropped_cache_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_timeboss_dropped(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6,
					  NewFValue, TrUserData).

skip_varint_p_timeboss_dropped(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    skip_varint_p_timeboss_dropped(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_timeboss_dropped(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    dfp_read_field_def_p_timeboss_dropped(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, TrUserData).

skip_length_delimited_p_timeboss_dropped(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_timeboss_dropped(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
skip_length_delimited_p_timeboss_dropped(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_timeboss_dropped(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData).

skip_group_p_timeboss_dropped(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_timeboss_dropped(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData).

skip_32_p_timeboss_dropped(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    dfp_read_field_def_p_timeboss_dropped(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, TrUserData).

skip_64_p_timeboss_dropped(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData) ->
    dfp_read_field_def_p_timeboss_dropped(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  F@_7, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_timeboss_list_tos ->
	  merge_msg_m_timeboss_list_tos(Prev, New, TrUserData);
      m_timeboss_list_toc ->
	  merge_msg_m_timeboss_list_toc(Prev, New, TrUserData);
      m_timeboss_ranking_tos ->
	  merge_msg_m_timeboss_ranking_tos(Prev, New, TrUserData);
      m_timeboss_ranking_toc ->
	  merge_msg_m_timeboss_ranking_toc(Prev, New, TrUserData);
      m_timeboss_dice_toc ->
	  merge_msg_m_timeboss_dice_toc(Prev, New, TrUserData);
      m_timeboss_dicing_tos ->
	  merge_msg_m_timeboss_dicing_tos(Prev, New, TrUserData);
      m_timeboss_dicing_toc ->
	  merge_msg_m_timeboss_dicing_toc(Prev, New, TrUserData);
      m_timeboss_boxinfo_tos ->
	  merge_msg_m_timeboss_boxinfo_tos(Prev, New, TrUserData);
      m_timeboss_boxinfo_toc ->
	  merge_msg_m_timeboss_boxinfo_toc(Prev, New, TrUserData);
      m_timeboss_boxopen_tos ->
	  merge_msg_m_timeboss_boxopen_tos(Prev, New, TrUserData);
      m_timeboss_boxopen_toc ->
	  merge_msg_m_timeboss_boxopen_toc(Prev, New, TrUserData);
      m_timeboss_care_tos ->
	  merge_msg_m_timeboss_care_tos(Prev, New, TrUserData);
      m_timeboss_care_toc ->
	  merge_msg_m_timeboss_care_toc(Prev, New, TrUserData);
      m_timeboss_remind_toc ->
	  merge_msg_m_timeboss_remind_toc(Prev, New, TrUserData);
      m_timeboss_dropped_tos ->
	  merge_msg_m_timeboss_dropped_tos(Prev, New, TrUserData);
      m_timeboss_dropped_toc ->
	  merge_msg_m_timeboss_dropped_toc(Prev, New, TrUserData);
      p_timeboss ->
	  merge_msg_p_timeboss(Prev, New, TrUserData);
      p_timeboss_ranking ->
	  merge_msg_p_timeboss_ranking(Prev, New, TrUserData);
      p_timeboss_dropped ->
	  merge_msg_p_timeboss_dropped(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_timeboss_list_tos/3}).
merge_msg_m_timeboss_list_tos(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_timeboss_list_toc/3}).
merge_msg_m_timeboss_list_toc(#m_timeboss_list_toc{bosses
						       = PFbosses},
			      #m_timeboss_list_toc{bosses = NFbosses},
			      TrUserData) ->
    #m_timeboss_list_toc{bosses =
			     if PFbosses /= undefined, NFbosses /= undefined ->
				    'erlang_++'(PFbosses, NFbosses, TrUserData);
				PFbosses == undefined -> NFbosses;
				NFbosses == undefined -> PFbosses
			     end}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_ranking_tos/3}).
merge_msg_m_timeboss_ranking_tos(_Prev, New,
				 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_timeboss_ranking_toc/3}).
merge_msg_m_timeboss_ranking_toc(#m_timeboss_ranking_toc{ranking
							     = PFranking},
				 #m_timeboss_ranking_toc{ranking = NFranking,
							 my_rank = NFmy_rank,
							 my_dmg = NFmy_dmg},
				 TrUserData) ->
    #m_timeboss_ranking_toc{ranking =
				if PFranking /= undefined,
				   NFranking /= undefined ->
				       'erlang_++'(PFranking, NFranking,
						   TrUserData);
				   PFranking == undefined -> NFranking;
				   NFranking == undefined -> PFranking
				end,
			    my_rank = NFmy_rank, my_dmg = NFmy_dmg}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_dice_toc/3}).
merge_msg_m_timeboss_dice_toc(#m_timeboss_dice_toc{},
			      #m_timeboss_dice_toc{etime = NFetime}, _) ->
    #m_timeboss_dice_toc{etime = NFetime}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_dicing_tos/3}).
merge_msg_m_timeboss_dicing_tos(_Prev, New,
				_TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_timeboss_dicing_toc/3}).
merge_msg_m_timeboss_dicing_toc(#m_timeboss_dicing_toc{},
				#m_timeboss_dicing_toc{score = NFscore,
						       highest = NFhighest,
						       owner = NFowner},
				_) ->
    #m_timeboss_dicing_toc{score = NFscore,
			   highest = NFhighest, owner = NFowner}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_boxinfo_tos/3}).
merge_msg_m_timeboss_boxinfo_tos(_Prev, New,
				 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_timeboss_boxinfo_toc/3}).
merge_msg_m_timeboss_boxinfo_toc(#m_timeboss_boxinfo_toc{summoner
							     = PFsummoner,
							 suids = PFsuids},
				 #m_timeboss_boxinfo_toc{summoner = NFsummoner,
							 suids = NFsuids,
							 can_open = NFcan_open,
							 remain = NFremain,
							 boss_id = NFboss_id},
				 TrUserData) ->
    #m_timeboss_boxinfo_toc{summoner =
				if PFsummoner /= undefined,
				   NFsummoner /= undefined ->
				       'erlang_++'(PFsummoner, NFsummoner,
						   TrUserData);
				   PFsummoner == undefined -> NFsummoner;
				   NFsummoner == undefined -> PFsummoner
				end,
			    suids =
				if PFsuids /= undefined, NFsuids /= undefined ->
				       'erlang_++'(PFsuids, NFsuids,
						   TrUserData);
				   PFsuids == undefined -> NFsuids;
				   NFsuids == undefined -> PFsuids
				end,
			    can_open = NFcan_open, remain = NFremain,
			    boss_id = NFboss_id}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_boxopen_tos/3}).
merge_msg_m_timeboss_boxopen_tos(#m_timeboss_boxopen_tos{},
				 #m_timeboss_boxopen_tos{type = NFtype,
							 boss = NFboss,
							 times = NFtimes},
				 _) ->
    #m_timeboss_boxopen_tos{type = NFtype, boss = NFboss,
			    times = NFtimes}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_boxopen_toc/3}).
merge_msg_m_timeboss_boxopen_toc(#m_timeboss_boxopen_toc{reward
							     = PFreward},
				 #m_timeboss_boxopen_toc{type = NFtype,
							 reward = NFreward},
				 TrUserData) ->
    #m_timeboss_boxopen_toc{type = NFtype,
			    reward =
				if PFreward /= undefined,
				   NFreward /= undefined ->
				       'tr_merge_m_timeboss_boxopen_toc.reward'(PFreward,
										NFreward,
										TrUserData);
				   PFreward == undefined -> NFreward;
				   NFreward == undefined -> PFreward
				end}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_care_tos/3}).
merge_msg_m_timeboss_care_tos(#m_timeboss_care_tos{},
			      #m_timeboss_care_tos{id = NFid, op = NFop,
						   type = NFtype},
			      _) ->
    #m_timeboss_care_tos{id = NFid, op = NFop,
			 type = NFtype}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_care_toc/3}).
merge_msg_m_timeboss_care_toc(#m_timeboss_care_toc{},
			      #m_timeboss_care_toc{id = NFid, op = NFop,
						   type = NFtype},
			      _) ->
    #m_timeboss_care_toc{id = NFid, op = NFop,
			 type = NFtype}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_remind_toc/3}).
merge_msg_m_timeboss_remind_toc(#m_timeboss_remind_toc{},
				#m_timeboss_remind_toc{id = NFid}, _) ->
    #m_timeboss_remind_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_timeboss_dropped_tos/3}).
merge_msg_m_timeboss_dropped_tos(_Prev, New,
				 _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_timeboss_dropped_toc/3}).
merge_msg_m_timeboss_dropped_toc(#m_timeboss_dropped_toc{logs
							     = PFlogs},
				 #m_timeboss_dropped_toc{logs = NFlogs},
				 TrUserData) ->
    #m_timeboss_dropped_toc{logs =
				if PFlogs /= undefined, NFlogs /= undefined ->
				       'erlang_++'(PFlogs, NFlogs, TrUserData);
				   PFlogs == undefined -> NFlogs;
				   NFlogs == undefined -> PFlogs
				end}.

-compile({nowarn_unused_function,merge_msg_p_timeboss/3}).
merge_msg_p_timeboss(#p_timeboss{},
		     #p_timeboss{id = NFid, born = NFborn, floor = NFfloor,
				 role = NFrole, box = NFbox, care = NFcare},
		     _) ->
    #p_timeboss{id = NFid, born = NFborn, floor = NFfloor,
		role = NFrole, box = NFbox, care = NFcare}.

-compile({nowarn_unused_function,merge_msg_p_timeboss_ranking/3}).
merge_msg_p_timeboss_ranking(#p_timeboss_ranking{team =
						     PFteam},
			     #p_timeboss_ranking{rank = NFrank,
						 is_team = NFis_team,
						 captain = NFcaptain,
						 name = NFname,
						 damage = NFdamage,
						 team = NFteam},
			     _) ->
    #p_timeboss_ranking{rank = NFrank, is_team = NFis_team,
			captain = NFcaptain, name = NFname, damage = NFdamage,
			team =
			    if NFteam =:= undefined -> PFteam;
			       true -> NFteam
			    end}.

-compile({nowarn_unused_function,merge_msg_p_timeboss_dropped/3}).
merge_msg_p_timeboss_dropped(#p_timeboss_dropped{},
			     #p_timeboss_dropped{time = NFtime, scene = NFscene,
						 picker_id = NFpicker_id,
						 picker_name = NFpicker_name,
						 boss = NFboss,
						 item_id = NFitem_id,
						 cache_id = NFcache_id},
			     _) ->
    #p_timeboss_dropped{time = NFtime, scene = NFscene,
			picker_id = NFpicker_id, picker_name = NFpicker_name,
			boss = NFboss, item_id = NFitem_id,
			cache_id = NFcache_id}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_timeboss_list_tos ->
	  v_msg_m_timeboss_list_tos(Msg, [MsgName], TrUserData);
      m_timeboss_list_toc ->
	  v_msg_m_timeboss_list_toc(Msg, [MsgName], TrUserData);
      m_timeboss_ranking_tos ->
	  v_msg_m_timeboss_ranking_tos(Msg, [MsgName],
				       TrUserData);
      m_timeboss_ranking_toc ->
	  v_msg_m_timeboss_ranking_toc(Msg, [MsgName],
				       TrUserData);
      m_timeboss_dice_toc ->
	  v_msg_m_timeboss_dice_toc(Msg, [MsgName], TrUserData);
      m_timeboss_dicing_tos ->
	  v_msg_m_timeboss_dicing_tos(Msg, [MsgName], TrUserData);
      m_timeboss_dicing_toc ->
	  v_msg_m_timeboss_dicing_toc(Msg, [MsgName], TrUserData);
      m_timeboss_boxinfo_tos ->
	  v_msg_m_timeboss_boxinfo_tos(Msg, [MsgName],
				       TrUserData);
      m_timeboss_boxinfo_toc ->
	  v_msg_m_timeboss_boxinfo_toc(Msg, [MsgName],
				       TrUserData);
      m_timeboss_boxopen_tos ->
	  v_msg_m_timeboss_boxopen_tos(Msg, [MsgName],
				       TrUserData);
      m_timeboss_boxopen_toc ->
	  v_msg_m_timeboss_boxopen_toc(Msg, [MsgName],
				       TrUserData);
      m_timeboss_care_tos ->
	  v_msg_m_timeboss_care_tos(Msg, [MsgName], TrUserData);
      m_timeboss_care_toc ->
	  v_msg_m_timeboss_care_toc(Msg, [MsgName], TrUserData);
      m_timeboss_remind_toc ->
	  v_msg_m_timeboss_remind_toc(Msg, [MsgName], TrUserData);
      m_timeboss_dropped_tos ->
	  v_msg_m_timeboss_dropped_tos(Msg, [MsgName],
				       TrUserData);
      m_timeboss_dropped_toc ->
	  v_msg_m_timeboss_dropped_toc(Msg, [MsgName],
				       TrUserData);
      p_timeboss ->
	  v_msg_p_timeboss(Msg, [MsgName], TrUserData);
      p_timeboss_ranking ->
	  v_msg_p_timeboss_ranking(Msg, [MsgName], TrUserData);
      p_timeboss_dropped ->
	  v_msg_p_timeboss_dropped(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_timeboss_list_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_list_tos/3}).
v_msg_m_timeboss_list_tos(#m_timeboss_list_tos{}, _Path,
			  _) ->
    ok;
v_msg_m_timeboss_list_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_list_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_list_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_list_toc/3}).
v_msg_m_timeboss_list_toc(#m_timeboss_list_toc{bosses =
						   F1},
			  Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_timeboss(Elem, [bosses | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_timeboss}}, F1,
			 [bosses | Path])
    end,
    ok;
v_msg_m_timeboss_list_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_list_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_ranking_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_ranking_tos/3}).
v_msg_m_timeboss_ranking_tos(#m_timeboss_ranking_tos{},
			     _Path, _) ->
    ok;
v_msg_m_timeboss_ranking_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_ranking_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_ranking_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_ranking_toc/3}).
v_msg_m_timeboss_ranking_toc(#m_timeboss_ranking_toc{ranking
							 = F1,
						     my_rank = F2, my_dmg = F3},
			     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_timeboss_ranking(Elem, [ranking | Path],
					 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_timeboss_ranking}},
			 F1, [ranking | Path])
    end,
    v_type_int32(F2, [my_rank | Path], TrUserData),
    v_type_int32(F3, [my_dmg | Path], TrUserData),
    ok;
v_msg_m_timeboss_ranking_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_ranking_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_dice_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_dice_toc/3}).
v_msg_m_timeboss_dice_toc(#m_timeboss_dice_toc{etime =
						   F1},
			  Path, TrUserData) ->
    v_type_int32(F1, [etime | Path], TrUserData), ok;
v_msg_m_timeboss_dice_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_dice_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_dicing_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_dicing_tos/3}).
v_msg_m_timeboss_dicing_tos(#m_timeboss_dicing_tos{},
			    _Path, _) ->
    ok;
v_msg_m_timeboss_dicing_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_dicing_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_dicing_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_dicing_toc/3}).
v_msg_m_timeboss_dicing_toc(#m_timeboss_dicing_toc{score
						       = F1,
						   highest = F2, owner = F3},
			    Path, TrUserData) ->
    v_type_int32(F1, [score | Path], TrUserData),
    v_type_int32(F2, [highest | Path], TrUserData),
    v_type_string(F3, [owner | Path], TrUserData),
    ok;
v_msg_m_timeboss_dicing_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_dicing_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_boxinfo_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_boxinfo_tos/3}).
v_msg_m_timeboss_boxinfo_tos(#m_timeboss_boxinfo_tos{},
			     _Path, _) ->
    ok;
v_msg_m_timeboss_boxinfo_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_boxinfo_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_boxinfo_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_boxinfo_toc/3}).
v_msg_m_timeboss_boxinfo_toc(#m_timeboss_boxinfo_toc{summoner
							 = F1,
						     suids = F2, can_open = F3,
						     remain = F4, boss_id = F5},
			     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [summoner | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [summoner | Path])
    end,
    if is_list(F2) ->
	   _ = [v_type_int32(Elem, [suids | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F2,
			 [suids | Path])
    end,
    v_type_bool(F3, [can_open | Path], TrUserData),
    v_type_int32(F4, [remain | Path], TrUserData),
    v_type_int32(F5, [boss_id | Path], TrUserData),
    ok;
v_msg_m_timeboss_boxinfo_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_boxinfo_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_boxopen_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_boxopen_tos/3}).
v_msg_m_timeboss_boxopen_tos(#m_timeboss_boxopen_tos{type
							 = F1,
						     boss = F2, times = F3},
			     Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    v_type_int32(F2, [boss | Path], TrUserData),
    v_type_int32(F3, [times | Path], TrUserData),
    ok;
v_msg_m_timeboss_boxopen_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_boxopen_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_boxopen_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_boxopen_toc/3}).
v_msg_m_timeboss_boxopen_toc(#m_timeboss_boxopen_toc{type
							 = F1,
						     reward = F2},
			     Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    'v_map<int32,int32>'(F2, [reward | Path], TrUserData),
    ok;
v_msg_m_timeboss_boxopen_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_boxopen_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_care_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_care_tos/3}).
v_msg_m_timeboss_care_tos(#m_timeboss_care_tos{id = F1,
					       op = F2, type = F3},
			  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [op | Path], TrUserData),
    v_type_int32(F3, [type | Path], TrUserData),
    ok;
v_msg_m_timeboss_care_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_care_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_care_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_care_toc/3}).
v_msg_m_timeboss_care_toc(#m_timeboss_care_toc{id = F1,
					       op = F2, type = F3},
			  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [op | Path], TrUserData),
    v_type_int32(F3, [type | Path], TrUserData),
    ok;
v_msg_m_timeboss_care_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_care_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_remind_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_remind_toc/3}).
v_msg_m_timeboss_remind_toc(#m_timeboss_remind_toc{id =
						       F1},
			    Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_timeboss_remind_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_remind_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_dropped_tos/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_dropped_tos/3}).
v_msg_m_timeboss_dropped_tos(#m_timeboss_dropped_tos{},
			     _Path, _) ->
    ok;
v_msg_m_timeboss_dropped_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_dropped_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_timeboss_dropped_toc/3}).
-dialyzer({nowarn_function,v_msg_m_timeboss_dropped_toc/3}).
v_msg_m_timeboss_dropped_toc(#m_timeboss_dropped_toc{logs
							 = F1},
			     Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_timeboss_dropped(Elem, [logs | Path],
					 TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_timeboss_dropped}},
			 F1, [logs | Path])
    end,
    ok;
v_msg_m_timeboss_dropped_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_timeboss_dropped_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_timeboss/3}).
-dialyzer({nowarn_function,v_msg_p_timeboss/3}).
v_msg_p_timeboss(#p_timeboss{id = F1, born = F2,
			     floor = F3, role = F4, box = F5, care = F6},
		 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [born | Path], TrUserData),
    v_type_int32(F3, [floor | Path], TrUserData),
    v_type_int32(F4, [role | Path], TrUserData),
    v_type_bool(F5, [box | Path], TrUserData),
    v_type_bool(F6, [care | Path], TrUserData),
    ok;
v_msg_p_timeboss(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_timeboss}, X, Path).

-compile({nowarn_unused_function,v_msg_p_timeboss_ranking/3}).
-dialyzer({nowarn_function,v_msg_p_timeboss_ranking/3}).
v_msg_p_timeboss_ranking(#p_timeboss_ranking{rank = F1,
					     is_team = F2, captain = F3,
					     name = F4, damage = F5, team = F6},
			 Path, TrUserData) ->
    v_type_int32(F1, [rank | Path], TrUserData),
    v_type_bool(F2, [is_team | Path], TrUserData),
    v_type_fixed64(F3, [captain | Path], TrUserData),
    v_type_string(F4, [name | Path], TrUserData),
    v_type_int32(F5, [damage | Path], TrUserData),
    if F6 == undefined -> ok;
       true -> v_type_int32(F6, [team | Path], TrUserData)
    end,
    ok;
v_msg_p_timeboss_ranking(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_timeboss_ranking}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_timeboss_dropped/3}).
-dialyzer({nowarn_function,v_msg_p_timeboss_dropped/3}).
v_msg_p_timeboss_dropped(#p_timeboss_dropped{time = F1,
					     scene = F2, picker_id = F3,
					     picker_name = F4, boss = F5,
					     item_id = F6, cache_id = F7},
			 Path, TrUserData) ->
    v_type_int32(F1, [time | Path], TrUserData),
    v_type_int32(F2, [scene | Path], TrUserData),
    v_type_fixed64(F3, [picker_id | Path], TrUserData),
    v_type_string(F4, [picker_name | Path], TrUserData),
    v_type_string(F5, [boss | Path], TrUserData),
    v_type_int32(F6, [item_id | Path], TrUserData),
    v_type_int32(F7, [cache_id | Path], TrUserData),
    ok;
v_msg_p_timeboss_dropped(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_timeboss_dropped}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_m_timeboss_boxopen_toc.reward'/2}).
'tr_decode_init_default_m_timeboss_boxopen_toc.reward'(_,
						       _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_timeboss_boxopen_toc.reward'/3}).
'tr_merge_m_timeboss_boxopen_toc.reward'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_timeboss_boxopen_toc.reward'/2}).
'tr_decode_repeated_finalize_m_timeboss_boxopen_toc.reward'(L,
							    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_timeboss_boxopen_toc.reward'/2}).
'tr_encode_m_timeboss_boxopen_toc.reward'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_timeboss_boxopen_toc.reward'/3}).
'tr_decode_repeated_add_elem_m_timeboss_boxopen_toc.reward'(Elem,
							    L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_timeboss_boxopen_toc.reward[x]'/2}).
'tr_encode_m_timeboss_boxopen_toc.reward[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_timeboss_list_tos}, []},
     {{msg, m_timeboss_list_toc},
      [#field{name = bosses, fnum = 1, rnum = 2,
	      type = {msg, p_timeboss}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_timeboss_ranking_tos}, []},
     {{msg, m_timeboss_ranking_toc},
      [#field{name = ranking, fnum = 1, rnum = 2,
	      type = {msg, p_timeboss_ranking}, occurrence = repeated,
	      opts = []},
       #field{name = my_rank, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = my_dmg, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_dice_toc},
      [#field{name = etime, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_dicing_tos}, []},
     {{msg, m_timeboss_dicing_toc},
      [#field{name = score, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = highest, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = owner, fnum = 3, rnum = 4, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_boxinfo_tos}, []},
     {{msg, m_timeboss_boxinfo_toc},
      [#field{name = summoner, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []},
       #field{name = suids, fnum = 2, rnum = 3, type = int32,
	      occurrence = repeated, opts = []},
       #field{name = can_open, fnum = 3, rnum = 4, type = bool,
	      occurrence = required, opts = []},
       #field{name = remain, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = boss_id, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_boxopen_tos},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = boss, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = times, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_boxopen_toc},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 2, rnum = 3,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_timeboss_care_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = op, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_care_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = op, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_remind_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_timeboss_dropped_tos}, []},
     {{msg, m_timeboss_dropped_toc},
      [#field{name = logs, fnum = 1, rnum = 2,
	      type = {msg, p_timeboss_dropped}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_timeboss},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = born, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = floor, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = role, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = box, fnum = 5, rnum = 6, type = bool,
	      occurrence = required, opts = []},
       #field{name = care, fnum = 6, rnum = 7, type = bool,
	      occurrence = required, opts = []}]},
     {{msg, p_timeboss_ranking},
      [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = is_team, fnum = 2, rnum = 3, type = bool,
	      occurrence = required, opts = []},
       #field{name = captain, fnum = 3, rnum = 4,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = name, fnum = 4, rnum = 5, type = string,
	      occurrence = required, opts = []},
       #field{name = damage, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = team, fnum = 6, rnum = 7, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, p_timeboss_dropped},
      [#field{name = time, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = scene, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = picker_id, fnum = 3, rnum = 4,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = picker_name, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = boss, fnum = 5, rnum = 6, type = string,
	      occurrence = required, opts = []},
       #field{name = item_id, fnum = 6, rnum = 7, type = int32,
	      occurrence = required, opts = []},
       #field{name = cache_id, fnum = 7, rnum = 8,
	      type = int32, occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_timeboss_list_tos, m_timeboss_list_toc,
     m_timeboss_ranking_tos, m_timeboss_ranking_toc,
     m_timeboss_dice_toc, m_timeboss_dicing_tos,
     m_timeboss_dicing_toc, m_timeboss_boxinfo_tos,
     m_timeboss_boxinfo_toc, m_timeboss_boxopen_tos,
     m_timeboss_boxopen_toc, m_timeboss_care_tos,
     m_timeboss_care_toc, m_timeboss_remind_toc,
     m_timeboss_dropped_tos, m_timeboss_dropped_toc,
     p_timeboss, p_timeboss_ranking, p_timeboss_dropped].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_timeboss_list_tos, m_timeboss_list_toc,
     m_timeboss_ranking_tos, m_timeboss_ranking_toc,
     m_timeboss_dice_toc, m_timeboss_dicing_tos,
     m_timeboss_dicing_toc, m_timeboss_boxinfo_tos,
     m_timeboss_boxinfo_toc, m_timeboss_boxopen_tos,
     m_timeboss_boxopen_toc, m_timeboss_care_tos,
     m_timeboss_care_toc, m_timeboss_remind_toc,
     m_timeboss_dropped_tos, m_timeboss_dropped_toc,
     p_timeboss, p_timeboss_ranking, p_timeboss_dropped].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_timeboss_list_tos) -> [];
find_msg_def(m_timeboss_list_toc) ->
    [#field{name = bosses, fnum = 1, rnum = 2,
	    type = {msg, p_timeboss}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_timeboss_ranking_tos) -> [];
find_msg_def(m_timeboss_ranking_toc) ->
    [#field{name = ranking, fnum = 1, rnum = 2,
	    type = {msg, p_timeboss_ranking}, occurrence = repeated,
	    opts = []},
     #field{name = my_rank, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = my_dmg, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_dice_toc) ->
    [#field{name = etime, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_dicing_tos) -> [];
find_msg_def(m_timeboss_dicing_toc) ->
    [#field{name = score, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = highest, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = owner, fnum = 3, rnum = 4, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_boxinfo_tos) -> [];
find_msg_def(m_timeboss_boxinfo_toc) ->
    [#field{name = summoner, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []},
     #field{name = suids, fnum = 2, rnum = 3, type = int32,
	    occurrence = repeated, opts = []},
     #field{name = can_open, fnum = 3, rnum = 4, type = bool,
	    occurrence = required, opts = []},
     #field{name = remain, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = boss_id, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_boxopen_tos) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = boss, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = times, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_boxopen_toc) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 2, rnum = 3,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_timeboss_care_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = op, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_care_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = op, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_remind_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_timeboss_dropped_tos) -> [];
find_msg_def(m_timeboss_dropped_toc) ->
    [#field{name = logs, fnum = 1, rnum = 2,
	    type = {msg, p_timeboss_dropped}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_timeboss) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = born, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = floor, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = role, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = box, fnum = 5, rnum = 6, type = bool,
	    occurrence = required, opts = []},
     #field{name = care, fnum = 6, rnum = 7, type = bool,
	    occurrence = required, opts = []}];
find_msg_def(p_timeboss_ranking) ->
    [#field{name = rank, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = is_team, fnum = 2, rnum = 3, type = bool,
	    occurrence = required, opts = []},
     #field{name = captain, fnum = 3, rnum = 4,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = name, fnum = 4, rnum = 5, type = string,
	    occurrence = required, opts = []},
     #field{name = damage, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = team, fnum = 6, rnum = 7, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(p_timeboss_dropped) ->
    [#field{name = time, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = scene, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = picker_id, fnum = 3, rnum = 4,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = picker_name, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = boss, fnum = 5, rnum = 6, type = string,
	    occurrence = required, opts = []},
     #field{name = item_id, fnum = 6, rnum = 7, type = int32,
	    occurrence = required, opts = []},
     #field{name = cache_id, fnum = 7, rnum = 8,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
