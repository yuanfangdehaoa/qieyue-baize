%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1000_game).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1000_game.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_game_cheat_tos() :: #m_game_cheat_tos{}.

-type m_game_error_toc() :: #m_game_error_toc{}.

-type m_game_heart_tos() :: #m_game_heart_tos{}.

-type m_game_heart_toc() :: #m_game_heart_toc{}.

-type m_game_setting_tos() :: #m_game_setting_tos{}.

-type m_game_setting_toc() :: #m_game_setting_toc{}.

-type m_game_setup_tos() :: #m_game_setup_tos{}.

-type m_game_time_tos() :: #m_game_time_tos{}.

-type m_game_time_toc() :: #m_game_time_toc{}.

-type m_game_notify_toc() :: #m_game_notify_toc{}.

-type m_game_syslist_tos() :: #m_game_syslist_tos{}.

-type m_game_syslist_toc() :: #m_game_syslist_toc{}.

-type m_game_sysopen_toc() :: #m_game_sysopen_toc{}.

-type m_game_payinfo_tos() :: #m_game_payinfo_tos{}.

-type m_game_payinfo_toc() :: #m_game_payinfo_toc{}.

-type m_game_paysucc_toc() :: #m_game_paysucc_toc{}.

-type m_game_clienttime_tos() :: #m_game_clienttime_tos{}.

-type m_game_worldlv_tos() :: #m_game_worldlv_tos{}.

-type m_game_worldlv_toc() :: #m_game_worldlv_toc{}.

-type m_game_hotconfig_toc() :: #m_game_hotconfig_toc{}.

-type m_game_marquee_tos() :: #m_game_marquee_tos{}.

-type m_game_marquee_toc() :: #m_game_marquee_toc{}.

-type m_game_marquee_update_toc() :: #m_game_marquee_update_toc{}.

-type m_game_suspend_tos() :: #m_game_suspend_tos{}.

-type m_game_awake_tos() :: #m_game_awake_tos{}.

-type m_game_paylist_tos() :: #m_game_paylist_tos{}.

-type m_game_paylist_toc() :: #m_game_paylist_toc{}.

-type m_game_clienterror_tos() :: #m_game_clienterror_tos{}.

-type m_game_newbie_scene_tos() :: #m_game_newbie_scene_tos{}.

-type m_game_newbie_scene_toc() :: #m_game_newbie_scene_toc{}.

-type m_game_paytimes_tos() :: #m_game_paytimes_tos{}.

-type m_game_paytimes_toc() :: #m_game_paytimes_toc{}.

-type p_marquee() :: #p_marquee{}.

-type p_msgno() :: #p_msgno{}.

-export_type(['m_game_cheat_tos'/0, 'm_game_error_toc'/0, 'm_game_heart_tos'/0, 'm_game_heart_toc'/0, 'm_game_setting_tos'/0, 'm_game_setting_toc'/0, 'm_game_setup_tos'/0, 'm_game_time_tos'/0, 'm_game_time_toc'/0, 'm_game_notify_toc'/0, 'm_game_syslist_tos'/0, 'm_game_syslist_toc'/0, 'm_game_sysopen_toc'/0, 'm_game_payinfo_tos'/0, 'm_game_payinfo_toc'/0, 'm_game_paysucc_toc'/0, 'm_game_clienttime_tos'/0, 'm_game_worldlv_tos'/0, 'm_game_worldlv_toc'/0, 'm_game_hotconfig_toc'/0, 'm_game_marquee_tos'/0, 'm_game_marquee_toc'/0, 'm_game_marquee_update_toc'/0, 'm_game_suspend_tos'/0, 'm_game_awake_tos'/0, 'm_game_paylist_tos'/0, 'm_game_paylist_toc'/0, 'm_game_clienterror_tos'/0, 'm_game_newbie_scene_tos'/0, 'm_game_newbie_scene_toc'/0, 'm_game_paytimes_tos'/0, 'm_game_paytimes_toc'/0, 'p_marquee'/0, 'p_msgno'/0]).

-spec encode_msg(#m_game_cheat_tos{} | #m_game_error_toc{} | #m_game_heart_tos{} | #m_game_heart_toc{} | #m_game_setting_tos{} | #m_game_setting_toc{} | #m_game_setup_tos{} | #m_game_time_tos{} | #m_game_time_toc{} | #m_game_notify_toc{} | #m_game_syslist_tos{} | #m_game_syslist_toc{} | #m_game_sysopen_toc{} | #m_game_payinfo_tos{} | #m_game_payinfo_toc{} | #m_game_paysucc_toc{} | #m_game_clienttime_tos{} | #m_game_worldlv_tos{} | #m_game_worldlv_toc{} | #m_game_hotconfig_toc{} | #m_game_marquee_tos{} | #m_game_marquee_toc{} | #m_game_marquee_update_toc{} | #m_game_suspend_tos{} | #m_game_awake_tos{} | #m_game_paylist_tos{} | #m_game_paylist_toc{} | #m_game_clienterror_tos{} | #m_game_newbie_scene_tos{} | #m_game_newbie_scene_toc{} | #m_game_paytimes_tos{} | #m_game_paytimes_toc{} | #p_marquee{} | #p_msgno{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_game_cheat_tos{} | #m_game_error_toc{} | #m_game_heart_tos{} | #m_game_heart_toc{} | #m_game_setting_tos{} | #m_game_setting_toc{} | #m_game_setup_tos{} | #m_game_time_tos{} | #m_game_time_toc{} | #m_game_notify_toc{} | #m_game_syslist_tos{} | #m_game_syslist_toc{} | #m_game_sysopen_toc{} | #m_game_payinfo_tos{} | #m_game_payinfo_toc{} | #m_game_paysucc_toc{} | #m_game_clienttime_tos{} | #m_game_worldlv_tos{} | #m_game_worldlv_toc{} | #m_game_hotconfig_toc{} | #m_game_marquee_tos{} | #m_game_marquee_toc{} | #m_game_marquee_update_toc{} | #m_game_suspend_tos{} | #m_game_awake_tos{} | #m_game_paylist_tos{} | #m_game_paylist_toc{} | #m_game_clienterror_tos{} | #m_game_newbie_scene_tos{} | #m_game_newbie_scene_toc{} | #m_game_paytimes_tos{} | #m_game_paytimes_toc{} | #p_marquee{} | #p_msgno{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_game_cheat_tos{} | #m_game_error_toc{} | #m_game_heart_tos{} | #m_game_heart_toc{} | #m_game_setting_tos{} | #m_game_setting_toc{} | #m_game_setup_tos{} | #m_game_time_tos{} | #m_game_time_toc{} | #m_game_notify_toc{} | #m_game_syslist_tos{} | #m_game_syslist_toc{} | #m_game_sysopen_toc{} | #m_game_payinfo_tos{} | #m_game_payinfo_toc{} | #m_game_paysucc_toc{} | #m_game_clienttime_tos{} | #m_game_worldlv_tos{} | #m_game_worldlv_toc{} | #m_game_hotconfig_toc{} | #m_game_marquee_tos{} | #m_game_marquee_toc{} | #m_game_marquee_update_toc{} | #m_game_suspend_tos{} | #m_game_awake_tos{} | #m_game_paylist_tos{} | #m_game_paylist_toc{} | #m_game_clienterror_tos{} | #m_game_newbie_scene_tos{} | #m_game_newbie_scene_toc{} | #m_game_paytimes_tos{} | #m_game_paytimes_toc{} | #p_marquee{} | #p_msgno{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_game_cheat_tos ->
	  encode_msg_m_game_cheat_tos(id(Msg, TrUserData),
				      TrUserData);
      m_game_error_toc ->
	  encode_msg_m_game_error_toc(id(Msg, TrUserData),
				      TrUserData);
      m_game_heart_tos ->
	  encode_msg_m_game_heart_tos(id(Msg, TrUserData),
				      TrUserData);
      m_game_heart_toc ->
	  encode_msg_m_game_heart_toc(id(Msg, TrUserData),
				      TrUserData);
      m_game_setting_tos ->
	  encode_msg_m_game_setting_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_setting_toc ->
	  encode_msg_m_game_setting_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_setup_tos ->
	  encode_msg_m_game_setup_tos(id(Msg, TrUserData),
				      TrUserData);
      m_game_time_tos ->
	  encode_msg_m_game_time_tos(id(Msg, TrUserData),
				     TrUserData);
      m_game_time_toc ->
	  encode_msg_m_game_time_toc(id(Msg, TrUserData),
				     TrUserData);
      m_game_notify_toc ->
	  encode_msg_m_game_notify_toc(id(Msg, TrUserData),
				       TrUserData);
      m_game_syslist_tos ->
	  encode_msg_m_game_syslist_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_syslist_toc ->
	  encode_msg_m_game_syslist_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_sysopen_toc ->
	  encode_msg_m_game_sysopen_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_payinfo_tos ->
	  encode_msg_m_game_payinfo_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_payinfo_toc ->
	  encode_msg_m_game_payinfo_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_paysucc_toc ->
	  encode_msg_m_game_paysucc_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_clienttime_tos ->
	  encode_msg_m_game_clienttime_tos(id(Msg, TrUserData),
					   TrUserData);
      m_game_worldlv_tos ->
	  encode_msg_m_game_worldlv_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_worldlv_toc ->
	  encode_msg_m_game_worldlv_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_hotconfig_toc ->
	  encode_msg_m_game_hotconfig_toc(id(Msg, TrUserData),
					  TrUserData);
      m_game_marquee_tos ->
	  encode_msg_m_game_marquee_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_marquee_toc ->
	  encode_msg_m_game_marquee_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_marquee_update_toc ->
	  encode_msg_m_game_marquee_update_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_game_suspend_tos ->
	  encode_msg_m_game_suspend_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_awake_tos ->
	  encode_msg_m_game_awake_tos(id(Msg, TrUserData),
				      TrUserData);
      m_game_paylist_tos ->
	  encode_msg_m_game_paylist_tos(id(Msg, TrUserData),
					TrUserData);
      m_game_paylist_toc ->
	  encode_msg_m_game_paylist_toc(id(Msg, TrUserData),
					TrUserData);
      m_game_clienterror_tos ->
	  encode_msg_m_game_clienterror_tos(id(Msg, TrUserData),
					    TrUserData);
      m_game_newbie_scene_tos ->
	  encode_msg_m_game_newbie_scene_tos(id(Msg, TrUserData),
					     TrUserData);
      m_game_newbie_scene_toc ->
	  encode_msg_m_game_newbie_scene_toc(id(Msg, TrUserData),
					     TrUserData);
      m_game_paytimes_tos ->
	  encode_msg_m_game_paytimes_tos(id(Msg, TrUserData),
					 TrUserData);
      m_game_paytimes_toc ->
	  encode_msg_m_game_paytimes_toc(id(Msg, TrUserData),
					 TrUserData);
      p_marquee ->
	  encode_msg_p_marquee(id(Msg, TrUserData), TrUserData);
      p_msgno ->
	  encode_msg_p_msgno(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_m_game_cheat_tos(Msg, TrUserData) ->
    encode_msg_m_game_cheat_tos(Msg, <<>>, TrUserData).


encode_msg_m_game_cheat_tos(#m_game_cheat_tos{cmd = F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_game_error_toc(Msg, TrUserData) ->
    encode_msg_m_game_error_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_error_toc(#m_game_error_toc{errno =
						  F1,
					      args = F2},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_game_error_toc_args(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_game_heart_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_game_heart_toc(_Msg, _TrUserData) -> <<>>.

encode_msg_m_game_setting_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_setting_toc(Msg, TrUserData) ->
    encode_msg_m_game_setting_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_setting_toc(#m_game_setting_toc{setting
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_game_setting_toc.setting'(F1,
						    TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_game_setting_toc_setting(TrF1, Bin,
						TrUserData)
      end
    end.

encode_msg_m_game_setup_tos(Msg, TrUserData) ->
    encode_msg_m_game_setup_tos(Msg, <<>>, TrUserData).


encode_msg_m_game_setup_tos(#m_game_setup_tos{setting =
						  F1},
			    Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_game_setup_tos.setting'(F1,
						  TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_game_setup_tos_setting(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_m_game_time_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_game_time_toc(Msg, TrUserData) ->
    encode_msg_m_game_time_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_time_toc(#m_game_time_toc{time = F1,
					    tz = F2},
			   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_game_notify_toc(Msg, TrUserData) ->
    encode_msg_m_game_notify_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_notify_toc(#m_game_notify_toc{msgno =
						    F1,
						args = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_game_notify_toc_args(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_game_syslist_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_syslist_toc(Msg, TrUserData) ->
    encode_msg_m_game_syslist_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_syslist_toc(#m_game_syslist_toc{syslist
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_game_syslist_toc_syslist(TrF1, Bin,
						TrUserData)
      end
    end.

encode_msg_m_game_sysopen_toc(Msg, TrUserData) ->
    encode_msg_m_game_sysopen_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_sysopen_toc(#m_game_sysopen_toc{sysid
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_game_payinfo_tos(Msg, TrUserData) ->
    encode_msg_m_game_payinfo_tos(Msg, <<>>, TrUserData).


encode_msg_m_game_payinfo_tos(#m_game_payinfo_tos{goods_id
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_game_payinfo_toc(Msg, TrUserData) ->
    encode_msg_m_game_payinfo_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_payinfo_toc(#m_game_payinfo_toc{goods_id
						      = F1,
						  order_id = F2, pay_back = F3},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_m_game_paysucc_toc(Msg, TrUserData) ->
    encode_msg_m_game_paysucc_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_paysucc_toc(#m_game_paysucc_toc{gain =
						      F1,
						  app_order = F2,
						  sdk_order = F3},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = 'tr_encode_m_game_paysucc_toc.gain'(F1,
						      TrUserData),
	   if TrF1 == [] -> Bin;
	      true ->
		  e_field_m_game_paysucc_toc_gain(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
    end.

encode_msg_m_game_clienttime_tos(Msg, TrUserData) ->
    encode_msg_m_game_clienttime_tos(Msg, <<>>, TrUserData).


encode_msg_m_game_clienttime_tos(#m_game_clienttime_tos{time
							    = F1},
				 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_game_worldlv_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_worldlv_toc(Msg, TrUserData) ->
    encode_msg_m_game_worldlv_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_worldlv_toc(#m_game_worldlv_toc{level
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_game_hotconfig_toc(Msg, TrUserData) ->
    encode_msg_m_game_hotconfig_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_hotconfig_toc(#m_game_hotconfig_toc{config
							  = F1},
				Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_game_marquee_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_marquee_toc(Msg, TrUserData) ->
    encode_msg_m_game_marquee_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_marquee_toc(#m_game_marquee_toc{list =
						      F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_game_marquee_toc_list(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_m_game_marquee_update_toc(Msg, TrUserData) ->
    encode_msg_m_game_marquee_update_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_game_marquee_update_toc(#m_game_marquee_update_toc{add
								    = F1,
								del = F2},
				     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  e_mfield_m_game_marquee_update_toc_add(TrF1,
							 <<Bin/binary, 10>>,
							 TrUserData)
		end
	 end,
    if F2 == undefined -> B1;
       true ->
	   begin
	     TrF2 = id(F2, TrUserData),
	     e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	   end
    end.

encode_msg_m_game_suspend_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_awake_tos(_Msg, _TrUserData) -> <<>>.

encode_msg_m_game_paylist_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_paylist_toc(Msg, TrUserData) ->
    encode_msg_m_game_paylist_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_paylist_toc(#m_game_paylist_toc{paid =
						      F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_game_paylist_toc_paid(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_m_game_clienterror_tos(Msg, TrUserData) ->
    encode_msg_m_game_clienterror_tos(Msg, <<>>,
				      TrUserData).


encode_msg_m_game_clienterror_tos(#m_game_clienterror_tos{error
							      = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_game_newbie_scene_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_newbie_scene_toc(Msg, TrUserData) ->
    encode_msg_m_game_newbie_scene_toc(Msg, <<>>,
				       TrUserData).


encode_msg_m_game_newbie_scene_toc(#m_game_newbie_scene_toc{res_id
								= F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_game_paytimes_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_game_paytimes_toc(Msg, TrUserData) ->
    encode_msg_m_game_paytimes_toc(Msg, <<>>, TrUserData).


encode_msg_m_game_paytimes_toc(#m_game_paytimes_toc{times
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = 'tr_encode_m_game_paytimes_toc.times'(F1,
						   TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_game_paytimes_toc_times(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_p_marquee(Msg, TrUserData) ->
    encode_msg_p_marquee(Msg, <<>>, TrUserData).


encode_msg_p_marquee(#p_marquee{id = F1, type = F2,
				start_time = F3, end_time = F4, content = F5,
				interval = F6, ext = F7},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
	 end,
    begin
      TrF7 = 'tr_encode_p_marquee.ext'(F7, TrUserData),
      if TrF7 == [] -> B6;
	 true -> e_field_p_marquee_ext(TrF7, B6, TrUserData)
      end
    end.

encode_msg_p_msgno(Msg, TrUserData) ->
    encode_msg_p_msgno(Msg, <<>>, TrUserData).


encode_msg_p_msgno(#p_msgno{props = F1, items = F2,
			    pitems = F3},
		   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = 'tr_encode_p_msgno.props'(F1, TrUserData),
	   if TrF1 == [] -> Bin;
	      true -> e_field_p_msgno_props(TrF1, Bin, TrUserData)
	   end
	 end,
    B2 = begin
	   TrF2 = 'tr_encode_p_msgno.items'(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true -> e_field_p_msgno_items(TrF2, B1, TrUserData)
	   end
	 end,
    begin
      TrF3 = 'tr_encode_p_msgno.pitems'(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true -> e_field_p_msgno_pitems(TrF3, B2, TrUserData)
      end
    end.

e_field_m_game_error_toc_args([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_m_game_error_toc_args(Rest, Bin3, TrUserData);
e_field_m_game_error_toc_args([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_game_setting_toc_setting(Msg, Bin,
				    TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_setting_toc_setting([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_game_setting_toc_setting('tr_encode_m_game_setting_toc.setting[x]'(Elem,
										      TrUserData),
					    Bin2, TrUserData),
    e_field_m_game_setting_toc_setting(Rest, Bin3,
				       TrUserData);
e_field_m_game_setting_toc_setting([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_m_game_setup_tos_setting(Msg, Bin,
				  TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_setup_tos_setting([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_game_setup_tos_setting('tr_encode_m_game_setup_tos.setting[x]'(Elem,
										  TrUserData),
					  Bin2, TrUserData),
    e_field_m_game_setup_tos_setting(Rest, Bin3,
				     TrUserData);
e_field_m_game_setup_tos_setting([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_m_game_notify_toc_args(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_p_msgno(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_notify_toc_args([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_game_notify_toc_args(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_m_game_notify_toc_args(Rest, Bin3, TrUserData);
e_field_m_game_notify_toc_args([], Bin, _TrUserData) ->
    Bin.

e_field_m_game_syslist_toc_syslist([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_m_game_syslist_toc_syslist(Rest, Bin3,
				       TrUserData);
e_field_m_game_syslist_toc_syslist([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_m_game_paysucc_toc_gain(Msg, Bin,
				 TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_paysucc_toc_gain([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_game_paysucc_toc_gain('tr_encode_m_game_paysucc_toc.gain[x]'(Elem,
										TrUserData),
					 Bin2, TrUserData),
    e_field_m_game_paysucc_toc_gain(Rest, Bin3, TrUserData);
e_field_m_game_paysucc_toc_gain([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_game_marquee_toc_list(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_p_marquee(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_marquee_toc_list([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_game_marquee_toc_list(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_m_game_marquee_toc_list(Rest, Bin3, TrUserData);
e_field_m_game_marquee_toc_list([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_game_marquee_update_toc_add(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_p_marquee(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_paylist_toc_paid([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 8>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_game_paylist_toc_paid(Rest, Bin3, TrUserData);
e_field_m_game_paylist_toc_paid([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_game_paytimes_toc_times(Msg, Bin,
				   TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_game_paytimes_toc_times([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_m_game_paytimes_toc_times('tr_encode_m_game_paytimes_toc.times[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_m_game_paytimes_toc_times(Rest, Bin3,
				      TrUserData);
e_field_m_game_paytimes_toc_times([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_p_marquee_ext(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,int32>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_marquee_ext([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 58>>,
    Bin3 =
	e_mfield_p_marquee_ext('tr_encode_p_marquee.ext[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_p_marquee_ext(Rest, Bin3, TrUserData);
e_field_p_marquee_ext([], Bin, _TrUserData) -> Bin.

e_mfield_p_msgno_props(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_msgno_props([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_p_msgno_props('tr_encode_p_msgno.props[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_p_msgno_props(Rest, Bin3, TrUserData);
e_field_p_msgno_props([], Bin, _TrUserData) -> Bin.

e_mfield_p_msgno_items(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_msgno_items([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_p_msgno_items('tr_encode_p_msgno.items[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_p_msgno_items(Rest, Bin3, TrUserData);
e_field_p_msgno_items([], Bin, _TrUserData) -> Bin.

e_mfield_p_msgno_pitems(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_p_msgno_pitems([Elem | Rest], Bin,
		       TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_p_msgno_pitems('tr_encode_p_msgno.pitems[x]'(Elem,
							      TrUserData),
				Bin2, TrUserData),
    e_field_p_msgno_pitems(Rest, Bin3, TrUserData);
e_field_p_msgno_pitems([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,string>'(#{key := F1,
				  value := F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_map<string,int32>'(#{key := F1,
				 value := F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_game_cheat_tos, Bin, TrUserData) ->
    id(decode_msg_m_game_cheat_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_error_toc, Bin, TrUserData) ->
    id(decode_msg_m_game_error_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_heart_tos, Bin, TrUserData) ->
    id(decode_msg_m_game_heart_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_heart_toc, Bin, TrUserData) ->
    id(decode_msg_m_game_heart_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_setting_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_setting_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_setting_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_setting_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_setup_tos, Bin, TrUserData) ->
    id(decode_msg_m_game_setup_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_time_tos, Bin, TrUserData) ->
    id(decode_msg_m_game_time_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_time_toc, Bin, TrUserData) ->
    id(decode_msg_m_game_time_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_notify_toc, Bin, TrUserData) ->
    id(decode_msg_m_game_notify_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_syslist_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_syslist_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_syslist_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_syslist_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_sysopen_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_sysopen_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_payinfo_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_payinfo_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_payinfo_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_payinfo_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_paysucc_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_paysucc_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_clienttime_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_clienttime_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_worldlv_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_worldlv_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_worldlv_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_worldlv_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_hotconfig_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_hotconfig_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_marquee_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_marquee_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_marquee_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_marquee_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_marquee_update_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_marquee_update_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_suspend_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_suspend_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_awake_tos, Bin, TrUserData) ->
    id(decode_msg_m_game_awake_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_paylist_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_paylist_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_paylist_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_paylist_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_clienterror_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_clienterror_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_newbie_scene_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_newbie_scene_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_newbie_scene_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_newbie_scene_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_paytimes_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_paytimes_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_game_paytimes_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_game_paytimes_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_marquee, Bin, TrUserData) ->
    id(decode_msg_p_marquee(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_msgno, Bin, TrUserData) ->
    id(decode_msg_p_msgno(Bin, TrUserData), TrUserData).



decode_msg_m_game_cheat_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_cheat_tos(Bin, 0, 0,
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_game_cheat_tos(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_cheat_tos_cmd(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_m_game_cheat_tos(<<>>, 0, 0, F@_1,
				    _) ->
    #m_game_cheat_tos{cmd = F@_1};
dfp_read_field_def_m_game_cheat_tos(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_m_game_cheat_tos(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_m_game_cheat_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_cheat_tos(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_cheat_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_cheat_tos_cmd(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_cheat_tos(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_m_game_cheat_tos(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_game_cheat_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_m_game_cheat_tos(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_m_game_cheat_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_cheat_tos(<<>>, 0, 0, F@_1,
				   _) ->
    #m_game_cheat_tos{cmd = F@_1}.

d_field_m_game_cheat_tos_cmd(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_cheat_tos_cmd(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_m_game_cheat_tos_cmd(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_cheat_tos(RestF, 0, 0,
					NewFValue, TrUserData).

skip_varint_m_game_cheat_tos(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_cheat_tos(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_m_game_cheat_tos(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_cheat_tos(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_m_game_cheat_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_cheat_tos(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_cheat_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_cheat_tos(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_m_game_cheat_tos(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_cheat_tos(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_m_game_cheat_tos(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_game_cheat_tos(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_m_game_cheat_tos(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_game_cheat_tos(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_m_game_error_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_error_toc(Bin, 0, 0,
					id(undefined, TrUserData),
					id([], TrUserData), TrUserData).

dfp_read_field_def_m_game_error_toc(<<8, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_error_toc_errno(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_m_game_error_toc(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_error_toc_args(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_m_game_error_toc(<<>>, 0, 0, F@_1,
				    R1, TrUserData) ->
    #m_game_error_toc{errno = F@_1,
		      args = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_game_error_toc(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData) ->
    dg_read_field_def_m_game_error_toc(Other, Z1, Z2, F@_1,
				       F@_2, TrUserData).

dg_read_field_def_m_game_error_toc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_error_toc(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_game_error_toc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_error_toc_errno(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_m_game_error_toc_args(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_error_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    1 ->
		skip_64_m_game_error_toc(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    2 ->
		skip_length_delimited_m_game_error_toc(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    3 ->
		skip_group_m_game_error_toc(Rest, Key bsr 3, 0, F@_1,
					    F@_2, TrUserData);
	    5 ->
		skip_32_m_game_error_toc(Rest, 0, 0, F@_1, F@_2,
					 TrUserData)
	  end
    end;
dg_read_field_def_m_game_error_toc(<<>>, 0, 0, F@_1, R1,
				   TrUserData) ->
    #m_game_error_toc{errno = F@_1,
		      args = lists_reverse(R1, TrUserData)}.

d_field_m_game_error_toc_errno(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_error_toc_errno(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_game_error_toc_errno(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_error_toc(RestF, 0, 0,
					NewFValue, F@_2, TrUserData).

d_field_m_game_error_toc_args(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_error_toc_args(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_game_error_toc_args(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_error_toc(RestF, 0, 0, F@_1,
					cons(NewFValue, Prev, TrUserData),
					TrUserData).

skip_varint_m_game_error_toc(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_game_error_toc(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
skip_varint_m_game_error_toc(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_error_toc(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_length_delimited_m_game_error_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_error_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
skip_length_delimited_m_game_error_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_error_toc(Rest2, 0, 0, F@_1,
					F@_2, TrUserData).

skip_group_m_game_error_toc(Bin, FNum, Z2, F@_1, F@_2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_error_toc(Rest, 0, Z2, F@_1,
					F@_2, TrUserData).

skip_32_m_game_error_toc(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_error_toc(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

skip_64_m_game_error_toc(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_error_toc(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData).

decode_msg_m_game_heart_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_heart_tos(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_m_game_heart_tos(<<>>, 0, 0, _) ->
    #m_game_heart_tos{};
dfp_read_field_def_m_game_heart_tos(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_m_game_heart_tos(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_m_game_heart_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_heart_tos(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_heart_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_heart_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_heart_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_heart_tos(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_m_game_heart_tos(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_m_game_heart_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_heart_tos(<<>>, 0, 0, _) ->
    #m_game_heart_tos{}.

skip_varint_m_game_heart_tos(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_m_game_heart_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_game_heart_tos(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_heart_tos(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_m_game_heart_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_heart_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_heart_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_heart_tos(Rest2, 0, 0,
					TrUserData).

skip_group_m_game_heart_tos(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_heart_tos(Rest, 0, Z2,
					TrUserData).

skip_32_m_game_heart_tos(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_game_heart_tos(Rest, Z1, Z2,
					TrUserData).

skip_64_m_game_heart_tos(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_game_heart_tos(Rest, Z1, Z2,
					TrUserData).

decode_msg_m_game_heart_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_heart_toc(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_m_game_heart_toc(<<>>, 0, 0, _) ->
    #m_game_heart_toc{};
dfp_read_field_def_m_game_heart_toc(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_m_game_heart_toc(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_m_game_heart_toc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_heart_toc(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_heart_toc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_heart_toc(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_heart_toc(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_heart_toc(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_m_game_heart_toc(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_m_game_heart_toc(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_heart_toc(<<>>, 0, 0, _) ->
    #m_game_heart_toc{}.

skip_varint_m_game_heart_toc(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_m_game_heart_toc(Rest, Z1, Z2, TrUserData);
skip_varint_m_game_heart_toc(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_heart_toc(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_m_game_heart_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_heart_toc(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_heart_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_heart_toc(Rest2, 0, 0,
					TrUserData).

skip_group_m_game_heart_toc(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_heart_toc(Rest, 0, Z2,
					TrUserData).

skip_32_m_game_heart_toc(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_game_heart_toc(Rest, Z1, Z2,
					TrUserData).

skip_64_m_game_heart_toc(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_game_heart_toc(Rest, Z1, Z2,
					TrUserData).

decode_msg_m_game_setting_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_setting_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_game_setting_tos(<<>>, 0, 0, _) ->
    #m_game_setting_tos{};
dfp_read_field_def_m_game_setting_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_game_setting_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_game_setting_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_setting_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_setting_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_setting_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_setting_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_setting_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_game_setting_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_game_setting_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_setting_tos(<<>>, 0, 0, _) ->
    #m_game_setting_tos{}.

skip_varint_m_game_setting_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_game_setting_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_game_setting_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_setting_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_game_setting_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_setting_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_setting_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_setting_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_game_setting_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_setting_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_game_setting_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_setting_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_game_setting_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_setting_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_game_setting_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_setting_toc(Bin, 0, 0,
					  'tr_decode_init_default_m_game_setting_toc.setting'([],
											      TrUserData),
					  TrUserData).

dfp_read_field_def_m_game_setting_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_setting_toc_setting(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_game_setting_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_game_setting_toc{setting =
			    'tr_decode_repeated_finalize_m_game_setting_toc.setting'(R1,
										     TrUserData)};
dfp_read_field_def_m_game_setting_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_setting_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_setting_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_setting_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_setting_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_setting_toc_setting(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_setting_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_setting_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_setting_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_setting_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_setting_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_setting_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_game_setting_toc{setting =
			    'tr_decode_repeated_finalize_m_game_setting_toc.setting'(R1,
										     TrUserData)}.

d_field_m_game_setting_toc_setting(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_setting_toc_setting(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_setting_toc_setting(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_setting_toc(RestF, 0, 0,
					  'tr_decode_repeated_add_elem_m_game_setting_toc.setting'(NewFValue,
												   Prev,
												   TrUserData),
					  TrUserData).

skip_varint_m_game_setting_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_setting_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_setting_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_setting_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_setting_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_setting_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_setting_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_setting_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_setting_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_setting_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_setting_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_setting_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_setting_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_setting_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_setup_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_setup_tos(Bin, 0, 0,
					'tr_decode_init_default_m_game_setup_tos.setting'([],
											  TrUserData),
					TrUserData).

dfp_read_field_def_m_game_setup_tos(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_setup_tos_setting(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_game_setup_tos(<<>>, 0, 0, R1,
				    TrUserData) ->
    #m_game_setup_tos{setting =
			  'tr_decode_repeated_finalize_m_game_setup_tos.setting'(R1,
										 TrUserData)};
dfp_read_field_def_m_game_setup_tos(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_m_game_setup_tos(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_m_game_setup_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_setup_tos(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_setup_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_setup_tos_setting(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_setup_tos(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_m_game_setup_tos(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_m_game_setup_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_m_game_setup_tos(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_m_game_setup_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_setup_tos(<<>>, 0, 0, R1,
				   TrUserData) ->
    #m_game_setup_tos{setting =
			  'tr_decode_repeated_finalize_m_game_setup_tos.setting'(R1,
										 TrUserData)}.

d_field_m_game_setup_tos_setting(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_setup_tos_setting(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_setup_tos_setting(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_setup_tos(RestF, 0, 0,
					'tr_decode_repeated_add_elem_m_game_setup_tos.setting'(NewFValue,
											       Prev,
											       TrUserData),
					TrUserData).

skip_varint_m_game_setup_tos(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_setup_tos(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_m_game_setup_tos(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_setup_tos(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_m_game_setup_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_setup_tos(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_setup_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_setup_tos(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_m_game_setup_tos(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_setup_tos(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_m_game_setup_tos(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_game_setup_tos(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_m_game_setup_tos(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_m_game_setup_tos(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_m_game_time_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_time_tos(Bin, 0, 0,
				       TrUserData).

dfp_read_field_def_m_game_time_tos(<<>>, 0, 0, _) ->
    #m_game_time_tos{};
dfp_read_field_def_m_game_time_tos(Other, Z1, Z2,
				   TrUserData) ->
    dg_read_field_def_m_game_time_tos(Other, Z1, Z2,
				      TrUserData).

dg_read_field_def_m_game_time_tos(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_time_tos(Rest, N + 7,
				      X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_time_tos(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_time_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_time_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_time_tos(Rest, 0, 0,
						TrUserData);
      3 ->
	  skip_group_m_game_time_tos(Rest, Key bsr 3, 0,
				     TrUserData);
      5 -> skip_32_m_game_time_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_time_tos(<<>>, 0, 0, _) ->
    #m_game_time_tos{}.

skip_varint_m_game_time_tos(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    skip_varint_m_game_time_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_game_time_tos(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_time_tos(Rest, Z1, Z2,
				       TrUserData).

skip_length_delimited_m_game_time_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_time_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_time_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_time_tos(Rest2, 0, 0,
				       TrUserData).

skip_group_m_game_time_tos(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_time_tos(Rest, 0, Z2,
				       TrUserData).

skip_32_m_game_time_tos(<<_:32, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_m_game_time_tos(Rest, Z1, Z2,
				       TrUserData).

skip_64_m_game_time_tos(<<_:64, Rest/binary>>, Z1, Z2,
			TrUserData) ->
    dfp_read_field_def_m_game_time_tos(Rest, Z1, Z2,
				       TrUserData).

decode_msg_m_game_time_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_time_toc(Bin, 0, 0,
				       id(undefined, TrUserData),
				       id(undefined, TrUserData), TrUserData).

dfp_read_field_def_m_game_time_toc(<<8, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_time_toc_time(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData);
dfp_read_field_def_m_game_time_toc(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_time_toc_tz(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_m_game_time_toc(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    #m_game_time_toc{time = F@_1, tz = F@_2};
dfp_read_field_def_m_game_time_toc(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_m_game_time_toc(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_m_game_time_toc(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_time_toc(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_game_time_toc(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_time_toc_time(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
      16 ->
	  d_field_m_game_time_toc_tz(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_time_toc(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_m_game_time_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_m_game_time_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_m_game_time_toc(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_m_game_time_toc(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_m_game_time_toc(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #m_game_time_toc{time = F@_1, tz = F@_2}.

d_field_m_game_time_toc_time(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_time_toc_time(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
d_field_m_game_time_toc_time(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_game_time_toc(RestF, 0, 0,
				       NewFValue, F@_2, TrUserData).

d_field_m_game_time_toc_tz(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_time_toc_tz(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_m_game_time_toc_tz(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_time_toc(RestF, 0, 0, F@_1,
				       NewFValue, TrUserData).

skip_varint_m_game_time_toc(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_game_time_toc(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_m_game_time_toc(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_time_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_m_game_time_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_time_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_m_game_time_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_time_toc(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_m_game_time_toc(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_time_toc(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_m_game_time_toc(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_time_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_m_game_time_toc(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_time_toc(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_m_game_notify_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_notify_toc(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_m_game_notify_toc(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_notify_toc_msgno(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_m_game_notify_toc(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_notify_toc_args(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_m_game_notify_toc(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #m_game_notify_toc{msgno = F@_1,
		       args = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_game_notify_toc(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_game_notify_toc(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_m_game_notify_toc(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_notify_toc(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_game_notify_toc(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_notify_toc_msgno(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  d_field_m_game_notify_toc_args(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_notify_toc(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_m_game_notify_toc(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_m_game_notify_toc(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_m_game_notify_toc(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_m_game_notify_toc(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_m_game_notify_toc(<<>>, 0, 0, F@_1,
				    R1, TrUserData) ->
    #m_game_notify_toc{msgno = F@_1,
		       args = lists_reverse(R1, TrUserData)}.

d_field_m_game_notify_toc_msgno(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_notify_toc_msgno(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_game_notify_toc_msgno(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_notify_toc(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_m_game_notify_toc_args(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_notify_toc_args(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_game_notify_toc_args(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_msgno(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_notify_toc(RestF, 0, 0, F@_1,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_m_game_notify_toc(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_game_notify_toc(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_m_game_notify_toc(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_notify_toc(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_m_game_notify_toc(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_notify_toc(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_m_game_notify_toc(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_notify_toc(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_m_game_notify_toc(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_notify_toc(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_m_game_notify_toc(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_notify_toc(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_m_game_notify_toc(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_notify_toc(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_m_game_syslist_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_syslist_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_game_syslist_tos(<<>>, 0, 0, _) ->
    #m_game_syslist_tos{};
dfp_read_field_def_m_game_syslist_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_game_syslist_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_game_syslist_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_syslist_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_syslist_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_syslist_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_syslist_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_syslist_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_game_syslist_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_game_syslist_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_syslist_tos(<<>>, 0, 0, _) ->
    #m_game_syslist_tos{}.

skip_varint_m_game_syslist_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_game_syslist_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_game_syslist_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_syslist_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_game_syslist_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_syslist_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_syslist_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_syslist_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_game_syslist_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_syslist_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_game_syslist_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_syslist_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_game_syslist_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_syslist_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_game_syslist_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_syslist_toc(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_game_syslist_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_syslist_toc_syslist(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_game_syslist_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_game_syslist_toc{syslist =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_game_syslist_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_syslist_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_syslist_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_syslist_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_syslist_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_syslist_toc_syslist(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_syslist_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_syslist_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_syslist_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_syslist_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_syslist_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_syslist_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_game_syslist_toc{syslist =
			    lists_reverse(R1, TrUserData)}.

d_field_m_game_syslist_toc_syslist(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_syslist_toc_syslist(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_syslist_toc_syslist(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_syslist_toc(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_game_syslist_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_syslist_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_syslist_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_syslist_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_syslist_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_syslist_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_syslist_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_syslist_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_syslist_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_syslist_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_syslist_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_syslist_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_syslist_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_syslist_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_sysopen_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_sysopen_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_game_sysopen_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_sysopen_toc_sysid(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_game_sysopen_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_game_sysopen_toc{sysid = F@_1};
dfp_read_field_def_m_game_sysopen_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_sysopen_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_sysopen_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_sysopen_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_sysopen_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_sysopen_toc_sysid(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_sysopen_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_sysopen_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_sysopen_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_sysopen_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_sysopen_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_sysopen_toc(<<>>, 0, 0, F@_1,
				     _) ->
    #m_game_sysopen_toc{sysid = F@_1}.

d_field_m_game_sysopen_toc_sysid(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_sysopen_toc_sysid(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_sysopen_toc_sysid(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_sysopen_toc(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_game_sysopen_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_sysopen_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_sysopen_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_sysopen_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_sysopen_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_sysopen_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_sysopen_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_sysopen_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_sysopen_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_sysopen_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_sysopen_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_sysopen_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_sysopen_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_sysopen_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_payinfo_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_tos(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_game_payinfo_tos(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_payinfo_tos_goods_id(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_game_payinfo_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_game_payinfo_tos{goods_id = F@_1};
dfp_read_field_def_m_game_payinfo_tos(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_payinfo_tos(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_payinfo_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_payinfo_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_payinfo_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_payinfo_tos_goods_id(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_payinfo_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_payinfo_tos(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_payinfo_tos(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_payinfo_tos(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_payinfo_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_payinfo_tos(<<>>, 0, 0, F@_1,
				     _) ->
    #m_game_payinfo_tos{goods_id = F@_1}.

d_field_m_game_payinfo_tos_goods_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_payinfo_tos_goods_id(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_payinfo_tos_goods_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_payinfo_tos(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_game_payinfo_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_payinfo_tos(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_payinfo_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_payinfo_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_payinfo_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_payinfo_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_payinfo_tos(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_payinfo_tos(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_payinfo_tos(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_payinfo_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_payinfo_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_payinfo_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_game_payinfo_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_game_payinfo_toc_goods_id(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_game_payinfo_toc(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_game_payinfo_toc_order_id(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_game_payinfo_toc(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_game_payinfo_toc_pay_back(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_game_payinfo_toc(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #m_game_payinfo_toc{goods_id = F@_1, order_id = F@_2,
			pay_back = F@_3};
dfp_read_field_def_m_game_payinfo_toc(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_game_payinfo_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_game_payinfo_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_payinfo_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
dg_read_field_def_m_game_payinfo_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_payinfo_toc_goods_id(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      18 ->
	  d_field_m_game_payinfo_toc_order_id(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      26 ->
	  d_field_m_game_payinfo_toc_pay_back(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_payinfo_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		skip_64_m_game_payinfo_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_payinfo_toc(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		skip_group_m_game_payinfo_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_game_payinfo_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_game_payinfo_toc(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #m_game_payinfo_toc{goods_id = F@_1, order_id = F@_2,
			pay_back = F@_3}.

d_field_m_game_payinfo_toc_goods_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_game_payinfo_toc_goods_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_game_payinfo_toc_goods_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_payinfo_toc(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, TrUserData).

d_field_m_game_payinfo_toc_order_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_game_payinfo_toc_order_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_game_payinfo_toc_order_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_payinfo_toc(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, TrUserData).

d_field_m_game_payinfo_toc_pay_back(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_game_payinfo_toc_pay_back(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_game_payinfo_toc_pay_back(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_payinfo_toc(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, TrUserData).

skip_varint_m_game_payinfo_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_game_payinfo_toc(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
skip_varint_m_game_payinfo_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_game_payinfo_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_payinfo_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
skip_length_delimited_m_game_payinfo_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_payinfo_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

skip_group_m_game_payinfo_toc(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_payinfo_toc(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

skip_32_m_game_payinfo_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_64_m_game_payinfo_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_game_payinfo_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_game_paysucc_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_paysucc_toc(Bin, 0, 0,
					  'tr_decode_init_default_m_game_paysucc_toc.gain'([],
											   TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_game_paysucc_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_game_paysucc_toc_gain(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
dfp_read_field_def_m_game_paysucc_toc(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_game_paysucc_toc_app_order(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_m_game_paysucc_toc(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_game_paysucc_toc_sdk_order(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_m_game_paysucc_toc(<<>>, 0, 0, R1,
				      F@_2, F@_3, TrUserData) ->
    #m_game_paysucc_toc{gain =
			    'tr_decode_repeated_finalize_m_game_paysucc_toc.gain'(R1,
										  TrUserData),
			app_order = F@_2, sdk_order = F@_3};
dfp_read_field_def_m_game_paysucc_toc(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_game_paysucc_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_game_paysucc_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_paysucc_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
dg_read_field_def_m_game_paysucc_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_paysucc_toc_gain(Rest, 0, 0, F@_1, F@_2,
					  F@_3, TrUserData);
      18 ->
	  d_field_m_game_paysucc_toc_app_order(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      26 ->
	  d_field_m_game_paysucc_toc_sdk_order(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_paysucc_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		skip_64_m_game_paysucc_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_paysucc_toc(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		skip_group_m_game_paysucc_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_game_paysucc_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_game_paysucc_toc(<<>>, 0, 0, R1,
				     F@_2, F@_3, TrUserData) ->
    #m_game_paysucc_toc{gain =
			    'tr_decode_repeated_finalize_m_game_paysucc_toc.gain'(R1,
										  TrUserData),
			app_order = F@_2, sdk_order = F@_3}.

d_field_m_game_paysucc_toc_gain(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_game_paysucc_toc_gain(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
d_field_m_game_paysucc_toc_gain(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_paysucc_toc(RestF, 0, 0,
					  'tr_decode_repeated_add_elem_m_game_paysucc_toc.gain'(NewFValue,
												Prev,
												TrUserData),
					  F@_2, F@_3, TrUserData).

d_field_m_game_paysucc_toc_app_order(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_game_paysucc_toc_app_order(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_m_game_paysucc_toc_app_order(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_paysucc_toc(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, TrUserData).

d_field_m_game_paysucc_toc_sdk_order(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_game_paysucc_toc_sdk_order(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_m_game_paysucc_toc_sdk_order(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_paysucc_toc(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, TrUserData).

skip_varint_m_game_paysucc_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_game_paysucc_toc(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
skip_varint_m_game_paysucc_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_game_paysucc_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_game_paysucc_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_paysucc_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
skip_length_delimited_m_game_paysucc_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_paysucc_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

skip_group_m_game_paysucc_toc(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_paysucc_toc(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

skip_32_m_game_paysucc_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_game_paysucc_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_64_m_game_paysucc_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_game_paysucc_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_game_clienttime_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_clienttime_tos(Bin, 0, 0,
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_m_game_clienttime_tos(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_clienttime_tos_time(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_m_game_clienttime_tos(<<>>, 0, 0,
					 F@_1, _) ->
    #m_game_clienttime_tos{time = F@_1};
dfp_read_field_def_m_game_clienttime_tos(Other, Z1, Z2,
					 F@_1, TrUserData) ->
    dg_read_field_def_m_game_clienttime_tos(Other, Z1, Z2,
					    F@_1, TrUserData).

dg_read_field_def_m_game_clienttime_tos(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_clienttime_tos(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_clienttime_tos(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_clienttime_tos_time(Rest, 0, 0, F@_1,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_clienttime_tos(Rest, 0, 0, F@_1,
						  TrUserData);
	    1 ->
		skip_64_m_game_clienttime_tos(Rest, 0, 0, F@_1,
					      TrUserData);
	    2 ->
		skip_length_delimited_m_game_clienttime_tos(Rest, 0, 0,
							    F@_1, TrUserData);
	    3 ->
		skip_group_m_game_clienttime_tos(Rest, Key bsr 3, 0,
						 F@_1, TrUserData);
	    5 ->
		skip_32_m_game_clienttime_tos(Rest, 0, 0, F@_1,
					      TrUserData)
	  end
    end;
dg_read_field_def_m_game_clienttime_tos(<<>>, 0, 0,
					F@_1, _) ->
    #m_game_clienttime_tos{time = F@_1}.

d_field_m_game_clienttime_tos_time(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_clienttime_tos_time(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_clienttime_tos_time(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_m_game_clienttime_tos(RestF, 0, 0,
					     NewFValue, TrUserData).

skip_varint_m_game_clienttime_tos(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_clienttime_tos(Rest, Z1, Z2, F@_1,
				      TrUserData);
skip_varint_m_game_clienttime_tos(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_clienttime_tos(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_length_delimited_m_game_clienttime_tos(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_clienttime_tos(Rest, N + 7,
						X bsl N + Acc, F@_1,
						TrUserData);
skip_length_delimited_m_game_clienttime_tos(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_clienttime_tos(Rest2, 0, 0,
					     F@_1, TrUserData).

skip_group_m_game_clienttime_tos(Bin, FNum, Z2, F@_1,
				 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_clienttime_tos(Rest, 0, Z2,
					     F@_1, TrUserData).

skip_32_m_game_clienttime_tos(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_clienttime_tos(Rest, Z1, Z2,
					     F@_1, TrUserData).

skip_64_m_game_clienttime_tos(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_clienttime_tos(Rest, Z1, Z2,
					     F@_1, TrUserData).

decode_msg_m_game_worldlv_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_game_worldlv_tos(<<>>, 0, 0, _) ->
    #m_game_worldlv_tos{};
dfp_read_field_def_m_game_worldlv_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_game_worldlv_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_game_worldlv_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_worldlv_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_worldlv_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_worldlv_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_worldlv_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_worldlv_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_game_worldlv_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_game_worldlv_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_worldlv_tos(<<>>, 0, 0, _) ->
    #m_game_worldlv_tos{}.

skip_varint_m_game_worldlv_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_game_worldlv_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_game_worldlv_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_game_worldlv_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_worldlv_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_worldlv_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_worldlv_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_game_worldlv_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_worldlv_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_game_worldlv_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_game_worldlv_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_game_worldlv_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_game_worldlv_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_worldlv_toc_level(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_game_worldlv_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_game_worldlv_toc{level = F@_1};
dfp_read_field_def_m_game_worldlv_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_worldlv_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_worldlv_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_worldlv_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_worldlv_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_worldlv_toc_level(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_worldlv_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_worldlv_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_worldlv_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_worldlv_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_worldlv_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_worldlv_toc(<<>>, 0, 0, F@_1,
				     _) ->
    #m_game_worldlv_toc{level = F@_1}.

d_field_m_game_worldlv_toc_level(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_worldlv_toc_level(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_worldlv_toc_level(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_worldlv_toc(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_game_worldlv_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_worldlv_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_worldlv_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_worldlv_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_worldlv_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_worldlv_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_worldlv_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_worldlv_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_worldlv_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_worldlv_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_worldlv_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_worldlv_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_hotconfig_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_hotconfig_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_m_game_hotconfig_toc(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_hotconfig_toc_config(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_m_game_hotconfig_toc(<<>>, 0, 0,
					F@_1, _) ->
    #m_game_hotconfig_toc{config = F@_1};
dfp_read_field_def_m_game_hotconfig_toc(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_m_game_hotconfig_toc(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_m_game_hotconfig_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_hotconfig_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_hotconfig_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_hotconfig_toc_config(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_hotconfig_toc(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_m_game_hotconfig_toc(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_game_hotconfig_toc(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_m_game_hotconfig_toc(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_m_game_hotconfig_toc(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_game_hotconfig_toc(<<>>, 0, 0, F@_1,
				       _) ->
    #m_game_hotconfig_toc{config = F@_1}.

d_field_m_game_hotconfig_toc_config(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_hotconfig_toc_config(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_hotconfig_toc_config(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_hotconfig_toc(RestF, 0, 0,
					    NewFValue, TrUserData).

skip_varint_m_game_hotconfig_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_hotconfig_toc(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_m_game_hotconfig_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_hotconfig_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_m_game_hotconfig_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_hotconfig_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_hotconfig_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_hotconfig_toc(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_m_game_hotconfig_toc(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_hotconfig_toc(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_m_game_hotconfig_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_hotconfig_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_m_game_hotconfig_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_hotconfig_toc(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_m_game_marquee_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_marquee_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_game_marquee_tos(<<>>, 0, 0, _) ->
    #m_game_marquee_tos{};
dfp_read_field_def_m_game_marquee_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_game_marquee_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_game_marquee_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_marquee_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_marquee_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_marquee_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_marquee_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_marquee_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_game_marquee_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_game_marquee_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_marquee_tos(<<>>, 0, 0, _) ->
    #m_game_marquee_tos{}.

skip_varint_m_game_marquee_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_game_marquee_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_game_marquee_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_marquee_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_game_marquee_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_marquee_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_marquee_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_marquee_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_game_marquee_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_marquee_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_game_marquee_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_marquee_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_game_marquee_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_marquee_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_game_marquee_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_marquee_toc(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_game_marquee_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_marquee_toc_list(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_game_marquee_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_game_marquee_toc{list =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_game_marquee_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_marquee_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_marquee_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_marquee_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_marquee_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_marquee_toc_list(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_marquee_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_marquee_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_marquee_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_marquee_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_marquee_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_marquee_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_game_marquee_toc{list =
			    lists_reverse(R1, TrUserData)}.

d_field_m_game_marquee_toc_list(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_marquee_toc_list(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_marquee_toc_list(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_marquee(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_marquee_toc(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_game_marquee_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_marquee_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_marquee_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_marquee_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_marquee_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_marquee_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_marquee_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_marquee_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_marquee_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_marquee_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_marquee_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_marquee_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_marquee_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_marquee_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_marquee_update_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_marquee_update_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_game_marquee_update_toc(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_marquee_update_toc_add(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_game_marquee_update_toc(<<16,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_game_marquee_update_toc_del(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_game_marquee_update_toc(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #m_game_marquee_update_toc{add = F@_1, del = F@_2};
dfp_read_field_def_m_game_marquee_update_toc(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_game_marquee_update_toc(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_game_marquee_update_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_marquee_update_toc(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_m_game_marquee_update_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_marquee_update_toc_add(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      16 ->
	  d_field_m_game_marquee_update_toc_del(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_marquee_update_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_m_game_marquee_update_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_game_marquee_update_toc(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_m_game_marquee_update_toc(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_game_marquee_update_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_game_marquee_update_toc(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_game_marquee_update_toc{add = F@_1, del = F@_2}.

d_field_m_game_marquee_update_toc_add(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_marquee_update_toc_add(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_game_marquee_update_toc_add(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_marquee(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_marquee_update_toc(RestF, 0,
						 0,
						 if Prev == undefined ->
							NewFValue;
						    true ->
							merge_msg_p_marquee(Prev,
									    NewFValue,
									    TrUserData)
						 end,
						 F@_2, TrUserData).

d_field_m_game_marquee_update_toc_del(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_game_marquee_update_toc_del(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_game_marquee_update_toc_del(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_marquee_update_toc(RestF, 0,
						 0, F@_1, NewFValue,
						 TrUserData).

skip_varint_m_game_marquee_update_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_game_marquee_update_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_m_game_marquee_update_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_marquee_update_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_game_marquee_update_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_marquee_update_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_m_game_marquee_update_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_marquee_update_toc(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_m_game_marquee_update_toc(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_marquee_update_toc(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_m_game_marquee_update_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_marquee_update_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_m_game_marquee_update_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_game_marquee_update_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_m_game_suspend_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_suspend_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_game_suspend_tos(<<>>, 0, 0, _) ->
    #m_game_suspend_tos{};
dfp_read_field_def_m_game_suspend_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_game_suspend_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_game_suspend_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_suspend_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_suspend_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_suspend_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_suspend_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_suspend_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_game_suspend_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_game_suspend_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_suspend_tos(<<>>, 0, 0, _) ->
    #m_game_suspend_tos{}.

skip_varint_m_game_suspend_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_game_suspend_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_game_suspend_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_suspend_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_game_suspend_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_suspend_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_suspend_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_suspend_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_game_suspend_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_suspend_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_game_suspend_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_suspend_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_game_suspend_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_suspend_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_game_awake_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_awake_tos(Bin, 0, 0,
					TrUserData).

dfp_read_field_def_m_game_awake_tos(<<>>, 0, 0, _) ->
    #m_game_awake_tos{};
dfp_read_field_def_m_game_awake_tos(Other, Z1, Z2,
				    TrUserData) ->
    dg_read_field_def_m_game_awake_tos(Other, Z1, Z2,
				       TrUserData).

dg_read_field_def_m_game_awake_tos(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_awake_tos(Rest, N + 7,
				       X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_awake_tos(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_awake_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_awake_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_awake_tos(Rest, 0, 0,
						 TrUserData);
      3 ->
	  skip_group_m_game_awake_tos(Rest, Key bsr 3, 0,
				      TrUserData);
      5 -> skip_32_m_game_awake_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_awake_tos(<<>>, 0, 0, _) ->
    #m_game_awake_tos{}.

skip_varint_m_game_awake_tos(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    skip_varint_m_game_awake_tos(Rest, Z1, Z2, TrUserData);
skip_varint_m_game_awake_tos(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_awake_tos(Rest, Z1, Z2,
					TrUserData).

skip_length_delimited_m_game_awake_tos(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_awake_tos(Rest, N + 7,
					   X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_awake_tos(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_awake_tos(Rest2, 0, 0,
					TrUserData).

skip_group_m_game_awake_tos(Bin, FNum, Z2,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_awake_tos(Rest, 0, Z2,
					TrUserData).

skip_32_m_game_awake_tos(<<_:32, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_game_awake_tos(Rest, Z1, Z2,
					TrUserData).

skip_64_m_game_awake_tos(<<_:64, Rest/binary>>, Z1, Z2,
			 TrUserData) ->
    dfp_read_field_def_m_game_awake_tos(Rest, Z1, Z2,
					TrUserData).

decode_msg_m_game_paylist_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_paylist_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_game_paylist_tos(<<>>, 0, 0, _) ->
    #m_game_paylist_tos{};
dfp_read_field_def_m_game_paylist_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_game_paylist_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_game_paylist_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_paylist_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_paylist_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_paylist_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_game_paylist_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_paylist_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_game_paylist_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_game_paylist_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_paylist_tos(<<>>, 0, 0, _) ->
    #m_game_paylist_tos{}.

skip_varint_m_game_paylist_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_game_paylist_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_game_paylist_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_paylist_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_game_paylist_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_paylist_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_paylist_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_paylist_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_game_paylist_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_paylist_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_game_paylist_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_paylist_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_game_paylist_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_game_paylist_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_game_paylist_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_paylist_toc(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_game_paylist_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_pfield_m_game_paylist_toc_paid(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_m_game_paylist_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_paylist_toc_paid(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_game_paylist_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_game_paylist_toc{paid =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_game_paylist_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_game_paylist_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_game_paylist_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_paylist_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_paylist_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_m_game_paylist_toc_paid(Rest, 0, 0, F@_1,
					   TrUserData);
      8 ->
	  d_field_m_game_paylist_toc_paid(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_paylist_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_game_paylist_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_game_paylist_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_game_paylist_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_game_paylist_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_game_paylist_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_game_paylist_toc{paid =
			    lists_reverse(R1, TrUserData)}.

d_field_m_game_paylist_toc_paid(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_paylist_toc_paid(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_paylist_toc_paid(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_paylist_toc(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

d_pfield_m_game_paylist_toc_paid(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_m_game_paylist_toc_paid(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_pfield_m_game_paylist_toc_paid(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_game_paylist_toc_paid(PackedBytes, 0,
					       0, E, TrUserData),
    dfp_read_field_def_m_game_paylist_toc(Rest2, 0, 0,
					  NewSeq, TrUserData).

d_packed_field_m_game_paylist_toc_paid(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_game_paylist_toc_paid(Rest, N + 7,
					   X bsl N + Acc, AccSeq, TrUserData);
d_packed_field_m_game_paylist_toc_paid(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_game_paylist_toc_paid(RestF, 0, 0,
					   [NewFValue | AccSeq], TrUserData);
d_packed_field_m_game_paylist_toc_paid(<<>>, 0, 0,
				       AccSeq, _) ->
    AccSeq.

skip_varint_m_game_paylist_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_paylist_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_game_paylist_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_paylist_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_game_paylist_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_paylist_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_paylist_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_paylist_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_game_paylist_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_paylist_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_game_paylist_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_paylist_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_game_paylist_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_paylist_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_game_clienterror_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_clienterror_tos(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_game_clienterror_tos(<<10,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_clienterror_tos_error(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_m_game_clienterror_tos(<<>>, 0, 0,
					  F@_1, _) ->
    #m_game_clienterror_tos{error = F@_1};
dfp_read_field_def_m_game_clienterror_tos(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_m_game_clienterror_tos(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_m_game_clienterror_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_clienterror_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_clienterror_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_clienterror_tos_error(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_clienterror_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_m_game_clienterror_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_game_clienterror_tos(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_m_game_clienterror_tos(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_m_game_clienterror_tos(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_game_clienterror_tos(<<>>, 0, 0,
					 F@_1, _) ->
    #m_game_clienterror_tos{error = F@_1}.

d_field_m_game_clienterror_tos_error(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_clienterror_tos_error(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_clienterror_tos_error(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_clienterror_tos(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_m_game_clienterror_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_clienterror_tos(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_m_game_clienterror_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_clienterror_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_m_game_clienterror_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_clienterror_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_m_game_clienterror_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_clienterror_tos(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_m_game_clienterror_tos(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_clienterror_tos(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_m_game_clienterror_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_clienterror_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_m_game_clienterror_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_clienterror_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_m_game_newbie_scene_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_tos(Bin, 0, 0,
					       TrUserData).

dfp_read_field_def_m_game_newbie_scene_tos(<<>>, 0, 0,
					   _) ->
    #m_game_newbie_scene_tos{};
dfp_read_field_def_m_game_newbie_scene_tos(Other, Z1,
					   Z2, TrUserData) ->
    dg_read_field_def_m_game_newbie_scene_tos(Other, Z1, Z2,
					      TrUserData).

dg_read_field_def_m_game_newbie_scene_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_newbie_scene_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_newbie_scene_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_newbie_scene_tos(Rest, 0, 0,
					      TrUserData);
      1 ->
	  skip_64_m_game_newbie_scene_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_newbie_scene_tos(Rest, 0,
							0, TrUserData);
      3 ->
	  skip_group_m_game_newbie_scene_tos(Rest, Key bsr 3, 0,
					     TrUserData);
      5 ->
	  skip_32_m_game_newbie_scene_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_newbie_scene_tos(<<>>, 0, 0,
					  _) ->
    #m_game_newbie_scene_tos{}.

skip_varint_m_game_newbie_scene_tos(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    skip_varint_m_game_newbie_scene_tos(Rest, Z1, Z2,
					TrUserData);
skip_varint_m_game_newbie_scene_tos(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_tos(Rest, Z1, Z2,
					       TrUserData).

skip_length_delimited_m_game_newbie_scene_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_newbie_scene_tos(Rest,
						  N + 7, X bsl N + Acc,
						  TrUserData);
skip_length_delimited_m_game_newbie_scene_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_newbie_scene_tos(Rest2, 0, 0,
					       TrUserData).

skip_group_m_game_newbie_scene_tos(Bin, FNum, Z2,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_newbie_scene_tos(Rest, 0, Z2,
					       TrUserData).

skip_32_m_game_newbie_scene_tos(<<_:32, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_tos(Rest, Z1, Z2,
					       TrUserData).

skip_64_m_game_newbie_scene_tos(<<_:64, Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_tos(Rest, Z1, Z2,
					       TrUserData).

decode_msg_m_game_newbie_scene_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_toc(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_game_newbie_scene_toc(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_newbie_scene_toc_res_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_game_newbie_scene_toc(<<>>, 0, 0,
					   F@_1, _) ->
    #m_game_newbie_scene_toc{res_id = F@_1};
dfp_read_field_def_m_game_newbie_scene_toc(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_game_newbie_scene_toc(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_m_game_newbie_scene_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_newbie_scene_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_newbie_scene_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_game_newbie_scene_toc_res_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_newbie_scene_toc(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_m_game_newbie_scene_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_m_game_newbie_scene_toc(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_m_game_newbie_scene_toc(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_m_game_newbie_scene_toc(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_m_game_newbie_scene_toc(<<>>, 0, 0,
					  F@_1, _) ->
    #m_game_newbie_scene_toc{res_id = F@_1}.

d_field_m_game_newbie_scene_toc_res_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_newbie_scene_toc_res_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_newbie_scene_toc_res_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_game_newbie_scene_toc(RestF, 0, 0,
					       NewFValue, TrUserData).

skip_varint_m_game_newbie_scene_toc(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_newbie_scene_toc(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_m_game_newbie_scene_toc(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_m_game_newbie_scene_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_newbie_scene_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_m_game_newbie_scene_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_newbie_scene_toc(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_m_game_newbie_scene_toc(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_newbie_scene_toc(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_m_game_newbie_scene_toc(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_m_game_newbie_scene_toc(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_newbie_scene_toc(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_m_game_paytimes_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_tos(Bin, 0, 0,
					   TrUserData).

dfp_read_field_def_m_game_paytimes_tos(<<>>, 0, 0, _) ->
    #m_game_paytimes_tos{};
dfp_read_field_def_m_game_paytimes_tos(Other, Z1, Z2,
				       TrUserData) ->
    dg_read_field_def_m_game_paytimes_tos(Other, Z1, Z2,
					  TrUserData).

dg_read_field_def_m_game_paytimes_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_paytimes_tos(Rest, N + 7,
					  X bsl N + Acc, TrUserData);
dg_read_field_def_m_game_paytimes_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_game_paytimes_tos(Rest, 0, 0, TrUserData);
      1 ->
	  skip_64_m_game_paytimes_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_game_paytimes_tos(Rest, 0, 0,
						    TrUserData);
      3 ->
	  skip_group_m_game_paytimes_tos(Rest, Key bsr 3, 0,
					 TrUserData);
      5 -> skip_32_m_game_paytimes_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_game_paytimes_tos(<<>>, 0, 0, _) ->
    #m_game_paytimes_tos{}.

skip_varint_m_game_paytimes_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    skip_varint_m_game_paytimes_tos(Rest, Z1, Z2,
				    TrUserData);
skip_varint_m_game_paytimes_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_tos(Rest, Z1, Z2,
					   TrUserData).

skip_length_delimited_m_game_paytimes_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_paytimes_tos(Rest, N + 7,
					      X bsl N + Acc, TrUserData);
skip_length_delimited_m_game_paytimes_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_paytimes_tos(Rest2, 0, 0,
					   TrUserData).

skip_group_m_game_paytimes_tos(Bin, FNum, Z2,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_paytimes_tos(Rest, 0, Z2,
					   TrUserData).

skip_32_m_game_paytimes_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_tos(Rest, Z1, Z2,
					   TrUserData).

skip_64_m_game_paytimes_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_tos(Rest, Z1, Z2,
					   TrUserData).

decode_msg_m_game_paytimes_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_toc(Bin, 0, 0,
					   'tr_decode_init_default_m_game_paytimes_toc.times'([],
											      TrUserData),
					   TrUserData).

dfp_read_field_def_m_game_paytimes_toc(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_game_paytimes_toc_times(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_game_paytimes_toc(<<>>, 0, 0, R1,
				       TrUserData) ->
    #m_game_paytimes_toc{times =
			     'tr_decode_repeated_finalize_m_game_paytimes_toc.times'(R1,
										     TrUserData)};
dfp_read_field_def_m_game_paytimes_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_game_paytimes_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_game_paytimes_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_game_paytimes_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_game_paytimes_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_game_paytimes_toc_times(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_game_paytimes_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_game_paytimes_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_game_paytimes_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_game_paytimes_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_game_paytimes_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_game_paytimes_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_game_paytimes_toc{times =
			     'tr_decode_repeated_finalize_m_game_paytimes_toc.times'(R1,
										     TrUserData)}.

d_field_m_game_paytimes_toc_times(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_game_paytimes_toc_times(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_game_paytimes_toc_times(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_game_paytimes_toc(RestF, 0, 0,
					   'tr_decode_repeated_add_elem_m_game_paytimes_toc.times'(NewFValue,
												   Prev,
												   TrUserData),
					   TrUserData).

skip_varint_m_game_paytimes_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_game_paytimes_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_game_paytimes_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_game_paytimes_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_game_paytimes_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_game_paytimes_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_game_paytimes_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_game_paytimes_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_game_paytimes_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_game_paytimes_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_game_paytimes_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_game_paytimes_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_p_marquee(Bin, TrUserData) ->
    dfp_read_field_def_p_marquee(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 'tr_decode_init_default_p_marquee.ext'([],
									TrUserData),
				 TrUserData).

dfp_read_field_def_p_marquee(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_start_time(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_end_time(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<42, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_content(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<48, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_interval(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<58, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    d_field_p_marquee_ext(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_p_marquee(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, R1, TrUserData) ->
    #p_marquee{id = F@_1, type = F@_2, start_time = F@_3,
	       end_time = F@_4, content = F@_5, interval = F@_6,
	       ext =
		   'tr_decode_repeated_finalize_p_marquee.ext'(R1,
							       TrUserData)};
dfp_read_field_def_p_marquee(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dg_read_field_def_p_marquee(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_p_marquee(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_marquee(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				TrUserData);
dg_read_field_def_p_marquee(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_marquee_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, TrUserData);
      16 ->
	  d_field_p_marquee_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, TrUserData);
      24 ->
	  d_field_p_marquee_start_time(Rest, 0, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
      32 ->
	  d_field_p_marquee_end_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      42 ->
	  d_field_p_marquee_content(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, TrUserData);
      48 ->
	  d_field_p_marquee_interval(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, TrUserData);
      58 ->
	  d_field_p_marquee_ext(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_marquee(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_p_marquee(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_p_marquee(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, F@_6, F@_7,
						TrUserData);
	    3 ->
		skip_group_p_marquee(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
	    5 ->
		skip_32_p_marquee(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_p_marquee(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, R1, TrUserData) ->
    #p_marquee{id = F@_1, type = F@_2, start_time = F@_3,
	       end_time = F@_4, content = F@_5, interval = F@_6,
	       ext =
		   'tr_decode_repeated_finalize_p_marquee.ext'(R1,
							       TrUserData)}.

d_field_p_marquee_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_marquee_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_marquee_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_marquee(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_p_marquee_type(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData)
    when N < 57 ->
    d_field_p_marquee_type(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_marquee_type(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
		       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_marquee(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData).

d_field_p_marquee_start_time(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			     TrUserData)
    when N < 57 ->
    d_field_p_marquee_start_time(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				 TrUserData);
d_field_p_marquee_start_time(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
			     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_marquee(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_p_marquee_end_time(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_p_marquee_end_time(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_p_marquee_end_time(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_marquee(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, F@_5, F@_6, F@_7, TrUserData).

d_field_p_marquee_content(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			  TrUserData)
    when N < 57 ->
    d_field_p_marquee_content(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData);
d_field_p_marquee_content(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
			  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_marquee(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, NewFValue, F@_6, F@_7, TrUserData).

d_field_p_marquee_interval(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			   TrUserData)
    when N < 57 ->
    d_field_p_marquee_interval(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData);
d_field_p_marquee_interval(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7,
			   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_marquee(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, NewFValue, F@_7, TrUserData).

d_field_p_marquee_ext(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_p_marquee_ext(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
d_field_p_marquee_ext(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_marquee(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6,
				 'tr_decode_repeated_add_elem_p_marquee.ext'(NewFValue,
									     Prev,
									     TrUserData),
				 TrUserData).

skip_varint_p_marquee(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    skip_varint_p_marquee(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_p_marquee(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_marquee(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_p_marquee(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_marquee(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
skip_length_delimited_p_marquee(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_marquee(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_p_marquee(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_marquee(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_p_marquee(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_marquee(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_p_marquee(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_p_marquee(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_p_msgno(Bin, TrUserData) ->
    dfp_read_field_def_p_msgno(Bin, 0, 0,
			       'tr_decode_init_default_p_msgno.props'([],
								      TrUserData),
			       'tr_decode_init_default_p_msgno.items'([],
								      TrUserData),
			       'tr_decode_init_default_p_msgno.pitems'([],
								       TrUserData),
			       TrUserData).

dfp_read_field_def_p_msgno(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_msgno_props(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_p_msgno(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_msgno_items(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_p_msgno(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_msgno_pitems(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_p_msgno(<<>>, 0, 0, R1, R2, R3,
			   TrUserData) ->
    #p_msgno{props =
		 'tr_decode_repeated_finalize_p_msgno.props'(R1,
							     TrUserData),
	     items =
		 'tr_decode_repeated_finalize_p_msgno.items'(R2,
							     TrUserData),
	     pitems =
		 'tr_decode_repeated_finalize_p_msgno.pitems'(R3,
							      TrUserData)};
dfp_read_field_def_p_msgno(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_p_msgno(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_p_msgno(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_msgno(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_p_msgno(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_p_msgno_props(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      18 ->
	  d_field_p_msgno_items(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      26 ->
	  d_field_p_msgno_pitems(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_msgno(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_p_msgno(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_p_msgno(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_p_msgno(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_p_msgno(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_p_msgno(<<>>, 0, 0, R1, R2, R3,
			  TrUserData) ->
    #p_msgno{props =
		 'tr_decode_repeated_finalize_p_msgno.props'(R1,
							     TrUserData),
	     items =
		 'tr_decode_repeated_finalize_p_msgno.items'(R2,
							     TrUserData),
	     pitems =
		 'tr_decode_repeated_finalize_p_msgno.pitems'(R3,
							      TrUserData)}.

d_field_p_msgno_props(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_msgno_props(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_p_msgno_props(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_msgno(RestF, 0, 0,
			       'tr_decode_repeated_add_elem_p_msgno.props'(NewFValue,
									   Prev,
									   TrUserData),
			       F@_2, F@_3, TrUserData).

d_field_p_msgno_items(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_msgno_items(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_p_msgno_items(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_msgno(RestF, 0, 0, F@_1,
			       'tr_decode_repeated_add_elem_p_msgno.items'(NewFValue,
									   Prev,
									   TrUserData),
			       F@_3, TrUserData).

d_field_p_msgno_pitems(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_msgno_pitems(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_p_msgno_pitems(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_msgno(RestF, 0, 0, F@_1, F@_2,
			       'tr_decode_repeated_add_elem_p_msgno.pitems'(NewFValue,
									    Prev,
									    TrUserData),
			       TrUserData).

skip_varint_p_msgno(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_msgno(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_p_msgno(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_msgno(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_p_msgno(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_msgno(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_p_msgno(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_msgno(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_p_msgno(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_msgno(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_p_msgno(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_msgno(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_p_msgno(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_msgno(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id([], TrUserData),
					    id([], TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,string>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'decode_msg_map<string,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Bin, 0, 0,
					   id([], TrUserData),
					   id(0, TrUserData), TrUserData).

'dfp_read_field_def_map<string,int32>'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,int32>_key'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_map<string,int32>'(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,int32>_value'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_map<string,int32>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,int32>'(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,int32>'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,int32>'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,int32>'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'dg_read_field_def_map<string,int32>'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  'd_field_map<string,int32>_value'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,int32>'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		'skip_64_map<string,int32>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		'skip_length_delimited_map<string,int32>'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		'skip_group_map<string,int32>'(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,int32>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
'dg_read_field_def_map<string,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,int32>_key'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,int32>_key'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,int32>_key'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,int32>'(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

'd_field_map<string,int32>_value'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,int32>_value'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,int32>_value'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<string,int32>'(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

'skip_varint_map<string,int32>'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,int32>'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'skip_varint_map<string,int32>'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,int32>'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,int32>'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'skip_length_delimited_map<string,int32>'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,int32>'(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

'skip_group_map<string,int32>'(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,int32>'(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

'skip_32_map<string,int32>'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_64_map<string,int32>'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,int32>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_game_cheat_tos ->
	  merge_msg_m_game_cheat_tos(Prev, New, TrUserData);
      m_game_error_toc ->
	  merge_msg_m_game_error_toc(Prev, New, TrUserData);
      m_game_heart_tos ->
	  merge_msg_m_game_heart_tos(Prev, New, TrUserData);
      m_game_heart_toc ->
	  merge_msg_m_game_heart_toc(Prev, New, TrUserData);
      m_game_setting_tos ->
	  merge_msg_m_game_setting_tos(Prev, New, TrUserData);
      m_game_setting_toc ->
	  merge_msg_m_game_setting_toc(Prev, New, TrUserData);
      m_game_setup_tos ->
	  merge_msg_m_game_setup_tos(Prev, New, TrUserData);
      m_game_time_tos ->
	  merge_msg_m_game_time_tos(Prev, New, TrUserData);
      m_game_time_toc ->
	  merge_msg_m_game_time_toc(Prev, New, TrUserData);
      m_game_notify_toc ->
	  merge_msg_m_game_notify_toc(Prev, New, TrUserData);
      m_game_syslist_tos ->
	  merge_msg_m_game_syslist_tos(Prev, New, TrUserData);
      m_game_syslist_toc ->
	  merge_msg_m_game_syslist_toc(Prev, New, TrUserData);
      m_game_sysopen_toc ->
	  merge_msg_m_game_sysopen_toc(Prev, New, TrUserData);
      m_game_payinfo_tos ->
	  merge_msg_m_game_payinfo_tos(Prev, New, TrUserData);
      m_game_payinfo_toc ->
	  merge_msg_m_game_payinfo_toc(Prev, New, TrUserData);
      m_game_paysucc_toc ->
	  merge_msg_m_game_paysucc_toc(Prev, New, TrUserData);
      m_game_clienttime_tos ->
	  merge_msg_m_game_clienttime_tos(Prev, New, TrUserData);
      m_game_worldlv_tos ->
	  merge_msg_m_game_worldlv_tos(Prev, New, TrUserData);
      m_game_worldlv_toc ->
	  merge_msg_m_game_worldlv_toc(Prev, New, TrUserData);
      m_game_hotconfig_toc ->
	  merge_msg_m_game_hotconfig_toc(Prev, New, TrUserData);
      m_game_marquee_tos ->
	  merge_msg_m_game_marquee_tos(Prev, New, TrUserData);
      m_game_marquee_toc ->
	  merge_msg_m_game_marquee_toc(Prev, New, TrUserData);
      m_game_marquee_update_toc ->
	  merge_msg_m_game_marquee_update_toc(Prev, New,
					      TrUserData);
      m_game_suspend_tos ->
	  merge_msg_m_game_suspend_tos(Prev, New, TrUserData);
      m_game_awake_tos ->
	  merge_msg_m_game_awake_tos(Prev, New, TrUserData);
      m_game_paylist_tos ->
	  merge_msg_m_game_paylist_tos(Prev, New, TrUserData);
      m_game_paylist_toc ->
	  merge_msg_m_game_paylist_toc(Prev, New, TrUserData);
      m_game_clienterror_tos ->
	  merge_msg_m_game_clienterror_tos(Prev, New, TrUserData);
      m_game_newbie_scene_tos ->
	  merge_msg_m_game_newbie_scene_tos(Prev, New,
					    TrUserData);
      m_game_newbie_scene_toc ->
	  merge_msg_m_game_newbie_scene_toc(Prev, New,
					    TrUserData);
      m_game_paytimes_tos ->
	  merge_msg_m_game_paytimes_tos(Prev, New, TrUserData);
      m_game_paytimes_toc ->
	  merge_msg_m_game_paytimes_toc(Prev, New, TrUserData);
      p_marquee -> merge_msg_p_marquee(Prev, New, TrUserData);
      p_msgno -> merge_msg_p_msgno(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_game_cheat_tos/3}).
merge_msg_m_game_cheat_tos(#m_game_cheat_tos{},
			   #m_game_cheat_tos{cmd = NFcmd}, _) ->
    #m_game_cheat_tos{cmd = NFcmd}.

-compile({nowarn_unused_function,merge_msg_m_game_error_toc/3}).
merge_msg_m_game_error_toc(#m_game_error_toc{args =
						 PFargs},
			   #m_game_error_toc{errno = NFerrno, args = NFargs},
			   TrUserData) ->
    #m_game_error_toc{errno = NFerrno,
		      args =
			  if PFargs /= undefined, NFargs /= undefined ->
				 'erlang_++'(PFargs, NFargs, TrUserData);
			     PFargs == undefined -> NFargs;
			     NFargs == undefined -> PFargs
			  end}.

-compile({nowarn_unused_function,merge_msg_m_game_heart_tos/3}).
merge_msg_m_game_heart_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_heart_toc/3}).
merge_msg_m_game_heart_toc(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_setting_tos/3}).
merge_msg_m_game_setting_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_setting_toc/3}).
merge_msg_m_game_setting_toc(#m_game_setting_toc{setting
						     = PFsetting},
			     #m_game_setting_toc{setting = NFsetting},
			     TrUserData) ->
    #m_game_setting_toc{setting =
			    if PFsetting /= undefined, NFsetting /= undefined ->
				   'tr_merge_m_game_setting_toc.setting'(PFsetting,
									 NFsetting,
									 TrUserData);
			       PFsetting == undefined -> NFsetting;
			       NFsetting == undefined -> PFsetting
			    end}.

-compile({nowarn_unused_function,merge_msg_m_game_setup_tos/3}).
merge_msg_m_game_setup_tos(#m_game_setup_tos{setting =
						 PFsetting},
			   #m_game_setup_tos{setting = NFsetting},
			   TrUserData) ->
    #m_game_setup_tos{setting =
			  if PFsetting /= undefined, NFsetting /= undefined ->
				 'tr_merge_m_game_setup_tos.setting'(PFsetting,
								     NFsetting,
								     TrUserData);
			     PFsetting == undefined -> NFsetting;
			     NFsetting == undefined -> PFsetting
			  end}.

-compile({nowarn_unused_function,merge_msg_m_game_time_tos/3}).
merge_msg_m_game_time_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_time_toc/3}).
merge_msg_m_game_time_toc(#m_game_time_toc{},
			  #m_game_time_toc{time = NFtime, tz = NFtz}, _) ->
    #m_game_time_toc{time = NFtime, tz = NFtz}.

-compile({nowarn_unused_function,merge_msg_m_game_notify_toc/3}).
merge_msg_m_game_notify_toc(#m_game_notify_toc{args =
						   PFargs},
			    #m_game_notify_toc{msgno = NFmsgno, args = NFargs},
			    TrUserData) ->
    #m_game_notify_toc{msgno = NFmsgno,
		       args =
			   if PFargs /= undefined, NFargs /= undefined ->
				  'erlang_++'(PFargs, NFargs, TrUserData);
			      PFargs == undefined -> NFargs;
			      NFargs == undefined -> PFargs
			   end}.

-compile({nowarn_unused_function,merge_msg_m_game_syslist_tos/3}).
merge_msg_m_game_syslist_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_syslist_toc/3}).
merge_msg_m_game_syslist_toc(#m_game_syslist_toc{syslist
						     = PFsyslist},
			     #m_game_syslist_toc{syslist = NFsyslist},
			     TrUserData) ->
    #m_game_syslist_toc{syslist =
			    if PFsyslist /= undefined, NFsyslist /= undefined ->
				   'erlang_++'(PFsyslist, NFsyslist,
					       TrUserData);
			       PFsyslist == undefined -> NFsyslist;
			       NFsyslist == undefined -> PFsyslist
			    end}.

-compile({nowarn_unused_function,merge_msg_m_game_sysopen_toc/3}).
merge_msg_m_game_sysopen_toc(#m_game_sysopen_toc{},
			     #m_game_sysopen_toc{sysid = NFsysid}, _) ->
    #m_game_sysopen_toc{sysid = NFsysid}.

-compile({nowarn_unused_function,merge_msg_m_game_payinfo_tos/3}).
merge_msg_m_game_payinfo_tos(#m_game_payinfo_tos{},
			     #m_game_payinfo_tos{goods_id = NFgoods_id}, _) ->
    #m_game_payinfo_tos{goods_id = NFgoods_id}.

-compile({nowarn_unused_function,merge_msg_m_game_payinfo_toc/3}).
merge_msg_m_game_payinfo_toc(#m_game_payinfo_toc{},
			     #m_game_payinfo_toc{goods_id = NFgoods_id,
						 order_id = NForder_id,
						 pay_back = NFpay_back},
			     _) ->
    #m_game_payinfo_toc{goods_id = NFgoods_id,
			order_id = NForder_id, pay_back = NFpay_back}.

-compile({nowarn_unused_function,merge_msg_m_game_paysucc_toc/3}).
merge_msg_m_game_paysucc_toc(#m_game_paysucc_toc{gain =
						     PFgain},
			     #m_game_paysucc_toc{gain = NFgain,
						 app_order = NFapp_order,
						 sdk_order = NFsdk_order},
			     TrUserData) ->
    #m_game_paysucc_toc{gain =
			    if PFgain /= undefined, NFgain /= undefined ->
				   'tr_merge_m_game_paysucc_toc.gain'(PFgain,
								      NFgain,
								      TrUserData);
			       PFgain == undefined -> NFgain;
			       NFgain == undefined -> PFgain
			    end,
			app_order = NFapp_order, sdk_order = NFsdk_order}.

-compile({nowarn_unused_function,merge_msg_m_game_clienttime_tos/3}).
merge_msg_m_game_clienttime_tos(#m_game_clienttime_tos{},
				#m_game_clienttime_tos{time = NFtime}, _) ->
    #m_game_clienttime_tos{time = NFtime}.

-compile({nowarn_unused_function,merge_msg_m_game_worldlv_tos/3}).
merge_msg_m_game_worldlv_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_worldlv_toc/3}).
merge_msg_m_game_worldlv_toc(#m_game_worldlv_toc{},
			     #m_game_worldlv_toc{level = NFlevel}, _) ->
    #m_game_worldlv_toc{level = NFlevel}.

-compile({nowarn_unused_function,merge_msg_m_game_hotconfig_toc/3}).
merge_msg_m_game_hotconfig_toc(#m_game_hotconfig_toc{},
			       #m_game_hotconfig_toc{config = NFconfig}, _) ->
    #m_game_hotconfig_toc{config = NFconfig}.

-compile({nowarn_unused_function,merge_msg_m_game_marquee_tos/3}).
merge_msg_m_game_marquee_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_marquee_toc/3}).
merge_msg_m_game_marquee_toc(#m_game_marquee_toc{list =
						     PFlist},
			     #m_game_marquee_toc{list = NFlist}, TrUserData) ->
    #m_game_marquee_toc{list =
			    if PFlist /= undefined, NFlist /= undefined ->
				   'erlang_++'(PFlist, NFlist, TrUserData);
			       PFlist == undefined -> NFlist;
			       NFlist == undefined -> PFlist
			    end}.

-compile({nowarn_unused_function,merge_msg_m_game_marquee_update_toc/3}).
merge_msg_m_game_marquee_update_toc(#m_game_marquee_update_toc{add
								   = PFadd,
							       del = PFdel},
				    #m_game_marquee_update_toc{add = NFadd,
							       del = NFdel},
				    TrUserData) ->
    #m_game_marquee_update_toc{add =
				   if PFadd /= undefined, NFadd /= undefined ->
					  merge_msg_p_marquee(PFadd, NFadd,
							      TrUserData);
				      PFadd == undefined -> NFadd;
				      NFadd == undefined -> PFadd
				   end,
			       del =
				   if NFdel =:= undefined -> PFdel;
				      true -> NFdel
				   end}.

-compile({nowarn_unused_function,merge_msg_m_game_suspend_tos/3}).
merge_msg_m_game_suspend_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_awake_tos/3}).
merge_msg_m_game_awake_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_paylist_tos/3}).
merge_msg_m_game_paylist_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_paylist_toc/3}).
merge_msg_m_game_paylist_toc(#m_game_paylist_toc{paid =
						     PFpaid},
			     #m_game_paylist_toc{paid = NFpaid}, TrUserData) ->
    #m_game_paylist_toc{paid =
			    if PFpaid /= undefined, NFpaid /= undefined ->
				   'erlang_++'(PFpaid, NFpaid, TrUserData);
			       PFpaid == undefined -> NFpaid;
			       NFpaid == undefined -> PFpaid
			    end}.

-compile({nowarn_unused_function,merge_msg_m_game_clienterror_tos/3}).
merge_msg_m_game_clienterror_tos(#m_game_clienterror_tos{},
				 #m_game_clienterror_tos{error = NFerror}, _) ->
    #m_game_clienterror_tos{error = NFerror}.

-compile({nowarn_unused_function,merge_msg_m_game_newbie_scene_tos/3}).
merge_msg_m_game_newbie_scene_tos(_Prev, New,
				  _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_newbie_scene_toc/3}).
merge_msg_m_game_newbie_scene_toc(#m_game_newbie_scene_toc{},
				  #m_game_newbie_scene_toc{res_id = NFres_id},
				  _) ->
    #m_game_newbie_scene_toc{res_id = NFres_id}.

-compile({nowarn_unused_function,merge_msg_m_game_paytimes_tos/3}).
merge_msg_m_game_paytimes_tos(_Prev, New,
			      _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_game_paytimes_toc/3}).
merge_msg_m_game_paytimes_toc(#m_game_paytimes_toc{times
						       = PFtimes},
			      #m_game_paytimes_toc{times = NFtimes},
			      TrUserData) ->
    #m_game_paytimes_toc{times =
			     if PFtimes /= undefined, NFtimes /= undefined ->
				    'tr_merge_m_game_paytimes_toc.times'(PFtimes,
									 NFtimes,
									 TrUserData);
				PFtimes == undefined -> NFtimes;
				NFtimes == undefined -> PFtimes
			     end}.

-compile({nowarn_unused_function,merge_msg_p_marquee/3}).
merge_msg_p_marquee(#p_marquee{type = PFtype,
			       ext = PFext},
		    #p_marquee{id = NFid, type = NFtype,
			       start_time = NFstart_time, end_time = NFend_time,
			       content = NFcontent, interval = NFinterval,
			       ext = NFext},
		    TrUserData) ->
    #p_marquee{id = NFid,
	       type =
		   if NFtype =:= undefined -> PFtype;
		      true -> NFtype
		   end,
	       start_time = NFstart_time, end_time = NFend_time,
	       content = NFcontent, interval = NFinterval,
	       ext =
		   if PFext /= undefined, NFext /= undefined ->
			  'tr_merge_p_marquee.ext'(PFext, NFext, TrUserData);
		      PFext == undefined -> NFext;
		      NFext == undefined -> PFext
		   end}.

-compile({nowarn_unused_function,merge_msg_p_msgno/3}).
merge_msg_p_msgno(#p_msgno{props = PFprops,
			   items = PFitems, pitems = PFpitems},
		  #p_msgno{props = NFprops, items = NFitems,
			   pitems = NFpitems},
		  TrUserData) ->
    #p_msgno{props =
		 if PFprops /= undefined, NFprops /= undefined ->
			'tr_merge_p_msgno.props'(PFprops, NFprops, TrUserData);
		    PFprops == undefined -> NFprops;
		    NFprops == undefined -> PFprops
		 end,
	     items =
		 if PFitems /= undefined, NFitems /= undefined ->
			'tr_merge_p_msgno.items'(PFitems, NFitems, TrUserData);
		    PFitems == undefined -> NFitems;
		    NFitems == undefined -> PFitems
		 end,
	     pitems =
		 if PFpitems /= undefined, NFpitems /= undefined ->
			'tr_merge_p_msgno.pitems'(PFpitems, NFpitems,
						  TrUserData);
		    PFpitems == undefined -> NFpitems;
		    NFpitems == undefined -> PFpitems
		 end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_game_cheat_tos ->
	  v_msg_m_game_cheat_tos(Msg, [MsgName], TrUserData);
      m_game_error_toc ->
	  v_msg_m_game_error_toc(Msg, [MsgName], TrUserData);
      m_game_heart_tos ->
	  v_msg_m_game_heart_tos(Msg, [MsgName], TrUserData);
      m_game_heart_toc ->
	  v_msg_m_game_heart_toc(Msg, [MsgName], TrUserData);
      m_game_setting_tos ->
	  v_msg_m_game_setting_tos(Msg, [MsgName], TrUserData);
      m_game_setting_toc ->
	  v_msg_m_game_setting_toc(Msg, [MsgName], TrUserData);
      m_game_setup_tos ->
	  v_msg_m_game_setup_tos(Msg, [MsgName], TrUserData);
      m_game_time_tos ->
	  v_msg_m_game_time_tos(Msg, [MsgName], TrUserData);
      m_game_time_toc ->
	  v_msg_m_game_time_toc(Msg, [MsgName], TrUserData);
      m_game_notify_toc ->
	  v_msg_m_game_notify_toc(Msg, [MsgName], TrUserData);
      m_game_syslist_tos ->
	  v_msg_m_game_syslist_tos(Msg, [MsgName], TrUserData);
      m_game_syslist_toc ->
	  v_msg_m_game_syslist_toc(Msg, [MsgName], TrUserData);
      m_game_sysopen_toc ->
	  v_msg_m_game_sysopen_toc(Msg, [MsgName], TrUserData);
      m_game_payinfo_tos ->
	  v_msg_m_game_payinfo_tos(Msg, [MsgName], TrUserData);
      m_game_payinfo_toc ->
	  v_msg_m_game_payinfo_toc(Msg, [MsgName], TrUserData);
      m_game_paysucc_toc ->
	  v_msg_m_game_paysucc_toc(Msg, [MsgName], TrUserData);
      m_game_clienttime_tos ->
	  v_msg_m_game_clienttime_tos(Msg, [MsgName], TrUserData);
      m_game_worldlv_tos ->
	  v_msg_m_game_worldlv_tos(Msg, [MsgName], TrUserData);
      m_game_worldlv_toc ->
	  v_msg_m_game_worldlv_toc(Msg, [MsgName], TrUserData);
      m_game_hotconfig_toc ->
	  v_msg_m_game_hotconfig_toc(Msg, [MsgName], TrUserData);
      m_game_marquee_tos ->
	  v_msg_m_game_marquee_tos(Msg, [MsgName], TrUserData);
      m_game_marquee_toc ->
	  v_msg_m_game_marquee_toc(Msg, [MsgName], TrUserData);
      m_game_marquee_update_toc ->
	  v_msg_m_game_marquee_update_toc(Msg, [MsgName],
					  TrUserData);
      m_game_suspend_tos ->
	  v_msg_m_game_suspend_tos(Msg, [MsgName], TrUserData);
      m_game_awake_tos ->
	  v_msg_m_game_awake_tos(Msg, [MsgName], TrUserData);
      m_game_paylist_tos ->
	  v_msg_m_game_paylist_tos(Msg, [MsgName], TrUserData);
      m_game_paylist_toc ->
	  v_msg_m_game_paylist_toc(Msg, [MsgName], TrUserData);
      m_game_clienterror_tos ->
	  v_msg_m_game_clienterror_tos(Msg, [MsgName],
				       TrUserData);
      m_game_newbie_scene_tos ->
	  v_msg_m_game_newbie_scene_tos(Msg, [MsgName],
					TrUserData);
      m_game_newbie_scene_toc ->
	  v_msg_m_game_newbie_scene_toc(Msg, [MsgName],
					TrUserData);
      m_game_paytimes_tos ->
	  v_msg_m_game_paytimes_tos(Msg, [MsgName], TrUserData);
      m_game_paytimes_toc ->
	  v_msg_m_game_paytimes_toc(Msg, [MsgName], TrUserData);
      p_marquee ->
	  v_msg_p_marquee(Msg, [MsgName], TrUserData);
      p_msgno -> v_msg_p_msgno(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_game_cheat_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_cheat_tos/3}).
v_msg_m_game_cheat_tos(#m_game_cheat_tos{cmd = F1},
		       Path, TrUserData) ->
    v_type_string(F1, [cmd | Path], TrUserData), ok;
v_msg_m_game_cheat_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_cheat_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_error_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_error_toc/3}).
v_msg_m_game_error_toc(#m_game_error_toc{errno = F1,
					 args = F2},
		       Path, TrUserData) ->
    v_type_int32(F1, [errno | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_type_string(Elem, [args | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F2,
			 [args | Path])
    end,
    ok;
v_msg_m_game_error_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_error_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_heart_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_heart_tos/3}).
v_msg_m_game_heart_tos(#m_game_heart_tos{}, _Path, _) ->
    ok;
v_msg_m_game_heart_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_heart_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_heart_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_heart_toc/3}).
v_msg_m_game_heart_toc(#m_game_heart_toc{}, _Path, _) ->
    ok;
v_msg_m_game_heart_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_heart_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_setting_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_setting_tos/3}).
v_msg_m_game_setting_tos(#m_game_setting_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_game_setting_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_setting_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_setting_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_setting_toc/3}).
v_msg_m_game_setting_toc(#m_game_setting_toc{setting =
						 F1},
			 Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [setting | Path], TrUserData),
    ok;
v_msg_m_game_setting_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_setting_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_setup_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_setup_tos/3}).
v_msg_m_game_setup_tos(#m_game_setup_tos{setting = F1},
		       Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [setting | Path], TrUserData),
    ok;
v_msg_m_game_setup_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_setup_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_time_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_time_tos/3}).
v_msg_m_game_time_tos(#m_game_time_tos{}, _Path, _) ->
    ok;
v_msg_m_game_time_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_time_tos}, X, Path).

-compile({nowarn_unused_function,v_msg_m_game_time_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_time_toc/3}).
v_msg_m_game_time_toc(#m_game_time_toc{time = F1,
				       tz = F2},
		      Path, TrUserData) ->
    v_type_uint64(F1, [time | Path], TrUserData),
    v_type_int32(F2, [tz | Path], TrUserData),
    ok;
v_msg_m_game_time_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_time_toc}, X, Path).

-compile({nowarn_unused_function,v_msg_m_game_notify_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_notify_toc/3}).
v_msg_m_game_notify_toc(#m_game_notify_toc{msgno = F1,
					   args = F2},
			Path, TrUserData) ->
    v_type_int32(F1, [msgno | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_msgno(Elem, [args | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_msgno}}, F2,
			 [args | Path])
    end,
    ok;
v_msg_m_game_notify_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_notify_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_syslist_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_syslist_tos/3}).
v_msg_m_game_syslist_tos(#m_game_syslist_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_game_syslist_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_syslist_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_syslist_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_syslist_toc/3}).
v_msg_m_game_syslist_toc(#m_game_syslist_toc{syslist =
						 F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_string(Elem, [syslist | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, string}, F1,
			 [syslist | Path])
    end,
    ok;
v_msg_m_game_syslist_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_syslist_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_sysopen_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_sysopen_toc/3}).
v_msg_m_game_sysopen_toc(#m_game_sysopen_toc{sysid =
						 F1},
			 Path, TrUserData) ->
    v_type_string(F1, [sysid | Path], TrUserData), ok;
v_msg_m_game_sysopen_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_sysopen_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_payinfo_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_payinfo_tos/3}).
v_msg_m_game_payinfo_tos(#m_game_payinfo_tos{goods_id =
						 F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [goods_id | Path], TrUserData), ok;
v_msg_m_game_payinfo_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_payinfo_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_payinfo_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_payinfo_toc/3}).
v_msg_m_game_payinfo_toc(#m_game_payinfo_toc{goods_id =
						 F1,
					     order_id = F2, pay_back = F3},
			 Path, TrUserData) ->
    v_type_int32(F1, [goods_id | Path], TrUserData),
    v_type_string(F2, [order_id | Path], TrUserData),
    v_type_string(F3, [pay_back | Path], TrUserData),
    ok;
v_msg_m_game_payinfo_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_payinfo_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_paysucc_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_paysucc_toc/3}).
v_msg_m_game_paysucc_toc(#m_game_paysucc_toc{gain = F1,
					     app_order = F2, sdk_order = F3},
			 Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [gain | Path], TrUserData),
    v_type_string(F2, [app_order | Path], TrUserData),
    v_type_string(F3, [sdk_order | Path], TrUserData),
    ok;
v_msg_m_game_paysucc_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_paysucc_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_clienttime_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_clienttime_tos/3}).
v_msg_m_game_clienttime_tos(#m_game_clienttime_tos{time
						       = F1},
			    Path, TrUserData) ->
    v_type_uint64(F1, [time | Path], TrUserData), ok;
v_msg_m_game_clienttime_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_clienttime_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_worldlv_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_worldlv_tos/3}).
v_msg_m_game_worldlv_tos(#m_game_worldlv_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_game_worldlv_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_worldlv_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_worldlv_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_worldlv_toc/3}).
v_msg_m_game_worldlv_toc(#m_game_worldlv_toc{level =
						 F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [level | Path], TrUserData), ok;
v_msg_m_game_worldlv_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_worldlv_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_hotconfig_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_hotconfig_toc/3}).
v_msg_m_game_hotconfig_toc(#m_game_hotconfig_toc{config
						     = F1},
			   Path, TrUserData) ->
    v_type_string(F1, [config | Path], TrUserData), ok;
v_msg_m_game_hotconfig_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_hotconfig_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_marquee_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_marquee_tos/3}).
v_msg_m_game_marquee_tos(#m_game_marquee_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_game_marquee_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_marquee_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_marquee_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_marquee_toc/3}).
v_msg_m_game_marquee_toc(#m_game_marquee_toc{list = F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_marquee(Elem, [list | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_marquee}}, F1,
			 [list | Path])
    end,
    ok;
v_msg_m_game_marquee_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_marquee_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_marquee_update_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_marquee_update_toc/3}).
v_msg_m_game_marquee_update_toc(#m_game_marquee_update_toc{add
							       = F1,
							   del = F2},
				Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_msg_p_marquee(F1, [add | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [del | Path], TrUserData)
    end,
    ok;
v_msg_m_game_marquee_update_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_marquee_update_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_game_suspend_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_suspend_tos/3}).
v_msg_m_game_suspend_tos(#m_game_suspend_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_game_suspend_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_suspend_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_awake_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_awake_tos/3}).
v_msg_m_game_awake_tos(#m_game_awake_tos{}, _Path, _) ->
    ok;
v_msg_m_game_awake_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_awake_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_paylist_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_paylist_tos/3}).
v_msg_m_game_paylist_tos(#m_game_paylist_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_game_paylist_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_paylist_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_paylist_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_paylist_toc/3}).
v_msg_m_game_paylist_toc(#m_game_paylist_toc{paid = F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_type_int32(Elem, [paid | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F1,
			 [paid | Path])
    end,
    ok;
v_msg_m_game_paylist_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_paylist_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_clienterror_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_clienterror_tos/3}).
v_msg_m_game_clienterror_tos(#m_game_clienterror_tos{error
							 = F1},
			     Path, TrUserData) ->
    v_type_string(F1, [error | Path], TrUserData), ok;
v_msg_m_game_clienterror_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_clienterror_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_newbie_scene_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_newbie_scene_tos/3}).
v_msg_m_game_newbie_scene_tos(#m_game_newbie_scene_tos{},
			      _Path, _) ->
    ok;
v_msg_m_game_newbie_scene_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_newbie_scene_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_game_newbie_scene_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_newbie_scene_toc/3}).
v_msg_m_game_newbie_scene_toc(#m_game_newbie_scene_toc{res_id
							   = F1},
			      Path, TrUserData) ->
    v_type_int32(F1, [res_id | Path], TrUserData), ok;
v_msg_m_game_newbie_scene_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_newbie_scene_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_game_paytimes_tos/3}).
-dialyzer({nowarn_function,v_msg_m_game_paytimes_tos/3}).
v_msg_m_game_paytimes_tos(#m_game_paytimes_tos{}, _Path,
			  _) ->
    ok;
v_msg_m_game_paytimes_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_paytimes_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_game_paytimes_toc/3}).
-dialyzer({nowarn_function,v_msg_m_game_paytimes_toc/3}).
v_msg_m_game_paytimes_toc(#m_game_paytimes_toc{times =
						   F1},
			  Path, TrUserData) ->
    'v_map<int32,int32>'(F1, [times | Path], TrUserData),
    ok;
v_msg_m_game_paytimes_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_game_paytimes_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_marquee/3}).
-dialyzer({nowarn_function,v_msg_p_marquee/3}).
v_msg_p_marquee(#p_marquee{id = F1, type = F2,
			   start_time = F3, end_time = F4, content = F5,
			   interval = F6, ext = F7},
		Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    if F2 == undefined -> ok;
       true -> v_type_int32(F2, [type | Path], TrUserData)
    end,
    v_type_int32(F3, [start_time | Path], TrUserData),
    v_type_int32(F4, [end_time | Path], TrUserData),
    v_type_string(F5, [content | Path], TrUserData),
    v_type_int32(F6, [interval | Path], TrUserData),
    'v_map<string,int32>'(F7, [ext | Path], TrUserData),
    ok;
v_msg_p_marquee(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_marquee}, X, Path).

-compile({nowarn_unused_function,v_msg_p_msgno/3}).
-dialyzer({nowarn_function,v_msg_p_msgno/3}).
v_msg_p_msgno(#p_msgno{props = F1, items = F2,
		       pitems = F3},
	      Path, TrUserData) ->
    'v_map<string,string>'(F1, [props | Path], TrUserData),
    'v_map<int32,int32>'(F2, [items | Path], TrUserData),
    'v_map<int32,int32>'(F3, [pitems | Path], TrUserData),
    ok;
v_msg_p_msgno(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_msgno}, X, Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_type_string(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,int32>'/3}).
-dialyzer({nowarn_function,'v_map<string,int32>'/3}).
'v_map<string,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_game_paytimes_toc.times[x]'/2}).
'tr_encode_m_game_paytimes_toc.times[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_game_paytimes_toc.times'/2}).
'tr_decode_init_default_m_game_paytimes_toc.times'(_,
						   _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_game_paytimes_toc.times'/3}).
'tr_merge_m_game_paytimes_toc.times'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_game_paytimes_toc.times'/2}).
'tr_decode_repeated_finalize_m_game_paytimes_toc.times'(L,
							TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_game_paytimes_toc.times'/2}).
'tr_encode_m_game_paytimes_toc.times'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_game_paytimes_toc.times'/3}).
'tr_decode_repeated_add_elem_m_game_paytimes_toc.times'(Elem,
							L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_game_paysucc_toc.gain[x]'/2}).
'tr_encode_m_game_paysucc_toc.gain[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_p_marquee.ext'/2}).
'tr_decode_init_default_p_marquee.ext'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_marquee.ext'/3}).
'tr_merge_p_marquee.ext'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_marquee.ext'/2}).
'tr_decode_repeated_finalize_p_marquee.ext'(L,
					    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_marquee.ext'/2}).
'tr_encode_p_marquee.ext'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_marquee.ext'/3}).
'tr_decode_repeated_add_elem_p_marquee.ext'(Elem, L,
					    _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_game_setting_toc.setting'/2}).
'tr_decode_init_default_m_game_setting_toc.setting'(_,
						    _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_game_setting_toc.setting'/3}).
'tr_merge_m_game_setting_toc.setting'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_game_setting_toc.setting'/2}).
'tr_decode_repeated_finalize_m_game_setting_toc.setting'(L,
							 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_game_setting_toc.setting'/2}).
'tr_encode_m_game_setting_toc.setting'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_game_setting_toc.setting'/3}).
'tr_decode_repeated_add_elem_m_game_setting_toc.setting'(Elem,
							 L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_m_game_setup_tos.setting'/2}).
'tr_decode_init_default_m_game_setup_tos.setting'(_,
						  _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_game_setup_tos.setting'/3}).
'tr_merge_m_game_setup_tos.setting'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_game_setup_tos.setting'/2}).
'tr_decode_repeated_finalize_m_game_setup_tos.setting'(L,
						       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_game_setup_tos.setting'/2}).
'tr_encode_m_game_setup_tos.setting'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_game_setup_tos.setting'/3}).
'tr_decode_repeated_add_elem_m_game_setup_tos.setting'(Elem,
						       L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_msgno.props'/2}).
'tr_decode_init_default_p_msgno.props'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_msgno.props'/3}).
'tr_merge_p_msgno.props'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_msgno.props'/2}).
'tr_decode_repeated_finalize_p_msgno.props'(L,
					    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_msgno.props'/2}).
'tr_encode_p_msgno.props'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_msgno.props'/3}).
'tr_decode_repeated_add_elem_p_msgno.props'(Elem, L,
					    _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_msgno.items'/2}).
'tr_decode_init_default_p_msgno.items'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_msgno.items'/3}).
'tr_merge_p_msgno.items'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_msgno.items'/2}).
'tr_decode_repeated_finalize_p_msgno.items'(L,
					    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_msgno.items'/2}).
'tr_encode_p_msgno.items'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_msgno.items'/3}).
'tr_decode_repeated_add_elem_p_msgno.items'(Elem, L,
					    _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_p_msgno.pitems'/2}).
'tr_decode_init_default_p_msgno.pitems'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_p_msgno.pitems'/3}).
'tr_merge_p_msgno.pitems'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_p_msgno.pitems'/2}).
'tr_decode_repeated_finalize_p_msgno.pitems'(L,
					     TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_p_msgno.pitems'/2}).
'tr_encode_p_msgno.pitems'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_p_msgno.pitems'/3}).
'tr_decode_repeated_add_elem_p_msgno.pitems'(Elem, L,
					     _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_p_marquee.ext[x]'/2}).
'tr_encode_p_marquee.ext[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_game_paysucc_toc.gain'/2}).
'tr_decode_init_default_m_game_paysucc_toc.gain'(_,
						 _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_game_paysucc_toc.gain'/3}).
'tr_merge_m_game_paysucc_toc.gain'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_game_paysucc_toc.gain'/2}).
'tr_decode_repeated_finalize_m_game_paysucc_toc.gain'(L,
						      TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_game_paysucc_toc.gain'/2}).
'tr_encode_m_game_paysucc_toc.gain'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_game_paysucc_toc.gain'/3}).
'tr_decode_repeated_add_elem_m_game_paysucc_toc.gain'(Elem,
						      L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_game_setting_toc.setting[x]'/2}).
'tr_encode_m_game_setting_toc.setting[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_game_setup_tos.setting[x]'/2}).
'tr_encode_m_game_setup_tos.setting[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_msgno.props[x]'/2}).
'tr_encode_p_msgno.props[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_msgno.items[x]'/2}).
'tr_encode_p_msgno.items[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_p_msgno.pitems[x]'/2}).
'tr_encode_p_msgno.pitems[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_game_cheat_tos},
      [#field{name = cmd, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_game_error_toc},
      [#field{name = errno, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = args, fnum = 2, rnum = 3, type = string,
	      occurrence = repeated, opts = []}]},
     {{msg, m_game_heart_tos}, []},
     {{msg, m_game_heart_toc}, []},
     {{msg, m_game_setting_tos}, []},
     {{msg, m_game_setting_toc},
      [#field{name = setting, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_game_setup_tos},
      [#field{name = setting, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_game_time_tos}, []},
     {{msg, m_game_time_toc},
      [#field{name = time, fnum = 1, rnum = 2, type = uint64,
	      occurrence = required, opts = []},
       #field{name = tz, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_game_notify_toc},
      [#field{name = msgno, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = args, fnum = 2, rnum = 3,
	      type = {msg, p_msgno}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_game_syslist_tos}, []},
     {{msg, m_game_syslist_toc},
      [#field{name = syslist, fnum = 1, rnum = 2,
	      type = string, occurrence = repeated, opts = []}]},
     {{msg, m_game_sysopen_toc},
      [#field{name = sysid, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_game_payinfo_tos},
      [#field{name = goods_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_game_payinfo_toc},
      [#field{name = goods_id, fnum = 1, rnum = 2,
	      type = int32, occurrence = required, opts = []},
       #field{name = order_id, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = pay_back, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, m_game_paysucc_toc},
      [#field{name = gain, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = app_order, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = sdk_order, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []}]},
     {{msg, m_game_clienttime_tos},
      [#field{name = time, fnum = 1, rnum = 2, type = uint64,
	      occurrence = required, opts = []}]},
     {{msg, m_game_worldlv_tos}, []},
     {{msg, m_game_worldlv_toc},
      [#field{name = level, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_game_hotconfig_toc},
      [#field{name = config, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []}]},
     {{msg, m_game_marquee_tos}, []},
     {{msg, m_game_marquee_toc},
      [#field{name = list, fnum = 1, rnum = 2,
	      type = {msg, p_marquee}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_game_marquee_update_toc},
      [#field{name = add, fnum = 1, rnum = 2,
	      type = {msg, p_marquee}, occurrence = optional,
	      opts = []},
       #field{name = del, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []}]},
     {{msg, m_game_suspend_tos}, []},
     {{msg, m_game_awake_tos}, []},
     {{msg, m_game_paylist_tos}, []},
     {{msg, m_game_paylist_toc},
      [#field{name = paid, fnum = 1, rnum = 2, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, m_game_clienterror_tos},
      [#field{name = error, fnum = 1, rnum = 2, type = string,
	      occurrence = required, opts = []}]},
     {{msg, m_game_newbie_scene_tos}, []},
     {{msg, m_game_newbie_scene_toc},
      [#field{name = res_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_game_paytimes_tos}, []},
     {{msg, m_game_paytimes_toc},
      [#field{name = times, fnum = 1, rnum = 2,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_marquee},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 2, rnum = 3, type = int32,
	      occurrence = optional, opts = []},
       #field{name = start_time, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = end_time, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = content, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []},
       #field{name = interval, fnum = 6, rnum = 7,
	      type = int32, occurrence = required, opts = []},
       #field{name = ext, fnum = 7, rnum = 8,
	      type = {map, string, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, p_msgno},
      [#field{name = props, fnum = 1, rnum = 2,
	      type = {map, string, string}, occurrence = repeated,
	      opts = []},
       #field{name = items, fnum = 2, rnum = 3,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []},
       #field{name = pitems, fnum = 3, rnum = 4,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]}].


get_msg_names() ->
    [m_game_cheat_tos, m_game_error_toc, m_game_heart_tos,
     m_game_heart_toc, m_game_setting_tos,
     m_game_setting_toc, m_game_setup_tos, m_game_time_tos,
     m_game_time_toc, m_game_notify_toc, m_game_syslist_tos,
     m_game_syslist_toc, m_game_sysopen_toc,
     m_game_payinfo_tos, m_game_payinfo_toc,
     m_game_paysucc_toc, m_game_clienttime_tos,
     m_game_worldlv_tos, m_game_worldlv_toc,
     m_game_hotconfig_toc, m_game_marquee_tos,
     m_game_marquee_toc, m_game_marquee_update_toc,
     m_game_suspend_tos, m_game_awake_tos,
     m_game_paylist_tos, m_game_paylist_toc,
     m_game_clienterror_tos, m_game_newbie_scene_tos,
     m_game_newbie_scene_toc, m_game_paytimes_tos,
     m_game_paytimes_toc, p_marquee, p_msgno].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_game_cheat_tos, m_game_error_toc, m_game_heart_tos,
     m_game_heart_toc, m_game_setting_tos,
     m_game_setting_toc, m_game_setup_tos, m_game_time_tos,
     m_game_time_toc, m_game_notify_toc, m_game_syslist_tos,
     m_game_syslist_toc, m_game_sysopen_toc,
     m_game_payinfo_tos, m_game_payinfo_toc,
     m_game_paysucc_toc, m_game_clienttime_tos,
     m_game_worldlv_tos, m_game_worldlv_toc,
     m_game_hotconfig_toc, m_game_marquee_tos,
     m_game_marquee_toc, m_game_marquee_update_toc,
     m_game_suspend_tos, m_game_awake_tos,
     m_game_paylist_tos, m_game_paylist_toc,
     m_game_clienterror_tos, m_game_newbie_scene_tos,
     m_game_newbie_scene_toc, m_game_paytimes_tos,
     m_game_paytimes_toc, p_marquee, p_msgno].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_game_cheat_tos) ->
    [#field{name = cmd, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_game_error_toc) ->
    [#field{name = errno, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = args, fnum = 2, rnum = 3, type = string,
	    occurrence = repeated, opts = []}];
find_msg_def(m_game_heart_tos) -> [];
find_msg_def(m_game_heart_toc) -> [];
find_msg_def(m_game_setting_tos) -> [];
find_msg_def(m_game_setting_toc) ->
    [#field{name = setting, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_game_setup_tos) ->
    [#field{name = setting, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_game_time_tos) -> [];
find_msg_def(m_game_time_toc) ->
    [#field{name = time, fnum = 1, rnum = 2, type = uint64,
	    occurrence = required, opts = []},
     #field{name = tz, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_game_notify_toc) ->
    [#field{name = msgno, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = args, fnum = 2, rnum = 3,
	    type = {msg, p_msgno}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_game_syslist_tos) -> [];
find_msg_def(m_game_syslist_toc) ->
    [#field{name = syslist, fnum = 1, rnum = 2,
	    type = string, occurrence = repeated, opts = []}];
find_msg_def(m_game_sysopen_toc) ->
    [#field{name = sysid, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_game_payinfo_tos) ->
    [#field{name = goods_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_game_payinfo_toc) ->
    [#field{name = goods_id, fnum = 1, rnum = 2,
	    type = int32, occurrence = required, opts = []},
     #field{name = order_id, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = pay_back, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def(m_game_paysucc_toc) ->
    [#field{name = gain, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = app_order, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = sdk_order, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []}];
find_msg_def(m_game_clienttime_tos) ->
    [#field{name = time, fnum = 1, rnum = 2, type = uint64,
	    occurrence = required, opts = []}];
find_msg_def(m_game_worldlv_tos) -> [];
find_msg_def(m_game_worldlv_toc) ->
    [#field{name = level, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_game_hotconfig_toc) ->
    [#field{name = config, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []}];
find_msg_def(m_game_marquee_tos) -> [];
find_msg_def(m_game_marquee_toc) ->
    [#field{name = list, fnum = 1, rnum = 2,
	    type = {msg, p_marquee}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_game_marquee_update_toc) ->
    [#field{name = add, fnum = 1, rnum = 2,
	    type = {msg, p_marquee}, occurrence = optional,
	    opts = []},
     #field{name = del, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []}];
find_msg_def(m_game_suspend_tos) -> [];
find_msg_def(m_game_awake_tos) -> [];
find_msg_def(m_game_paylist_tos) -> [];
find_msg_def(m_game_paylist_toc) ->
    [#field{name = paid, fnum = 1, rnum = 2, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(m_game_clienterror_tos) ->
    [#field{name = error, fnum = 1, rnum = 2, type = string,
	    occurrence = required, opts = []}];
find_msg_def(m_game_newbie_scene_tos) -> [];
find_msg_def(m_game_newbie_scene_toc) ->
    [#field{name = res_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_game_paytimes_tos) -> [];
find_msg_def(m_game_paytimes_toc) ->
    [#field{name = times, fnum = 1, rnum = 2,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_marquee) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 2, rnum = 3, type = int32,
	    occurrence = optional, opts = []},
     #field{name = start_time, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = end_time, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = content, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []},
     #field{name = interval, fnum = 6, rnum = 7,
	    type = int32, occurrence = required, opts = []},
     #field{name = ext, fnum = 7, rnum = 8,
	    type = {map, string, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(p_msgno) ->
    [#field{name = props, fnum = 1, rnum = 2,
	    type = {map, string, string}, occurrence = repeated,
	    opts = []},
     #field{name = items, fnum = 2, rnum = 3,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []},
     #field{name = pitems, fnum = 3, rnum = 4,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
