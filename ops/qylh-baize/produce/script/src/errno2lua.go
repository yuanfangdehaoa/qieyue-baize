package main

import (
	"encoding/xml"
	"os"
	"parser"
	xml2 "parser/xml"
	"path"
	"path/filepath"
)

type errs struct {
	XMLName xml.Name `xml:"errs"`
	Errs    []err    `xml:"err"`
}

type err struct {
	XMLName xml.Name `xml:"err"`
	Name    string   `xml:"name,attr"`
	Code    int      `xml:"code,attr"`
	Desc    string   `xml:"desc,attr"`
}

var tplErrnoLua = `-- Automatically generated, do not edit
-- Generated by parse_errno.go

errno = {
{{ range .Errs }}
	[{{ .Code }}] = [[ {{ .Desc }} ]],
{{ end }}
}
`

func main() {
	xmlFile, outDir, convertTo := os.Args[1], os.Args[2], os.Args[3]
	x := xml2.ParseXML(xmlFile, &errs{})

	if convertTo != "never" {
		i18n := parser.InitI18N(filepath.Join(filepath.Dir(xmlFile), "../excel"), convertTo)
		ers := x.Data.(*errs).Errs
		for i, er := range ers {
			if desc, ok := i18n.Converter[er.Desc]; ok {
				ers[i].Desc = desc.(string)
			}
		}
	}

	if xml2.IsDirExist(outDir) {
		x.Exec(tplErrnoLua, nil)
		x.Write(path.Join(outDir, "errno.lua"))
	}
}
