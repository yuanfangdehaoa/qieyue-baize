package main

import (
	"log"
	"os"
	"parser/proto"
	"path/filepath"
)

// proto.hrl
var tplProtoHrl = `%% Automatically generated, do not edit
%% Generated by parse_proto.go

-ifndef(PROTO_HRL).
-define(PROTO_HRL, true).

{{ range .Mods }}-include("{{ . }}.hrl").
{{ end }}

{{ range $k, $v := .Meths }}-define({{ $k }}, {{ $v }}).
{{ end }}

-endif.
`

// proto.erl
var tplProtoErl = `%% Automatically generated, do not edit
%% Generated by parse_proto.go

-module(proto).

-compile([export_all]).
-compile(nowarn_export_all).

%% 解包
{{ range .Msgs }}{{ if eq .MsgType "s" }}
decode({{ .MsgID }}, Bin) ->
	Tos = {{ .ModName }}:decode_msg(Bin, {{ .MsgName }}),
	{ok, {{ .ModID }}, Tos};{{ end }}{{ end }}
decode(MsgID, Bin) ->
	throw({decode_error, MsgID, Bin}).

%% 封包
{{ range .Msgs }}{{ if eq .MsgType "c" }}
encode({{ .MsgName }}, Toc) ->
	Bin = {{ .ModName }}:encode_msg(Toc),
	{ok, <<{{ .MsgID }}:32, (byte_size(Bin)):32, Bin/binary>>};{{ end }}{{ end }}
encode(MsgName, Toc) ->
	throw({encode_error, MsgName, Toc}).

%% 获取协议id
{{ range .Msgs }}
get_msgid({{ .MsgName }}) ->
	{ {{ .ModID }}, {{ .MsgID }} };{{ end }}
get_msgid(MsgName) ->
	throw({bad_record, MsgName}).

%% 获取tos记录名
{{ range .Msgs }}{{ if eq .MsgType "s" }}
get_tos({{ .MsgID }}) ->
	{ {{ .ModID }}, {{ .ModName }}, {{ .MsgName }}};{{ end }}{{ end }}
get_tos(MsgID) ->
	throw({bad_msgid, MsgID}).

%% 获取toc记录名
{{ range .Msgs }}{{ if eq .MsgType "c" }}
get_toc({{ .MsgID }}) ->
	{ {{ .ModID }}, {{ .ModName }}, {{ .MsgName }} };{{ end }}{{ end }}
get_toc(MsgID) ->
	throw({bad_msgid, MsgID}).
`

func main() {
	p := proto.NewProto()
	p, err := p.Parse(os.Args[1])

	if err != nil {
		log.Fatalf("proto解析失败: %v", err)
	}

	// 生成 proto.hrl
	p.Generate(tplProtoHrl, filepath.Join(os.Args[2], "include", "proto.hrl"))

	// 生成 proto.erl
	p.Generate(tplProtoErl, filepath.Join(os.Args[2], "src", "proto.erl"))
}
