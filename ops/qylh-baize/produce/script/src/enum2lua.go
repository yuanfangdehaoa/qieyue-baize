package main

import (
	"encoding/xml"
	"os"
	"parser"
	xml2 "parser/xml"
	"path"
	"path/filepath"
)

type enums struct {
	XMLName xml.Name `xml:"enums"`
	Enums   []enum   `xml:"enum"`
}

type enum struct {
	XMLName xml.Name `xml:"enum"`
	Name    string   `xml:"name,attr"`
	Elems   []elem   `xml:"elem"`
}

type elem struct {
	XMLName xml.Name `xml:"elem"`
	Name    string   `xml:"name,attr"`
	Code    int      `xml:"code,attr"`
	Desc    string   `xml:"desc,attr"`
}

var tplEnumLua = `-- Automatically generated, do not edit
-- Generated by parse_enum.go

enum = {
{{ range .Enums }}
	{{ .Name }} = {
{{ range .Elems }}
		{{ .Name }} = {{ .Code }}, -- {{ .Desc }}
{{ end }}
	},
{{ end }}
}

enumName = {
{{ range .Enums }}
	{{ .Name }} = {
{{ range .Elems }}
		[{{ .Code }}] = "{{ .Desc }}",
{{ end }}
	},
{{ end }}
}
`

func main() {
	xmlFile, outDir, convertTo := os.Args[1], os.Args[2], os.Args[3]
	x := xml2.ParseXML(xmlFile, &enums{})

	if convertTo != "never" {
		i18n := parser.InitI18N(filepath.Join(filepath.Dir(xmlFile), "../excel"), convertTo)
		for _, enum := range x.Data.(*enums).Enums {
			for i, elem := range enum.Elems {
				if desc, ok := i18n.Converter[elem.Desc]; ok {
					enum.Elems[i].Desc = desc.(string)
				}
			}
		}
	}

	if xml2.IsDirExist(outDir) {
		x.Exec(tplEnumLua, nil)
		x.Write(path.Join(outDir, "enum.lua"))
	}
}
