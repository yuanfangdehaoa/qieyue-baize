package main

import (
	"encoding/xml"
	"os"
	"parser"
	xml2 "parser/xml"
	"path"
	"path/filepath"
)

type msgs struct {
	XMLName xml.Name `xml:"msgs"`
	Msgs    []msg    `xml:"msg"`
}

type msg struct {
	XMLName xml.Name `xml:"msg"`
	Name    string   `xml:"name,attr"`
	Code    string   `xml:"code,attr"`
	Type    int      `xml:"type,attr"`
	Chan    int      `xml:"chan,attr"`
	Desc    string   `xml:"desc,attr"`
}

var tplMsgNoLua = `-- Automatically generated, do not edit
-- Generated by parse_msgno.go

msgno = {
{{ range .Msgs }}
	[{{ .Code }}] = { type={{ .Type }}, chan={{ .Chan }}, desc=[[ {{ .Desc }} ]] },
{{ end }}
}

msgdef = {
{{ range .Msgs }}
	{{ .Name }} = {{ .Code }},
{{ end }}
}
`

func main() {
	xmlFile, outDir, convertTo := os.Args[1], os.Args[2], os.Args[3]
	x := xml2.ParseXML(xmlFile, &msgs{})

	if convertTo != "never" {
		i18n := parser.InitI18N(filepath.Join(filepath.Dir(xmlFile), "../excel"), convertTo)
		msgs := x.Data.(*msgs).Msgs
		for i, msg := range msgs {
			if desc, ok := i18n.Converter[msg.Desc]; ok {
				msgs[i].Desc = desc.(string)
			}
		}
	}

	if xml2.IsDirExist(outDir) {
		x.Exec(tplMsgNoLua, nil)
		x.Write(path.Join(outDir, "msgno.lua"))
	}
}
