%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.5.1
-module(pb_1700_yunying).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("pb_1700_yunying.hrl").
-include("gpb.hrl").

%% enumerated types

-export_type([]).

%% message types
-type m_yunying_list_tos() :: #m_yunying_list_tos{}.

-type m_yunying_list_toc() :: #m_yunying_list_toc{}.

-type m_yunying_start_toc() :: #m_yunying_start_toc{}.

-type m_yunying_stop_toc() :: #m_yunying_stop_toc{}.

-type m_yunying_fetch_tos() :: #m_yunying_fetch_tos{}.

-type m_yunying_fetch_toc() :: #m_yunying_fetch_toc{}.

-type m_yunying_update_toc() :: #m_yunying_update_toc{}.

-type m_yunying_info_tos() :: #m_yunying_info_tos{}.

-type m_yunying_info_toc() :: #m_yunying_info_toc{}.

-type m_yunying_gift_tos() :: #m_yunying_gift_tos{}.

-type m_yunying_gift_toc() :: #m_yunying_gift_toc{}.

-type m_yunying_gift_fetch_tos() :: #m_yunying_gift_fetch_tos{}.

-type m_yunying_gift_fetch_toc() :: #m_yunying_gift_fetch_toc{}.

-type m_yunying_logs_tos() :: #m_yunying_logs_tos{}.

-type m_yunying_logs_toc() :: #m_yunying_logs_toc{}.

-type m_yunying_lottery_info_tos() :: #m_yunying_lottery_info_tos{}.

-type m_yunying_lottery_info_toc() :: #m_yunying_lottery_info_toc{}.

-type m_yunying_lottery_do_tos() :: #m_yunying_lottery_do_tos{}.

-type m_yunying_lottery_do_toc() :: #m_yunying_lottery_do_toc{}.

-type m_yunying_lottery_refresh_tos() :: #m_yunying_lottery_refresh_tos{}.

-type m_yunying_lottery_refresh_toc() :: #m_yunying_lottery_refresh_toc{}.

-type m_yunying_logs_update_toc() :: #m_yunying_logs_update_toc{}.

-type m_yunying_lottery_draw_tos() :: #m_yunying_lottery_draw_tos{}.

-type m_yunying_lottery_draw_toc() :: #m_yunying_lottery_draw_toc{}.

-type m_yunying_lotoinfo_tos() :: #m_yunying_lotoinfo_tos{}.

-type m_yunying_lotoinfo_toc() :: #m_yunying_lotoinfo_toc{}.

-type m_yunying_loto_tos() :: #m_yunying_loto_tos{}.

-type m_yunying_loto_toc() :: #m_yunying_loto_toc{}.

-type m_yunying_loto_progress_toc() :: #m_yunying_loto_progress_toc{}.

-type m_yunying_shop_info_tos() :: #m_yunying_shop_info_tos{}.

-type m_yunying_shop_info_toc() :: #m_yunying_shop_info_toc{}.

-type m_yunying_shop_buy_tos() :: #m_yunying_shop_buy_tos{}.

-type m_yunying_shop_buy_toc() :: #m_yunying_shop_buy_toc{}.

-type m_yunying_shop_reward_log_tos() :: #m_yunying_shop_reward_log_tos{}.

-type m_yunying_shop_reward_log_toc() :: #m_yunying_shop_reward_log_toc{}.

-type p_yy_activity() :: #p_yy_activity{}.

-type p_yy_reward() :: #p_yy_reward{}.

-type p_yy_task() :: #p_yy_task{}.

-type p_yy_gift() :: #p_yy_gift{}.

-type p_yy_log() :: #p_yy_log{}.

-type p_yy_lottery_item() :: #p_yy_lottery_item{}.

-type p_yy_shop() :: #p_yy_shop{}.

-type p_yy_shop_log() :: #p_yy_shop_log{}.

-type p_yy_shop_reward_log() :: #p_yy_shop_reward_log{}.

-export_type(['m_yunying_list_tos'/0, 'm_yunying_list_toc'/0, 'm_yunying_start_toc'/0, 'm_yunying_stop_toc'/0, 'm_yunying_fetch_tos'/0, 'm_yunying_fetch_toc'/0, 'm_yunying_update_toc'/0, 'm_yunying_info_tos'/0, 'm_yunying_info_toc'/0, 'm_yunying_gift_tos'/0, 'm_yunying_gift_toc'/0, 'm_yunying_gift_fetch_tos'/0, 'm_yunying_gift_fetch_toc'/0, 'm_yunying_logs_tos'/0, 'm_yunying_logs_toc'/0, 'm_yunying_lottery_info_tos'/0, 'm_yunying_lottery_info_toc'/0, 'm_yunying_lottery_do_tos'/0, 'm_yunying_lottery_do_toc'/0, 'm_yunying_lottery_refresh_tos'/0, 'm_yunying_lottery_refresh_toc'/0, 'm_yunying_logs_update_toc'/0, 'm_yunying_lottery_draw_tos'/0, 'm_yunying_lottery_draw_toc'/0, 'm_yunying_lotoinfo_tos'/0, 'm_yunying_lotoinfo_toc'/0, 'm_yunying_loto_tos'/0, 'm_yunying_loto_toc'/0, 'm_yunying_loto_progress_toc'/0, 'm_yunying_shop_info_tos'/0, 'm_yunying_shop_info_toc'/0, 'm_yunying_shop_buy_tos'/0, 'm_yunying_shop_buy_toc'/0, 'm_yunying_shop_reward_log_tos'/0, 'm_yunying_shop_reward_log_toc'/0, 'p_yy_activity'/0, 'p_yy_reward'/0, 'p_yy_task'/0, 'p_yy_gift'/0, 'p_yy_log'/0, 'p_yy_lottery_item'/0, 'p_yy_shop'/0, 'p_yy_shop_log'/0, 'p_yy_shop_reward_log'/0]).

-spec encode_msg(#m_yunying_list_tos{} | #m_yunying_list_toc{} | #m_yunying_start_toc{} | #m_yunying_stop_toc{} | #m_yunying_fetch_tos{} | #m_yunying_fetch_toc{} | #m_yunying_update_toc{} | #m_yunying_info_tos{} | #m_yunying_info_toc{} | #m_yunying_gift_tos{} | #m_yunying_gift_toc{} | #m_yunying_gift_fetch_tos{} | #m_yunying_gift_fetch_toc{} | #m_yunying_logs_tos{} | #m_yunying_logs_toc{} | #m_yunying_lottery_info_tos{} | #m_yunying_lottery_info_toc{} | #m_yunying_lottery_do_tos{} | #m_yunying_lottery_do_toc{} | #m_yunying_lottery_refresh_tos{} | #m_yunying_lottery_refresh_toc{} | #m_yunying_logs_update_toc{} | #m_yunying_lottery_draw_tos{} | #m_yunying_lottery_draw_toc{} | #m_yunying_lotoinfo_tos{} | #m_yunying_lotoinfo_toc{} | #m_yunying_loto_tos{} | #m_yunying_loto_toc{} | #m_yunying_loto_progress_toc{} | #m_yunying_shop_info_tos{} | #m_yunying_shop_info_toc{} | #m_yunying_shop_buy_tos{} | #m_yunying_shop_buy_toc{} | #m_yunying_shop_reward_log_tos{} | #m_yunying_shop_reward_log_toc{} | #p_yy_activity{} | #p_yy_reward{} | #p_yy_task{} | #p_yy_gift{} | #p_yy_log{} | #p_yy_lottery_item{} | #p_yy_shop{} | #p_yy_shop_log{} | #p_yy_shop_reward_log{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#m_yunying_list_tos{} | #m_yunying_list_toc{} | #m_yunying_start_toc{} | #m_yunying_stop_toc{} | #m_yunying_fetch_tos{} | #m_yunying_fetch_toc{} | #m_yunying_update_toc{} | #m_yunying_info_tos{} | #m_yunying_info_toc{} | #m_yunying_gift_tos{} | #m_yunying_gift_toc{} | #m_yunying_gift_fetch_tos{} | #m_yunying_gift_fetch_toc{} | #m_yunying_logs_tos{} | #m_yunying_logs_toc{} | #m_yunying_lottery_info_tos{} | #m_yunying_lottery_info_toc{} | #m_yunying_lottery_do_tos{} | #m_yunying_lottery_do_toc{} | #m_yunying_lottery_refresh_tos{} | #m_yunying_lottery_refresh_toc{} | #m_yunying_logs_update_toc{} | #m_yunying_lottery_draw_tos{} | #m_yunying_lottery_draw_toc{} | #m_yunying_lotoinfo_tos{} | #m_yunying_lotoinfo_toc{} | #m_yunying_loto_tos{} | #m_yunying_loto_toc{} | #m_yunying_loto_progress_toc{} | #m_yunying_shop_info_tos{} | #m_yunying_shop_info_toc{} | #m_yunying_shop_buy_tos{} | #m_yunying_shop_buy_toc{} | #m_yunying_shop_reward_log_tos{} | #m_yunying_shop_reward_log_toc{} | #p_yy_activity{} | #p_yy_reward{} | #p_yy_task{} | #p_yy_gift{} | #p_yy_log{} | #p_yy_lottery_item{} | #p_yy_shop{} | #p_yy_shop_log{} | #p_yy_shop_reward_log{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#m_yunying_list_tos{} | #m_yunying_list_toc{} | #m_yunying_start_toc{} | #m_yunying_stop_toc{} | #m_yunying_fetch_tos{} | #m_yunying_fetch_toc{} | #m_yunying_update_toc{} | #m_yunying_info_tos{} | #m_yunying_info_toc{} | #m_yunying_gift_tos{} | #m_yunying_gift_toc{} | #m_yunying_gift_fetch_tos{} | #m_yunying_gift_fetch_toc{} | #m_yunying_logs_tos{} | #m_yunying_logs_toc{} | #m_yunying_lottery_info_tos{} | #m_yunying_lottery_info_toc{} | #m_yunying_lottery_do_tos{} | #m_yunying_lottery_do_toc{} | #m_yunying_lottery_refresh_tos{} | #m_yunying_lottery_refresh_toc{} | #m_yunying_logs_update_toc{} | #m_yunying_lottery_draw_tos{} | #m_yunying_lottery_draw_toc{} | #m_yunying_lotoinfo_tos{} | #m_yunying_lotoinfo_toc{} | #m_yunying_loto_tos{} | #m_yunying_loto_toc{} | #m_yunying_loto_progress_toc{} | #m_yunying_shop_info_tos{} | #m_yunying_shop_info_toc{} | #m_yunying_shop_buy_tos{} | #m_yunying_shop_buy_toc{} | #m_yunying_shop_reward_log_tos{} | #m_yunying_shop_reward_log_toc{} | #p_yy_activity{} | #p_yy_reward{} | #p_yy_task{} | #p_yy_gift{} | #p_yy_log{} | #p_yy_lottery_item{} | #p_yy_shop{} | #p_yy_shop_log{} | #p_yy_shop_reward_log{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_yunying_list_tos ->
	  encode_msg_m_yunying_list_tos(id(Msg, TrUserData),
					TrUserData);
      m_yunying_list_toc ->
	  encode_msg_m_yunying_list_toc(id(Msg, TrUserData),
					TrUserData);
      m_yunying_start_toc ->
	  encode_msg_m_yunying_start_toc(id(Msg, TrUserData),
					 TrUserData);
      m_yunying_stop_toc ->
	  encode_msg_m_yunying_stop_toc(id(Msg, TrUserData),
					TrUserData);
      m_yunying_fetch_tos ->
	  encode_msg_m_yunying_fetch_tos(id(Msg, TrUserData),
					 TrUserData);
      m_yunying_fetch_toc ->
	  encode_msg_m_yunying_fetch_toc(id(Msg, TrUserData),
					 TrUserData);
      m_yunying_update_toc ->
	  encode_msg_m_yunying_update_toc(id(Msg, TrUserData),
					  TrUserData);
      m_yunying_info_tos ->
	  encode_msg_m_yunying_info_tos(id(Msg, TrUserData),
					TrUserData);
      m_yunying_info_toc ->
	  encode_msg_m_yunying_info_toc(id(Msg, TrUserData),
					TrUserData);
      m_yunying_gift_tos ->
	  encode_msg_m_yunying_gift_tos(id(Msg, TrUserData),
					TrUserData);
      m_yunying_gift_toc ->
	  encode_msg_m_yunying_gift_toc(id(Msg, TrUserData),
					TrUserData);
      m_yunying_gift_fetch_tos ->
	  encode_msg_m_yunying_gift_fetch_tos(id(Msg, TrUserData),
					      TrUserData);
      m_yunying_gift_fetch_toc ->
	  encode_msg_m_yunying_gift_fetch_toc(id(Msg, TrUserData),
					      TrUserData);
      m_yunying_logs_tos ->
	  encode_msg_m_yunying_logs_tos(id(Msg, TrUserData),
					TrUserData);
      m_yunying_logs_toc ->
	  encode_msg_m_yunying_logs_toc(id(Msg, TrUserData),
					TrUserData);
      m_yunying_lottery_info_tos ->
	  encode_msg_m_yunying_lottery_info_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_yunying_lottery_info_toc ->
	  encode_msg_m_yunying_lottery_info_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_yunying_lottery_do_tos ->
	  encode_msg_m_yunying_lottery_do_tos(id(Msg, TrUserData),
					      TrUserData);
      m_yunying_lottery_do_toc ->
	  encode_msg_m_yunying_lottery_do_toc(id(Msg, TrUserData),
					      TrUserData);
      m_yunying_lottery_refresh_tos ->
	  encode_msg_m_yunying_lottery_refresh_tos(id(Msg,
						      TrUserData),
						   TrUserData);
      m_yunying_lottery_refresh_toc ->
	  encode_msg_m_yunying_lottery_refresh_toc(id(Msg,
						      TrUserData),
						   TrUserData);
      m_yunying_logs_update_toc ->
	  encode_msg_m_yunying_logs_update_toc(id(Msg,
						  TrUserData),
					       TrUserData);
      m_yunying_lottery_draw_tos ->
	  encode_msg_m_yunying_lottery_draw_tos(id(Msg,
						   TrUserData),
						TrUserData);
      m_yunying_lottery_draw_toc ->
	  encode_msg_m_yunying_lottery_draw_toc(id(Msg,
						   TrUserData),
						TrUserData);
      m_yunying_lotoinfo_tos ->
	  encode_msg_m_yunying_lotoinfo_tos(id(Msg, TrUserData),
					    TrUserData);
      m_yunying_lotoinfo_toc ->
	  encode_msg_m_yunying_lotoinfo_toc(id(Msg, TrUserData),
					    TrUserData);
      m_yunying_loto_tos ->
	  encode_msg_m_yunying_loto_tos(id(Msg, TrUserData),
					TrUserData);
      m_yunying_loto_toc ->
	  encode_msg_m_yunying_loto_toc(id(Msg, TrUserData),
					TrUserData);
      m_yunying_loto_progress_toc ->
	  encode_msg_m_yunying_loto_progress_toc(id(Msg,
						    TrUserData),
						 TrUserData);
      m_yunying_shop_info_tos ->
	  encode_msg_m_yunying_shop_info_tos(id(Msg, TrUserData),
					     TrUserData);
      m_yunying_shop_info_toc ->
	  encode_msg_m_yunying_shop_info_toc(id(Msg, TrUserData),
					     TrUserData);
      m_yunying_shop_buy_tos ->
	  encode_msg_m_yunying_shop_buy_tos(id(Msg, TrUserData),
					    TrUserData);
      m_yunying_shop_buy_toc ->
	  encode_msg_m_yunying_shop_buy_toc(id(Msg, TrUserData),
					    TrUserData);
      m_yunying_shop_reward_log_tos ->
	  encode_msg_m_yunying_shop_reward_log_tos(id(Msg,
						      TrUserData),
						   TrUserData);
      m_yunying_shop_reward_log_toc ->
	  encode_msg_m_yunying_shop_reward_log_toc(id(Msg,
						      TrUserData),
						   TrUserData);
      p_yy_activity ->
	  encode_msg_p_yy_activity(id(Msg, TrUserData),
				   TrUserData);
      p_yy_reward ->
	  encode_msg_p_yy_reward(id(Msg, TrUserData), TrUserData);
      p_yy_task ->
	  encode_msg_p_yy_task(id(Msg, TrUserData), TrUserData);
      p_yy_gift ->
	  encode_msg_p_yy_gift(id(Msg, TrUserData), TrUserData);
      p_yy_log ->
	  encode_msg_p_yy_log(id(Msg, TrUserData), TrUserData);
      p_yy_lottery_item ->
	  encode_msg_p_yy_lottery_item(id(Msg, TrUserData),
				       TrUserData);
      p_yy_shop ->
	  encode_msg_p_yy_shop(id(Msg, TrUserData), TrUserData);
      p_yy_shop_log ->
	  encode_msg_p_yy_shop_log(id(Msg, TrUserData),
				   TrUserData);
      p_yy_shop_reward_log ->
	  encode_msg_p_yy_shop_reward_log(id(Msg, TrUserData),
					  TrUserData)
    end.


encode_msg_m_yunying_list_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_yunying_list_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_list_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_list_toc(#m_yunying_list_toc{activities
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_yunying_list_toc_activities(TrF1, Bin,
						   TrUserData)
      end
    end.

encode_msg_m_yunying_start_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_start_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_start_toc(#m_yunying_start_toc{activity
							= F1},
			       Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_m_yunying_start_toc_activity(TrF1,
					    <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_yunying_stop_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_stop_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_stop_toc(#m_yunying_stop_toc{id =
						      F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_fetch_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_fetch_tos(Msg, <<>>, TrUserData).


encode_msg_m_yunying_fetch_tos(#m_yunying_fetch_tos{act_id
							= F1,
						    id = F2, level = F3},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_yunying_fetch_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_fetch_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_fetch_toc(#m_yunying_fetch_toc{act_id
							= F1,
						    id = F2, reward = F3},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = 'tr_encode_m_yunying_fetch_toc.reward'(F3,
						    TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_m_yunying_fetch_toc_reward(TrF3, B2, TrUserData)
      end
    end.

encode_msg_m_yunying_update_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_update_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_update_toc(#m_yunying_update_toc{type
							  = F1,
						      rewards = F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_yunying_update_toc_rewards(TrF2, B1,
						  TrUserData)
      end
    end.

encode_msg_m_yunying_info_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_info_tos(Msg, <<>>, TrUserData).


encode_msg_m_yunying_info_tos(#m_yunying_info_tos{id =
						      F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_info_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_info_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_info_toc(#m_yunying_info_toc{id =
						      F1,
						  tasks = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_yunying_info_toc_tasks(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_yunying_gift_tos(_Msg, _TrUserData) ->
    <<>>.

encode_msg_m_yunying_gift_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_gift_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_gift_toc(#m_yunying_gift_toc{list =
						      F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      if TrF1 == [] -> Bin;
	 true ->
	     e_field_m_yunying_gift_toc_list(TrF1, Bin, TrUserData)
      end
    end.

encode_msg_m_yunying_gift_fetch_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_gift_fetch_tos(Msg, <<>>,
					TrUserData).


encode_msg_m_yunying_gift_fetch_tos(#m_yunying_gift_fetch_tos{act_id
								  = F1,
							      id = F2},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_yunying_gift_fetch_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_gift_fetch_toc(Msg, <<>>,
					TrUserData).


encode_msg_m_yunying_gift_fetch_toc(#m_yunying_gift_fetch_toc{gift
								  = F1},
				    Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_mfield_m_yunying_gift_fetch_toc_gift(TrF1,
					     <<Bin/binary, 10>>, TrUserData)
    end.

encode_msg_m_yunying_logs_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_logs_tos(Msg, <<>>, TrUserData).


encode_msg_m_yunying_logs_tos(#m_yunying_logs_tos{act_id
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_logs_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_logs_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_logs_toc(#m_yunying_logs_toc{act_id
						      = F1,
						  logs = F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_yunying_logs_toc_logs(TrF2, B1, TrUserData)
      end
    end.

encode_msg_m_yunying_lottery_info_tos(Msg,
				      TrUserData) ->
    encode_msg_m_yunying_lottery_info_tos(Msg, <<>>,
					  TrUserData).


encode_msg_m_yunying_lottery_info_tos(#m_yunying_lottery_info_tos{act_id
								      = F1},
				      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_info_toc(Msg,
				      TrUserData) ->
    encode_msg_m_yunying_lottery_info_toc(Msg, <<>>,
					  TrUserData).


encode_msg_m_yunying_lottery_info_toc(#m_yunying_lottery_info_toc{act_id
								      = F1,
								  items = F2,
								  free_refresh =
								      F3,
								  free_crack =
								      F4,
								  crack = F5},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = 'tr_encode_m_yunying_lottery_info_toc.items'(F2,
							       TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_m_yunying_lottery_info_toc_items(TrF2, B1,
							   TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_do_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_lottery_do_tos(Msg, <<>>,
					TrUserData).


encode_msg_m_yunying_lottery_do_tos(#m_yunying_lottery_do_tos{act_id
								  = F1,
							      pos = F2},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_do_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_lottery_do_toc(Msg, <<>>,
					TrUserData).


encode_msg_m_yunying_lottery_do_toc(#m_yunying_lottery_do_toc{act_id
								  = F1,
							      items = F2,
							      free_crack = F3,
							      free_refresh = F4,
							      crack = F5},
				    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = 'tr_encode_m_yunying_lottery_do_toc.items'(F2,
							     TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_m_yunying_lottery_do_toc_items(TrF2, B1,
							 TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_refresh_tos(Msg,
					 TrUserData) ->
    encode_msg_m_yunying_lottery_refresh_tos(Msg, <<>>,
					     TrUserData).


encode_msg_m_yunying_lottery_refresh_tos(#m_yunying_lottery_refresh_tos{act_id
									    =
									    F1},
					 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_refresh_toc(Msg,
					 TrUserData) ->
    encode_msg_m_yunying_lottery_refresh_toc(Msg, <<>>,
					     TrUserData).


encode_msg_m_yunying_lottery_refresh_toc(#m_yunying_lottery_refresh_toc{act_id
									    =
									    F1,
									items =
									    F2,
									free_refresh
									    =
									    F3},
					 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 =
	       'tr_encode_m_yunying_lottery_refresh_toc.items'(F2,
							       TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_m_yunying_lottery_refresh_toc_items(TrF2, B1,
							      TrUserData)
	   end
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_yunying_logs_update_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_logs_update_toc(Msg, <<>>,
					 TrUserData).


encode_msg_m_yunying_logs_update_toc(#m_yunying_logs_update_toc{act_id
								    = F1,
								log = F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_mfield_m_yunying_logs_update_toc_log(TrF2,
					     <<B1/binary, 18>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_draw_tos(Msg,
				      TrUserData) ->
    encode_msg_m_yunying_lottery_draw_tos(Msg, <<>>,
					  TrUserData).


encode_msg_m_yunying_lottery_draw_tos(#m_yunying_lottery_draw_tos{act_id
								      = F1,
								  times = F2},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_yunying_lottery_draw_toc(Msg,
				      TrUserData) ->
    encode_msg_m_yunying_lottery_draw_toc(Msg, <<>>,
					  TrUserData).


encode_msg_m_yunying_lottery_draw_toc(#m_yunying_lottery_draw_toc{act_id
								      = F1,
								  reward_ids =
								      F2},
				      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_yunying_lottery_draw_toc_reward_ids(TrF2, B1,
							   TrUserData)
      end
    end.

encode_msg_m_yunying_lotoinfo_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_lotoinfo_tos(Msg, <<>>,
				      TrUserData).


encode_msg_m_yunying_lotoinfo_tos(#m_yunying_lotoinfo_tos{act_id
							      = F1},
				  Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_lotoinfo_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_lotoinfo_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_yunying_lotoinfo_toc(#m_yunying_lotoinfo_toc{act_id
							      = F1,
							  progress = F2,
							  round = F3,
							  hits = F4},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		end
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      if TrF4 == [] -> B3;
	 true ->
	     e_field_m_yunying_lotoinfo_toc_hits(TrF4, B3,
						 TrUserData)
      end
    end.

encode_msg_m_yunying_loto_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_loto_tos(Msg, <<>>, TrUserData).


encode_msg_m_yunying_loto_tos(#m_yunying_loto_tos{act_id
						      = F1},
			      Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_loto_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_loto_toc(Msg, <<>>, TrUserData).


encode_msg_m_yunying_loto_toc(#m_yunying_loto_toc{act_id
						      = F1,
						  hit = F2, progress = F3},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_yunying_loto_progress_toc(Msg,
				       TrUserData) ->
    encode_msg_m_yunying_loto_progress_toc(Msg, <<>>,
					   TrUserData).


encode_msg_m_yunying_loto_progress_toc(#m_yunying_loto_progress_toc{act_id
									= F1,
								    progress =
									F2},
				       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_m_yunying_shop_info_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_shop_info_tos(Msg, <<>>,
				       TrUserData).


encode_msg_m_yunying_shop_info_tos(#m_yunying_shop_info_tos{act_id
								= F1},
				   Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_shop_info_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_shop_info_toc(Msg, <<>>,
				       TrUserData).


encode_msg_m_yunying_shop_info_toc(#m_yunying_shop_info_toc{act_id
								= F1,
							    list = F2,
							    logs = F3,
							    reward_time = F4,
							    unlimit_sec = F5},
				   Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   if TrF2 == [] -> B1;
	      true ->
		  e_field_m_yunying_shop_info_toc_list(TrF2, B1,
						       TrUserData)
	   end
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   if TrF3 == [] -> B2;
	      true ->
		  e_field_m_yunying_shop_info_toc_logs(TrF3, B2,
						       TrUserData)
	   end
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_m_yunying_shop_buy_tos(Msg, TrUserData) ->
    encode_msg_m_yunying_shop_buy_tos(Msg, <<>>,
				      TrUserData).


encode_msg_m_yunying_shop_buy_tos(#m_yunying_shop_buy_tos{act_id
							      = F1,
							  shop_id = F2,
							  num = F3},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_m_yunying_shop_buy_toc(Msg, TrUserData) ->
    encode_msg_m_yunying_shop_buy_toc(Msg, <<>>,
				      TrUserData).


encode_msg_m_yunying_shop_buy_toc(#m_yunying_shop_buy_toc{act_id
							      = F1,
							  shop = F2, logs = F3},
				  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_mfield_m_yunying_shop_buy_toc_shop(TrF2,
						<<B1/binary, 18>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      if TrF3 == [] -> B2;
	 true ->
	     e_field_m_yunying_shop_buy_toc_logs(TrF3, B2,
						 TrUserData)
      end
    end.

encode_msg_m_yunying_shop_reward_log_tos(Msg,
					 TrUserData) ->
    encode_msg_m_yunying_shop_reward_log_tos(Msg, <<>>,
					     TrUserData).


encode_msg_m_yunying_shop_reward_log_tos(#m_yunying_shop_reward_log_tos{act_id
									    =
									    F1},
					 Bin, TrUserData) ->
    begin
      TrF1 = id(F1, TrUserData),
      e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
    end.

encode_msg_m_yunying_shop_reward_log_toc(Msg,
					 TrUserData) ->
    encode_msg_m_yunying_shop_reward_log_toc(Msg, <<>>,
					     TrUserData).


encode_msg_m_yunying_shop_reward_log_toc(#m_yunying_shop_reward_log_toc{act_id
									    =
									    F1,
									logs =
									    F2},
					 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      if TrF2 == [] -> B1;
	 true ->
	     e_field_m_yunying_shop_reward_log_toc_logs(TrF2, B1,
							TrUserData)
      end
    end.

encode_msg_p_yy_activity(Msg, TrUserData) ->
    encode_msg_p_yy_activity(Msg, <<>>, TrUserData).


encode_msg_p_yy_activity(#p_yy_activity{id = F1,
					act_stime = F2, act_etime = F3,
					show_stime = F4, show_etime = F5},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_p_yy_reward(Msg, TrUserData) ->
    encode_msg_p_yy_reward(Msg, <<>>, TrUserData).


encode_msg_p_yy_reward(#p_yy_reward{id = F1,
				    act_id = F2, level = F3, type = F4,
				    stype = F5, name = F6, desc = F7, reqs = F8,
				    reward = F9},
		       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    B6 = begin
	   TrF6 = id(F6, TrUserData),
	   e_type_string(TrF6, <<B5/binary, 50>>, TrUserData)
	 end,
    B7 = begin
	   TrF7 = id(F7, TrUserData),
	   e_type_string(TrF7, <<B6/binary, 58>>, TrUserData)
	 end,
    B8 = begin
	   TrF8 = id(F8, TrUserData),
	   e_type_string(TrF8, <<B7/binary, 66>>, TrUserData)
	 end,
    begin
      TrF9 = id(F9, TrUserData),
      e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
    end.

encode_msg_p_yy_task(Msg, TrUserData) ->
    encode_msg_p_yy_task(Msg, <<>>, TrUserData).


encode_msg_p_yy_task(#p_yy_task{id = F1, level = F2,
				count = F3, state = F4},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_p_yy_gift(Msg, TrUserData) ->
    encode_msg_p_yy_gift(Msg, <<>>, TrUserData).


encode_msg_p_yy_gift(#p_yy_gift{act_id = F1, stime = F2,
				etime = F3, refund_time = F4, state = F5},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_p_yy_log(Msg, TrUserData) ->
    encode_msg_p_yy_log(Msg, <<>>, TrUserData).


encode_msg_p_yy_log(#p_yy_log{role_id = F1,
			      role_name = F2, item_id = F3, item_num = F4},
		    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    begin
      TrF4 = id(F4, TrUserData),
      e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
    end.

encode_msg_p_yy_lottery_item(Msg, TrUserData) ->
    encode_msg_p_yy_lottery_item(Msg, <<>>, TrUserData).


encode_msg_p_yy_lottery_item(#p_yy_lottery_item{group =
						    F1,
						reward_id = F2},
			     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

encode_msg_p_yy_shop(Msg, TrUserData) ->
    encode_msg_p_yy_shop(Msg, <<>>, TrUserData).


encode_msg_p_yy_shop(#p_yy_shop{id = F1, buy_num = F2,
				progress = F3},
		     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    begin
      TrF3 = id(F3, TrUserData),
      e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
    end.

encode_msg_p_yy_shop_log(Msg, TrUserData) ->
    encode_msg_p_yy_shop_log(Msg, <<>>, TrUserData).


encode_msg_p_yy_shop_log(#p_yy_shop_log{role_id = F1,
					role_name = F2, suid = F3, shop_id = F4,
					reward_id = F5},
			 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_fixed64(TrF1, <<Bin/binary, 9>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_p_yy_shop_reward_log(Msg, TrUserData) ->
    encode_msg_p_yy_shop_reward_log(Msg, <<>>, TrUserData).


encode_msg_p_yy_shop_reward_log(#p_yy_shop_reward_log{id
							  = F1,
						      role_id = F2,
						      role_name = F3, suid = F4,
						      num = F5},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_fixed64(TrF2, <<B1/binary, 17>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

e_mfield_m_yunying_list_toc_activities(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_p_yy_activity(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_list_toc_activities([Elem | Rest],
				      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_yunying_list_toc_activities(id(Elem,
						     TrUserData),
						  Bin2, TrUserData),
    e_field_m_yunying_list_toc_activities(Rest, Bin3,
					  TrUserData);
e_field_m_yunying_list_toc_activities([], Bin,
				      _TrUserData) ->
    Bin.

e_mfield_m_yunying_start_toc_activity(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_p_yy_activity(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_m_yunying_fetch_toc_reward(Msg, Bin,
				    TrUserData) ->
    SubBin = 'encode_msg_map<int32,int32>'(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_fetch_toc_reward([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_m_yunying_fetch_toc_reward('tr_encode_m_yunying_fetch_toc.reward[x]'(Elem,
										      TrUserData),
					    Bin2, TrUserData),
    e_field_m_yunying_fetch_toc_reward(Rest, Bin3,
				       TrUserData);
e_field_m_yunying_fetch_toc_reward([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_m_yunying_update_toc_rewards(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_p_yy_reward(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_update_toc_rewards([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_yunying_update_toc_rewards(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_m_yunying_update_toc_rewards(Rest, Bin3,
					 TrUserData);
e_field_m_yunying_update_toc_rewards([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_m_yunying_info_toc_tasks(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_p_yy_task(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_info_toc_tasks([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_yunying_info_toc_tasks(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_m_yunying_info_toc_tasks(Rest, Bin3,
				     TrUserData);
e_field_m_yunying_info_toc_tasks([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_m_yunying_gift_toc_list(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_p_yy_gift(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_gift_toc_list([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_m_yunying_gift_toc_list(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_m_yunying_gift_toc_list(Rest, Bin3, TrUserData);
e_field_m_yunying_gift_toc_list([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_yunying_gift_fetch_toc_gift(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_p_yy_gift(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_m_yunying_logs_toc_logs(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_p_yy_log(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_logs_toc_logs([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_yunying_logs_toc_logs(id(Elem,
					       TrUserData),
					    Bin2, TrUserData),
    e_field_m_yunying_logs_toc_logs(Rest, Bin3, TrUserData);
e_field_m_yunying_logs_toc_logs([], Bin, _TrUserData) ->
    Bin.

e_mfield_m_yunying_lottery_info_toc_items(Msg, Bin,
					  TrUserData) ->
    SubBin = 'encode_msg_map<int32,p_yy_lottery_item>'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_lottery_info_toc_items([Elem | Rest],
					 Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_yunying_lottery_info_toc_items('tr_encode_m_yunying_lottery_info_toc.items[x]'(Elem,
												  TrUserData),
						  Bin2, TrUserData),
    e_field_m_yunying_lottery_info_toc_items(Rest, Bin3,
					     TrUserData);
e_field_m_yunying_lottery_info_toc_items([], Bin,
					 _TrUserData) ->
    Bin.

e_mfield_m_yunying_lottery_do_toc_items(Msg, Bin,
					TrUserData) ->
    SubBin = 'encode_msg_map<int32,p_yy_lottery_item>'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_lottery_do_toc_items([Elem | Rest],
				       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_yunying_lottery_do_toc_items('tr_encode_m_yunying_lottery_do_toc.items[x]'(Elem,
											      TrUserData),
						Bin2, TrUserData),
    e_field_m_yunying_lottery_do_toc_items(Rest, Bin3,
					   TrUserData);
e_field_m_yunying_lottery_do_toc_items([], Bin,
				       _TrUserData) ->
    Bin.

e_mfield_m_yunying_lottery_refresh_toc_items(Msg, Bin,
					     TrUserData) ->
    SubBin = 'encode_msg_map<int32,p_yy_lottery_item>'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_lottery_refresh_toc_items([Elem
					     | Rest],
					    Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_yunying_lottery_refresh_toc_items('tr_encode_m_yunying_lottery_refresh_toc.items[x]'(Elem,
													TrUserData),
						     Bin2, TrUserData),
    e_field_m_yunying_lottery_refresh_toc_items(Rest, Bin3,
						TrUserData);
e_field_m_yunying_lottery_refresh_toc_items([], Bin,
					    _TrUserData) ->
    Bin.

e_mfield_m_yunying_logs_update_toc_log(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_p_yy_log(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_lottery_draw_toc_reward_ids([Elem
					       | Rest],
					      Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 16>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_yunying_lottery_draw_toc_reward_ids(Rest,
						  Bin3, TrUserData);
e_field_m_yunying_lottery_draw_toc_reward_ids([], Bin,
					      _TrUserData) ->
    Bin.

e_field_m_yunying_lotoinfo_toc_hits([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 32>>,
    Bin3 = e_type_int32(id(Elem, TrUserData), Bin2,
			TrUserData),
    e_field_m_yunying_lotoinfo_toc_hits(Rest, Bin3,
					TrUserData);
e_field_m_yunying_lotoinfo_toc_hits([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_m_yunying_shop_info_toc_list(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_p_yy_shop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_shop_info_toc_list([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_m_yunying_shop_info_toc_list(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_m_yunying_shop_info_toc_list(Rest, Bin3,
					 TrUserData);
e_field_m_yunying_shop_info_toc_list([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_m_yunying_shop_info_toc_logs(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_p_yy_shop_log(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_shop_info_toc_logs([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_m_yunying_shop_info_toc_logs(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_m_yunying_shop_info_toc_logs(Rest, Bin3,
					 TrUserData);
e_field_m_yunying_shop_info_toc_logs([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_m_yunying_shop_buy_toc_shop(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_p_yy_shop(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_m_yunying_shop_buy_toc_logs(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_p_yy_shop_log(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_shop_buy_toc_logs([Elem | Rest], Bin,
				    TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_m_yunying_shop_buy_toc_logs(id(Elem,
						   TrUserData),
						Bin2, TrUserData),
    e_field_m_yunying_shop_buy_toc_logs(Rest, Bin3,
					TrUserData);
e_field_m_yunying_shop_buy_toc_logs([], Bin,
				    _TrUserData) ->
    Bin.

e_mfield_m_yunying_shop_reward_log_toc_logs(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_p_yy_shop_reward_log(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_m_yunying_shop_reward_log_toc_logs([Elem
					    | Rest],
					   Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_m_yunying_shop_reward_log_toc_logs(id(Elem,
						       TrUserData),
						    Bin2, TrUserData),
    e_field_m_yunying_shop_reward_log_toc_logs(Rest, Bin3,
					       TrUserData);
e_field_m_yunying_shop_reward_log_toc_logs([], Bin,
					   _TrUserData) ->
    Bin.

'encode_msg_map<int32,int32>'(#{key := F1, value := F2},
			      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
    end.

'encode_msg_map<int32,p_yy_lottery_item>'(#{key := F1,
					    value := F2},
					  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<int32,p_yy_lottery_item>_value'(TrF2,
						    <<B1/binary, 18>>,
						    TrUserData)
    end.

'e_mfield_map<int32,p_yy_lottery_item>_value'(Msg, Bin,
					      TrUserData) ->
    SubBin = encode_msg_p_yy_lottery_item(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(m_yunying_list_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_list_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_list_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_list_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_start_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_start_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_stop_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_stop_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_fetch_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_fetch_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_fetch_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_fetch_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_update_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_update_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_info_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_info_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_gift_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_gift_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_gift_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_gift_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_gift_fetch_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_gift_fetch_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_gift_fetch_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_gift_fetch_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_logs_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_logs_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_logs_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_logs_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_info_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_info_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_do_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_do_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_do_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_do_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_refresh_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_refresh_tos(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_refresh_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_refresh_toc(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_logs_update_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_logs_update_toc(Bin,
					    TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_draw_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_draw_tos(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lottery_draw_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lottery_draw_toc(Bin,
					     TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lotoinfo_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lotoinfo_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_lotoinfo_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_lotoinfo_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_loto_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_loto_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_loto_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_loto_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_loto_progress_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_loto_progress_toc(Bin,
					      TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_shop_info_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_shop_info_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_shop_info_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_shop_info_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_shop_buy_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_shop_buy_tos(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_shop_buy_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_shop_buy_toc(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_shop_reward_log_tos, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_shop_reward_log_tos(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(m_yunying_shop_reward_log_toc, Bin,
		  TrUserData) ->
    id(decode_msg_m_yunying_shop_reward_log_toc(Bin,
						TrUserData),
       TrUserData);
decode_msg_2_doit(p_yy_activity, Bin, TrUserData) ->
    id(decode_msg_p_yy_activity(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_yy_reward, Bin, TrUserData) ->
    id(decode_msg_p_yy_reward(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_yy_task, Bin, TrUserData) ->
    id(decode_msg_p_yy_task(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_yy_gift, Bin, TrUserData) ->
    id(decode_msg_p_yy_gift(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_yy_log, Bin, TrUserData) ->
    id(decode_msg_p_yy_log(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_yy_lottery_item, Bin, TrUserData) ->
    id(decode_msg_p_yy_lottery_item(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_yy_shop, Bin, TrUserData) ->
    id(decode_msg_p_yy_shop(Bin, TrUserData), TrUserData);
decode_msg_2_doit(p_yy_shop_log, Bin, TrUserData) ->
    id(decode_msg_p_yy_shop_log(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(p_yy_shop_reward_log, Bin,
		  TrUserData) ->
    id(decode_msg_p_yy_shop_reward_log(Bin, TrUserData),
       TrUserData).



decode_msg_m_yunying_list_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_list_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_yunying_list_tos(<<>>, 0, 0, _) ->
    #m_yunying_list_tos{};
dfp_read_field_def_m_yunying_list_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_yunying_list_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_yunying_list_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_list_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_yunying_list_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_yunying_list_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_yunying_list_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_yunying_list_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_yunying_list_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_yunying_list_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_yunying_list_tos(<<>>, 0, 0, _) ->
    #m_yunying_list_tos{}.

skip_varint_m_yunying_list_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_yunying_list_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_yunying_list_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_yunying_list_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_yunying_list_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_list_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_yunying_list_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_list_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_yunying_list_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_list_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_yunying_list_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_yunying_list_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_yunying_list_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_yunying_list_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_yunying_list_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_list_toc(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_list_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_list_toc_activities(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_yunying_list_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_yunying_list_toc{activities =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_list_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_list_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_yunying_list_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_list_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_list_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_yunying_list_toc_activities(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_list_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_list_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_list_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_list_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_yunying_list_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_list_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_yunying_list_toc{activities =
			    lists_reverse(R1, TrUserData)}.

d_field_m_yunying_list_toc_activities(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_list_toc_activities(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_list_toc_activities(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_activity(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_list_toc(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_yunying_list_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_list_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_yunying_list_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_list_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_yunying_list_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_list_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_list_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_list_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_yunying_list_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_list_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_yunying_list_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_list_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_yunying_list_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_list_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_yunying_start_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_start_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_yunying_start_toc(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_start_toc_activity(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_m_yunying_start_toc(<<>>, 0, 0, F@_1,
				       _) ->
    #m_yunying_start_toc{activity = F@_1};
dfp_read_field_def_m_yunying_start_toc(Other, Z1, Z2,
				       F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_start_toc(Other, Z1, Z2,
					  F@_1, TrUserData).

dg_read_field_def_m_yunying_start_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_start_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_start_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_yunying_start_toc_activity(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_start_toc(Rest, 0, 0, F@_1,
						TrUserData);
	    1 ->
		skip_64_m_yunying_start_toc(Rest, 0, 0, F@_1,
					    TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_start_toc(Rest, 0, 0,
							  F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_start_toc(Rest, Key bsr 3, 0, F@_1,
					       TrUserData);
	    5 ->
		skip_32_m_yunying_start_toc(Rest, 0, 0, F@_1,
					    TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_start_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_yunying_start_toc{activity = F@_1}.

d_field_m_yunying_start_toc_activity(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_start_toc_activity(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_start_toc_activity(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_activity(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_start_toc(RestF, 0, 0,
					   if Prev == undefined -> NewFValue;
					      true ->
						  merge_msg_p_yy_activity(Prev,
									  NewFValue,
									  TrUserData)
					   end,
					   TrUserData).

skip_varint_m_yunying_start_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_start_toc(Rest, Z1, Z2, F@_1,
				    TrUserData);
skip_varint_m_yunying_start_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_start_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_length_delimited_m_yunying_start_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_start_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_start_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_start_toc(Rest2, 0, 0,
					   F@_1, TrUserData).

skip_group_m_yunying_start_toc(Bin, FNum, Z2, F@_1,
			       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_start_toc(Rest, 0, Z2,
					   F@_1, TrUserData).

skip_32_m_yunying_start_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_start_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

skip_64_m_yunying_start_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_start_toc(Rest, Z1, Z2,
					   F@_1, TrUserData).

decode_msg_m_yunying_stop_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_stop_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_yunying_stop_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_stop_toc_id(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_m_yunying_stop_toc(<<>>, 0, 0, F@_1,
				      _) ->
    #m_yunying_stop_toc{id = F@_1};
dfp_read_field_def_m_yunying_stop_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_stop_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_yunying_stop_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_stop_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_stop_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_stop_toc_id(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_stop_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_stop_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_stop_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_stop_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_yunying_stop_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_stop_toc(<<>>, 0, 0, F@_1,
				     _) ->
    #m_yunying_stop_toc{id = F@_1}.

d_field_m_yunying_stop_toc_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_stop_toc_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_stop_toc_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_stop_toc(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_yunying_stop_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_stop_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_yunying_stop_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_stop_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_yunying_stop_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_stop_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_stop_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_stop_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_yunying_stop_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_stop_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_yunying_stop_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_stop_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_yunying_stop_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_stop_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_yunying_fetch_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_tos(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_m_yunying_fetch_tos(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_fetch_tos_act_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_fetch_tos(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_fetch_tos_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_yunying_fetch_tos(<<24,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_fetch_tos_level(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_fetch_tos(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, _) ->
    #m_yunying_fetch_tos{act_id = F@_1, id = F@_2,
			 level = F@_3};
dfp_read_field_def_m_yunying_fetch_tos(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_yunying_fetch_tos(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_yunying_fetch_tos(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_fetch_tos(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_m_yunying_fetch_tos(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_fetch_tos_act_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_yunying_fetch_tos_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      24 ->
	  d_field_m_yunying_fetch_tos_level(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_fetch_tos(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_m_yunying_fetch_tos(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_fetch_tos(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_m_yunying_fetch_tos(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_yunying_fetch_tos(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_fetch_tos(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #m_yunying_fetch_tos{act_id = F@_1, id = F@_2,
			 level = F@_3}.

d_field_m_yunying_fetch_tos_act_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_fetch_tos_act_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_m_yunying_fetch_tos_act_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_fetch_tos(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, TrUserData).

d_field_m_yunying_fetch_tos_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_fetch_tos_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_yunying_fetch_tos_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_fetch_tos(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_m_yunying_fetch_tos_level(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_fetch_tos_level(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_m_yunying_fetch_tos_level(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_fetch_tos(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, TrUserData).

skip_varint_m_yunying_fetch_tos(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_yunying_fetch_tos(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_m_yunying_fetch_tos(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_yunying_fetch_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_fetch_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_m_yunying_fetch_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_fetch_tos(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_m_yunying_fetch_tos(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_fetch_tos(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_m_yunying_fetch_tos(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_m_yunying_fetch_tos(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_tos(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_yunying_fetch_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_toc(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   'tr_decode_init_default_m_yunying_fetch_toc.reward'([],
											       TrUserData),
					   TrUserData).

dfp_read_field_def_m_yunying_fetch_toc(<<8,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_fetch_toc_act_id(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_fetch_toc(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_fetch_toc_id(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_yunying_fetch_toc(<<26,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_fetch_toc_reward(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_fetch_toc(<<>>, 0, 0, F@_1,
				       F@_2, R1, TrUserData) ->
    #m_yunying_fetch_toc{act_id = F@_1, id = F@_2,
			 reward =
			     'tr_decode_repeated_finalize_m_yunying_fetch_toc.reward'(R1,
										      TrUserData)};
dfp_read_field_def_m_yunying_fetch_toc(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_yunying_fetch_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_yunying_fetch_toc(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_fetch_toc(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
dg_read_field_def_m_yunying_fetch_toc(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_fetch_toc_act_id(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_yunying_fetch_toc_id(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      26 ->
	  d_field_m_yunying_fetch_toc_reward(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_fetch_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    1 ->
		skip_64_m_yunying_fetch_toc(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_fetch_toc(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    3 ->
		skip_group_m_yunying_fetch_toc(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_yunying_fetch_toc(Rest, 0, 0, F@_1, F@_2,
					    F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_fetch_toc(<<>>, 0, 0, F@_1,
				      F@_2, R1, TrUserData) ->
    #m_yunying_fetch_toc{act_id = F@_1, id = F@_2,
			 reward =
			     'tr_decode_repeated_finalize_m_yunying_fetch_toc.reward'(R1,
										      TrUserData)}.

d_field_m_yunying_fetch_toc_act_id(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_fetch_toc_act_id(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_m_yunying_fetch_toc_act_id(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_fetch_toc(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, TrUserData).

d_field_m_yunying_fetch_toc_id(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_fetch_toc_id(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_yunying_fetch_toc_id(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_fetch_toc(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, TrUserData).

d_field_m_yunying_fetch_toc_reward(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_fetch_toc_reward(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_m_yunying_fetch_toc_reward(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,int32>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_fetch_toc(RestF, 0, 0,
					   F@_1, F@_2,
					   'tr_decode_repeated_add_elem_m_yunying_fetch_toc.reward'(NewFValue,
												    Prev,
												    TrUserData),
					   TrUserData).

skip_varint_m_yunying_fetch_toc(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_yunying_fetch_toc(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData);
skip_varint_m_yunying_fetch_toc(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_yunying_fetch_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_fetch_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
skip_length_delimited_m_yunying_fetch_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_fetch_toc(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, TrUserData).

skip_group_m_yunying_fetch_toc(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_fetch_toc(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_32_m_yunying_fetch_toc(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

skip_64_m_yunying_fetch_toc(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_fetch_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_yunying_update_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_update_toc(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_update_toc(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_update_toc_type(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_yunying_update_toc(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_update_toc_rewards(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_m_yunying_update_toc(<<>>, 0, 0,
					F@_1, R1, TrUserData) ->
    #m_yunying_update_toc{type = F@_1,
			  rewards = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_update_toc(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_update_toc(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_update_toc(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_update_toc(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_m_yunying_update_toc(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_update_toc_type(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_m_yunying_update_toc_rewards(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_update_toc(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_m_yunying_update_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_update_toc(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_m_yunying_update_toc(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_update_toc(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_update_toc(<<>>, 0, 0, F@_1,
				       R1, TrUserData) ->
    #m_yunying_update_toc{type = F@_1,
			  rewards = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_update_toc_type(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_update_toc_type(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_update_toc_type(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_update_toc(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_m_yunying_update_toc_rewards(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_update_toc_rewards(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_update_toc_rewards(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_reward(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_update_toc(RestF, 0, 0,
					    F@_1,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_m_yunying_update_toc(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_update_toc(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_m_yunying_update_toc(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_update_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_update_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_update_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_m_yunying_update_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_update_toc(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_m_yunying_update_toc(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_update_toc(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_m_yunying_update_toc(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_update_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_m_yunying_update_toc(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_update_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_m_yunying_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_info_tos(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_yunying_info_tos(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_info_tos_id(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_m_yunying_info_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_yunying_info_tos{id = F@_1};
dfp_read_field_def_m_yunying_info_tos(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_info_tos(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_yunying_info_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_info_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_info_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_info_tos_id(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_info_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_info_tos(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_info_tos(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_info_tos(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_yunying_info_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_info_tos(<<>>, 0, 0, F@_1,
				     _) ->
    #m_yunying_info_tos{id = F@_1}.

d_field_m_yunying_info_tos_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_info_tos_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_info_tos_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_info_tos(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_yunying_info_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_info_tos(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_yunying_info_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_info_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_yunying_info_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_info_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_info_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_info_tos(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_yunying_info_tos(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_info_tos(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_yunying_info_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_info_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_yunying_info_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_info_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_yunying_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_info_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_info_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_info_toc_id(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_m_yunying_info_toc(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_info_toc_tasks(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_m_yunying_info_toc(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    #m_yunying_info_toc{id = F@_1,
			tasks = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_info_toc(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_info_toc(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_info_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_info_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_yunying_info_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_info_toc_id(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_m_yunying_info_toc_tasks(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_info_toc(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_info_toc(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_info_toc(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_m_yunying_info_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_info_toc(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_info_toc(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #m_yunying_info_toc{id = F@_1,
			tasks = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_info_toc_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_info_toc_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_info_toc_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_info_toc(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_m_yunying_info_toc_tasks(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_info_toc_tasks(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_info_toc_tasks(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_task(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_info_toc(RestF, 0, 0, F@_1,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_yunying_info_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_info_toc(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_m_yunying_info_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_info_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_info_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_info_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_m_yunying_info_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_info_toc(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_m_yunying_info_toc(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_info_toc(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_m_yunying_info_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_info_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_m_yunying_info_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_info_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_m_yunying_gift_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_tos(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_m_yunying_gift_tos(<<>>, 0, 0, _) ->
    #m_yunying_gift_tos{};
dfp_read_field_def_m_yunying_gift_tos(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_m_yunying_gift_tos(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_m_yunying_gift_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_gift_tos(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_m_yunying_gift_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_m_yunying_gift_tos(Rest, 0, 0, TrUserData);
      1 -> skip_64_m_yunying_gift_tos(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_m_yunying_gift_tos(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_m_yunying_gift_tos(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_m_yunying_gift_tos(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_m_yunying_gift_tos(<<>>, 0, 0, _) ->
    #m_yunying_gift_tos{}.

skip_varint_m_yunying_gift_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_m_yunying_gift_tos(Rest, Z1, Z2,
				   TrUserData);
skip_varint_m_yunying_gift_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_tos(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_m_yunying_gift_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_gift_tos(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_m_yunying_gift_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_gift_tos(Rest2, 0, 0,
					  TrUserData).

skip_group_m_yunying_gift_tos(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_gift_tos(Rest, 0, Z2,
					  TrUserData).

skip_32_m_yunying_gift_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_tos(Rest, Z1, Z2,
					  TrUserData).

skip_64_m_yunying_gift_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_tos(Rest, Z1, Z2,
					  TrUserData).

decode_msg_m_yunying_gift_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_toc(Bin, 0, 0,
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_gift_toc(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_gift_toc_list(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_m_yunying_gift_toc(<<>>, 0, 0, R1,
				      TrUserData) ->
    #m_yunying_gift_toc{list =
			    lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_gift_toc(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_gift_toc(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_yunying_gift_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_gift_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_gift_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_yunying_gift_toc_list(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_gift_toc(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_gift_toc(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_gift_toc(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_gift_toc(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_yunying_gift_toc(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_gift_toc(<<>>, 0, 0, R1,
				     TrUserData) ->
    #m_yunying_gift_toc{list =
			    lists_reverse(R1, TrUserData)}.

d_field_m_yunying_gift_toc_list(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_gift_toc_list(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_gift_toc_list(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_gift(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_gift_toc(RestF, 0, 0,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_yunying_gift_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_gift_toc(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_yunying_gift_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_yunying_gift_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_gift_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_gift_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_gift_toc(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_yunying_gift_toc(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_gift_toc(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_yunying_gift_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_yunying_gift_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_toc(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_yunying_gift_fetch_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_tos(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_yunying_gift_fetch_tos(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_gift_fetch_tos_act_id(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_gift_fetch_tos(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_gift_fetch_tos_id(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_m_yunying_gift_fetch_tos(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_yunying_gift_fetch_tos{act_id = F@_1, id = F@_2};
dfp_read_field_def_m_yunying_gift_fetch_tos(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_gift_fetch_tos(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_gift_fetch_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_gift_fetch_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_m_yunying_gift_fetch_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_gift_fetch_tos_act_id(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      16 ->
	  d_field_m_yunying_gift_fetch_tos_id(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_gift_fetch_tos(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_m_yunying_gift_fetch_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_gift_fetch_tos(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_m_yunying_gift_fetch_tos(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_gift_fetch_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_gift_fetch_tos(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #m_yunying_gift_fetch_tos{act_id = F@_1, id = F@_2}.

d_field_m_yunying_gift_fetch_tos_act_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_gift_fetch_tos_act_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_m_yunying_gift_fetch_tos_act_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_gift_fetch_tos(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_m_yunying_gift_fetch_tos_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_gift_fetch_tos_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_gift_fetch_tos_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_gift_fetch_tos(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_m_yunying_gift_fetch_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_gift_fetch_tos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_m_yunying_gift_fetch_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_gift_fetch_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_gift_fetch_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_m_yunying_gift_fetch_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_gift_fetch_tos(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_m_yunying_gift_fetch_tos(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_gift_fetch_tos(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_m_yunying_gift_fetch_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_m_yunying_gift_fetch_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_m_yunying_gift_fetch_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_toc(Bin, 0, 0,
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_yunying_gift_fetch_toc(<<10,
					      Rest/binary>>,
					    Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_gift_fetch_toc_gift(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_yunying_gift_fetch_toc(<<>>, 0, 0,
					    F@_1, _) ->
    #m_yunying_gift_fetch_toc{gift = F@_1};
dfp_read_field_def_m_yunying_gift_fetch_toc(Other, Z1,
					    Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_gift_fetch_toc(Other, Z1,
					       Z2, F@_1, TrUserData).

dg_read_field_def_m_yunying_gift_fetch_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_gift_fetch_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_gift_fetch_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_m_yunying_gift_fetch_toc_gift(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_gift_fetch_toc(Rest, 0, 0, F@_1,
						     TrUserData);
	    1 ->
		skip_64_m_yunying_gift_fetch_toc(Rest, 0, 0, F@_1,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_gift_fetch_toc(Rest, 0,
							       0, F@_1,
							       TrUserData);
	    3 ->
		skip_group_m_yunying_gift_fetch_toc(Rest, Key bsr 3, 0,
						    F@_1, TrUserData);
	    5 ->
		skip_32_m_yunying_gift_fetch_toc(Rest, 0, 0, F@_1,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_gift_fetch_toc(<<>>, 0, 0,
					   F@_1, _) ->
    #m_yunying_gift_fetch_toc{gift = F@_1}.

d_field_m_yunying_gift_fetch_toc_gift(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_gift_fetch_toc_gift(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_gift_fetch_toc_gift(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_gift(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_gift_fetch_toc(RestF, 0, 0,
						if Prev == undefined ->
						       NewFValue;
						   true ->
						       merge_msg_p_yy_gift(Prev,
									   NewFValue,
									   TrUserData)
						end,
						TrUserData).

skip_varint_m_yunying_gift_fetch_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_gift_fetch_toc(Rest, Z1, Z2, F@_1,
					 TrUserData);
skip_varint_m_yunying_gift_fetch_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_toc(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_length_delimited_m_yunying_gift_fetch_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_gift_fetch_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
skip_length_delimited_m_yunying_gift_fetch_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_gift_fetch_toc(Rest2, 0, 0,
						F@_1, TrUserData).

skip_group_m_yunying_gift_fetch_toc(Bin, FNum, Z2, F@_1,
				    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_gift_fetch_toc(Rest, 0, Z2,
						F@_1, TrUserData).

skip_32_m_yunying_gift_fetch_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_toc(Rest, Z1,
						Z2, F@_1, TrUserData).

skip_64_m_yunying_gift_fetch_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_gift_fetch_toc(Rest, Z1,
						Z2, F@_1, TrUserData).

decode_msg_m_yunying_logs_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_tos(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_yunying_logs_tos(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_logs_tos_act_id(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_yunying_logs_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_yunying_logs_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_logs_tos(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_logs_tos(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_yunying_logs_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_logs_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_logs_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_logs_tos_act_id(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_logs_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_logs_tos(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_logs_tos(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_logs_tos(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_yunying_logs_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_logs_tos(<<>>, 0, 0, F@_1,
				     _) ->
    #m_yunying_logs_tos{act_id = F@_1}.

d_field_m_yunying_logs_tos_act_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_logs_tos_act_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_logs_tos_act_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_logs_tos(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_yunying_logs_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_logs_tos(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_yunying_logs_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_yunying_logs_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_logs_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_logs_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_logs_tos(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_yunying_logs_tos(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_logs_tos(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_yunying_logs_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_yunying_logs_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_yunying_logs_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_logs_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_logs_toc_act_id(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_m_yunying_logs_toc(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_logs_toc_logs(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_m_yunying_logs_toc(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    #m_yunying_logs_toc{act_id = F@_1,
			logs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_logs_toc(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_logs_toc(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_logs_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_logs_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_m_yunying_logs_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_logs_toc_act_id(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      18 ->
	  d_field_m_yunying_logs_toc_logs(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_logs_toc(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_logs_toc(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_logs_toc(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_m_yunying_logs_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_logs_toc(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_logs_toc(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    #m_yunying_logs_toc{act_id = F@_1,
			logs = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_logs_toc_act_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_logs_toc_act_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_logs_toc_act_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_logs_toc(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_m_yunying_logs_toc_logs(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_logs_toc_logs(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_logs_toc_logs(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_log(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_logs_toc(RestF, 0, 0, F@_1,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_m_yunying_logs_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_logs_toc(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_m_yunying_logs_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_logs_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_logs_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_m_yunying_logs_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_logs_toc(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_m_yunying_logs_toc(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_logs_toc(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_m_yunying_logs_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_m_yunying_logs_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_m_yunying_lottery_info_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_tos(Bin, 0, 0,
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_yunying_lottery_info_tos(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_lottery_info_tos_act_id(Rest, Z1, Z2,
					      F@_1, TrUserData);
dfp_read_field_def_m_yunying_lottery_info_tos(<<>>, 0,
					      0, F@_1, _) ->
    #m_yunying_lottery_info_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_lottery_info_tos(Other, Z1,
					      Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_lottery_info_tos(Other, Z1,
						 Z2, F@_1, TrUserData).

dg_read_field_def_m_yunying_lottery_info_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_info_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
dg_read_field_def_m_yunying_lottery_info_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_info_tos_act_id(Rest, 0, 0,
						    F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_info_tos(Rest, 0, 0, F@_1,
						       TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_info_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_info_tos(Rest,
								 0, 0, F@_1,
								 TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_info_tos(Rest, Key bsr 3,
						      0, F@_1, TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_info_tos(Rest, 0, 0, F@_1,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_info_tos(<<>>, 0, 0,
					     F@_1, _) ->
    #m_yunying_lottery_info_tos{act_id = F@_1}.

d_field_m_yunying_lottery_info_tos_act_id(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_info_tos_act_id(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_lottery_info_tos_act_id(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_info_tos(RestF, 0,
						  0, NewFValue, TrUserData).

skip_varint_m_yunying_lottery_info_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_lottery_info_tos(Rest, Z1, Z2,
					   F@_1, TrUserData);
skip_varint_m_yunying_lottery_info_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_length_delimited_m_yunying_lottery_info_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_info_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
skip_length_delimited_m_yunying_lottery_info_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_info_tos(Rest2, 0,
						  0, F@_1, TrUserData).

skip_group_m_yunying_lottery_info_tos(Bin, FNum, Z2,
				      F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_info_tos(Rest, 0,
						  Z2, F@_1, TrUserData).

skip_32_m_yunying_lottery_info_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

skip_64_m_yunying_lottery_info_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_tos(Rest, Z1,
						  Z2, F@_1, TrUserData).

decode_msg_m_yunying_lottery_info_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_toc(Bin, 0, 0,
						  id(undefined, TrUserData),
						  'tr_decode_init_default_m_yunying_lottery_info_toc.items'([],
													    TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_yunying_lottery_info_toc(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    d_field_m_yunying_lottery_info_toc_act_id(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_m_yunying_lottery_info_toc(<<18,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    d_field_m_yunying_lottery_info_toc_items(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_m_yunying_lottery_info_toc(<<24,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    d_field_m_yunying_lottery_info_toc_free_refresh(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    F@_4, F@_5, TrUserData);
dfp_read_field_def_m_yunying_lottery_info_toc(<<32,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    d_field_m_yunying_lottery_info_toc_free_crack(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
dfp_read_field_def_m_yunying_lottery_info_toc(<<40,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    d_field_m_yunying_lottery_info_toc_crack(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_m_yunying_lottery_info_toc(<<>>, 0,
					      0, F@_1, R1, F@_3, F@_4, F@_5,
					      TrUserData) ->
    #m_yunying_lottery_info_toc{act_id = F@_1,
				items =
				    'tr_decode_repeated_finalize_m_yunying_lottery_info_toc.items'(R1,
												   TrUserData),
				free_refresh = F@_3, free_crack = F@_4,
				crack = F@_5};
dfp_read_field_def_m_yunying_lottery_info_toc(Other, Z1,
					      Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData) ->
    dg_read_field_def_m_yunying_lottery_info_toc(Other, Z1,
						 Z2, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData).

dg_read_field_def_m_yunying_lottery_info_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_info_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
dg_read_field_def_m_yunying_lottery_info_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_info_toc_act_id(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      18 ->
	  d_field_m_yunying_lottery_info_toc_items(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      24 ->
	  d_field_m_yunying_lottery_info_toc_free_refresh(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
      32 ->
	  d_field_m_yunying_lottery_info_toc_free_crack(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      40 ->
	  d_field_m_yunying_lottery_info_toc_crack(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_info_toc(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_info_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_info_toc(Rest,
								 0, 0, F@_1,
								 F@_2, F@_3,
								 F@_4, F@_5,
								 TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_info_toc(Rest, Key bsr 3,
						      0, F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_info_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_info_toc(<<>>, 0, 0,
					     F@_1, R1, F@_3, F@_4, F@_5,
					     TrUserData) ->
    #m_yunying_lottery_info_toc{act_id = F@_1,
				items =
				    'tr_decode_repeated_finalize_m_yunying_lottery_info_toc.items'(R1,
												   TrUserData),
				free_refresh = F@_3, free_crack = F@_4,
				crack = F@_5}.

d_field_m_yunying_lottery_info_toc_act_id(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_info_toc_act_id(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_info_toc_act_id(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_info_toc(RestF, 0,
						  0, NewFValue, F@_2, F@_3,
						  F@_4, F@_5, TrUserData).

d_field_m_yunying_lottery_info_toc_items(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_info_toc_items(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_info_toc_items(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,p_yy_lottery_item>'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_lottery_info_toc(RestF, 0,
						  0, F@_1,
						  'tr_decode_repeated_add_elem_m_yunying_lottery_info_toc.items'(NewFValue,
														 Prev,
														 TrUserData),
						  F@_3, F@_4, F@_5, TrUserData).

d_field_m_yunying_lottery_info_toc_free_refresh(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_info_toc_free_refresh(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
d_field_m_yunying_lottery_info_toc_free_refresh(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, _, F@_4,
						F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_info_toc(RestF, 0,
						  0, F@_1, F@_2, NewFValue,
						  F@_4, F@_5, TrUserData).

d_field_m_yunying_lottery_info_toc_free_crack(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_info_toc_free_crack(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
d_field_m_yunying_lottery_info_toc_free_crack(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_info_toc(RestF, 0,
						  0, F@_1, F@_2, F@_3,
						  NewFValue, F@_5, TrUserData).

d_field_m_yunying_lottery_info_toc_crack(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_info_toc_crack(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_info_toc_crack(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_info_toc(RestF, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  NewFValue, TrUserData).

skip_varint_m_yunying_lottery_info_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    skip_varint_m_yunying_lottery_info_toc(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
skip_varint_m_yunying_lottery_info_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_toc(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData).

skip_length_delimited_m_yunying_lottery_info_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_info_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
skip_length_delimited_m_yunying_lottery_info_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3, F@_4,
						 F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_info_toc(Rest2, 0,
						  0, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData).

skip_group_m_yunying_lottery_info_toc(Bin, FNum, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_info_toc(Rest, 0,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData).

skip_32_m_yunying_lottery_info_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_toc(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData).

skip_64_m_yunying_lottery_info_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_info_toc(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData).

decode_msg_m_yunying_lottery_do_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_tos(Bin, 0, 0,
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_yunying_lottery_do_tos(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_lottery_do_tos_act_id(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_do_tos(<<16,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_lottery_do_tos_pos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_do_tos(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_yunying_lottery_do_tos{act_id = F@_1, pos = F@_2};
dfp_read_field_def_m_yunying_lottery_do_tos(Other, Z1,
					    Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_lottery_do_tos(Other, Z1,
					       Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_lottery_do_tos(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_do_tos(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
dg_read_field_def_m_yunying_lottery_do_tos(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_do_tos_act_id(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      16 ->
	  d_field_m_yunying_lottery_do_tos_pos(Rest, 0, 0, F@_1,
					       F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_do_tos(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_do_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_do_tos(Rest, 0,
							       0, F@_1, F@_2,
							       TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_do_tos(Rest, Key bsr 3, 0,
						    F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_do_tos(Rest, 0, 0, F@_1, F@_2,
						 TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_do_tos(<<>>, 0, 0,
					   F@_1, F@_2, _) ->
    #m_yunying_lottery_do_tos{act_id = F@_1, pos = F@_2}.

d_field_m_yunying_lottery_do_tos_act_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_tos_act_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_m_yunying_lottery_do_tos_act_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_do_tos(RestF, 0, 0,
						NewFValue, F@_2, TrUserData).

d_field_m_yunying_lottery_do_tos_pos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_tos_pos(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_m_yunying_lottery_do_tos_pos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_do_tos(RestF, 0, 0,
						F@_1, NewFValue, TrUserData).

skip_varint_m_yunying_lottery_do_tos(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_lottery_do_tos(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData);
skip_varint_m_yunying_lottery_do_tos(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_lottery_do_tos(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_do_tos(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
skip_length_delimited_m_yunying_lottery_do_tos(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2,
					       TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_do_tos(Rest2, 0, 0,
						F@_1, F@_2, TrUserData).

skip_group_m_yunying_lottery_do_tos(Bin, FNum, Z2, F@_1,
				    F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_do_tos(Rest, 0, Z2,
						F@_1, F@_2, TrUserData).

skip_32_m_yunying_lottery_do_tos(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

skip_64_m_yunying_lottery_do_tos(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_tos(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData).

decode_msg_m_yunying_lottery_do_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_toc(Bin, 0, 0,
						id(undefined, TrUserData),
						'tr_decode_init_default_m_yunying_lottery_do_toc.items'([],
													TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						id(undefined, TrUserData),
						TrUserData).

dfp_read_field_def_m_yunying_lottery_do_toc(<<8,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_m_yunying_lottery_do_toc_act_id(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData);
dfp_read_field_def_m_yunying_lottery_do_toc(<<18,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_m_yunying_lottery_do_toc_items(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_m_yunying_lottery_do_toc(<<24,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_m_yunying_lottery_do_toc_free_crack(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_m_yunying_lottery_do_toc(<<32,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_m_yunying_lottery_do_toc_free_refresh(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3, F@_4,
						  F@_5, TrUserData);
dfp_read_field_def_m_yunying_lottery_do_toc(<<40,
					      Rest/binary>>,
					    Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    d_field_m_yunying_lottery_do_toc_crack(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_m_yunying_lottery_do_toc(<<>>, 0, 0,
					    F@_1, R1, F@_3, F@_4, F@_5,
					    TrUserData) ->
    #m_yunying_lottery_do_toc{act_id = F@_1,
			      items =
				  'tr_decode_repeated_finalize_m_yunying_lottery_do_toc.items'(R1,
											       TrUserData),
			      free_crack = F@_3, free_refresh = F@_4,
			      crack = F@_5};
dfp_read_field_def_m_yunying_lottery_do_toc(Other, Z1,
					    Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData) ->
    dg_read_field_def_m_yunying_lottery_do_toc(Other, Z1,
					       Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

dg_read_field_def_m_yunying_lottery_do_toc(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_do_toc(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
dg_read_field_def_m_yunying_lottery_do_toc(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_do_toc_act_id(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
      18 ->
	  d_field_m_yunying_lottery_do_toc_items(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      24 ->
	  d_field_m_yunying_lottery_do_toc_free_crack(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      32 ->
	  d_field_m_yunying_lottery_do_toc_free_refresh(Rest, 0,
							0, F@_1, F@_2, F@_3,
							F@_4, F@_5, TrUserData);
      40 ->
	  d_field_m_yunying_lottery_do_toc_crack(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_do_toc(Rest, 0, 0, F@_1,
						     F@_2, F@_3, F@_4, F@_5,
						     TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_do_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_do_toc(Rest, 0,
							       0, F@_1, F@_2,
							       F@_3, F@_4, F@_5,
							       TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_do_toc(Rest, Key bsr 3, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_do_toc(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_do_toc(<<>>, 0, 0,
					   F@_1, R1, F@_3, F@_4, F@_5,
					   TrUserData) ->
    #m_yunying_lottery_do_toc{act_id = F@_1,
			      items =
				  'tr_decode_repeated_finalize_m_yunying_lottery_do_toc.items'(R1,
											       TrUserData),
			      free_crack = F@_3, free_refresh = F@_4,
			      crack = F@_5}.

d_field_m_yunying_lottery_do_toc_act_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_toc_act_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_do_toc_act_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_do_toc(RestF, 0, 0,
						NewFValue, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

d_field_m_yunying_lottery_do_toc_items(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_toc_items(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_do_toc_items(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,p_yy_lottery_item>'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_lottery_do_toc(RestF, 0, 0,
						F@_1,
						'tr_decode_repeated_add_elem_m_yunying_lottery_do_toc.items'(NewFValue,
													     Prev,
													     TrUserData),
						F@_3, F@_4, F@_5, TrUserData).

d_field_m_yunying_lottery_do_toc_free_crack(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_toc_free_crack(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_do_toc_free_crack(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_do_toc(RestF, 0, 0,
						F@_1, F@_2, NewFValue, F@_4,
						F@_5, TrUserData).

d_field_m_yunying_lottery_do_toc_free_refresh(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_toc_free_refresh(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
d_field_m_yunying_lottery_do_toc_free_refresh(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_do_toc(RestF, 0, 0,
						F@_1, F@_2, F@_3, NewFValue,
						F@_5, TrUserData).

d_field_m_yunying_lottery_do_toc_crack(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_do_toc_crack(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_m_yunying_lottery_do_toc_crack(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_do_toc(RestF, 0, 0,
						F@_1, F@_2, F@_3, F@_4,
						NewFValue, TrUserData).

skip_varint_m_yunying_lottery_do_toc(<<1:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    skip_varint_m_yunying_lottery_do_toc(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_m_yunying_lottery_do_toc(<<0:1, _:7,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_toc(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

skip_length_delimited_m_yunying_lottery_do_toc(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_do_toc(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
skip_length_delimited_m_yunying_lottery_do_toc(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3, F@_4,
					       F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_do_toc(Rest2, 0, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

skip_group_m_yunying_lottery_do_toc(Bin, FNum, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_do_toc(Rest, 0, Z2,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData).

skip_32_m_yunying_lottery_do_toc(<<_:32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_toc(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

skip_64_m_yunying_lottery_do_toc(<<_:64, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_do_toc(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData).

decode_msg_m_yunying_lottery_refresh_tos(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_tos(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_m_yunying_lottery_refresh_tos(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_lottery_refresh_tos_act_id(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_m_yunying_lottery_refresh_tos(<<>>,
						 0, 0, F@_1, _) ->
    #m_yunying_lottery_refresh_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_lottery_refresh_tos(Other,
						 Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_lottery_refresh_tos(Other,
						    Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_yunying_lottery_refresh_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_refresh_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
dg_read_field_def_m_yunying_lottery_refresh_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_refresh_tos_act_id(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_refresh_tos(Rest, 0, 0,
							  F@_1, TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_refresh_tos(Rest, 0, 0, F@_1,
						      TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_refresh_tos(Rest,
								    0, 0, F@_1,
								    TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_refresh_tos(Rest,
							 Key bsr 3, 0, F@_1,
							 TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_refresh_tos(Rest, 0, 0, F@_1,
						      TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_refresh_tos(<<>>, 0,
						0, F@_1, _) ->
    #m_yunying_lottery_refresh_tos{act_id = F@_1}.

d_field_m_yunying_lottery_refresh_tos_act_id(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_refresh_tos_act_id(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_field_m_yunying_lottery_refresh_tos_act_id(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_refresh_tos(RestF,
						     0, 0, NewFValue,
						     TrUserData).

skip_varint_m_yunying_lottery_refresh_tos(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_lottery_refresh_tos(Rest, Z1, Z2,
					      F@_1, TrUserData);
skip_varint_m_yunying_lottery_refresh_tos(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_tos(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_yunying_lottery_refresh_tos(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_refresh_tos(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
skip_length_delimited_m_yunying_lottery_refresh_tos(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_refresh_tos(Rest2,
						     0, 0, F@_1, TrUserData).

skip_group_m_yunying_lottery_refresh_tos(Bin, FNum, Z2,
					 F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_refresh_tos(Rest,
						     0, Z2, F@_1, TrUserData).

skip_32_m_yunying_lottery_refresh_tos(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_tos(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_64_m_yunying_lottery_refresh_tos(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_tos(Rest,
						     Z1, Z2, F@_1, TrUserData).

decode_msg_m_yunying_lottery_refresh_toc(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_toc(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     'tr_decode_init_default_m_yunying_lottery_refresh_toc.items'([],
														  TrUserData),
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_m_yunying_lottery_refresh_toc(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    d_field_m_yunying_lottery_refresh_toc_act_id(Rest, Z1,
						 Z2, F@_1, F@_2, F@_3,
						 TrUserData);
dfp_read_field_def_m_yunying_lottery_refresh_toc(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    d_field_m_yunying_lottery_refresh_toc_items(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
dfp_read_field_def_m_yunying_lottery_refresh_toc(<<24,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    d_field_m_yunying_lottery_refresh_toc_free_refresh(Rest,
						       Z1, Z2, F@_1, F@_2, F@_3,
						       TrUserData);
dfp_read_field_def_m_yunying_lottery_refresh_toc(<<>>,
						 0, 0, F@_1, R1, F@_3,
						 TrUserData) ->
    #m_yunying_lottery_refresh_toc{act_id = F@_1,
				   items =
				       'tr_decode_repeated_finalize_m_yunying_lottery_refresh_toc.items'(R1,
													 TrUserData),
				   free_refresh = F@_3};
dfp_read_field_def_m_yunying_lottery_refresh_toc(Other,
						 Z1, Z2, F@_1, F@_2, F@_3,
						 TrUserData) ->
    dg_read_field_def_m_yunying_lottery_refresh_toc(Other,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData).

dg_read_field_def_m_yunying_lottery_refresh_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_refresh_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, TrUserData);
dg_read_field_def_m_yunying_lottery_refresh_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_refresh_toc_act_id(Rest, 0, 0,
						       F@_1, F@_2, F@_3,
						       TrUserData);
      18 ->
	  d_field_m_yunying_lottery_refresh_toc_items(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      24 ->
	  d_field_m_yunying_lottery_refresh_toc_free_refresh(Rest,
							     0, 0, F@_1, F@_2,
							     F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_refresh_toc(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_refresh_toc(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_refresh_toc(Rest,
								    0, 0, F@_1,
								    F@_2, F@_3,
								    TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_refresh_toc(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, F@_3,
							 TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_refresh_toc(Rest, 0, 0, F@_1,
						      F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_refresh_toc(<<>>, 0,
						0, F@_1, R1, F@_3,
						TrUserData) ->
    #m_yunying_lottery_refresh_toc{act_id = F@_1,
				   items =
				       'tr_decode_repeated_finalize_m_yunying_lottery_refresh_toc.items'(R1,
													 TrUserData),
				   free_refresh = F@_3}.

d_field_m_yunying_lottery_refresh_toc_act_id(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_refresh_toc_act_id(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
d_field_m_yunying_lottery_refresh_toc_act_id(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, F@_3,
					     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_refresh_toc(RestF,
						     0, 0, NewFValue, F@_2,
						     F@_3, TrUserData).

d_field_m_yunying_lottery_refresh_toc_items(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_refresh_toc_items(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
d_field_m_yunying_lottery_refresh_toc_items(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, Prev, F@_3,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<int32,p_yy_lottery_item>'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_lottery_refresh_toc(RestF,
						     0, 0, F@_1,
						     'tr_decode_repeated_add_elem_m_yunying_lottery_refresh_toc.items'(NewFValue,
														       Prev,
														       TrUserData),
						     F@_3, TrUserData).

d_field_m_yunying_lottery_refresh_toc_free_refresh(<<1:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, F@_3,
						   TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_refresh_toc_free_refresh(Rest,
						       N + 7, X bsl N + Acc,
						       F@_1, F@_2, F@_3,
						       TrUserData);
d_field_m_yunying_lottery_refresh_toc_free_refresh(<<0:1,
						     X:7, Rest/binary>>,
						   N, Acc, F@_1, F@_2, _,
						   TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_refresh_toc(RestF,
						     0, 0, F@_1, F@_2,
						     NewFValue, TrUserData).

skip_varint_m_yunying_lottery_refresh_toc(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    skip_varint_m_yunying_lottery_refresh_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
skip_varint_m_yunying_lottery_refresh_toc(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_toc(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

skip_length_delimited_m_yunying_lottery_refresh_toc(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_refresh_toc(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, F@_3,
							TrUserData);
skip_length_delimited_m_yunying_lottery_refresh_toc(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2, F@_3,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_refresh_toc(Rest2,
						     0, 0, F@_1, F@_2, F@_3,
						     TrUserData).

skip_group_m_yunying_lottery_refresh_toc(Bin, FNum, Z2,
					 F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_refresh_toc(Rest,
						     0, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

skip_32_m_yunying_lottery_refresh_toc(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_toc(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

skip_64_m_yunying_lottery_refresh_toc(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_refresh_toc(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

decode_msg_m_yunying_logs_update_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_update_toc(Bin, 0, 0,
						 id(undefined, TrUserData),
						 id(undefined, TrUserData),
						 TrUserData).

dfp_read_field_def_m_yunying_logs_update_toc(<<8,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_logs_update_toc_act_id(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_logs_update_toc(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_logs_update_toc_log(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_logs_update_toc(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #m_yunying_logs_update_toc{act_id = F@_1, log = F@_2};
dfp_read_field_def_m_yunying_logs_update_toc(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_logs_update_toc(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_logs_update_toc(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_logs_update_toc(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
dg_read_field_def_m_yunying_logs_update_toc(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_logs_update_toc_act_id(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      18 ->
	  d_field_m_yunying_logs_update_toc_log(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_logs_update_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		skip_64_m_yunying_logs_update_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_logs_update_toc(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		skip_group_m_yunying_logs_update_toc(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_logs_update_toc(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_logs_update_toc(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    #m_yunying_logs_update_toc{act_id = F@_1, log = F@_2}.

d_field_m_yunying_logs_update_toc_act_id(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_logs_update_toc_act_id(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_m_yunying_logs_update_toc_act_id(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_logs_update_toc(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

d_field_m_yunying_logs_update_toc_log(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_logs_update_toc_log(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_m_yunying_logs_update_toc_log(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_log(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_logs_update_toc(RestF, 0,
						 0, F@_1,
						 if Prev == undefined ->
							NewFValue;
						    true ->
							merge_msg_p_yy_log(Prev,
									   NewFValue,
									   TrUserData)
						 end,
						 TrUserData).

skip_varint_m_yunying_logs_update_toc(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_logs_update_toc(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
skip_varint_m_yunying_logs_update_toc(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_update_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_logs_update_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_logs_update_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
skip_length_delimited_m_yunying_logs_update_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_logs_update_toc(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

skip_group_m_yunying_logs_update_toc(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_logs_update_toc(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

skip_32_m_yunying_logs_update_toc(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_update_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

skip_64_m_yunying_logs_update_toc(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_logs_update_toc(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

decode_msg_m_yunying_lottery_draw_tos(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_tos(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id(undefined, TrUserData),
						  TrUserData).

dfp_read_field_def_m_yunying_lottery_draw_tos(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_lottery_draw_tos_act_id(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_draw_tos(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_lottery_draw_tos_times(Rest, Z1, Z2,
					     F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_draw_tos(<<>>, 0,
					      0, F@_1, F@_2, _) ->
    #m_yunying_lottery_draw_tos{act_id = F@_1,
				times = F@_2};
dfp_read_field_def_m_yunying_lottery_draw_tos(Other, Z1,
					      Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_lottery_draw_tos(Other, Z1,
						 Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_lottery_draw_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_draw_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
dg_read_field_def_m_yunying_lottery_draw_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_draw_tos_act_id(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      16 ->
	  d_field_m_yunying_lottery_draw_tos_times(Rest, 0, 0,
						   F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_draw_tos(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_draw_tos(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_draw_tos(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_draw_tos(Rest, Key bsr 3,
						      0, F@_1, F@_2,
						      TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_draw_tos(Rest, 0, 0, F@_1,
						   F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_draw_tos(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    #m_yunying_lottery_draw_tos{act_id = F@_1,
				times = F@_2}.

d_field_m_yunying_lottery_draw_tos_act_id(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_draw_tos_act_id(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_m_yunying_lottery_draw_tos_act_id(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_draw_tos(RestF, 0,
						  0, NewFValue, F@_2,
						  TrUserData).

d_field_m_yunying_lottery_draw_tos_times(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_draw_tos_times(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
d_field_m_yunying_lottery_draw_tos_times(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_draw_tos(RestF, 0,
						  0, F@_1, NewFValue,
						  TrUserData).

skip_varint_m_yunying_lottery_draw_tos(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_lottery_draw_tos(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
skip_varint_m_yunying_lottery_draw_tos(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_tos(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_lottery_draw_tos(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_draw_tos(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
skip_length_delimited_m_yunying_lottery_draw_tos(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_draw_tos(Rest2, 0,
						  0, F@_1, F@_2, TrUserData).

skip_group_m_yunying_lottery_draw_tos(Bin, FNum, Z2,
				      F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_draw_tos(Rest, 0,
						  Z2, F@_1, F@_2, TrUserData).

skip_32_m_yunying_lottery_draw_tos(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_tos(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

skip_64_m_yunying_lottery_draw_tos(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_tos(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

decode_msg_m_yunying_lottery_draw_toc(Bin,
				      TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_toc(Bin, 0, 0,
						  id(undefined, TrUserData),
						  id([], TrUserData),
						  TrUserData).

dfp_read_field_def_m_yunying_lottery_draw_toc(<<8,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_lottery_draw_toc_act_id(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_draw_toc(<<18,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_pfield_m_yunying_lottery_draw_toc_reward_ids(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_draw_toc(<<16,
						Rest/binary>>,
					      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_m_yunying_lottery_draw_toc_reward_ids(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_lottery_draw_toc(<<>>, 0,
					      0, F@_1, R1, TrUserData) ->
    #m_yunying_lottery_draw_toc{act_id = F@_1,
				reward_ids = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_lottery_draw_toc(Other, Z1,
					      Z2, F@_1, F@_2, TrUserData) ->
    dg_read_field_def_m_yunying_lottery_draw_toc(Other, Z1,
						 Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_lottery_draw_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lottery_draw_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
dg_read_field_def_m_yunying_lottery_draw_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lottery_draw_toc_act_id(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      18 ->
	  d_pfield_m_yunying_lottery_draw_toc_reward_ids(Rest, 0,
							 0, F@_1, F@_2,
							 TrUserData);
      16 ->
	  d_field_m_yunying_lottery_draw_toc_reward_ids(Rest, 0,
							0, F@_1, F@_2,
							TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lottery_draw_toc(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    1 ->
		skip_64_m_yunying_lottery_draw_toc(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lottery_draw_toc(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
	    3 ->
		skip_group_m_yunying_lottery_draw_toc(Rest, Key bsr 3,
						      0, F@_1, F@_2,
						      TrUserData);
	    5 ->
		skip_32_m_yunying_lottery_draw_toc(Rest, 0, 0, F@_1,
						   F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lottery_draw_toc(<<>>, 0, 0,
					     F@_1, R1, TrUserData) ->
    #m_yunying_lottery_draw_toc{act_id = F@_1,
				reward_ids = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_lottery_draw_toc_act_id(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_draw_toc_act_id(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_m_yunying_lottery_draw_toc_act_id(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_draw_toc(RestF, 0,
						  0, NewFValue, F@_2,
						  TrUserData).

d_field_m_yunying_lottery_draw_toc_reward_ids(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lottery_draw_toc_reward_ids(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
d_field_m_yunying_lottery_draw_toc_reward_ids(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lottery_draw_toc(RestF, 0,
						  0, F@_1,
						  cons(NewFValue, Prev,
						       TrUserData),
						  TrUserData).

d_pfield_m_yunying_lottery_draw_toc_reward_ids(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_pfield_m_yunying_lottery_draw_toc_reward_ids(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, TrUserData);
d_pfield_m_yunying_lottery_draw_toc_reward_ids(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_yunying_lottery_draw_toc_reward_ids(PackedBytes,
							     0, 0, E,
							     TrUserData),
    dfp_read_field_def_m_yunying_lottery_draw_toc(Rest2, 0,
						  0, F@_1, NewSeq, TrUserData).

d_packed_field_m_yunying_lottery_draw_toc_reward_ids(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_yunying_lottery_draw_toc_reward_ids(Rest,
							 N + 7, X bsl N + Acc,
							 AccSeq, TrUserData);
d_packed_field_m_yunying_lottery_draw_toc_reward_ids(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, AccSeq,
						     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_yunying_lottery_draw_toc_reward_ids(RestF,
							 0, 0,
							 [NewFValue | AccSeq],
							 TrUserData);
d_packed_field_m_yunying_lottery_draw_toc_reward_ids(<<>>,
						     0, 0, AccSeq, _) ->
    AccSeq.

skip_varint_m_yunying_lottery_draw_toc(<<1:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_lottery_draw_toc(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
skip_varint_m_yunying_lottery_draw_toc(<<0:1, _:7,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_toc(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_lottery_draw_toc(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lottery_draw_toc(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
skip_length_delimited_m_yunying_lottery_draw_toc(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lottery_draw_toc(Rest2, 0,
						  0, F@_1, F@_2, TrUserData).

skip_group_m_yunying_lottery_draw_toc(Bin, FNum, Z2,
				      F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lottery_draw_toc(Rest, 0,
						  Z2, F@_1, F@_2, TrUserData).

skip_32_m_yunying_lottery_draw_toc(<<_:32,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_toc(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

skip_64_m_yunying_lottery_draw_toc(<<_:64,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_lottery_draw_toc(Rest, Z1,
						  Z2, F@_1, F@_2, TrUserData).

decode_msg_m_yunying_lotoinfo_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_tos(Bin, 0, 0,
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_yunying_lotoinfo_tos(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_lotoinfo_tos_act_id(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_m_yunying_lotoinfo_tos(<<>>, 0, 0,
					  F@_1, _) ->
    #m_yunying_lotoinfo_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_lotoinfo_tos(Other, Z1, Z2,
					  F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_lotoinfo_tos(Other, Z1, Z2,
					     F@_1, TrUserData).

dg_read_field_def_m_yunying_lotoinfo_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lotoinfo_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_lotoinfo_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lotoinfo_tos_act_id(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lotoinfo_tos(Rest, 0, 0, F@_1,
						   TrUserData);
	    1 ->
		skip_64_m_yunying_lotoinfo_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lotoinfo_tos(Rest, 0, 0,
							     F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_lotoinfo_tos(Rest, Key bsr 3, 0,
						  F@_1, TrUserData);
	    5 ->
		skip_32_m_yunying_lotoinfo_tos(Rest, 0, 0, F@_1,
					       TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lotoinfo_tos(<<>>, 0, 0,
					 F@_1, _) ->
    #m_yunying_lotoinfo_tos{act_id = F@_1}.

d_field_m_yunying_lotoinfo_tos_act_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lotoinfo_tos_act_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_lotoinfo_tos_act_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lotoinfo_tos(RestF, 0, 0,
					      NewFValue, TrUserData).

skip_varint_m_yunying_lotoinfo_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_lotoinfo_tos(Rest, Z1, Z2, F@_1,
				       TrUserData);
skip_varint_m_yunying_lotoinfo_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_length_delimited_m_yunying_lotoinfo_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lotoinfo_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
skip_length_delimited_m_yunying_lotoinfo_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lotoinfo_tos(Rest2, 0, 0,
					      F@_1, TrUserData).

skip_group_m_yunying_lotoinfo_tos(Bin, FNum, Z2, F@_1,
				  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lotoinfo_tos(Rest, 0, Z2,
					      F@_1, TrUserData).

skip_32_m_yunying_lotoinfo_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

skip_64_m_yunying_lotoinfo_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_tos(Rest, Z1, Z2,
					      F@_1, TrUserData).

decode_msg_m_yunying_lotoinfo_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_toc(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_lotoinfo_toc(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_m_yunying_lotoinfo_toc_act_id(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_yunying_lotoinfo_toc(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_m_yunying_lotoinfo_toc_progress(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_yunying_lotoinfo_toc(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_m_yunying_lotoinfo_toc_round(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_yunying_lotoinfo_toc(<<34,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_pfield_m_yunying_lotoinfo_toc_hits(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_yunying_lotoinfo_toc(<<32,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3, F@_4,
					  TrUserData) ->
    d_field_m_yunying_lotoinfo_toc_hits(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_m_yunying_lotoinfo_toc(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, R1, TrUserData) ->
    #m_yunying_lotoinfo_toc{act_id = F@_1, progress = F@_2,
			    round = F@_3, hits = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_lotoinfo_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_m_yunying_lotoinfo_toc(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4,
					     TrUserData).

dg_read_field_def_m_yunying_lotoinfo_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_lotoinfo_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, TrUserData);
dg_read_field_def_m_yunying_lotoinfo_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_lotoinfo_toc_act_id(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      16 ->
	  d_field_m_yunying_lotoinfo_toc_progress(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
      24 ->
	  d_field_m_yunying_lotoinfo_toc_round(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      34 ->
	  d_pfield_m_yunying_lotoinfo_toc_hits(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, TrUserData);
      32 ->
	  d_field_m_yunying_lotoinfo_toc_hits(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_lotoinfo_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, F@_4,
						   TrUserData);
	    1 ->
		skip_64_m_yunying_lotoinfo_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_lotoinfo_toc(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     F@_4, TrUserData);
	    3 ->
		skip_group_m_yunying_lotoinfo_toc(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
	    5 ->
		skip_32_m_yunying_lotoinfo_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_lotoinfo_toc(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, R1, TrUserData) ->
    #m_yunying_lotoinfo_toc{act_id = F@_1, progress = F@_2,
			    round = F@_3, hits = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_lotoinfo_toc_act_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_m_yunying_lotoinfo_toc_act_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_m_yunying_lotoinfo_toc_act_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, F@_4,
				      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lotoinfo_toc(RestF, 0, 0,
					      NewFValue, F@_2, F@_3, F@_4,
					      TrUserData).

d_field_m_yunying_lotoinfo_toc_progress(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    d_field_m_yunying_lotoinfo_toc_progress(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
d_field_m_yunying_lotoinfo_toc_progress(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, F@_3, F@_4,
					TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lotoinfo_toc(RestF, 0, 0,
					      F@_1, NewFValue, F@_3, F@_4,
					      TrUserData).

d_field_m_yunying_lotoinfo_toc_round(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lotoinfo_toc_round(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_field_m_yunying_lotoinfo_toc_round(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lotoinfo_toc(RestF, 0, 0,
					      F@_1, F@_2, NewFValue, F@_4,
					      TrUserData).

d_field_m_yunying_lotoinfo_toc_hits(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_m_yunying_lotoinfo_toc_hits(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
d_field_m_yunying_lotoinfo_toc_hits(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, Prev,
				    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_lotoinfo_toc(RestF, 0, 0,
					      F@_1, F@_2, F@_3,
					      cons(NewFValue, Prev, TrUserData),
					      TrUserData).

d_pfield_m_yunying_lotoinfo_toc_hits(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_pfield_m_yunying_lotoinfo_toc_hits(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 TrUserData);
d_pfield_m_yunying_lotoinfo_toc_hits(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq =
	d_packed_field_m_yunying_lotoinfo_toc_hits(PackedBytes,
						   0, 0, E, TrUserData),
    dfp_read_field_def_m_yunying_lotoinfo_toc(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, NewSeq,
					      TrUserData).

d_packed_field_m_yunying_lotoinfo_toc_hits(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq, TrUserData)
    when N < 57 ->
    d_packed_field_m_yunying_lotoinfo_toc_hits(Rest, N + 7,
					       X bsl N + Acc, AccSeq,
					       TrUserData);
d_packed_field_m_yunying_lotoinfo_toc_hits(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, AccSeq, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    d_packed_field_m_yunying_lotoinfo_toc_hits(RestF, 0, 0,
					       [NewFValue | AccSeq],
					       TrUserData);
d_packed_field_m_yunying_lotoinfo_toc_hits(<<>>, 0, 0,
					   AccSeq, _) ->
    AccSeq.

skip_varint_m_yunying_lotoinfo_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    skip_varint_m_yunying_lotoinfo_toc(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, TrUserData);
skip_varint_m_yunying_lotoinfo_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, F@_4,
				   TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_length_delimited_m_yunying_lotoinfo_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_lotoinfo_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_m_yunying_lotoinfo_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3, F@_4,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_lotoinfo_toc(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_group_m_yunying_lotoinfo_toc(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_lotoinfo_toc(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_32_m_yunying_lotoinfo_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

skip_64_m_yunying_lotoinfo_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_m_yunying_lotoinfo_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4,
					      TrUserData).

decode_msg_m_yunying_loto_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_tos(Bin, 0, 0,
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_yunying_loto_tos(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_loto_tos_act_id(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_m_yunying_loto_tos(<<>>, 0, 0, F@_1,
				      _) ->
    #m_yunying_loto_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_loto_tos(Other, Z1, Z2,
				      F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_loto_tos(Other, Z1, Z2,
					 F@_1, TrUserData).

dg_read_field_def_m_yunying_loto_tos(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_loto_tos(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_loto_tos(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_loto_tos_act_id(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_loto_tos(Rest, 0, 0, F@_1,
					       TrUserData);
	    1 ->
		skip_64_m_yunying_loto_tos(Rest, 0, 0, F@_1,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_loto_tos(Rest, 0, 0,
							 F@_1, TrUserData);
	    3 ->
		skip_group_m_yunying_loto_tos(Rest, Key bsr 3, 0, F@_1,
					      TrUserData);
	    5 ->
		skip_32_m_yunying_loto_tos(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_loto_tos(<<>>, 0, 0, F@_1,
				     _) ->
    #m_yunying_loto_tos{act_id = F@_1}.

d_field_m_yunying_loto_tos_act_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_loto_tos_act_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_loto_tos_act_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_loto_tos(RestF, 0, 0,
					  NewFValue, TrUserData).

skip_varint_m_yunying_loto_tos(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_loto_tos(Rest, Z1, Z2, F@_1,
				   TrUserData);
skip_varint_m_yunying_loto_tos(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_length_delimited_m_yunying_loto_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_loto_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_m_yunying_loto_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_loto_tos(Rest2, 0, 0, F@_1,
					  TrUserData).

skip_group_m_yunying_loto_tos(Bin, FNum, Z2, F@_1,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_loto_tos(Rest, 0, Z2, F@_1,
					  TrUserData).

skip_32_m_yunying_loto_tos(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

skip_64_m_yunying_loto_tos(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_tos(Rest, Z1, Z2,
					  F@_1, TrUserData).

decode_msg_m_yunying_loto_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_toc(Bin, 0, 0,
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  id(undefined, TrUserData),
					  TrUserData).

dfp_read_field_def_m_yunying_loto_toc(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_loto_toc_act_id(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_loto_toc(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_loto_toc_hit(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_m_yunying_loto_toc(<<24,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_m_yunying_loto_toc_progress(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_loto_toc(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    #m_yunying_loto_toc{act_id = F@_1, hit = F@_2,
			progress = F@_3};
dfp_read_field_def_m_yunying_loto_toc(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_yunying_loto_toc(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_yunying_loto_toc(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_loto_toc(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
dg_read_field_def_m_yunying_loto_toc(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_loto_toc_act_id(Rest, 0, 0, F@_1,
					    F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_yunying_loto_toc_hit(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      24 ->
	  d_field_m_yunying_loto_toc_progress(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_loto_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		skip_64_m_yunying_loto_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_loto_toc(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		skip_group_m_yunying_loto_toc(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_yunying_loto_toc(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_loto_toc(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    #m_yunying_loto_toc{act_id = F@_1, hit = F@_2,
			progress = F@_3}.

d_field_m_yunying_loto_toc_act_id(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_loto_toc_act_id(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
d_field_m_yunying_loto_toc_act_id(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_loto_toc(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, TrUserData).

d_field_m_yunying_loto_toc_hit(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_loto_toc_hit(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_m_yunying_loto_toc_hit(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_loto_toc(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, TrUserData).

d_field_m_yunying_loto_toc_progress(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_loto_toc_progress(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_yunying_loto_toc_progress(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_loto_toc(RestF, 0, 0, F@_1,
					  F@_2, NewFValue, TrUserData).

skip_varint_m_yunying_loto_toc(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_yunying_loto_toc(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
skip_varint_m_yunying_loto_toc(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_yunying_loto_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_loto_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
skip_length_delimited_m_yunying_loto_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_loto_toc(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

skip_group_m_yunying_loto_toc(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_loto_toc(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

skip_32_m_yunying_loto_toc(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_64_m_yunying_loto_toc(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_toc(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_yunying_loto_progress_toc(Bin,
				       TrUserData) ->
    dfp_read_field_def_m_yunying_loto_progress_toc(Bin, 0,
						   0, id(undefined, TrUserData),
						   id(undefined, TrUserData),
						   TrUserData).

dfp_read_field_def_m_yunying_loto_progress_toc(<<8,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    d_field_m_yunying_loto_progress_toc_act_id(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_loto_progress_toc(<<16,
						 Rest/binary>>,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    d_field_m_yunying_loto_progress_toc_progress(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_loto_progress_toc(<<>>, 0,
					       0, F@_1, F@_2, _) ->
    #m_yunying_loto_progress_toc{act_id = F@_1,
				 progress = F@_2};
dfp_read_field_def_m_yunying_loto_progress_toc(Other,
					       Z1, Z2, F@_1, F@_2,
					       TrUserData) ->
    dg_read_field_def_m_yunying_loto_progress_toc(Other, Z1,
						  Z2, F@_1, F@_2, TrUserData).

dg_read_field_def_m_yunying_loto_progress_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_loto_progress_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, TrUserData);
dg_read_field_def_m_yunying_loto_progress_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_loto_progress_toc_act_id(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      16 ->
	  d_field_m_yunying_loto_progress_toc_progress(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_loto_progress_toc(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_m_yunying_loto_progress_toc(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_loto_progress_toc(Rest,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData);
	    3 ->
		skip_group_m_yunying_loto_progress_toc(Rest, Key bsr 3,
						       0, F@_1, F@_2,
						       TrUserData);
	    5 ->
		skip_32_m_yunying_loto_progress_toc(Rest, 0, 0, F@_1,
						    F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_loto_progress_toc(<<>>, 0,
					      0, F@_1, F@_2, _) ->
    #m_yunying_loto_progress_toc{act_id = F@_1,
				 progress = F@_2}.

d_field_m_yunying_loto_progress_toc_act_id(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_loto_progress_toc_act_id(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_m_yunying_loto_progress_toc_act_id(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_loto_progress_toc(RestF, 0,
						   0, NewFValue, F@_2,
						   TrUserData).

d_field_m_yunying_loto_progress_toc_progress(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_loto_progress_toc_progress(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
d_field_m_yunying_loto_progress_toc_progress(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_loto_progress_toc(RestF, 0,
						   0, F@_1, NewFValue,
						   TrUserData).

skip_varint_m_yunying_loto_progress_toc(<<1:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_loto_progress_toc(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
skip_varint_m_yunying_loto_progress_toc(<<0:1, _:7,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_progress_toc(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

skip_length_delimited_m_yunying_loto_progress_toc(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_loto_progress_toc(Rest,
						      N + 7, X bsl N + Acc,
						      F@_1, F@_2, TrUserData);
skip_length_delimited_m_yunying_loto_progress_toc(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, F@_1, F@_2,
						  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_loto_progress_toc(Rest2, 0,
						   0, F@_1, F@_2, TrUserData).

skip_group_m_yunying_loto_progress_toc(Bin, FNum, Z2,
				       F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_loto_progress_toc(Rest, 0,
						   Z2, F@_1, F@_2, TrUserData).

skip_32_m_yunying_loto_progress_toc(<<_:32,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_progress_toc(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

skip_64_m_yunying_loto_progress_toc(<<_:64,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_loto_progress_toc(Rest, Z1,
						   Z2, F@_1, F@_2, TrUserData).

decode_msg_m_yunying_shop_info_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_tos(Bin, 0, 0,
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_yunying_shop_info_tos(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_shop_info_tos_act_id(Rest, Z1, Z2,
					   F@_1, TrUserData);
dfp_read_field_def_m_yunying_shop_info_tos(<<>>, 0, 0,
					   F@_1, _) ->
    #m_yunying_shop_info_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_shop_info_tos(Other, Z1,
					   Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_shop_info_tos(Other, Z1, Z2,
					      F@_1, TrUserData).

dg_read_field_def_m_yunying_shop_info_tos(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_shop_info_tos(Rest, N + 7,
					      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_m_yunying_shop_info_tos(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_shop_info_tos_act_id(Rest, 0, 0, F@_1,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_shop_info_tos(Rest, 0, 0, F@_1,
						    TrUserData);
	    1 ->
		skip_64_m_yunying_shop_info_tos(Rest, 0, 0, F@_1,
						TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_shop_info_tos(Rest, 0,
							      0, F@_1,
							      TrUserData);
	    3 ->
		skip_group_m_yunying_shop_info_tos(Rest, Key bsr 3, 0,
						   F@_1, TrUserData);
	    5 ->
		skip_32_m_yunying_shop_info_tos(Rest, 0, 0, F@_1,
						TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_shop_info_tos(<<>>, 0, 0,
					  F@_1, _) ->
    #m_yunying_shop_info_tos{act_id = F@_1}.

d_field_m_yunying_shop_info_tos_act_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_info_tos_act_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
d_field_m_yunying_shop_info_tos_act_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_info_tos(RestF, 0, 0,
					       NewFValue, TrUserData).

skip_varint_m_yunying_shop_info_tos(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_shop_info_tos(Rest, Z1, Z2, F@_1,
					TrUserData);
skip_varint_m_yunying_shop_info_tos(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_tos(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_length_delimited_m_yunying_shop_info_tos(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_shop_info_tos(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
skip_length_delimited_m_yunying_shop_info_tos(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_shop_info_tos(Rest2, 0, 0,
					       F@_1, TrUserData).

skip_group_m_yunying_shop_info_tos(Bin, FNum, Z2, F@_1,
				   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_shop_info_tos(Rest, 0, Z2,
					       F@_1, TrUserData).

skip_32_m_yunying_shop_info_tos(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_tos(Rest, Z1, Z2,
					       F@_1, TrUserData).

skip_64_m_yunying_shop_info_tos(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_tos(Rest, Z1, Z2,
					       F@_1, TrUserData).

decode_msg_m_yunying_shop_info_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_toc(Bin, 0, 0,
					       id(undefined, TrUserData),
					       id([], TrUserData),
					       id([], TrUserData),
					       id(undefined, TrUserData),
					       id(undefined, TrUserData),
					       TrUserData).

dfp_read_field_def_m_yunying_shop_info_toc(<<8,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_m_yunying_shop_info_toc_act_id(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_m_yunying_shop_info_toc(<<18,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_m_yunying_shop_info_toc_list(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_yunying_shop_info_toc(<<26,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_m_yunying_shop_info_toc_logs(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_m_yunying_shop_info_toc(<<32,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_m_yunying_shop_info_toc_reward_time(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_m_yunying_shop_info_toc(<<40,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    d_field_m_yunying_shop_info_toc_unlimit_sec(Rest, Z1,
						Z2, F@_1, F@_2, F@_3, F@_4,
						F@_5, TrUserData);
dfp_read_field_def_m_yunying_shop_info_toc(<<>>, 0, 0,
					   F@_1, R1, R2, F@_4, F@_5,
					   TrUserData) ->
    #m_yunying_shop_info_toc{act_id = F@_1,
			     list = lists_reverse(R1, TrUserData),
			     logs = lists_reverse(R2, TrUserData),
			     reward_time = F@_4, unlimit_sec = F@_5};
dfp_read_field_def_m_yunying_shop_info_toc(Other, Z1,
					   Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    dg_read_field_def_m_yunying_shop_info_toc(Other, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData).

dg_read_field_def_m_yunying_shop_info_toc(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_shop_info_toc(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
dg_read_field_def_m_yunying_shop_info_toc(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_shop_info_toc_act_id(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      18 ->
	  d_field_m_yunying_shop_info_toc_list(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      26 ->
	  d_field_m_yunying_shop_info_toc_logs(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      32 ->
	  d_field_m_yunying_shop_info_toc_reward_time(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      40 ->
	  d_field_m_yunying_shop_info_toc_unlimit_sec(Rest, 0, 0,
						      F@_1, F@_2, F@_3, F@_4,
						      F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_shop_info_toc(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    1 ->
		skip_64_m_yunying_shop_info_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_shop_info_toc(Rest, 0,
							      0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
	    3 ->
		skip_group_m_yunying_shop_info_toc(Rest, Key bsr 3, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
	    5 ->
		skip_32_m_yunying_shop_info_toc(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_shop_info_toc(<<>>, 0, 0,
					  F@_1, R1, R2, F@_4, F@_5,
					  TrUserData) ->
    #m_yunying_shop_info_toc{act_id = F@_1,
			     list = lists_reverse(R1, TrUserData),
			     logs = lists_reverse(R2, TrUserData),
			     reward_time = F@_4, unlimit_sec = F@_5}.

d_field_m_yunying_shop_info_toc_act_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_info_toc_act_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_m_yunying_shop_info_toc_act_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_info_toc(RestF, 0, 0,
					       NewFValue, F@_2, F@_3, F@_4,
					       F@_5, TrUserData).

d_field_m_yunying_shop_info_toc_list(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_info_toc_list(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_m_yunying_shop_info_toc_list(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_shop(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_shop_info_toc(RestF, 0, 0,
					       F@_1,
					       cons(NewFValue, Prev,
						    TrUserData),
					       F@_3, F@_4, F@_5, TrUserData).

d_field_m_yunying_shop_info_toc_logs(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_info_toc_logs(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_m_yunying_shop_info_toc_logs(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, Prev, F@_4, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_shop_log(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_shop_info_toc(RestF, 0, 0,
					       F@_1, F@_2,
					       cons(NewFValue, Prev,
						    TrUserData),
					       F@_4, F@_5, TrUserData).

d_field_m_yunying_shop_info_toc_reward_time(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_info_toc_reward_time(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_m_yunying_shop_info_toc_reward_time(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_info_toc(RestF, 0, 0,
					       F@_1, F@_2, F@_3, NewFValue,
					       F@_5, TrUserData).

d_field_m_yunying_shop_info_toc_unlimit_sec(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_info_toc_unlimit_sec(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
d_field_m_yunying_shop_info_toc_unlimit_sec(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					    TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_info_toc(RestF, 0, 0,
					       F@_1, F@_2, F@_3, F@_4,
					       NewFValue, TrUserData).

skip_varint_m_yunying_shop_info_toc(<<1:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    skip_varint_m_yunying_shop_info_toc(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_m_yunying_shop_info_toc(<<0:1, _:7,
				      Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_toc(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_length_delimited_m_yunying_shop_info_toc(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_shop_info_toc(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
skip_length_delimited_m_yunying_shop_info_toc(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3, F@_4,
					      F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_shop_info_toc(Rest2, 0, 0,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_group_m_yunying_shop_info_toc(Bin, FNum, Z2, F@_1,
				   F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_shop_info_toc(Rest, 0, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_32_m_yunying_shop_info_toc(<<_:32, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_toc(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

skip_64_m_yunying_shop_info_toc(<<_:64, Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_m_yunying_shop_info_toc(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       TrUserData).

decode_msg_m_yunying_shop_buy_tos(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_tos(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      TrUserData).

dfp_read_field_def_m_yunying_shop_buy_tos(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_yunying_shop_buy_tos_act_id(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_shop_buy_tos(<<16,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_yunying_shop_buy_tos_shop_id(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_shop_buy_tos(<<24,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_yunying_shop_buy_tos_num(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_shop_buy_tos(<<>>, 0, 0,
					  F@_1, F@_2, F@_3, _) ->
    #m_yunying_shop_buy_tos{act_id = F@_1, shop_id = F@_2,
			    num = F@_3};
dfp_read_field_def_m_yunying_shop_buy_tos(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_yunying_shop_buy_tos(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_yunying_shop_buy_tos(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_shop_buy_tos(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
dg_read_field_def_m_yunying_shop_buy_tos(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_shop_buy_tos_act_id(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      16 ->
	  d_field_m_yunying_shop_buy_tos_shop_id(Rest, 0, 0, F@_1,
						 F@_2, F@_3, TrUserData);
      24 ->
	  d_field_m_yunying_shop_buy_tos_num(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_shop_buy_tos(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_m_yunying_shop_buy_tos(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_shop_buy_tos(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    3 ->
		skip_group_m_yunying_shop_buy_tos(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_yunying_shop_buy_tos(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_shop_buy_tos(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, _) ->
    #m_yunying_shop_buy_tos{act_id = F@_1, shop_id = F@_2,
			    num = F@_3}.

d_field_m_yunying_shop_buy_tos_act_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_buy_tos_act_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_m_yunying_shop_buy_tos_act_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_buy_tos(RestF, 0, 0,
					      NewFValue, F@_2, F@_3,
					      TrUserData).

d_field_m_yunying_shop_buy_tos_shop_id(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_buy_tos_shop_id(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   TrUserData);
d_field_m_yunying_shop_buy_tos_shop_id(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_buy_tos(RestF, 0, 0,
					      F@_1, NewFValue, F@_3,
					      TrUserData).

d_field_m_yunying_shop_buy_tos_num(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_buy_tos_num(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_m_yunying_shop_buy_tos_num(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_buy_tos(RestF, 0, 0,
					      F@_1, F@_2, NewFValue,
					      TrUserData).

skip_varint_m_yunying_shop_buy_tos(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_yunying_shop_buy_tos(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
skip_varint_m_yunying_shop_buy_tos(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_tos(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_yunying_shop_buy_tos(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_shop_buy_tos(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
skip_length_delimited_m_yunying_shop_buy_tos(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_shop_buy_tos(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, TrUserData).

skip_group_m_yunying_shop_buy_tos(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_shop_buy_tos(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_32_m_yunying_shop_buy_tos(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_tos(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_64_m_yunying_shop_buy_tos(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_tos(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_yunying_shop_buy_toc(Bin, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_toc(Bin, 0, 0,
					      id(undefined, TrUserData),
					      id(undefined, TrUserData),
					      id([], TrUserData), TrUserData).

dfp_read_field_def_m_yunying_shop_buy_toc(<<8,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_yunying_shop_buy_toc_act_id(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_shop_buy_toc(<<18,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_yunying_shop_buy_toc_shop(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_shop_buy_toc(<<26,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, F@_3,
					  TrUserData) ->
    d_field_m_yunying_shop_buy_toc_logs(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_m_yunying_shop_buy_toc(<<>>, 0, 0,
					  F@_1, F@_2, R1, TrUserData) ->
    #m_yunying_shop_buy_toc{act_id = F@_1, shop = F@_2,
			    logs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_shop_buy_toc(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_m_yunying_shop_buy_toc(Other, Z1, Z2,
					     F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_m_yunying_shop_buy_toc(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_shop_buy_toc(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
dg_read_field_def_m_yunying_shop_buy_toc(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_shop_buy_toc_act_id(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      18 ->
	  d_field_m_yunying_shop_buy_toc_shop(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      26 ->
	  d_field_m_yunying_shop_buy_toc_logs(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_shop_buy_toc(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    1 ->
		skip_64_m_yunying_shop_buy_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_shop_buy_toc(Rest, 0, 0,
							     F@_1, F@_2, F@_3,
							     TrUserData);
	    3 ->
		skip_group_m_yunying_shop_buy_toc(Rest, Key bsr 3, 0,
						  F@_1, F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_m_yunying_shop_buy_toc(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_shop_buy_toc(<<>>, 0, 0,
					 F@_1, F@_2, R1, TrUserData) ->
    #m_yunying_shop_buy_toc{act_id = F@_1, shop = F@_2,
			    logs = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_shop_buy_toc_act_id(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_buy_toc_act_id(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_m_yunying_shop_buy_toc_act_id(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_buy_toc(RestF, 0, 0,
					      NewFValue, F@_2, F@_3,
					      TrUserData).

d_field_m_yunying_shop_buy_toc_shop(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_buy_toc_shop(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_yunying_shop_buy_toc_shop(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_shop(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_shop_buy_toc(RestF, 0, 0,
					      F@_1,
					      if Prev == undefined -> NewFValue;
						 true ->
						     merge_msg_p_yy_shop(Prev,
									 NewFValue,
									 TrUserData)
					      end,
					      F@_3, TrUserData).

d_field_m_yunying_shop_buy_toc_logs(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_buy_toc_logs(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_m_yunying_shop_buy_toc_logs(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_shop_log(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_shop_buy_toc(RestF, 0, 0,
					      F@_1, F@_2,
					      cons(NewFValue, Prev, TrUserData),
					      TrUserData).

skip_varint_m_yunying_shop_buy_toc(<<1:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_m_yunying_shop_buy_toc(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
skip_varint_m_yunying_shop_buy_toc(<<0:1, _:7,
				     Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_m_yunying_shop_buy_toc(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_shop_buy_toc(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, F@_3, TrUserData);
skip_length_delimited_m_yunying_shop_buy_toc(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, F@_3,
					     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_shop_buy_toc(Rest2, 0, 0,
					      F@_1, F@_2, F@_3, TrUserData).

skip_group_m_yunying_shop_buy_toc(Bin, FNum, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_shop_buy_toc(Rest, 0, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_32_m_yunying_shop_buy_toc(<<_:32, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

skip_64_m_yunying_shop_buy_toc(<<_:64, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_buy_toc(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData).

decode_msg_m_yunying_shop_reward_log_tos(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_tos(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     TrUserData).

dfp_read_field_def_m_yunying_shop_reward_log_tos(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, TrUserData) ->
    d_field_m_yunying_shop_reward_log_tos_act_id(Rest, Z1,
						 Z2, F@_1, TrUserData);
dfp_read_field_def_m_yunying_shop_reward_log_tos(<<>>,
						 0, 0, F@_1, _) ->
    #m_yunying_shop_reward_log_tos{act_id = F@_1};
dfp_read_field_def_m_yunying_shop_reward_log_tos(Other,
						 Z1, Z2, F@_1, TrUserData) ->
    dg_read_field_def_m_yunying_shop_reward_log_tos(Other,
						    Z1, Z2, F@_1, TrUserData).

dg_read_field_def_m_yunying_shop_reward_log_tos(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_shop_reward_log_tos(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    TrUserData);
dg_read_field_def_m_yunying_shop_reward_log_tos(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_shop_reward_log_tos_act_id(Rest, 0, 0,
						       F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_shop_reward_log_tos(Rest, 0, 0,
							  F@_1, TrUserData);
	    1 ->
		skip_64_m_yunying_shop_reward_log_tos(Rest, 0, 0, F@_1,
						      TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_shop_reward_log_tos(Rest,
								    0, 0, F@_1,
								    TrUserData);
	    3 ->
		skip_group_m_yunying_shop_reward_log_tos(Rest,
							 Key bsr 3, 0, F@_1,
							 TrUserData);
	    5 ->
		skip_32_m_yunying_shop_reward_log_tos(Rest, 0, 0, F@_1,
						      TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_shop_reward_log_tos(<<>>, 0,
						0, F@_1, _) ->
    #m_yunying_shop_reward_log_tos{act_id = F@_1}.

d_field_m_yunying_shop_reward_log_tos_act_id(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_reward_log_tos_act_id(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 TrUserData);
d_field_m_yunying_shop_reward_log_tos_act_id(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_reward_log_tos(RestF,
						     0, 0, NewFValue,
						     TrUserData).

skip_varint_m_yunying_shop_reward_log_tos(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    skip_varint_m_yunying_shop_reward_log_tos(Rest, Z1, Z2,
					      F@_1, TrUserData);
skip_varint_m_yunying_shop_reward_log_tos(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_tos(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_length_delimited_m_yunying_shop_reward_log_tos(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_shop_reward_log_tos(Rest,
							N + 7, X bsl N + Acc,
							F@_1, TrUserData);
skip_length_delimited_m_yunying_shop_reward_log_tos(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_shop_reward_log_tos(Rest2,
						     0, 0, F@_1, TrUserData).

skip_group_m_yunying_shop_reward_log_tos(Bin, FNum, Z2,
					 F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_shop_reward_log_tos(Rest,
						     0, Z2, F@_1, TrUserData).

skip_32_m_yunying_shop_reward_log_tos(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_tos(Rest,
						     Z1, Z2, F@_1, TrUserData).

skip_64_m_yunying_shop_reward_log_tos(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_tos(Rest,
						     Z1, Z2, F@_1, TrUserData).

decode_msg_m_yunying_shop_reward_log_toc(Bin,
					 TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_toc(Bin, 0,
						     0,
						     id(undefined, TrUserData),
						     id([], TrUserData),
						     TrUserData).

dfp_read_field_def_m_yunying_shop_reward_log_toc(<<8,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_m_yunying_shop_reward_log_toc_act_id(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_shop_reward_log_toc(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    d_field_m_yunying_shop_reward_log_toc_logs(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_m_yunying_shop_reward_log_toc(<<>>,
						 0, 0, F@_1, R1, TrUserData) ->
    #m_yunying_shop_reward_log_toc{act_id = F@_1,
				   logs = lists_reverse(R1, TrUserData)};
dfp_read_field_def_m_yunying_shop_reward_log_toc(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    dg_read_field_def_m_yunying_shop_reward_log_toc(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

dg_read_field_def_m_yunying_shop_reward_log_toc(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_m_yunying_shop_reward_log_toc(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
dg_read_field_def_m_yunying_shop_reward_log_toc(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_m_yunying_shop_reward_log_toc_act_id(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      18 ->
	  d_field_m_yunying_shop_reward_log_toc_logs(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_m_yunying_shop_reward_log_toc(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		skip_64_m_yunying_shop_reward_log_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		skip_length_delimited_m_yunying_shop_reward_log_toc(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		skip_group_m_yunying_shop_reward_log_toc(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		skip_32_m_yunying_shop_reward_log_toc(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
dg_read_field_def_m_yunying_shop_reward_log_toc(<<>>, 0,
						0, F@_1, R1, TrUserData) ->
    #m_yunying_shop_reward_log_toc{act_id = F@_1,
				   logs = lists_reverse(R1, TrUserData)}.

d_field_m_yunying_shop_reward_log_toc_act_id(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_reward_log_toc_act_id(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
d_field_m_yunying_shop_reward_log_toc_act_id(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_m_yunying_shop_reward_log_toc(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

d_field_m_yunying_shop_reward_log_toc_logs(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_m_yunying_shop_reward_log_toc_logs(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_m_yunying_shop_reward_log_toc_logs(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_shop_reward_log(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_m_yunying_shop_reward_log_toc(RestF,
						     0, 0, F@_1,
						     cons(NewFValue, Prev,
							  TrUserData),
						     TrUserData).

skip_varint_m_yunying_shop_reward_log_toc(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_m_yunying_shop_reward_log_toc(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
skip_varint_m_yunying_shop_reward_log_toc(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_toc(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_length_delimited_m_yunying_shop_reward_log_toc(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    skip_length_delimited_m_yunying_shop_reward_log_toc(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
skip_length_delimited_m_yunying_shop_reward_log_toc(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_m_yunying_shop_reward_log_toc(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

skip_group_m_yunying_shop_reward_log_toc(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_m_yunying_shop_reward_log_toc(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

skip_32_m_yunying_shop_reward_log_toc(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_toc(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

skip_64_m_yunying_shop_reward_log_toc(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_m_yunying_shop_reward_log_toc(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

decode_msg_p_yy_activity(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_activity(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_activity(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_activity_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_activity(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_activity_act_stime(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_activity(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_activity_act_etime(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_activity(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_activity_show_stime(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_activity(<<40, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_activity_show_etime(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_activity(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #p_yy_activity{id = F@_1, act_stime = F@_2,
		   act_etime = F@_3, show_stime = F@_4, show_etime = F@_5};
dfp_read_field_def_p_yy_activity(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_yy_activity(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_yy_activity(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_activity(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_p_yy_activity(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_activity_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      16 ->
	  d_field_p_yy_activity_act_stime(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_p_yy_activity_act_etime(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_p_yy_activity_show_stime(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_yy_activity_show_etime(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_activity(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_yy_activity(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_yy_activity(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_p_yy_activity(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_yy_activity(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_yy_activity(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, _) ->
    #p_yy_activity{id = F@_1, act_stime = F@_2,
		   act_etime = F@_3, show_stime = F@_4, show_etime = F@_5}.

d_field_p_yy_activity_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_activity_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_yy_activity_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_activity(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_p_yy_activity_act_stime(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_p_yy_activity_act_stime(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_p_yy_activity_act_stime(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_activity(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_yy_activity_act_etime(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_p_yy_activity_act_etime(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_p_yy_activity_act_etime(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_activity(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_p_yy_activity_show_stime(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_p_yy_activity_show_stime(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_p_yy_activity_show_stime(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_activity(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_p_yy_activity_show_etime(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_p_yy_activity_show_etime(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_p_yy_activity_show_etime(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_activity(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_yy_activity(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_yy_activity(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_p_yy_activity(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_activity(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_yy_activity(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_activity(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_p_yy_activity(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_activity(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_p_yy_activity(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_activity(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_p_yy_activity(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_activity(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_p_yy_activity(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_activity(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_yy_reward(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_reward(Bin, 0, 0,
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData),
				   id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_reward(<<8, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_yy_reward(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_act_id(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_p_yy_reward(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_level(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_p_yy_reward(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_type(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_yy_reward(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_stype(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_p_yy_reward(<<50, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_yy_reward(<<58, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_desc(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_yy_reward(<<66, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_reqs(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_p_yy_reward(<<74, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, TrUserData) ->
    d_field_p_yy_reward_reward(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData);
dfp_read_field_def_p_yy_reward(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #p_yy_reward{id = F@_1, act_id = F@_2, level = F@_3,
		 type = F@_4, stype = F@_5, name = F@_6, desc = F@_7,
		 reqs = F@_8, reward = F@_9};
dfp_read_field_def_p_yy_reward(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			       TrUserData) ->
    dg_read_field_def_p_yy_reward(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData).

dg_read_field_def_p_yy_reward(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_reward(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, TrUserData);
dg_read_field_def_p_yy_reward(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_reward_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
      16 ->
	  d_field_p_yy_reward_act_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      24 ->
	  d_field_p_yy_reward_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      32 ->
	  d_field_p_yy_reward_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      40 ->
	  d_field_p_yy_reward_stype(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      50 ->
	  d_field_p_yy_reward_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      58 ->
	  d_field_p_yy_reward_desc(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      66 ->
	  d_field_p_yy_reward_reqs(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData);
      74 ->
	  d_field_p_yy_reward_reward(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_reward(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					TrUserData);
	    1 ->
		skip_64_p_yy_reward(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
	    2 ->
		skip_length_delimited_p_yy_reward(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, F@_8, F@_9, TrUserData);
	    3 ->
		skip_group_p_yy_reward(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				       TrUserData);
	    5 ->
		skip_32_p_yy_reward(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData)
	  end
    end;
dg_read_field_def_p_yy_reward(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    #p_yy_reward{id = F@_1, act_id = F@_2, level = F@_3,
		 type = F@_4, stype = F@_5, name = F@_6, desc = F@_7,
		 reqs = F@_8, reward = F@_9}.

d_field_p_yy_reward_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData);
d_field_p_yy_reward_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, NewFValue,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_yy_reward_act_id(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_act_id(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_p_yy_reward_act_id(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, F@_4, F@_5, F@_6, F@_7,
				   F@_8, F@_9, TrUserData).

d_field_p_yy_reward_level(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_level(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_p_yy_reward_level(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_yy_reward_type(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_type(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_p_yy_reward_type(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_yy_reward_stype(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_stype(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_p_yy_reward_stype(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_yy_reward_name(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_name(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_p_yy_reward_name(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, NewFValue, F@_7, F@_8,
				   F@_9, TrUserData).

d_field_p_yy_reward_desc(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_desc(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_p_yy_reward_desc(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, NewFValue, F@_8,
				   F@_9, TrUserData).

d_field_p_yy_reward_reqs(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_reqs(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, TrUserData);
d_field_p_yy_reward_reqs(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, _, F@_9,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, NewFValue,
				   F@_9, TrUserData).

d_field_p_yy_reward_reward(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, TrUserData)
    when N < 57 ->
    d_field_p_yy_reward_reward(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, TrUserData);
d_field_p_yy_reward_reward(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_reward(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				   NewFValue, TrUserData).

skip_varint_p_yy_reward(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData) ->
    skip_varint_p_yy_reward(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_p_yy_reward(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData) ->
    dfp_read_field_def_p_yy_reward(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_length_delimited_p_yy_reward(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_reward(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_length_delimited_p_yy_reward(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_reward(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_group_p_yy_reward(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_reward(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_32_p_yy_reward(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    dfp_read_field_def_p_yy_reward(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

skip_64_p_yy_reward(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData) ->
    dfp_read_field_def_p_yy_reward(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   TrUserData).

decode_msg_p_yy_task(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_task(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_task(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_task_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_p_yy_task(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_task_level(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_p_yy_task(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_task_count(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_p_yy_task(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_task_state(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_p_yy_task(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, _) ->
    #p_yy_task{id = F@_1, level = F@_2, count = F@_3,
	       state = F@_4};
dfp_read_field_def_p_yy_task(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_yy_task(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

dg_read_field_def_p_yy_task(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_task(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_p_yy_task(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_task_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      16 ->
	  d_field_p_yy_task_level(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      24 ->
	  d_field_p_yy_task_count(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      32 ->
	  d_field_p_yy_task_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_task(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    1 ->
		skip_64_p_yy_task(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData);
	    2 ->
		skip_length_delimited_p_yy_task(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_p_yy_task(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_p_yy_task(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  TrUserData)
	  end
    end;
dg_read_field_def_p_yy_task(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #p_yy_task{id = F@_1, level = F@_2, count = F@_3,
	       state = F@_4}.

d_field_p_yy_task_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_task_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_task_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_task(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, TrUserData).

d_field_p_yy_task_level(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_task_level(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_task_level(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_task(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, TrUserData).

d_field_p_yy_task_count(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_task_count(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_task_count(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_task(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, TrUserData).

d_field_p_yy_task_state(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_task_state(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_task_state(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_task(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, TrUserData).

skip_varint_p_yy_task(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_yy_task(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
skip_varint_p_yy_task(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_task(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_length_delimited_p_yy_task(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_task(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
skip_length_delimited_p_yy_task(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_task(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_group_p_yy_task(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_task(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_32_p_yy_task(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_task(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

skip_64_p_yy_task(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_task(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, TrUserData).

decode_msg_p_yy_gift(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_gift(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_gift(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_yy_gift_act_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_gift(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_yy_gift_stime(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_gift(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_yy_gift_etime(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_gift(<<32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_yy_gift_refund_time(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_gift(<<40, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    d_field_p_yy_gift_state(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_gift(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, F@_4, F@_5, _) ->
    #p_yy_gift{act_id = F@_1, stime = F@_2, etime = F@_3,
	       refund_time = F@_4, state = F@_5};
dfp_read_field_def_p_yy_gift(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_yy_gift(Other, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_yy_gift(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_gift(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
dg_read_field_def_p_yy_gift(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_gift_act_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, TrUserData);
      16 ->
	  d_field_p_yy_gift_stime(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      24 ->
	  d_field_p_yy_gift_etime(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      32 ->
	  d_field_p_yy_gift_refund_time(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_yy_gift_state(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_gift(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_yy_gift(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_yy_gift(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    3 ->
		skip_group_p_yy_gift(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_yy_gift(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_yy_gift(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, F@_5, _) ->
    #p_yy_gift{act_id = F@_1, stime = F@_2, etime = F@_3,
	       refund_time = F@_4, state = F@_5}.

d_field_p_yy_gift_act_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_gift_act_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_yy_gift_act_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_gift(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, F@_4, F@_5, TrUserData).

d_field_p_yy_gift_stime(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_gift_stime(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_yy_gift_stime(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_gift(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_yy_gift_etime(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_gift_etime(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_yy_gift_etime(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_gift(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, F@_4, F@_5, TrUserData).

d_field_p_yy_gift_refund_time(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_gift_refund_time(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_p_yy_gift_refund_time(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_gift(RestF, 0, 0, F@_1, F@_2,
				 F@_3, NewFValue, F@_5, TrUserData).

d_field_p_yy_gift_state(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_gift_state(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_yy_gift_state(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_gift(RestF, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_yy_gift(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_yy_gift(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, TrUserData);
skip_varint_p_yy_gift(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_gift(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_yy_gift(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_gift(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
skip_length_delimited_p_yy_gift(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_gift(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_group_p_yy_gift(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_gift(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_32_p_yy_gift(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_gift(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

skip_64_p_yy_gift(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_gift(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_yy_log(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_log(Bin, 0, 0,
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData),
				id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_log(<<9, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_log_role_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_p_yy_log(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_log_role_name(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_p_yy_log(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_log_item_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_p_yy_log(<<32, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_p_yy_log_item_num(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_p_yy_log(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, F@_4, _) ->
    #p_yy_log{role_id = F@_1, role_name = F@_2,
	      item_id = F@_3, item_num = F@_4};
dfp_read_field_def_p_yy_log(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, F@_4, TrUserData) ->
    dg_read_field_def_p_yy_log(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData).

dg_read_field_def_p_yy_log(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_log(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_p_yy_log(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_yy_log_role_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      18 ->
	  d_field_p_yy_log_role_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      24 ->
	  d_field_p_yy_log_item_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      32 ->
	  d_field_p_yy_log_item_num(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_log(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				     TrUserData);
	    1 ->
		skip_64_p_yy_log(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    2 ->
		skip_length_delimited_p_yy_log(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, TrUserData);
	    3 ->
		skip_group_p_yy_log(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_p_yy_log(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData)
	  end
    end;
dg_read_field_def_p_yy_log(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   F@_4, _) ->
    #p_yy_log{role_id = F@_1, role_name = F@_2,
	      item_id = F@_3, item_num = F@_4}.

d_field_p_yy_log_role_id(<<Value:64/little,
			   Rest/binary>>,
			 Z1, Z2, _, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_log(Rest, Z1, Z2,
				id(Value, TrUserData), F@_2, F@_3, F@_4,
				TrUserData).

d_field_p_yy_log_role_name(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_log_role_name(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_log_role_name(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_log(RestF, 0, 0, F@_1,
				NewFValue, F@_3, F@_4, TrUserData).

d_field_p_yy_log_item_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_log_item_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_log_item_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_log(RestF, 0, 0, F@_1, F@_2,
				NewFValue, F@_4, TrUserData).

d_field_p_yy_log_item_num(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_p_yy_log_item_num(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_p_yy_log_item_num(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_log(RestF, 0, 0, F@_1, F@_2,
				F@_3, NewFValue, TrUserData).

skip_varint_p_yy_log(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_p_yy_log(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
skip_varint_p_yy_log(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_log(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_length_delimited_p_yy_log(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_log(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				   TrUserData);
skip_length_delimited_p_yy_log(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_log(Rest2, 0, 0, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_group_p_yy_log(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_log(Rest, 0, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_32_p_yy_log(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_log(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

skip_64_p_yy_log(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_p_yy_log(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, TrUserData).

decode_msg_p_yy_lottery_item(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_lottery_item(Bin, 0, 0,
					 id(undefined, TrUserData),
					 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_lottery_item(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_p_yy_lottery_item_group(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_p_yy_lottery_item(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_p_yy_lottery_item_reward_id(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_p_yy_lottery_item(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #p_yy_lottery_item{group = F@_1, reward_id = F@_2};
dfp_read_field_def_p_yy_lottery_item(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_p_yy_lottery_item(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_p_yy_lottery_item(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_lottery_item(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_p_yy_lottery_item(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_lottery_item_group(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  d_field_p_yy_lottery_item_reward_id(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_lottery_item(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_p_yy_lottery_item(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_p_yy_lottery_item(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_p_yy_lottery_item(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_p_yy_lottery_item(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_p_yy_lottery_item(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #p_yy_lottery_item{group = F@_1, reward_id = F@_2}.

d_field_p_yy_lottery_item_group(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_yy_lottery_item_group(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_p_yy_lottery_item_group(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_lottery_item(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_p_yy_lottery_item_reward_id(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_p_yy_lottery_item_reward_id(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_p_yy_lottery_item_reward_id(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_lottery_item(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_p_yy_lottery_item(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_p_yy_lottery_item(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_p_yy_lottery_item(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_yy_lottery_item(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_p_yy_lottery_item(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_lottery_item(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_p_yy_lottery_item(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_lottery_item(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_p_yy_lottery_item(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_lottery_item(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_p_yy_lottery_item(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_yy_lottery_item(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_p_yy_lottery_item(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_p_yy_lottery_item(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_p_yy_shop(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_shop(Bin, 0, 0,
				 id(undefined, TrUserData),
				 id(undefined, TrUserData),
				 id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_shop(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_yy_shop_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_p_yy_shop(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_yy_shop_buy_num(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_p_yy_shop(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_p_yy_shop_progress(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_p_yy_shop(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #p_yy_shop{id = F@_1, buy_num = F@_2, progress = F@_3};
dfp_read_field_def_p_yy_shop(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_p_yy_shop(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_p_yy_shop(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_shop(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_p_yy_shop(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_shop_id(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      16 ->
	  d_field_p_yy_shop_buy_num(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      24 ->
	  d_field_p_yy_shop_progress(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_shop(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_p_yy_shop(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_p_yy_shop(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_p_yy_shop(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_p_yy_shop(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_p_yy_shop(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #p_yy_shop{id = F@_1, buy_num = F@_2, progress = F@_3}.

d_field_p_yy_shop_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_p_yy_shop_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_p_yy_shop_buy_num(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_buy_num(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_p_yy_shop_buy_num(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_p_yy_shop_progress(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_progress(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_p_yy_shop_progress(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_p_yy_shop(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_p_yy_shop(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_p_yy_shop(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_yy_shop(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_p_yy_shop(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_shop(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_p_yy_shop(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_shop(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_p_yy_shop(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_shop(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_p_yy_shop(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_yy_shop(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_p_yy_shop(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_p_yy_shop(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_p_yy_shop_log(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_shop_log(Bin, 0, 0,
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData),
				     id(undefined, TrUserData), TrUserData).

dfp_read_field_def_p_yy_shop_log(<<9, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_shop_log_role_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_log(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_shop_log_role_name(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_log(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_shop_log_suid(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_log(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_shop_log_shop_id(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_log(<<40, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    d_field_p_yy_shop_log_reward_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_log(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, F@_5, _) ->
    #p_yy_shop_log{role_id = F@_1, role_name = F@_2,
		   suid = F@_3, shop_id = F@_4, reward_id = F@_5};
dfp_read_field_def_p_yy_shop_log(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dg_read_field_def_p_yy_shop_log(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_p_yy_shop_log(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_shop_log(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
dg_read_field_def_p_yy_shop_log(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_p_yy_shop_log_role_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      18 ->
	  d_field_p_yy_shop_log_role_name(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      24 ->
	  d_field_p_yy_shop_log_suid(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, F@_5, TrUserData);
      32 ->
	  d_field_p_yy_shop_log_shop_id(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_yy_shop_log_reward_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_shop_log(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_yy_shop_log(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_yy_shop_log(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4, F@_5,
						    TrUserData);
	    3 ->
		skip_group_p_yy_shop_log(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
	    5 ->
		skip_32_p_yy_shop_log(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_yy_shop_log(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, F@_5, _) ->
    #p_yy_shop_log{role_id = F@_1, role_name = F@_2,
		   suid = F@_3, shop_id = F@_4, reward_id = F@_5}.

d_field_p_yy_shop_log_role_id(<<Value:64/little,
				Rest/binary>>,
			      Z1, Z2, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_shop_log(Rest, Z1, Z2,
				     id(Value, TrUserData), F@_2, F@_3, F@_4,
				     F@_5, TrUserData).

d_field_p_yy_shop_log_role_name(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_log_role_name(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_p_yy_shop_log_role_name(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_shop_log(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, F@_5, TrUserData).

d_field_p_yy_shop_log_suid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_log_suid(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData);
d_field_p_yy_shop_log_suid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop_log(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, F@_5, TrUserData).

d_field_p_yy_shop_log_shop_id(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_log_shop_id(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData);
d_field_p_yy_shop_log_shop_id(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop_log(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, F@_5, TrUserData).

d_field_p_yy_shop_log_reward_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_log_reward_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_p_yy_shop_log_reward_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop_log(RestF, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, NewFValue, TrUserData).

skip_varint_p_yy_shop_log(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    skip_varint_p_yy_shop_log(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData);
skip_varint_p_yy_shop_log(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_shop_log(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_p_yy_shop_log(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_shop_log(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
skip_length_delimited_p_yy_shop_log(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_shop_log(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_p_yy_shop_log(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_shop_log(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_p_yy_shop_log(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_shop_log(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_p_yy_shop_log(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_shop_log(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_p_yy_shop_reward_log(Bin, TrUserData) ->
    dfp_read_field_def_p_yy_shop_reward_log(Bin, 0, 0,
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    id(undefined, TrUserData),
					    TrUserData).

dfp_read_field_def_p_yy_shop_reward_log(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_p_yy_shop_reward_log_id(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_reward_log(<<17,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_p_yy_shop_reward_log_role_id(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_reward_log(<<26,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_p_yy_shop_reward_log_role_name(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_p_yy_shop_reward_log(<<32,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_p_yy_shop_reward_log_suid(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_reward_log(<<40,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    d_field_p_yy_shop_reward_log_num(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_p_yy_shop_reward_log(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #p_yy_shop_reward_log{id = F@_1, role_id = F@_2,
			  role_name = F@_3, suid = F@_4, num = F@_5};
dfp_read_field_def_p_yy_shop_reward_log(Other, Z1, Z2,
					F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    dg_read_field_def_p_yy_shop_reward_log(Other, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

dg_read_field_def_p_yy_shop_reward_log(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_p_yy_shop_reward_log(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
dg_read_field_def_p_yy_shop_reward_log(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_p_yy_shop_reward_log_id(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, TrUserData);
      17 ->
	  d_field_p_yy_shop_reward_log_role_id(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      26 ->
	  d_field_p_yy_shop_reward_log_role_name(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      32 ->
	  d_field_p_yy_shop_reward_log_suid(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, TrUserData);
      40 ->
	  d_field_p_yy_shop_reward_log_num(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_p_yy_shop_reward_log(Rest, 0, 0, F@_1, F@_2,
						 F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_p_yy_shop_reward_log(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_p_yy_shop_reward_log(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   F@_4, F@_5,
							   TrUserData);
	    3 ->
		skip_group_p_yy_shop_reward_log(Rest, Key bsr 3, 0,
						F@_1, F@_2, F@_3, F@_4, F@_5,
						TrUserData);
	    5 ->
		skip_32_p_yy_shop_reward_log(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_p_yy_shop_reward_log(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, _) ->
    #p_yy_shop_reward_log{id = F@_1, role_id = F@_2,
			  role_name = F@_3, suid = F@_4, num = F@_5}.

d_field_p_yy_shop_reward_log_id(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_reward_log_id(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData);
d_field_p_yy_shop_reward_log_id(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop_reward_log(RestF, 0, 0,
					    NewFValue, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

d_field_p_yy_shop_reward_log_role_id(<<Value:64/little,
				       Rest/binary>>,
				     Z1, Z2, F@_1, _, F@_3, F@_4, F@_5,
				     TrUserData) ->
    dfp_read_field_def_p_yy_shop_reward_log(Rest, Z1, Z2,
					    F@_1, id(Value, TrUserData), F@_3,
					    F@_4, F@_5, TrUserData).

d_field_p_yy_shop_reward_log_role_name(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_reward_log_role_name(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_p_yy_shop_reward_log_role_name(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_p_yy_shop_reward_log(RestF, 0, 0,
					    F@_1, F@_2, NewFValue, F@_4, F@_5,
					    TrUserData).

d_field_p_yy_shop_reward_log_suid(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_reward_log_suid(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, TrUserData);
d_field_p_yy_shop_reward_log_suid(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop_reward_log(RestF, 0, 0,
					    F@_1, F@_2, F@_3, NewFValue, F@_5,
					    TrUserData).

d_field_p_yy_shop_reward_log_num(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_p_yy_shop_reward_log_num(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_p_yy_shop_reward_log_num(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_p_yy_shop_reward_log(RestF, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, NewFValue,
					    TrUserData).

skip_varint_p_yy_shop_reward_log(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    skip_varint_p_yy_shop_reward_log(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_p_yy_shop_reward_log(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    dfp_read_field_def_p_yy_shop_reward_log(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_length_delimited_p_yy_shop_reward_log(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData)
    when N < 57 ->
    skip_length_delimited_p_yy_shop_reward_log(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, TrUserData);
skip_length_delimited_p_yy_shop_reward_log(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_p_yy_shop_reward_log(Rest2, 0, 0,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_group_p_yy_shop_reward_log(Bin, FNum, Z2, F@_1,
				F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_p_yy_shop_reward_log(Rest, 0, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_32_p_yy_shop_reward_log(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_shop_reward_log(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

skip_64_p_yy_shop_reward_log(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_p_yy_shop_reward_log(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

'decode_msg_map<int32,int32>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Bin, 0, 0,
					  id(0, TrUserData), id(0, TrUserData),
					  TrUserData).

'dfp_read_field_def_map<int32,int32>'(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_key'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<int32,int32>_value'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<int32,int32>'(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<int32,int32>'(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

'dg_read_field_def_map<int32,int32>'(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,int32>'(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
'dg_read_field_def_map<int32,int32>'(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,int32>_key'(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      16 ->
	  'd_field_map<int32,int32>_value'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		'skip_64_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,int32>'(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		'skip_group_map<int32,int32>'(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,int32>'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,int32>'(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<int32,int32>_key'(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_key'(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_key'(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

'd_field_map<int32,int32>_value'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,int32>_value'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<int32,int32>_value'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,int32>'(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

'skip_varint_map<int32,int32>'(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,int32>'(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
'skip_varint_map<int32,int32>'(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_length_delimited_map<int32,int32>'(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,int32>'(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
'skip_length_delimited_map<int32,int32>'(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,int32>'(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

'skip_group_map<int32,int32>'(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,int32>'(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

'skip_32_map<int32,int32>'(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'skip_64_map<int32,int32>'(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,int32>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'decode_msg_map<int32,p_yy_lottery_item>'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Bin,
						      0, 0, id(0, TrUserData),
						      id('$undef', TrUserData),
						      TrUserData).

'dfp_read_field_def_map<int32,p_yy_lottery_item>'(<<8,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'd_field_map<int32,p_yy_lottery_item>_key'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<int32,p_yy_lottery_item>'(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'd_field_map<int32,p_yy_lottery_item>_value'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<int32,p_yy_lottery_item>'(<<>>,
						  0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Other,
						  Z1, Z2, F@_1, F@_2,
						  TrUserData) ->
    'dg_read_field_def_map<int32,p_yy_lottery_item>'(Other,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'dg_read_field_def_map<int32,p_yy_lottery_item>'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<int32,p_yy_lottery_item>'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, TrUserData);
'dg_read_field_def_map<int32,p_yy_lottery_item>'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  'd_field_map<int32,p_yy_lottery_item>_key'(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_map<int32,p_yy_lottery_item>_value'(Rest, 0, 0,
						       F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<int32,p_yy_lottery_item>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    1 ->
		'skip_64_map<int32,p_yy_lottery_item>'(Rest, 0, 0, F@_1,
						       F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_map<int32,p_yy_lottery_item>'(Rest,
								     0, 0, F@_1,
								     F@_2,
								     TrUserData);
	    3 ->
		'skip_group_map<int32,p_yy_lottery_item>'(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, TrUserData);
	    5 ->
		'skip_32_map<int32,p_yy_lottery_item>'(Rest, 0, 0, F@_1,
						       F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_map<int32,p_yy_lottery_item>'(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<int32,p_yy_lottery_item>_key'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,p_yy_lottery_item>_key'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'd_field_map<int32,p_yy_lottery_item>_key'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(RestF,
						      0, 0, NewFValue, F@_2,
						      TrUserData).

'd_field_map<int32,p_yy_lottery_item>_value'(<<1:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<int32,p_yy_lottery_item>_value'(Rest,
						 N + 7, X bsl N + Acc, F@_1,
						 F@_2, TrUserData);
'd_field_map<int32,p_yy_lottery_item>_value'(<<0:1, X:7,
					       Rest/binary>>,
					     N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_p_yy_lottery_item(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(RestF,
						      0, 0, F@_1,
						      if Prev == '$undef' ->
							     NewFValue;
							 true ->
							     merge_msg_p_yy_lottery_item(Prev,
											 NewFValue,
											 TrUserData)
						      end,
						      TrUserData).

'skip_varint_map<int32,p_yy_lottery_item>'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<int32,p_yy_lottery_item>'(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
'skip_varint_map<int32,p_yy_lottery_item>'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

'skip_length_delimited_map<int32,p_yy_lottery_item>'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<int32,p_yy_lottery_item>'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2,
							 TrUserData);
'skip_length_delimited_map<int32,p_yy_lottery_item>'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Rest2,
						      0, 0, F@_1, F@_2,
						      TrUserData).

'skip_group_map<int32,p_yy_lottery_item>'(Bin, FNum, Z2,
					  F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Rest,
						      0, Z2, F@_1, F@_2,
						      TrUserData).

'skip_32_map<int32,p_yy_lottery_item>'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

'skip_64_map<int32,p_yy_lottery_item>'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<int32,p_yy_lottery_item>'(Rest,
						      Z1, Z2, F@_1, F@_2,
						      TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_yunying_list_tos ->
	  merge_msg_m_yunying_list_tos(Prev, New, TrUserData);
      m_yunying_list_toc ->
	  merge_msg_m_yunying_list_toc(Prev, New, TrUserData);
      m_yunying_start_toc ->
	  merge_msg_m_yunying_start_toc(Prev, New, TrUserData);
      m_yunying_stop_toc ->
	  merge_msg_m_yunying_stop_toc(Prev, New, TrUserData);
      m_yunying_fetch_tos ->
	  merge_msg_m_yunying_fetch_tos(Prev, New, TrUserData);
      m_yunying_fetch_toc ->
	  merge_msg_m_yunying_fetch_toc(Prev, New, TrUserData);
      m_yunying_update_toc ->
	  merge_msg_m_yunying_update_toc(Prev, New, TrUserData);
      m_yunying_info_tos ->
	  merge_msg_m_yunying_info_tos(Prev, New, TrUserData);
      m_yunying_info_toc ->
	  merge_msg_m_yunying_info_toc(Prev, New, TrUserData);
      m_yunying_gift_tos ->
	  merge_msg_m_yunying_gift_tos(Prev, New, TrUserData);
      m_yunying_gift_toc ->
	  merge_msg_m_yunying_gift_toc(Prev, New, TrUserData);
      m_yunying_gift_fetch_tos ->
	  merge_msg_m_yunying_gift_fetch_tos(Prev, New,
					     TrUserData);
      m_yunying_gift_fetch_toc ->
	  merge_msg_m_yunying_gift_fetch_toc(Prev, New,
					     TrUserData);
      m_yunying_logs_tos ->
	  merge_msg_m_yunying_logs_tos(Prev, New, TrUserData);
      m_yunying_logs_toc ->
	  merge_msg_m_yunying_logs_toc(Prev, New, TrUserData);
      m_yunying_lottery_info_tos ->
	  merge_msg_m_yunying_lottery_info_tos(Prev, New,
					       TrUserData);
      m_yunying_lottery_info_toc ->
	  merge_msg_m_yunying_lottery_info_toc(Prev, New,
					       TrUserData);
      m_yunying_lottery_do_tos ->
	  merge_msg_m_yunying_lottery_do_tos(Prev, New,
					     TrUserData);
      m_yunying_lottery_do_toc ->
	  merge_msg_m_yunying_lottery_do_toc(Prev, New,
					     TrUserData);
      m_yunying_lottery_refresh_tos ->
	  merge_msg_m_yunying_lottery_refresh_tos(Prev, New,
						  TrUserData);
      m_yunying_lottery_refresh_toc ->
	  merge_msg_m_yunying_lottery_refresh_toc(Prev, New,
						  TrUserData);
      m_yunying_logs_update_toc ->
	  merge_msg_m_yunying_logs_update_toc(Prev, New,
					      TrUserData);
      m_yunying_lottery_draw_tos ->
	  merge_msg_m_yunying_lottery_draw_tos(Prev, New,
					       TrUserData);
      m_yunying_lottery_draw_toc ->
	  merge_msg_m_yunying_lottery_draw_toc(Prev, New,
					       TrUserData);
      m_yunying_lotoinfo_tos ->
	  merge_msg_m_yunying_lotoinfo_tos(Prev, New, TrUserData);
      m_yunying_lotoinfo_toc ->
	  merge_msg_m_yunying_lotoinfo_toc(Prev, New, TrUserData);
      m_yunying_loto_tos ->
	  merge_msg_m_yunying_loto_tos(Prev, New, TrUserData);
      m_yunying_loto_toc ->
	  merge_msg_m_yunying_loto_toc(Prev, New, TrUserData);
      m_yunying_loto_progress_toc ->
	  merge_msg_m_yunying_loto_progress_toc(Prev, New,
						TrUserData);
      m_yunying_shop_info_tos ->
	  merge_msg_m_yunying_shop_info_tos(Prev, New,
					    TrUserData);
      m_yunying_shop_info_toc ->
	  merge_msg_m_yunying_shop_info_toc(Prev, New,
					    TrUserData);
      m_yunying_shop_buy_tos ->
	  merge_msg_m_yunying_shop_buy_tos(Prev, New, TrUserData);
      m_yunying_shop_buy_toc ->
	  merge_msg_m_yunying_shop_buy_toc(Prev, New, TrUserData);
      m_yunying_shop_reward_log_tos ->
	  merge_msg_m_yunying_shop_reward_log_tos(Prev, New,
						  TrUserData);
      m_yunying_shop_reward_log_toc ->
	  merge_msg_m_yunying_shop_reward_log_toc(Prev, New,
						  TrUserData);
      p_yy_activity ->
	  merge_msg_p_yy_activity(Prev, New, TrUserData);
      p_yy_reward ->
	  merge_msg_p_yy_reward(Prev, New, TrUserData);
      p_yy_task -> merge_msg_p_yy_task(Prev, New, TrUserData);
      p_yy_gift -> merge_msg_p_yy_gift(Prev, New, TrUserData);
      p_yy_log -> merge_msg_p_yy_log(Prev, New, TrUserData);
      p_yy_lottery_item ->
	  merge_msg_p_yy_lottery_item(Prev, New, TrUserData);
      p_yy_shop -> merge_msg_p_yy_shop(Prev, New, TrUserData);
      p_yy_shop_log ->
	  merge_msg_p_yy_shop_log(Prev, New, TrUserData);
      p_yy_shop_reward_log ->
	  merge_msg_p_yy_shop_reward_log(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_m_yunying_list_tos/3}).
merge_msg_m_yunying_list_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_yunying_list_toc/3}).
merge_msg_m_yunying_list_toc(#m_yunying_list_toc{activities
						     = PFactivities},
			     #m_yunying_list_toc{activities = NFactivities},
			     TrUserData) ->
    #m_yunying_list_toc{activities =
			    if PFactivities /= undefined,
			       NFactivities /= undefined ->
				   'erlang_++'(PFactivities, NFactivities,
					       TrUserData);
			       PFactivities == undefined -> NFactivities;
			       NFactivities == undefined -> PFactivities
			    end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_start_toc/3}).
merge_msg_m_yunying_start_toc(#m_yunying_start_toc{activity
						       = PFactivity},
			      #m_yunying_start_toc{activity = NFactivity},
			      TrUserData) ->
    #m_yunying_start_toc{activity =
			     merge_msg_p_yy_activity(PFactivity, NFactivity,
						     TrUserData)}.

-compile({nowarn_unused_function,merge_msg_m_yunying_stop_toc/3}).
merge_msg_m_yunying_stop_toc(#m_yunying_stop_toc{},
			     #m_yunying_stop_toc{id = NFid}, _) ->
    #m_yunying_stop_toc{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_yunying_fetch_tos/3}).
merge_msg_m_yunying_fetch_tos(#m_yunying_fetch_tos{},
			      #m_yunying_fetch_tos{act_id = NFact_id, id = NFid,
						   level = NFlevel},
			      _) ->
    #m_yunying_fetch_tos{act_id = NFact_id, id = NFid,
			 level = NFlevel}.

-compile({nowarn_unused_function,merge_msg_m_yunying_fetch_toc/3}).
merge_msg_m_yunying_fetch_toc(#m_yunying_fetch_toc{reward
						       = PFreward},
			      #m_yunying_fetch_toc{act_id = NFact_id, id = NFid,
						   reward = NFreward},
			      TrUserData) ->
    #m_yunying_fetch_toc{act_id = NFact_id, id = NFid,
			 reward =
			     if PFreward /= undefined, NFreward /= undefined ->
				    'tr_merge_m_yunying_fetch_toc.reward'(PFreward,
									  NFreward,
									  TrUserData);
				PFreward == undefined -> NFreward;
				NFreward == undefined -> PFreward
			     end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_update_toc/3}).
merge_msg_m_yunying_update_toc(#m_yunying_update_toc{rewards
							 = PFrewards},
			       #m_yunying_update_toc{type = NFtype,
						     rewards = NFrewards},
			       TrUserData) ->
    #m_yunying_update_toc{type = NFtype,
			  rewards =
			      if PFrewards /= undefined,
				 NFrewards /= undefined ->
				     'erlang_++'(PFrewards, NFrewards,
						 TrUserData);
				 PFrewards == undefined -> NFrewards;
				 NFrewards == undefined -> PFrewards
			      end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_info_tos/3}).
merge_msg_m_yunying_info_tos(#m_yunying_info_tos{},
			     #m_yunying_info_tos{id = NFid}, _) ->
    #m_yunying_info_tos{id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_yunying_info_toc/3}).
merge_msg_m_yunying_info_toc(#m_yunying_info_toc{tasks =
						     PFtasks},
			     #m_yunying_info_toc{id = NFid, tasks = NFtasks},
			     TrUserData) ->
    #m_yunying_info_toc{id = NFid,
			tasks =
			    if PFtasks /= undefined, NFtasks /= undefined ->
				   'erlang_++'(PFtasks, NFtasks, TrUserData);
			       PFtasks == undefined -> NFtasks;
			       NFtasks == undefined -> PFtasks
			    end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_gift_tos/3}).
merge_msg_m_yunying_gift_tos(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_m_yunying_gift_toc/3}).
merge_msg_m_yunying_gift_toc(#m_yunying_gift_toc{list =
						     PFlist},
			     #m_yunying_gift_toc{list = NFlist}, TrUserData) ->
    #m_yunying_gift_toc{list =
			    if PFlist /= undefined, NFlist /= undefined ->
				   'erlang_++'(PFlist, NFlist, TrUserData);
			       PFlist == undefined -> NFlist;
			       NFlist == undefined -> PFlist
			    end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_gift_fetch_tos/3}).
merge_msg_m_yunying_gift_fetch_tos(#m_yunying_gift_fetch_tos{},
				   #m_yunying_gift_fetch_tos{act_id = NFact_id,
							     id = NFid},
				   _) ->
    #m_yunying_gift_fetch_tos{act_id = NFact_id, id = NFid}.

-compile({nowarn_unused_function,merge_msg_m_yunying_gift_fetch_toc/3}).
merge_msg_m_yunying_gift_fetch_toc(#m_yunying_gift_fetch_toc{gift
								 = PFgift},
				   #m_yunying_gift_fetch_toc{gift = NFgift},
				   TrUserData) ->
    #m_yunying_gift_fetch_toc{gift =
				  merge_msg_p_yy_gift(PFgift, NFgift,
						      TrUserData)}.

-compile({nowarn_unused_function,merge_msg_m_yunying_logs_tos/3}).
merge_msg_m_yunying_logs_tos(#m_yunying_logs_tos{},
			     #m_yunying_logs_tos{act_id = NFact_id}, _) ->
    #m_yunying_logs_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_logs_toc/3}).
merge_msg_m_yunying_logs_toc(#m_yunying_logs_toc{logs =
						     PFlogs},
			     #m_yunying_logs_toc{act_id = NFact_id,
						 logs = NFlogs},
			     TrUserData) ->
    #m_yunying_logs_toc{act_id = NFact_id,
			logs =
			    if PFlogs /= undefined, NFlogs /= undefined ->
				   'erlang_++'(PFlogs, NFlogs, TrUserData);
			       PFlogs == undefined -> NFlogs;
			       NFlogs == undefined -> PFlogs
			    end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_info_tos/3}).
merge_msg_m_yunying_lottery_info_tos(#m_yunying_lottery_info_tos{},
				     #m_yunying_lottery_info_tos{act_id =
								     NFact_id},
				     _) ->
    #m_yunying_lottery_info_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_info_toc/3}).
merge_msg_m_yunying_lottery_info_toc(#m_yunying_lottery_info_toc{items
								     = PFitems},
				     #m_yunying_lottery_info_toc{act_id =
								     NFact_id,
								 items =
								     NFitems,
								 free_refresh =
								     NFfree_refresh,
								 free_crack =
								     NFfree_crack,
								 crack =
								     NFcrack},
				     TrUserData) ->
    #m_yunying_lottery_info_toc{act_id = NFact_id,
				items =
				    if PFitems /= undefined,
				       NFitems /= undefined ->
					   'tr_merge_m_yunying_lottery_info_toc.items'(PFitems,
										       NFitems,
										       TrUserData);
				       PFitems == undefined -> NFitems;
				       NFitems == undefined -> PFitems
				    end,
				free_refresh = NFfree_refresh,
				free_crack = NFfree_crack, crack = NFcrack}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_do_tos/3}).
merge_msg_m_yunying_lottery_do_tos(#m_yunying_lottery_do_tos{},
				   #m_yunying_lottery_do_tos{act_id = NFact_id,
							     pos = NFpos},
				   _) ->
    #m_yunying_lottery_do_tos{act_id = NFact_id,
			      pos = NFpos}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_do_toc/3}).
merge_msg_m_yunying_lottery_do_toc(#m_yunying_lottery_do_toc{items
								 = PFitems},
				   #m_yunying_lottery_do_toc{act_id = NFact_id,
							     items = NFitems,
							     free_crack =
								 NFfree_crack,
							     free_refresh =
								 NFfree_refresh,
							     crack = NFcrack},
				   TrUserData) ->
    #m_yunying_lottery_do_toc{act_id = NFact_id,
			      items =
				  if PFitems /= undefined,
				     NFitems /= undefined ->
					 'tr_merge_m_yunying_lottery_do_toc.items'(PFitems,
										   NFitems,
										   TrUserData);
				     PFitems == undefined -> NFitems;
				     NFitems == undefined -> PFitems
				  end,
			      free_crack = NFfree_crack,
			      free_refresh = NFfree_refresh, crack = NFcrack}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_refresh_tos/3}).
merge_msg_m_yunying_lottery_refresh_tos(#m_yunying_lottery_refresh_tos{},
					#m_yunying_lottery_refresh_tos{act_id =
									   NFact_id},
					_) ->
    #m_yunying_lottery_refresh_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_refresh_toc/3}).
merge_msg_m_yunying_lottery_refresh_toc(#m_yunying_lottery_refresh_toc{items
									   =
									   PFitems},
					#m_yunying_lottery_refresh_toc{act_id =
									   NFact_id,
								       items =
									   NFitems,
								       free_refresh
									   =
									   NFfree_refresh},
					TrUserData) ->
    #m_yunying_lottery_refresh_toc{act_id = NFact_id,
				   items =
				       if PFitems /= undefined,
					  NFitems /= undefined ->
					      'tr_merge_m_yunying_lottery_refresh_toc.items'(PFitems,
											     NFitems,
											     TrUserData);
					  PFitems == undefined -> NFitems;
					  NFitems == undefined -> PFitems
				       end,
				   free_refresh = NFfree_refresh}.

-compile({nowarn_unused_function,merge_msg_m_yunying_logs_update_toc/3}).
merge_msg_m_yunying_logs_update_toc(#m_yunying_logs_update_toc{log
								   = PFlog},
				    #m_yunying_logs_update_toc{act_id =
								   NFact_id,
							       log = NFlog},
				    TrUserData) ->
    #m_yunying_logs_update_toc{act_id = NFact_id,
			       log =
				   merge_msg_p_yy_log(PFlog, NFlog,
						      TrUserData)}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_draw_tos/3}).
merge_msg_m_yunying_lottery_draw_tos(#m_yunying_lottery_draw_tos{},
				     #m_yunying_lottery_draw_tos{act_id =
								     NFact_id,
								 times =
								     NFtimes},
				     _) ->
    #m_yunying_lottery_draw_tos{act_id = NFact_id,
				times = NFtimes}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lottery_draw_toc/3}).
merge_msg_m_yunying_lottery_draw_toc(#m_yunying_lottery_draw_toc{reward_ids
								     =
								     PFreward_ids},
				     #m_yunying_lottery_draw_toc{act_id =
								     NFact_id,
								 reward_ids =
								     NFreward_ids},
				     TrUserData) ->
    #m_yunying_lottery_draw_toc{act_id = NFact_id,
				reward_ids =
				    if PFreward_ids /= undefined,
				       NFreward_ids /= undefined ->
					   'erlang_++'(PFreward_ids,
						       NFreward_ids,
						       TrUserData);
				       PFreward_ids == undefined ->
					   NFreward_ids;
				       NFreward_ids == undefined -> PFreward_ids
				    end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lotoinfo_tos/3}).
merge_msg_m_yunying_lotoinfo_tos(#m_yunying_lotoinfo_tos{},
				 #m_yunying_lotoinfo_tos{act_id = NFact_id},
				 _) ->
    #m_yunying_lotoinfo_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_lotoinfo_toc/3}).
merge_msg_m_yunying_lotoinfo_toc(#m_yunying_lotoinfo_toc{round
							     = PFround,
							 hits = PFhits},
				 #m_yunying_lotoinfo_toc{act_id = NFact_id,
							 progress = NFprogress,
							 round = NFround,
							 hits = NFhits},
				 TrUserData) ->
    #m_yunying_lotoinfo_toc{act_id = NFact_id,
			    progress = NFprogress,
			    round =
				if NFround =:= undefined -> PFround;
				   true -> NFround
				end,
			    hits =
				if PFhits /= undefined, NFhits /= undefined ->
				       'erlang_++'(PFhits, NFhits, TrUserData);
				   PFhits == undefined -> NFhits;
				   NFhits == undefined -> PFhits
				end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_loto_tos/3}).
merge_msg_m_yunying_loto_tos(#m_yunying_loto_tos{},
			     #m_yunying_loto_tos{act_id = NFact_id}, _) ->
    #m_yunying_loto_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_loto_toc/3}).
merge_msg_m_yunying_loto_toc(#m_yunying_loto_toc{},
			     #m_yunying_loto_toc{act_id = NFact_id, hit = NFhit,
						 progress = NFprogress},
			     _) ->
    #m_yunying_loto_toc{act_id = NFact_id, hit = NFhit,
			progress = NFprogress}.

-compile({nowarn_unused_function,merge_msg_m_yunying_loto_progress_toc/3}).
merge_msg_m_yunying_loto_progress_toc(#m_yunying_loto_progress_toc{},
				      #m_yunying_loto_progress_toc{act_id =
								       NFact_id,
								   progress =
								       NFprogress},
				      _) ->
    #m_yunying_loto_progress_toc{act_id = NFact_id,
				 progress = NFprogress}.

-compile({nowarn_unused_function,merge_msg_m_yunying_shop_info_tos/3}).
merge_msg_m_yunying_shop_info_tos(#m_yunying_shop_info_tos{},
				  #m_yunying_shop_info_tos{act_id = NFact_id},
				  _) ->
    #m_yunying_shop_info_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_shop_info_toc/3}).
merge_msg_m_yunying_shop_info_toc(#m_yunying_shop_info_toc{list
							       = PFlist,
							   logs = PFlogs},
				  #m_yunying_shop_info_toc{act_id = NFact_id,
							   list = NFlist,
							   logs = NFlogs,
							   reward_time =
							       NFreward_time,
							   unlimit_sec =
							       NFunlimit_sec},
				  TrUserData) ->
    #m_yunying_shop_info_toc{act_id = NFact_id,
			     list =
				 if PFlist /= undefined, NFlist /= undefined ->
					'erlang_++'(PFlist, NFlist, TrUserData);
				    PFlist == undefined -> NFlist;
				    NFlist == undefined -> PFlist
				 end,
			     logs =
				 if PFlogs /= undefined, NFlogs /= undefined ->
					'erlang_++'(PFlogs, NFlogs, TrUserData);
				    PFlogs == undefined -> NFlogs;
				    NFlogs == undefined -> PFlogs
				 end,
			     reward_time = NFreward_time,
			     unlimit_sec = NFunlimit_sec}.

-compile({nowarn_unused_function,merge_msg_m_yunying_shop_buy_tos/3}).
merge_msg_m_yunying_shop_buy_tos(#m_yunying_shop_buy_tos{},
				 #m_yunying_shop_buy_tos{act_id = NFact_id,
							 shop_id = NFshop_id,
							 num = NFnum},
				 _) ->
    #m_yunying_shop_buy_tos{act_id = NFact_id,
			    shop_id = NFshop_id, num = NFnum}.

-compile({nowarn_unused_function,merge_msg_m_yunying_shop_buy_toc/3}).
merge_msg_m_yunying_shop_buy_toc(#m_yunying_shop_buy_toc{shop
							     = PFshop,
							 logs = PFlogs},
				 #m_yunying_shop_buy_toc{act_id = NFact_id,
							 shop = NFshop,
							 logs = NFlogs},
				 TrUserData) ->
    #m_yunying_shop_buy_toc{act_id = NFact_id,
			    shop =
				merge_msg_p_yy_shop(PFshop, NFshop, TrUserData),
			    logs =
				if PFlogs /= undefined, NFlogs /= undefined ->
				       'erlang_++'(PFlogs, NFlogs, TrUserData);
				   PFlogs == undefined -> NFlogs;
				   NFlogs == undefined -> PFlogs
				end}.

-compile({nowarn_unused_function,merge_msg_m_yunying_shop_reward_log_tos/3}).
merge_msg_m_yunying_shop_reward_log_tos(#m_yunying_shop_reward_log_tos{},
					#m_yunying_shop_reward_log_tos{act_id =
									   NFact_id},
					_) ->
    #m_yunying_shop_reward_log_tos{act_id = NFact_id}.

-compile({nowarn_unused_function,merge_msg_m_yunying_shop_reward_log_toc/3}).
merge_msg_m_yunying_shop_reward_log_toc(#m_yunying_shop_reward_log_toc{logs
									   =
									   PFlogs},
					#m_yunying_shop_reward_log_toc{act_id =
									   NFact_id,
								       logs =
									   NFlogs},
					TrUserData) ->
    #m_yunying_shop_reward_log_toc{act_id = NFact_id,
				   logs =
				       if PFlogs /= undefined,
					  NFlogs /= undefined ->
					      'erlang_++'(PFlogs, NFlogs,
							  TrUserData);
					  PFlogs == undefined -> NFlogs;
					  NFlogs == undefined -> PFlogs
				       end}.

-compile({nowarn_unused_function,merge_msg_p_yy_activity/3}).
merge_msg_p_yy_activity(#p_yy_activity{},
			#p_yy_activity{id = NFid, act_stime = NFact_stime,
				       act_etime = NFact_etime,
				       show_stime = NFshow_stime,
				       show_etime = NFshow_etime},
			_) ->
    #p_yy_activity{id = NFid, act_stime = NFact_stime,
		   act_etime = NFact_etime, show_stime = NFshow_stime,
		   show_etime = NFshow_etime}.

-compile({nowarn_unused_function,merge_msg_p_yy_reward/3}).
merge_msg_p_yy_reward(#p_yy_reward{},
		      #p_yy_reward{id = NFid, act_id = NFact_id,
				   level = NFlevel, type = NFtype,
				   stype = NFstype, name = NFname,
				   desc = NFdesc, reqs = NFreqs,
				   reward = NFreward},
		      _) ->
    #p_yy_reward{id = NFid, act_id = NFact_id,
		 level = NFlevel, type = NFtype, stype = NFstype,
		 name = NFname, desc = NFdesc, reqs = NFreqs,
		 reward = NFreward}.

-compile({nowarn_unused_function,merge_msg_p_yy_task/3}).
merge_msg_p_yy_task(#p_yy_task{},
		    #p_yy_task{id = NFid, level = NFlevel, count = NFcount,
			       state = NFstate},
		    _) ->
    #p_yy_task{id = NFid, level = NFlevel, count = NFcount,
	       state = NFstate}.

-compile({nowarn_unused_function,merge_msg_p_yy_gift/3}).
merge_msg_p_yy_gift(#p_yy_gift{},
		    #p_yy_gift{act_id = NFact_id, stime = NFstime,
			       etime = NFetime, refund_time = NFrefund_time,
			       state = NFstate},
		    _) ->
    #p_yy_gift{act_id = NFact_id, stime = NFstime,
	       etime = NFetime, refund_time = NFrefund_time,
	       state = NFstate}.

-compile({nowarn_unused_function,merge_msg_p_yy_log/3}).
merge_msg_p_yy_log(#p_yy_log{},
		   #p_yy_log{role_id = NFrole_id, role_name = NFrole_name,
			     item_id = NFitem_id, item_num = NFitem_num},
		   _) ->
    #p_yy_log{role_id = NFrole_id, role_name = NFrole_name,
	      item_id = NFitem_id, item_num = NFitem_num}.

-compile({nowarn_unused_function,merge_msg_p_yy_lottery_item/3}).
merge_msg_p_yy_lottery_item(#p_yy_lottery_item{},
			    #p_yy_lottery_item{group = NFgroup,
					       reward_id = NFreward_id},
			    _) ->
    #p_yy_lottery_item{group = NFgroup,
		       reward_id = NFreward_id}.

-compile({nowarn_unused_function,merge_msg_p_yy_shop/3}).
merge_msg_p_yy_shop(#p_yy_shop{},
		    #p_yy_shop{id = NFid, buy_num = NFbuy_num,
			       progress = NFprogress},
		    _) ->
    #p_yy_shop{id = NFid, buy_num = NFbuy_num,
	       progress = NFprogress}.

-compile({nowarn_unused_function,merge_msg_p_yy_shop_log/3}).
merge_msg_p_yy_shop_log(#p_yy_shop_log{},
			#p_yy_shop_log{role_id = NFrole_id,
				       role_name = NFrole_name, suid = NFsuid,
				       shop_id = NFshop_id,
				       reward_id = NFreward_id},
			_) ->
    #p_yy_shop_log{role_id = NFrole_id,
		   role_name = NFrole_name, suid = NFsuid,
		   shop_id = NFshop_id, reward_id = NFreward_id}.

-compile({nowarn_unused_function,merge_msg_p_yy_shop_reward_log/3}).
merge_msg_p_yy_shop_reward_log(#p_yy_shop_reward_log{},
			       #p_yy_shop_reward_log{id = NFid,
						     role_id = NFrole_id,
						     role_name = NFrole_name,
						     suid = NFsuid,
						     num = NFnum},
			       _) ->
    #p_yy_shop_reward_log{id = NFid, role_id = NFrole_id,
			  role_name = NFrole_name, suid = NFsuid, num = NFnum}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      m_yunying_list_tos ->
	  v_msg_m_yunying_list_tos(Msg, [MsgName], TrUserData);
      m_yunying_list_toc ->
	  v_msg_m_yunying_list_toc(Msg, [MsgName], TrUserData);
      m_yunying_start_toc ->
	  v_msg_m_yunying_start_toc(Msg, [MsgName], TrUserData);
      m_yunying_stop_toc ->
	  v_msg_m_yunying_stop_toc(Msg, [MsgName], TrUserData);
      m_yunying_fetch_tos ->
	  v_msg_m_yunying_fetch_tos(Msg, [MsgName], TrUserData);
      m_yunying_fetch_toc ->
	  v_msg_m_yunying_fetch_toc(Msg, [MsgName], TrUserData);
      m_yunying_update_toc ->
	  v_msg_m_yunying_update_toc(Msg, [MsgName], TrUserData);
      m_yunying_info_tos ->
	  v_msg_m_yunying_info_tos(Msg, [MsgName], TrUserData);
      m_yunying_info_toc ->
	  v_msg_m_yunying_info_toc(Msg, [MsgName], TrUserData);
      m_yunying_gift_tos ->
	  v_msg_m_yunying_gift_tos(Msg, [MsgName], TrUserData);
      m_yunying_gift_toc ->
	  v_msg_m_yunying_gift_toc(Msg, [MsgName], TrUserData);
      m_yunying_gift_fetch_tos ->
	  v_msg_m_yunying_gift_fetch_tos(Msg, [MsgName],
					 TrUserData);
      m_yunying_gift_fetch_toc ->
	  v_msg_m_yunying_gift_fetch_toc(Msg, [MsgName],
					 TrUserData);
      m_yunying_logs_tos ->
	  v_msg_m_yunying_logs_tos(Msg, [MsgName], TrUserData);
      m_yunying_logs_toc ->
	  v_msg_m_yunying_logs_toc(Msg, [MsgName], TrUserData);
      m_yunying_lottery_info_tos ->
	  v_msg_m_yunying_lottery_info_tos(Msg, [MsgName],
					   TrUserData);
      m_yunying_lottery_info_toc ->
	  v_msg_m_yunying_lottery_info_toc(Msg, [MsgName],
					   TrUserData);
      m_yunying_lottery_do_tos ->
	  v_msg_m_yunying_lottery_do_tos(Msg, [MsgName],
					 TrUserData);
      m_yunying_lottery_do_toc ->
	  v_msg_m_yunying_lottery_do_toc(Msg, [MsgName],
					 TrUserData);
      m_yunying_lottery_refresh_tos ->
	  v_msg_m_yunying_lottery_refresh_tos(Msg, [MsgName],
					      TrUserData);
      m_yunying_lottery_refresh_toc ->
	  v_msg_m_yunying_lottery_refresh_toc(Msg, [MsgName],
					      TrUserData);
      m_yunying_logs_update_toc ->
	  v_msg_m_yunying_logs_update_toc(Msg, [MsgName],
					  TrUserData);
      m_yunying_lottery_draw_tos ->
	  v_msg_m_yunying_lottery_draw_tos(Msg, [MsgName],
					   TrUserData);
      m_yunying_lottery_draw_toc ->
	  v_msg_m_yunying_lottery_draw_toc(Msg, [MsgName],
					   TrUserData);
      m_yunying_lotoinfo_tos ->
	  v_msg_m_yunying_lotoinfo_tos(Msg, [MsgName],
				       TrUserData);
      m_yunying_lotoinfo_toc ->
	  v_msg_m_yunying_lotoinfo_toc(Msg, [MsgName],
				       TrUserData);
      m_yunying_loto_tos ->
	  v_msg_m_yunying_loto_tos(Msg, [MsgName], TrUserData);
      m_yunying_loto_toc ->
	  v_msg_m_yunying_loto_toc(Msg, [MsgName], TrUserData);
      m_yunying_loto_progress_toc ->
	  v_msg_m_yunying_loto_progress_toc(Msg, [MsgName],
					    TrUserData);
      m_yunying_shop_info_tos ->
	  v_msg_m_yunying_shop_info_tos(Msg, [MsgName],
					TrUserData);
      m_yunying_shop_info_toc ->
	  v_msg_m_yunying_shop_info_toc(Msg, [MsgName],
					TrUserData);
      m_yunying_shop_buy_tos ->
	  v_msg_m_yunying_shop_buy_tos(Msg, [MsgName],
				       TrUserData);
      m_yunying_shop_buy_toc ->
	  v_msg_m_yunying_shop_buy_toc(Msg, [MsgName],
				       TrUserData);
      m_yunying_shop_reward_log_tos ->
	  v_msg_m_yunying_shop_reward_log_tos(Msg, [MsgName],
					      TrUserData);
      m_yunying_shop_reward_log_toc ->
	  v_msg_m_yunying_shop_reward_log_toc(Msg, [MsgName],
					      TrUserData);
      p_yy_activity ->
	  v_msg_p_yy_activity(Msg, [MsgName], TrUserData);
      p_yy_reward ->
	  v_msg_p_yy_reward(Msg, [MsgName], TrUserData);
      p_yy_task ->
	  v_msg_p_yy_task(Msg, [MsgName], TrUserData);
      p_yy_gift ->
	  v_msg_p_yy_gift(Msg, [MsgName], TrUserData);
      p_yy_log -> v_msg_p_yy_log(Msg, [MsgName], TrUserData);
      p_yy_lottery_item ->
	  v_msg_p_yy_lottery_item(Msg, [MsgName], TrUserData);
      p_yy_shop ->
	  v_msg_p_yy_shop(Msg, [MsgName], TrUserData);
      p_yy_shop_log ->
	  v_msg_p_yy_shop_log(Msg, [MsgName], TrUserData);
      p_yy_shop_reward_log ->
	  v_msg_p_yy_shop_reward_log(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_m_yunying_list_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_list_tos/3}).
v_msg_m_yunying_list_tos(#m_yunying_list_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_yunying_list_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_list_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_list_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_list_toc/3}).
v_msg_m_yunying_list_toc(#m_yunying_list_toc{activities
						 = F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_yy_activity(Elem, [activities | Path],
				    TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_activity}},
			 F1, [activities | Path])
    end,
    ok;
v_msg_m_yunying_list_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_list_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_start_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_start_toc/3}).
v_msg_m_yunying_start_toc(#m_yunying_start_toc{activity
						   = F1},
			  Path, TrUserData) ->
    v_msg_p_yy_activity(F1, [activity | Path], TrUserData),
    ok;
v_msg_m_yunying_start_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_start_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_stop_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_stop_toc/3}).
v_msg_m_yunying_stop_toc(#m_yunying_stop_toc{id = F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_yunying_stop_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_stop_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_fetch_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_fetch_tos/3}).
v_msg_m_yunying_fetch_tos(#m_yunying_fetch_tos{act_id =
						   F1,
					       id = F2, level = F3},
			  Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    v_type_int32(F3, [level | Path], TrUserData),
    ok;
v_msg_m_yunying_fetch_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_fetch_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_fetch_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_fetch_toc/3}).
v_msg_m_yunying_fetch_toc(#m_yunying_fetch_toc{act_id =
						   F1,
					       id = F2, reward = F3},
			  Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    'v_map<int32,int32>'(F3, [reward | Path], TrUserData),
    ok;
v_msg_m_yunying_fetch_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_fetch_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_update_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_update_toc/3}).
v_msg_m_yunying_update_toc(#m_yunying_update_toc{type =
						     F1,
						 rewards = F2},
			   Path, TrUserData) ->
    v_type_int32(F1, [type | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_yy_reward(Elem, [rewards | Path],
				  TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_reward}}, F2,
			 [rewards | Path])
    end,
    ok;
v_msg_m_yunying_update_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_update_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_info_tos/3}).
v_msg_m_yunying_info_tos(#m_yunying_info_tos{id = F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData), ok;
v_msg_m_yunying_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_info_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_info_toc/3}).
v_msg_m_yunying_info_toc(#m_yunying_info_toc{id = F1,
					     tasks = F2},
			 Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_yy_task(Elem, [tasks | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_task}}, F2,
			 [tasks | Path])
    end,
    ok;
v_msg_m_yunying_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_info_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_gift_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_gift_tos/3}).
v_msg_m_yunying_gift_tos(#m_yunying_gift_tos{}, _Path,
			 _) ->
    ok;
v_msg_m_yunying_gift_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_gift_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_gift_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_gift_toc/3}).
v_msg_m_yunying_gift_toc(#m_yunying_gift_toc{list = F1},
			 Path, TrUserData) ->
    if is_list(F1) ->
	   _ = [v_msg_p_yy_gift(Elem, [list | Path], TrUserData)
		|| Elem <- F1],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_gift}}, F1,
			 [list | Path])
    end,
    ok;
v_msg_m_yunying_gift_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_gift_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_gift_fetch_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_gift_fetch_tos/3}).
v_msg_m_yunying_gift_fetch_tos(#m_yunying_gift_fetch_tos{act_id
							     = F1,
							 id = F2},
			       Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [id | Path], TrUserData),
    ok;
v_msg_m_yunying_gift_fetch_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_gift_fetch_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_gift_fetch_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_gift_fetch_toc/3}).
v_msg_m_yunying_gift_fetch_toc(#m_yunying_gift_fetch_toc{gift
							     = F1},
			       Path, TrUserData) ->
    v_msg_p_yy_gift(F1, [gift | Path], TrUserData), ok;
v_msg_m_yunying_gift_fetch_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_gift_fetch_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_logs_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_logs_tos/3}).
v_msg_m_yunying_logs_tos(#m_yunying_logs_tos{act_id =
						 F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_logs_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_logs_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_logs_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_logs_toc/3}).
v_msg_m_yunying_logs_toc(#m_yunying_logs_toc{act_id =
						 F1,
					     logs = F2},
			 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_yy_log(Elem, [logs | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_log}}, F2,
			 [logs | Path])
    end,
    ok;
v_msg_m_yunying_logs_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_logs_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_info_tos/3}).
v_msg_m_yunying_lottery_info_tos(#m_yunying_lottery_info_tos{act_id
								 = F1},
				 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_lottery_info_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_lottery_info_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_info_toc/3}).
v_msg_m_yunying_lottery_info_toc(#m_yunying_lottery_info_toc{act_id
								 = F1,
							     items = F2,
							     free_refresh = F3,
							     free_crack = F4,
							     crack = F5},
				 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    'v_map<int32,p_yy_lottery_item>'(F2, [items | Path],
				     TrUserData),
    v_type_int32(F3, [free_refresh | Path], TrUserData),
    v_type_int32(F4, [free_crack | Path], TrUserData),
    v_type_int32(F5, [crack | Path], TrUserData),
    ok;
v_msg_m_yunying_lottery_info_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_lottery_info_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_do_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_do_tos/3}).
v_msg_m_yunying_lottery_do_tos(#m_yunying_lottery_do_tos{act_id
							     = F1,
							 pos = F2},
			       Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [pos | Path], TrUserData),
    ok;
v_msg_m_yunying_lottery_do_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_lottery_do_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_do_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_do_toc/3}).
v_msg_m_yunying_lottery_do_toc(#m_yunying_lottery_do_toc{act_id
							     = F1,
							 items = F2,
							 free_crack = F3,
							 free_refresh = F4,
							 crack = F5},
			       Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    'v_map<int32,p_yy_lottery_item>'(F2, [items | Path],
				     TrUserData),
    v_type_int32(F3, [free_crack | Path], TrUserData),
    v_type_int32(F4, [free_refresh | Path], TrUserData),
    v_type_int32(F5, [crack | Path], TrUserData),
    ok;
v_msg_m_yunying_lottery_do_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_lottery_do_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_refresh_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_refresh_tos/3}).
v_msg_m_yunying_lottery_refresh_tos(#m_yunying_lottery_refresh_tos{act_id
								       = F1},
				    Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_lottery_refresh_tos(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_lottery_refresh_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_refresh_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_refresh_toc/3}).
v_msg_m_yunying_lottery_refresh_toc(#m_yunying_lottery_refresh_toc{act_id
								       = F1,
								   items = F2,
								   free_refresh
								       = F3},
				    Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    'v_map<int32,p_yy_lottery_item>'(F2, [items | Path],
				     TrUserData),
    v_type_int32(F3, [free_refresh | Path], TrUserData),
    ok;
v_msg_m_yunying_lottery_refresh_toc(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_lottery_refresh_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_logs_update_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_logs_update_toc/3}).
v_msg_m_yunying_logs_update_toc(#m_yunying_logs_update_toc{act_id
							       = F1,
							   log = F2},
				Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_msg_p_yy_log(F2, [log | Path], TrUserData),
    ok;
v_msg_m_yunying_logs_update_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_logs_update_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_draw_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_draw_tos/3}).
v_msg_m_yunying_lottery_draw_tos(#m_yunying_lottery_draw_tos{act_id
								 = F1,
							     times = F2},
				 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [times | Path], TrUserData),
    ok;
v_msg_m_yunying_lottery_draw_tos(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_lottery_draw_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lottery_draw_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lottery_draw_toc/3}).
v_msg_m_yunying_lottery_draw_toc(#m_yunying_lottery_draw_toc{act_id
								 = F1,
							     reward_ids = F2},
				 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_type_int32(Elem, [reward_ids | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F2,
			 [reward_ids | Path])
    end,
    ok;
v_msg_m_yunying_lottery_draw_toc(X, Path,
				 _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_lottery_draw_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lotoinfo_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lotoinfo_tos/3}).
v_msg_m_yunying_lotoinfo_tos(#m_yunying_lotoinfo_tos{act_id
							 = F1},
			     Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_lotoinfo_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_lotoinfo_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_lotoinfo_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_lotoinfo_toc/3}).
v_msg_m_yunying_lotoinfo_toc(#m_yunying_lotoinfo_toc{act_id
							 = F1,
						     progress = F2, round = F3,
						     hits = F4},
			     Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [progress | Path], TrUserData),
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [round | Path], TrUserData)
    end,
    if is_list(F4) ->
	   _ = [v_type_int32(Elem, [hits | Path], TrUserData)
		|| Elem <- F4],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, int32}, F4,
			 [hits | Path])
    end,
    ok;
v_msg_m_yunying_lotoinfo_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_lotoinfo_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_loto_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_loto_tos/3}).
v_msg_m_yunying_loto_tos(#m_yunying_loto_tos{act_id =
						 F1},
			 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_loto_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_loto_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_loto_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_loto_toc/3}).
v_msg_m_yunying_loto_toc(#m_yunying_loto_toc{act_id =
						 F1,
					     hit = F2, progress = F3},
			 Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [hit | Path], TrUserData),
    v_type_int32(F3, [progress | Path], TrUserData),
    ok;
v_msg_m_yunying_loto_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_loto_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_loto_progress_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_loto_progress_toc/3}).
v_msg_m_yunying_loto_progress_toc(#m_yunying_loto_progress_toc{act_id
								   = F1,
							       progress = F2},
				  Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [progress | Path], TrUserData),
    ok;
v_msg_m_yunying_loto_progress_toc(X, Path,
				  _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_loto_progress_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_shop_info_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_shop_info_tos/3}).
v_msg_m_yunying_shop_info_tos(#m_yunying_shop_info_tos{act_id
							   = F1},
			      Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_shop_info_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_shop_info_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_shop_info_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_shop_info_toc/3}).
v_msg_m_yunying_shop_info_toc(#m_yunying_shop_info_toc{act_id
							   = F1,
						       list = F2, logs = F3,
						       reward_time = F4,
						       unlimit_sec = F5},
			      Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_yy_shop(Elem, [list | Path], TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_shop}}, F2,
			 [list | Path])
    end,
    if is_list(F3) ->
	   _ = [v_msg_p_yy_shop_log(Elem, [logs | Path],
				    TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_shop_log}},
			 F3, [logs | Path])
    end,
    v_type_int32(F4, [reward_time | Path], TrUserData),
    v_type_int32(F5, [unlimit_sec | Path], TrUserData),
    ok;
v_msg_m_yunying_shop_info_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_shop_info_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_shop_buy_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_shop_buy_tos/3}).
v_msg_m_yunying_shop_buy_tos(#m_yunying_shop_buy_tos{act_id
							 = F1,
						     shop_id = F2, num = F3},
			     Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [shop_id | Path], TrUserData),
    v_type_int32(F3, [num | Path], TrUserData),
    ok;
v_msg_m_yunying_shop_buy_tos(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_shop_buy_tos}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_shop_buy_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_shop_buy_toc/3}).
v_msg_m_yunying_shop_buy_toc(#m_yunying_shop_buy_toc{act_id
							 = F1,
						     shop = F2, logs = F3},
			     Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_msg_p_yy_shop(F2, [shop | Path], TrUserData),
    if is_list(F3) ->
	   _ = [v_msg_p_yy_shop_log(Elem, [logs | Path],
				    TrUserData)
		|| Elem <- F3],
	   ok;
       true ->
	   mk_type_error({invalid_list_of, {msg, p_yy_shop_log}},
			 F3, [logs | Path])
    end,
    ok;
v_msg_m_yunying_shop_buy_toc(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, m_yunying_shop_buy_toc}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_m_yunying_shop_reward_log_tos/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_shop_reward_log_tos/3}).
v_msg_m_yunying_shop_reward_log_tos(#m_yunying_shop_reward_log_tos{act_id
								       = F1},
				    Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData), ok;
v_msg_m_yunying_shop_reward_log_tos(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_shop_reward_log_tos},
		  X, Path).

-compile({nowarn_unused_function,v_msg_m_yunying_shop_reward_log_toc/3}).
-dialyzer({nowarn_function,v_msg_m_yunying_shop_reward_log_toc/3}).
v_msg_m_yunying_shop_reward_log_toc(#m_yunying_shop_reward_log_toc{act_id
								       = F1,
								   logs = F2},
				    Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    if is_list(F2) ->
	   _ = [v_msg_p_yy_shop_reward_log(Elem, [logs | Path],
					   TrUserData)
		|| Elem <- F2],
	   ok;
       true ->
	   mk_type_error({invalid_list_of,
			  {msg, p_yy_shop_reward_log}},
			 F2, [logs | Path])
    end,
    ok;
v_msg_m_yunying_shop_reward_log_toc(X, Path,
				    _TrUserData) ->
    mk_type_error({expected_msg,
		   m_yunying_shop_reward_log_toc},
		  X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_activity/3}).
-dialyzer({nowarn_function,v_msg_p_yy_activity/3}).
v_msg_p_yy_activity(#p_yy_activity{id = F1,
				   act_stime = F2, act_etime = F3,
				   show_stime = F4, show_etime = F5},
		    Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [act_stime | Path], TrUserData),
    v_type_int32(F3, [act_etime | Path], TrUserData),
    v_type_int32(F4, [show_stime | Path], TrUserData),
    v_type_int32(F5, [show_etime | Path], TrUserData),
    ok;
v_msg_p_yy_activity(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_activity}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_reward/3}).
-dialyzer({nowarn_function,v_msg_p_yy_reward/3}).
v_msg_p_yy_reward(#p_yy_reward{id = F1, act_id = F2,
			       level = F3, type = F4, stype = F5, name = F6,
			       desc = F7, reqs = F8, reward = F9},
		  Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [act_id | Path], TrUserData),
    v_type_int32(F3, [level | Path], TrUserData),
    v_type_int32(F4, [type | Path], TrUserData),
    v_type_int32(F5, [stype | Path], TrUserData),
    v_type_string(F6, [name | Path], TrUserData),
    v_type_string(F7, [desc | Path], TrUserData),
    v_type_string(F8, [reqs | Path], TrUserData),
    v_type_string(F9, [reward | Path], TrUserData),
    ok;
v_msg_p_yy_reward(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_reward}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_task/3}).
-dialyzer({nowarn_function,v_msg_p_yy_task/3}).
v_msg_p_yy_task(#p_yy_task{id = F1, level = F2,
			   count = F3, state = F4},
		Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [level | Path], TrUserData),
    v_type_int32(F3, [count | Path], TrUserData),
    v_type_int32(F4, [state | Path], TrUserData),
    ok;
v_msg_p_yy_task(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_task}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_gift/3}).
-dialyzer({nowarn_function,v_msg_p_yy_gift/3}).
v_msg_p_yy_gift(#p_yy_gift{act_id = F1, stime = F2,
			   etime = F3, refund_time = F4, state = F5},
		Path, TrUserData) ->
    v_type_int32(F1, [act_id | Path], TrUserData),
    v_type_int32(F2, [stime | Path], TrUserData),
    v_type_int32(F3, [etime | Path], TrUserData),
    v_type_int32(F4, [refund_time | Path], TrUserData),
    v_type_int32(F5, [state | Path], TrUserData),
    ok;
v_msg_p_yy_gift(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_gift}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_log/3}).
-dialyzer({nowarn_function,v_msg_p_yy_log/3}).
v_msg_p_yy_log(#p_yy_log{role_id = F1, role_name = F2,
			 item_id = F3, item_num = F4},
	       Path, TrUserData) ->
    v_type_fixed64(F1, [role_id | Path], TrUserData),
    v_type_string(F2, [role_name | Path], TrUserData),
    v_type_int32(F3, [item_id | Path], TrUserData),
    v_type_int32(F4, [item_num | Path], TrUserData),
    ok;
v_msg_p_yy_log(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_log}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_lottery_item/3}).
-dialyzer({nowarn_function,v_msg_p_yy_lottery_item/3}).
v_msg_p_yy_lottery_item(#p_yy_lottery_item{group = F1,
					   reward_id = F2},
			Path, TrUserData) ->
    v_type_int32(F1, [group | Path], TrUserData),
    v_type_int32(F2, [reward_id | Path], TrUserData),
    ok;
v_msg_p_yy_lottery_item(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_lottery_item}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_p_yy_shop/3}).
-dialyzer({nowarn_function,v_msg_p_yy_shop/3}).
v_msg_p_yy_shop(#p_yy_shop{id = F1, buy_num = F2,
			   progress = F3},
		Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_int32(F2, [buy_num | Path], TrUserData),
    v_type_int32(F3, [progress | Path], TrUserData),
    ok;
v_msg_p_yy_shop(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_shop}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_shop_log/3}).
-dialyzer({nowarn_function,v_msg_p_yy_shop_log/3}).
v_msg_p_yy_shop_log(#p_yy_shop_log{role_id = F1,
				   role_name = F2, suid = F3, shop_id = F4,
				   reward_id = F5},
		    Path, TrUserData) ->
    v_type_fixed64(F1, [role_id | Path], TrUserData),
    v_type_string(F2, [role_name | Path], TrUserData),
    v_type_int32(F3, [suid | Path], TrUserData),
    v_type_int32(F4, [shop_id | Path], TrUserData),
    v_type_int32(F5, [reward_id | Path], TrUserData),
    ok;
v_msg_p_yy_shop_log(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_shop_log}, X, Path).

-compile({nowarn_unused_function,v_msg_p_yy_shop_reward_log/3}).
-dialyzer({nowarn_function,v_msg_p_yy_shop_reward_log/3}).
v_msg_p_yy_shop_reward_log(#p_yy_shop_reward_log{id =
						     F1,
						 role_id = F2, role_name = F3,
						 suid = F4, num = F5},
			   Path, TrUserData) ->
    v_type_int32(F1, [id | Path], TrUserData),
    v_type_fixed64(F2, [role_id | Path], TrUserData),
    v_type_string(F3, [role_name | Path], TrUserData),
    v_type_int32(F4, [suid | Path], TrUserData),
    v_type_int32(F5, [num | Path], TrUserData),
    ok;
v_msg_p_yy_shop_reward_log(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, p_yy_shop_reward_log}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_fixed64/3}).
-dialyzer({nowarn_function,v_type_fixed64/3}).
v_type_fixed64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_fixed64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, fixed64, unsigned,
		   64},
		  N, Path);
v_type_fixed64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, fixed64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<int32,int32>'/3}).
-dialyzer({nowarn_function,'v_map<int32,int32>'/3}).
'v_map<int32,int32>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_type_int32(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,int32>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<int32,p_yy_lottery_item>'/3}).
-dialyzer({nowarn_function,'v_map<int32,p_yy_lottery_item>'/3}).
'v_map<int32,p_yy_lottery_item>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_int32(Key, [key | Path], TrUserData),
       v_msg_p_yy_lottery_item(Value, [value | Path],
			       TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<int32,p_yy_lottery_item>'(X, Path,
				 _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_encode_m_yunying_lottery_info_toc.items[x]'/2}).
'tr_encode_m_yunying_lottery_info_toc.items[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_yunying_lottery_do_toc.items[x]'/2}).
'tr_encode_m_yunying_lottery_do_toc.items[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_m_yunying_lottery_refresh_toc.items[x]'/2}).
'tr_encode_m_yunying_lottery_refresh_toc.items[x]'(X,
						   _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_m_yunying_lottery_info_toc.items'/2}).
'tr_decode_init_default_m_yunying_lottery_info_toc.items'(_,
							  _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_yunying_lottery_info_toc.items'/3}).
'tr_merge_m_yunying_lottery_info_toc.items'(X1, X2,
					    _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_yunying_lottery_info_toc.items'/2}).
'tr_decode_repeated_finalize_m_yunying_lottery_info_toc.items'(L,
							       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_yunying_lottery_info_toc.items'/2}).
'tr_encode_m_yunying_lottery_info_toc.items'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_yunying_lottery_info_toc.items'/3}).
'tr_decode_repeated_add_elem_m_yunying_lottery_info_toc.items'(Elem,
							       L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_m_yunying_lottery_do_toc.items'/2}).
'tr_decode_init_default_m_yunying_lottery_do_toc.items'(_,
							_) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_yunying_lottery_do_toc.items'/3}).
'tr_merge_m_yunying_lottery_do_toc.items'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_yunying_lottery_do_toc.items'/2}).
'tr_decode_repeated_finalize_m_yunying_lottery_do_toc.items'(L,
							     TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_yunying_lottery_do_toc.items'/2}).
'tr_encode_m_yunying_lottery_do_toc.items'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_yunying_lottery_do_toc.items'/3}).
'tr_decode_repeated_add_elem_m_yunying_lottery_do_toc.items'(Elem,
							     L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_m_yunying_lottery_refresh_toc.items'/2}).
'tr_decode_init_default_m_yunying_lottery_refresh_toc.items'(_,
							     _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_yunying_lottery_refresh_toc.items'/3}).
'tr_merge_m_yunying_lottery_refresh_toc.items'(X1, X2,
					       _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_yunying_lottery_refresh_toc.items'/2}).
'tr_decode_repeated_finalize_m_yunying_lottery_refresh_toc.items'(L,
								  TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_yunying_lottery_refresh_toc.items'/2}).
'tr_encode_m_yunying_lottery_refresh_toc.items'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_yunying_lottery_refresh_toc.items'/3}).
'tr_decode_repeated_add_elem_m_yunying_lottery_refresh_toc.items'(Elem,
								  L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_decode_init_default_m_yunying_fetch_toc.reward'/2}).
'tr_decode_init_default_m_yunying_fetch_toc.reward'(_,
						    _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_m_yunying_fetch_toc.reward'/3}).
'tr_merge_m_yunying_fetch_toc.reward'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_m_yunying_fetch_toc.reward'/2}).
'tr_decode_repeated_finalize_m_yunying_fetch_toc.reward'(L,
							 TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_m_yunying_fetch_toc.reward'/2}).
'tr_encode_m_yunying_fetch_toc.reward'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_m_yunying_fetch_toc.reward'/3}).
'tr_decode_repeated_add_elem_m_yunying_fetch_toc.reward'(Elem,
							 L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_m_yunying_fetch_toc.reward[x]'/2}).
'tr_encode_m_yunying_fetch_toc.reward[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.

-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{msg, m_yunying_list_tos}, []},
     {{msg, m_yunying_list_toc},
      [#field{name = activities, fnum = 1, rnum = 2,
	      type = {msg, p_yy_activity}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_start_toc},
      [#field{name = activity, fnum = 1, rnum = 2,
	      type = {msg, p_yy_activity}, occurrence = required,
	      opts = []}]},
     {{msg, m_yunying_stop_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_fetch_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_fetch_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 3, rnum = 4,
	      type = {map, int32, int32}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_update_toc},
      [#field{name = type, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = rewards, fnum = 2, rnum = 3,
	      type = {msg, p_yy_reward}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_info_tos},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_info_toc},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = tasks, fnum = 2, rnum = 3,
	      type = {msg, p_yy_task}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_gift_tos}, []},
     {{msg, m_yunying_gift_toc},
      [#field{name = list, fnum = 1, rnum = 2,
	      type = {msg, p_yy_gift}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_gift_fetch_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_gift_fetch_toc},
      [#field{name = gift, fnum = 1, rnum = 2,
	      type = {msg, p_yy_gift}, occurrence = required,
	      opts = []}]},
     {{msg, m_yunying_logs_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_logs_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = logs, fnum = 2, rnum = 3,
	      type = {msg, p_yy_log}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_lottery_info_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lottery_info_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = items, fnum = 2, rnum = 3,
	      type = {map, int32, {msg, p_yy_lottery_item}},
	      occurrence = repeated, opts = []},
       #field{name = free_refresh, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = free_crack, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = crack, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lottery_do_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = pos, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lottery_do_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = items, fnum = 2, rnum = 3,
	      type = {map, int32, {msg, p_yy_lottery_item}},
	      occurrence = repeated, opts = []},
       #field{name = free_crack, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = free_refresh, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = crack, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lottery_refresh_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lottery_refresh_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = items, fnum = 2, rnum = 3,
	      type = {map, int32, {msg, p_yy_lottery_item}},
	      occurrence = repeated, opts = []},
       #field{name = free_refresh, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_yunying_logs_update_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = log, fnum = 2, rnum = 3,
	      type = {msg, p_yy_log}, occurrence = required,
	      opts = []}]},
     {{msg, m_yunying_lottery_draw_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = times, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lottery_draw_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward_ids, fnum = 2, rnum = 3,
	      type = int32, occurrence = repeated, opts = []}]},
     {{msg, m_yunying_lotoinfo_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_lotoinfo_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = progress, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = round, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = hits, fnum = 4, rnum = 5, type = int32,
	      occurrence = repeated, opts = []}]},
     {{msg, m_yunying_loto_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_loto_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = hit, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = progress, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_yunying_loto_progress_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = progress, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_yunying_shop_info_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_shop_info_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = list, fnum = 2, rnum = 3,
	      type = {msg, p_yy_shop}, occurrence = repeated,
	      opts = []},
       #field{name = logs, fnum = 3, rnum = 4,
	      type = {msg, p_yy_shop_log}, occurrence = repeated,
	      opts = []},
       #field{name = reward_time, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = unlimit_sec, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, m_yunying_shop_buy_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = shop_id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_shop_buy_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = shop, fnum = 2, rnum = 3,
	      type = {msg, p_yy_shop}, occurrence = required,
	      opts = []},
       #field{name = logs, fnum = 3, rnum = 4,
	      type = {msg, p_yy_shop_log}, occurrence = repeated,
	      opts = []}]},
     {{msg, m_yunying_shop_reward_log_tos},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, m_yunying_shop_reward_log_toc},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = logs, fnum = 2, rnum = 3,
	      type = {msg, p_yy_shop_reward_log},
	      occurrence = repeated, opts = []}]},
     {{msg, p_yy_activity},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = act_stime, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []},
       #field{name = act_etime, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = show_stime, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = show_etime, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, p_yy_reward},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = act_id, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = type, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = stype, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []},
       #field{name = name, fnum = 6, rnum = 7, type = string,
	      occurrence = required, opts = []},
       #field{name = desc, fnum = 7, rnum = 8, type = string,
	      occurrence = required, opts = []},
       #field{name = reqs, fnum = 8, rnum = 9, type = string,
	      occurrence = required, opts = []},
       #field{name = reward, fnum = 9, rnum = 10,
	      type = string, occurrence = required, opts = []}]},
     {{msg, p_yy_task},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = level, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = count, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = state, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_yy_gift},
      [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = stime, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = etime, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = refund_time, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = state, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]},
     {{msg, p_yy_log},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = role_name, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = item_id, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = item_num, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, p_yy_lottery_item},
      [#field{name = group, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward_id, fnum = 2, rnum = 3,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, p_yy_shop},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = buy_num, fnum = 2, rnum = 3, type = int32,
	      occurrence = required, opts = []},
       #field{name = progress, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, p_yy_shop_log},
      [#field{name = role_id, fnum = 1, rnum = 2,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = role_name, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = suid, fnum = 3, rnum = 4, type = int32,
	      occurrence = required, opts = []},
       #field{name = shop_id, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = reward_id, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, p_yy_shop_reward_log},
      [#field{name = id, fnum = 1, rnum = 2, type = int32,
	      occurrence = required, opts = []},
       #field{name = role_id, fnum = 2, rnum = 3,
	      type = fixed64, occurrence = required, opts = []},
       #field{name = role_name, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = suid, fnum = 4, rnum = 5, type = int32,
	      occurrence = required, opts = []},
       #field{name = num, fnum = 5, rnum = 6, type = int32,
	      occurrence = required, opts = []}]}].


get_msg_names() ->
    [m_yunying_list_tos, m_yunying_list_toc,
     m_yunying_start_toc, m_yunying_stop_toc,
     m_yunying_fetch_tos, m_yunying_fetch_toc,
     m_yunying_update_toc, m_yunying_info_tos,
     m_yunying_info_toc, m_yunying_gift_tos,
     m_yunying_gift_toc, m_yunying_gift_fetch_tos,
     m_yunying_gift_fetch_toc, m_yunying_logs_tos,
     m_yunying_logs_toc, m_yunying_lottery_info_tos,
     m_yunying_lottery_info_toc, m_yunying_lottery_do_tos,
     m_yunying_lottery_do_toc, m_yunying_lottery_refresh_tos,
     m_yunying_lottery_refresh_toc,
     m_yunying_logs_update_toc, m_yunying_lottery_draw_tos,
     m_yunying_lottery_draw_toc, m_yunying_lotoinfo_tos,
     m_yunying_lotoinfo_toc, m_yunying_loto_tos,
     m_yunying_loto_toc, m_yunying_loto_progress_toc,
     m_yunying_shop_info_tos, m_yunying_shop_info_toc,
     m_yunying_shop_buy_tos, m_yunying_shop_buy_toc,
     m_yunying_shop_reward_log_tos,
     m_yunying_shop_reward_log_toc, p_yy_activity,
     p_yy_reward, p_yy_task, p_yy_gift, p_yy_log,
     p_yy_lottery_item, p_yy_shop, p_yy_shop_log,
     p_yy_shop_reward_log].


get_group_names() -> [].


get_msg_or_group_names() ->
    [m_yunying_list_tos, m_yunying_list_toc,
     m_yunying_start_toc, m_yunying_stop_toc,
     m_yunying_fetch_tos, m_yunying_fetch_toc,
     m_yunying_update_toc, m_yunying_info_tos,
     m_yunying_info_toc, m_yunying_gift_tos,
     m_yunying_gift_toc, m_yunying_gift_fetch_tos,
     m_yunying_gift_fetch_toc, m_yunying_logs_tos,
     m_yunying_logs_toc, m_yunying_lottery_info_tos,
     m_yunying_lottery_info_toc, m_yunying_lottery_do_tos,
     m_yunying_lottery_do_toc, m_yunying_lottery_refresh_tos,
     m_yunying_lottery_refresh_toc,
     m_yunying_logs_update_toc, m_yunying_lottery_draw_tos,
     m_yunying_lottery_draw_toc, m_yunying_lotoinfo_tos,
     m_yunying_lotoinfo_toc, m_yunying_loto_tos,
     m_yunying_loto_toc, m_yunying_loto_progress_toc,
     m_yunying_shop_info_tos, m_yunying_shop_info_toc,
     m_yunying_shop_buy_tos, m_yunying_shop_buy_toc,
     m_yunying_shop_reward_log_tos,
     m_yunying_shop_reward_log_toc, p_yy_activity,
     p_yy_reward, p_yy_task, p_yy_gift, p_yy_log,
     p_yy_lottery_item, p_yy_shop, p_yy_shop_log,
     p_yy_shop_reward_log].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(m_yunying_list_tos) -> [];
find_msg_def(m_yunying_list_toc) ->
    [#field{name = activities, fnum = 1, rnum = 2,
	    type = {msg, p_yy_activity}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_start_toc) ->
    [#field{name = activity, fnum = 1, rnum = 2,
	    type = {msg, p_yy_activity}, occurrence = required,
	    opts = []}];
find_msg_def(m_yunying_stop_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_fetch_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_fetch_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 3, rnum = 4,
	    type = {map, int32, int32}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_update_toc) ->
    [#field{name = type, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = rewards, fnum = 2, rnum = 3,
	    type = {msg, p_yy_reward}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_info_tos) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_info_toc) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = tasks, fnum = 2, rnum = 3,
	    type = {msg, p_yy_task}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_gift_tos) -> [];
find_msg_def(m_yunying_gift_toc) ->
    [#field{name = list, fnum = 1, rnum = 2,
	    type = {msg, p_yy_gift}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_gift_fetch_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_gift_fetch_toc) ->
    [#field{name = gift, fnum = 1, rnum = 2,
	    type = {msg, p_yy_gift}, occurrence = required,
	    opts = []}];
find_msg_def(m_yunying_logs_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_logs_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = logs, fnum = 2, rnum = 3,
	    type = {msg, p_yy_log}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_lottery_info_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lottery_info_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = items, fnum = 2, rnum = 3,
	    type = {map, int32, {msg, p_yy_lottery_item}},
	    occurrence = repeated, opts = []},
     #field{name = free_refresh, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = free_crack, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = crack, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lottery_do_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = pos, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lottery_do_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = items, fnum = 2, rnum = 3,
	    type = {map, int32, {msg, p_yy_lottery_item}},
	    occurrence = repeated, opts = []},
     #field{name = free_crack, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = free_refresh, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = crack, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lottery_refresh_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lottery_refresh_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = items, fnum = 2, rnum = 3,
	    type = {map, int32, {msg, p_yy_lottery_item}},
	    occurrence = repeated, opts = []},
     #field{name = free_refresh, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_yunying_logs_update_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = log, fnum = 2, rnum = 3,
	    type = {msg, p_yy_log}, occurrence = required,
	    opts = []}];
find_msg_def(m_yunying_lottery_draw_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = times, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lottery_draw_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward_ids, fnum = 2, rnum = 3,
	    type = int32, occurrence = repeated, opts = []}];
find_msg_def(m_yunying_lotoinfo_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_lotoinfo_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = progress, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = round, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = hits, fnum = 4, rnum = 5, type = int32,
	    occurrence = repeated, opts = []}];
find_msg_def(m_yunying_loto_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_loto_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = hit, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = progress, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_yunying_loto_progress_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = progress, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_yunying_shop_info_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_shop_info_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = list, fnum = 2, rnum = 3,
	    type = {msg, p_yy_shop}, occurrence = repeated,
	    opts = []},
     #field{name = logs, fnum = 3, rnum = 4,
	    type = {msg, p_yy_shop_log}, occurrence = repeated,
	    opts = []},
     #field{name = reward_time, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = unlimit_sec, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(m_yunying_shop_buy_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = shop_id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_shop_buy_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = shop, fnum = 2, rnum = 3,
	    type = {msg, p_yy_shop}, occurrence = required,
	    opts = []},
     #field{name = logs, fnum = 3, rnum = 4,
	    type = {msg, p_yy_shop_log}, occurrence = repeated,
	    opts = []}];
find_msg_def(m_yunying_shop_reward_log_tos) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(m_yunying_shop_reward_log_toc) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = logs, fnum = 2, rnum = 3,
	    type = {msg, p_yy_shop_reward_log},
	    occurrence = repeated, opts = []}];
find_msg_def(p_yy_activity) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = act_stime, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []},
     #field{name = act_etime, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = show_stime, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = show_etime, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(p_yy_reward) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = act_id, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = type, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = stype, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []},
     #field{name = name, fnum = 6, rnum = 7, type = string,
	    occurrence = required, opts = []},
     #field{name = desc, fnum = 7, rnum = 8, type = string,
	    occurrence = required, opts = []},
     #field{name = reqs, fnum = 8, rnum = 9, type = string,
	    occurrence = required, opts = []},
     #field{name = reward, fnum = 9, rnum = 10,
	    type = string, occurrence = required, opts = []}];
find_msg_def(p_yy_task) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = level, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = count, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = state, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_yy_gift) ->
    [#field{name = act_id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = stime, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = etime, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = refund_time, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = state, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(p_yy_log) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = role_name, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = item_id, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = item_num, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(p_yy_lottery_item) ->
    [#field{name = group, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward_id, fnum = 2, rnum = 3,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(p_yy_shop) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = buy_num, fnum = 2, rnum = 3, type = int32,
	    occurrence = required, opts = []},
     #field{name = progress, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(p_yy_shop_log) ->
    [#field{name = role_id, fnum = 1, rnum = 2,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = role_name, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = suid, fnum = 3, rnum = 4, type = int32,
	    occurrence = required, opts = []},
     #field{name = shop_id, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = reward_id, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []}];
find_msg_def(p_yy_shop_reward_log) ->
    [#field{name = id, fnum = 1, rnum = 2, type = int32,
	    occurrence = required, opts = []},
     #field{name = role_id, fnum = 2, rnum = 3,
	    type = fixed64, occurrence = required, opts = []},
     #field{name = role_name, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = suid, fnum = 4, rnum = 5, type = int32,
	    occurrence = required, opts = []},
     #field{name = num, fnum = 5, rnum = 6, type = int32,
	    occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified

%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.



gpb_version_as_string() ->
    "4.5.1".

gpb_version_as_list() ->
    [4,5,1].
